//----------------------------------------------------------------------
//   THIS IS AUTOMATICALLY GENERATED CODE
//   Generated by Mentor Graphics' Register Assistant UVM V4.1 (Build 4)
//   UVM Register Kit version 1.1
//----------------------------------------------------------------------
// Project         : pe_model
// Unit            : vreguvm_pkg_uvm
// File            : vreguvm_pkg_uvm.sv
//----------------------------------------------------------------------
// Created by      : s.praveenkumar
// Creation Date   : 6/11/13 2:40 PM
//----------------------------------------------------------------------
// Title           : pe_model
//
// Description     : 
//
//----------------------------------------------------------------------

//----------------------------------------------------------------------
// vreguvm_pkg_uvm
//----------------------------------------------------------------------
//package vreguvm_pkg_uvm;

//   import uvm_pkg::*;

   `include "uvm_macros.svh"

   /* DEFINE REGISTER CLASSES */


  //--------------------------------------------------------------------
   // Class: Port_5_Packet_Control_Symbol_Capture_0_CSR_reg
   // 
   // Symbol Capture Register
   //--------------------------------------------------------------------

   class Port_5_Packet_Control_Symbol_Capture_0_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_5_Packet_Control_Symbol_Capture_0_CSR_reg)

      rand uvm_reg_field Capture0; 


      // Function: new
      // 
      function new(string name = "Port_5_Packet_Control_Symbol_Capture_0_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture0 = uvm_reg_field::type_id::create("Capture0");

         Capture0.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_10_VC7_VC3_BW_Allocation_Register_reg
   // 
   // BW Allocation Register
   //--------------------------------------------------------------------

   class Port_10_VC7_VC3_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_10_VC7_VC3_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 


      // Function: new
      // 
      function new(string name = "Port_10_VC7_VC3_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");

         Bandwidth_Allocation.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_6_Outbound_ackID_CSR_reg
   // 
   // Outbound_Register
   //--------------------------------------------------------------------

   class Port_6_Outbound_ackID_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_6_Outbound_ackID_CSR_reg)

      rand uvm_reg_field Outbound_ackID; 
      uvm_reg_field Outstanding_ackID; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Clr_outstanding_ackID; 


      // Function: new
      // 
      function new(string name = "Port_6_Outbound_ackID_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Outbound_ackID = uvm_reg_field::type_id::create("Outbound_ackID");
         Outstanding_ackID = uvm_reg_field::type_id::create("Outstanding_ackID");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Clr_outstanding_ackID = uvm_reg_field::type_id::create("Clr_outstanding_ackID");

         Outbound_ackID.configure(this, 12, 20, "RW", 0, 12'h000, 1, 1, 0);
         Outstanding_ackID.configure(this, 12, 8, "RW", 0, 12'h000, 1, 1, 0);
         Reserved.configure(this, 7, 1, "RO", 0, 7'b0000000, 1, 0, 0);
         Clr_outstanding_ackID.configure(this, 1, 0, "W1C", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: LP_Serial_Register_Block_Header_reg
   // 
   // Block Header Register
   //--------------------------------------------------------------------

   class LP_Serial_Register_Block_Header_reg extends uvm_reg;
      `uvm_object_utils(LP_Serial_Register_Block_Header_reg)

      uvm_reg_field EF_ID; 
      uvm_reg_field EF_PTR; 


      // Function: new
      // 
      function new(string name = "LP_Serial_Register_Block_Header_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         EF_ID = uvm_reg_field::type_id::create("EF_ID");
         EF_PTR = uvm_reg_field::type_id::create("EF_PTR");

         EF_ID.configure(this, 16, 16, "RO", 0, 16'h0001, 1, 0, 1);
         EF_PTR.configure(this, 16, 0, "RO", 0, 16'h0100, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_7_Local_ackID_CSR_reg
   // 
   // ackID Register
   //--------------------------------------------------------------------

   class Port_7_Local_ackID_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_7_Local_ackID_CSR_reg)

      rand uvm_reg_field Outbound_ackID; 
      uvm_reg_field Reserved_2; 
      uvm_reg_field Outstanding_ackID; 
      uvm_reg_field Reserved_1; 
      rand uvm_reg_field Inbound_ackID; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Clr_outstanding_ackID; 


      // Function: new
      // 
      function new(string name = "Port_7_Local_ackID_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Outbound_ackID = uvm_reg_field::type_id::create("Outbound_ackID");
         Reserved_2 = uvm_reg_field::type_id::create("Reserved_2");
         Outstanding_ackID = uvm_reg_field::type_id::create("Outstanding_ackID");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         Inbound_ackID = uvm_reg_field::type_id::create("Inbound_ackID");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Clr_outstanding_ackID = uvm_reg_field::type_id::create("Clr_outstanding_ackID");

         Outbound_ackID.configure(this, 6, 26, "RW", 0, 6'b000000, 1, 1, 0);
         Reserved_2.configure(this, 2, 24, "RO", 0, 2'b00, 1, 0, 0);
         Outstanding_ackID.configure(this, 6, 18, "RW", 0, 6'b000000, 1, 1, 0);
         Reserved_1.configure(this, 10, 8, "RO", 0, 10'b0000000000, 1, 0, 0);
         Inbound_ackID.configure(this, 6, 2, "RW", 0, 6'b000000, 1, 1, 0);
         Reserved.configure(this, 1, 1, "RO", 0, 1'b0, 1, 0, 0);
         Clr_outstanding_ackID.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_4_Timestamp_1_LSW_CSR_reg
   // 
   // Timestamp_1_LSW_Register
   //--------------------------------------------------------------------

   class Port_4_Timestamp_1_LSW_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_4_Timestamp_1_LSW_CSR_reg)

      uvm_reg_field LSW_Bits; 


      // Function: new
      // 
      function new(string name = "Port_4_Timestamp_1_LSW_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         LSW_Bits = uvm_reg_field::type_id::create("LSW_Bits");

         LSW_Bits.configure(this, 32, 0, "RO", 0, 32'h00000000, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_9_Packet_Capture_4_CSR_reg
   // 
   // Packet Capture 4 Register
   //--------------------------------------------------------------------

   class Port_9_Packet_Capture_4_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_9_Packet_Capture_4_CSR_reg)

      rand uvm_reg_field Capture4; 


      // Function: new
      // 
      function new(string name = "Port_9_Packet_Capture_4_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture4 = uvm_reg_field::type_id::create("Capture4");

         Capture4.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Lane_6_Status_0_CSR_reg
   // 
   // Status 0 Register
   //--------------------------------------------------------------------

   class Lane_6_Status_0_CSR_reg extends uvm_reg;
      `uvm_object_utils(Lane_6_Status_0_CSR_reg)

      uvm_reg_field Status2_7_CSRs_implemented; 
      uvm_reg_field Status1_CSR_implemented; 
      uvm_reg_field Reserved; 
      uvm_reg_field Rcvr_trained_state_change; 
      uvm_reg_field Lane_sync_state_change; 
      uvm_reg_field lane_8B_10B_decoding_errors; 
      uvm_reg_field Receiver_lane_ready; 
      uvm_reg_field Receiver_lane_sync; 
      uvm_reg_field Receiver_trained; 
      uvm_reg_field Receiver_input_inverted; 
      uvm_reg_field Receiver_type; 
      uvm_reg_field Transmitter_mode; 
      uvm_reg_field Transmitter_type; 
      uvm_reg_field Lane_Number; 
      uvm_reg_field Port_Number; 


      // Function: new
      // 
      function new(string name = "Lane_6_Status_0_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Status2_7_CSRs_implemented = uvm_reg_field::type_id::create("Status2_7_CSRs_implemented");
         Status1_CSR_implemented = uvm_reg_field::type_id::create("Status1_CSR_implemented");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Rcvr_trained_state_change = uvm_reg_field::type_id::create("Rcvr_trained_state_change");
         Lane_sync_state_change = uvm_reg_field::type_id::create("Lane_sync_state_change");
         lane_8B_10B_decoding_errors = uvm_reg_field::type_id::create("lane_8B_10B_decoding_errors");
         Receiver_lane_ready = uvm_reg_field::type_id::create("Receiver_lane_ready");
         Receiver_lane_sync = uvm_reg_field::type_id::create("Receiver_lane_sync");
         Receiver_trained = uvm_reg_field::type_id::create("Receiver_trained");
         Receiver_input_inverted = uvm_reg_field::type_id::create("Receiver_input_inverted");
         Receiver_type = uvm_reg_field::type_id::create("Receiver_type");
         Transmitter_mode = uvm_reg_field::type_id::create("Transmitter_mode");
         Transmitter_type = uvm_reg_field::type_id::create("Transmitter_type");
         Lane_Number = uvm_reg_field::type_id::create("Lane_Number");
         Port_Number = uvm_reg_field::type_id::create("Port_Number");

         Status2_7_CSRs_implemented.configure(this, 3, 29, "RO", 0, 3'b000, 1, 0, 0);
         Status1_CSR_implemented.configure(this, 1, 28, "RO", 0, 1'b0, 1, 0, 0);
         Reserved.configure(this, 2, 26, "RO", 0, 2'b00, 1, 0, 0);
         Rcvr_trained_state_change.configure(this, 1, 25, "RO", 0, 1'b0, 1, 0, 0);
         Lane_sync_state_change.configure(this, 1, 24, "RO", 0, 1'b0, 1, 0, 0);
         lane_8B_10B_decoding_errors.configure(this, 4, 20, "RO", 0, 4'h0, 1, 0, 0);
         Receiver_lane_ready.configure(this, 1, 19, "RO", 0, 1'b0, 1, 0, 0);
         Receiver_lane_sync.configure(this, 1, 18, "RO", 0, 1'b0, 1, 0, 0);
         Receiver_trained.configure(this, 1, 17, "RO", 0, 1'b0, 1, 0, 0);
         Receiver_input_inverted.configure(this, 1, 16, "RO", 0, 1'b0, 1, 0, 0);
         Receiver_type.configure(this, 2, 14, "RO", 0, 2'b00, 1, 0, 0);
         Transmitter_mode.configure(this, 1, 13, "RO", 0, 1'b0, 1, 0, 0);
         Transmitter_type.configure(this, 1, 12, "RO", 0, 1'b0, 1, 0, 0);
         Lane_Number.configure(this, 4, 8, "RO", 0, 4'h0, 1, 0, 0);
         Port_Number.configure(this, 8, 0, "RO", 0, 8'h00, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_8_VoQ_Control_Status_Register_reg
   // 
   // VoQ_Control_Status_Register
   //--------------------------------------------------------------------

   class Port_8_VoQ_Control_Status_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_8_VoQ_Control_Status_Register_reg)

      rand uvm_reg_field RX_Port_Group_Size; 
      rand uvm_reg_field TX_Port_Group_Size; 
      uvm_reg_field Reserved_1; 
      rand uvm_reg_field Port_Group_Size_6_Supported; 
      rand uvm_reg_field Port_Group_Size_5_Supported; 
      rand uvm_reg_field Port_Group_Size_4_Supported; 
      rand uvm_reg_field Port_Group_Size_3_Supported; 
      rand uvm_reg_field Port_Group_Size_2_Supported; 
      rand uvm_reg_field Port_Group_Size_1_Supported; 
      rand uvm_reg_field Port_Group_Size_0_Supported; 
      rand uvm_reg_field Enable_VoQ_Backpressure_Per_VC_Transmission; 
      rand uvm_reg_field Port_XOFF; 
      rand uvm_reg_field Enable_VoQ_Symbol_Participation; 
      rand uvm_reg_field Enable_VoQ_Symbol_Genreation; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field VoQ_Backpressure_Per_VC_Supported; 
      rand uvm_reg_field VoQ_Backpressure_Symbol_Reception_Supported; 
      rand uvm_reg_field VoQ_Backpressure_Symbol_Generation_Supported; 


      // Function: new
      // 
      function new(string name = "Port_8_VoQ_Control_Status_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         RX_Port_Group_Size = uvm_reg_field::type_id::create("RX_Port_Group_Size");
         TX_Port_Group_Size = uvm_reg_field::type_id::create("TX_Port_Group_Size");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         Port_Group_Size_6_Supported = uvm_reg_field::type_id::create("Port_Group_Size_6_Supported");
         Port_Group_Size_5_Supported = uvm_reg_field::type_id::create("Port_Group_Size_5_Supported");
         Port_Group_Size_4_Supported = uvm_reg_field::type_id::create("Port_Group_Size_4_Supported");
         Port_Group_Size_3_Supported = uvm_reg_field::type_id::create("Port_Group_Size_3_Supported");
         Port_Group_Size_2_Supported = uvm_reg_field::type_id::create("Port_Group_Size_2_Supported");
         Port_Group_Size_1_Supported = uvm_reg_field::type_id::create("Port_Group_Size_1_Supported");
         Port_Group_Size_0_Supported = uvm_reg_field::type_id::create("Port_Group_Size_0_Supported");
         Enable_VoQ_Backpressure_Per_VC_Transmission = uvm_reg_field::type_id::create("Enable_VoQ_Backpressure_Per_VC_Transmission");
         Port_XOFF = uvm_reg_field::type_id::create("Port_XOFF");
         Enable_VoQ_Symbol_Participation = uvm_reg_field::type_id::create("Enable_VoQ_Symbol_Participation");
         Enable_VoQ_Symbol_Genreation = uvm_reg_field::type_id::create("Enable_VoQ_Symbol_Genreation");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         VoQ_Backpressure_Per_VC_Supported = uvm_reg_field::type_id::create("VoQ_Backpressure_Per_VC_Supported");
         VoQ_Backpressure_Symbol_Reception_Supported = uvm_reg_field::type_id::create("VoQ_Backpressure_Symbol_Reception_Supported");
         VoQ_Backpressure_Symbol_Generation_Supported = uvm_reg_field::type_id::create("VoQ_Backpressure_Symbol_Generation_Supported");

         RX_Port_Group_Size.configure(this, 3, 29, "RW", 0, 3'b000, 1, 1, 0);
         TX_Port_Group_Size.configure(this, 3, 26, "RW", 0, 3'b000, 1, 1, 0);
         Reserved_1.configure(this, 7, 19, "RO", 0, 7'b0000000, 1, 0, 0);
         Port_Group_Size_6_Supported.configure(this, 1, 18, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_5_Supported.configure(this, 1, 17, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_4_Supported.configure(this, 1, 16, "RW", 0, 1'b1, 1, 1, 0);
         Port_Group_Size_3_Supported.configure(this, 1, 15, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_2_Supported.configure(this, 1, 14, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_1_Supported.configure(this, 1, 13, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_0_Supported.configure(this, 1, 12, "RW", 0, 1'b1, 1, 1, 0);
         Enable_VoQ_Backpressure_Per_VC_Transmission.configure(this, 1, 11, "RW", 0, 1'b0, 1, 1, 0);
         Port_XOFF.configure(this, 1, 10, "RW", 0, 1'b0, 1, 1, 0);
         Enable_VoQ_Symbol_Participation.configure(this, 1, 9, "RW", 0, 1'b0, 1, 1, 0);
         Enable_VoQ_Symbol_Genreation.configure(this, 1, 8, "RW", 0, 1'b0, 1, 1, 0);
         Reserved.configure(this, 5, 3, "RO", 0, 5'b00000, 1, 0, 0);
         VoQ_Backpressure_Per_VC_Supported.configure(this, 1, 2, "RW", 0, 1'b0, 1, 1, 0);
         VoQ_Backpressure_Symbol_Reception_Supported.configure(this, 1, 1, "RW", 0, 1'b0, 1, 1, 0);
         VoQ_Backpressure_Symbol_Generation_Supported.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_2_Packet_Capture_4_CSR_reg
   // 
   // Packet Capture 4 Register
   //--------------------------------------------------------------------

   class Port_2_Packet_Capture_4_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_2_Packet_Capture_4_CSR_reg)

      rand uvm_reg_field Capture4; 


      // Function: new
      // 
      function new(string name = "Port_2_Packet_Capture_4_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture4 = uvm_reg_field::type_id::create("Capture4");

         Capture4.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_3_Packet_Capture_2_CSR_reg
   // 
   // Packet Capture 2 Register
   //--------------------------------------------------------------------

   class Port_3_Packet_Capture_2_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_3_Packet_Capture_2_CSR_reg)

      rand uvm_reg_field Capture2; 


      // Function: new
      // 
      function new(string name = "Port_3_Packet_Capture_2_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture2 = uvm_reg_field::type_id::create("Capture2");

         Capture2.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass

   //--------------------------------------------------------------------
   // Class: Assembly_Identity_CAR_reg
   // 
   // Assembly Identity Register
   //--------------------------------------------------------------------

   class Assembly_Identity_CAR_reg extends uvm_reg;
      `uvm_object_utils(Assembly_Identity_CAR_reg)

      uvm_reg_field AssyVendorIdentity; 
      uvm_reg_field AssyIdentity; 


      // Function: new
      // 
      function new(string name = "Assembly_Identity_CAR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         AssyVendorIdentity = uvm_reg_field::type_id::create("AssyVendorIdentity");
         AssyIdentity = uvm_reg_field::type_id::create("AssyIdentity");

         AssyVendorIdentity.configure(this, 16, 16, "RO", 0, 16'h0000, 1, 0, 1);
         AssyIdentity.configure(this, 16, 0, "RO", 0, 16'h0000, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Lane_3_Status_0_CSR_reg
   // 
   // Status 0 Register
   //--------------------------------------------------------------------

   class Lane_3_Status_0_CSR_reg extends uvm_reg;
      `uvm_object_utils(Lane_3_Status_0_CSR_reg)

      uvm_reg_field Status2_7_CSRs_implemented; 
      uvm_reg_field Status1_CSR_implemented; 
      uvm_reg_field Reserved; 
      uvm_reg_field Rcvr_trained_state_change; 
      uvm_reg_field Lane_sync_state_change; 
      uvm_reg_field lane_8B_10B_decoding_errors; 
      uvm_reg_field Receiver_lane_ready; 
      uvm_reg_field Receiver_lane_sync; 
      uvm_reg_field Receiver_trained; 
      uvm_reg_field Receiver_input_inverted; 
      uvm_reg_field Receiver_type; 
      uvm_reg_field Transmitter_mode; 
      uvm_reg_field Transmitter_type; 
      uvm_reg_field Lane_Number; 
      uvm_reg_field Port_Number; 


      // Function: new
      // 
      function new(string name = "Lane_3_Status_0_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Status2_7_CSRs_implemented = uvm_reg_field::type_id::create("Status2_7_CSRs_implemented");
         Status1_CSR_implemented = uvm_reg_field::type_id::create("Status1_CSR_implemented");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Rcvr_trained_state_change = uvm_reg_field::type_id::create("Rcvr_trained_state_change");
         Lane_sync_state_change = uvm_reg_field::type_id::create("Lane_sync_state_change");
         lane_8B_10B_decoding_errors = uvm_reg_field::type_id::create("lane_8B_10B_decoding_errors");
         Receiver_lane_ready = uvm_reg_field::type_id::create("Receiver_lane_ready");
         Receiver_lane_sync = uvm_reg_field::type_id::create("Receiver_lane_sync");
         Receiver_trained = uvm_reg_field::type_id::create("Receiver_trained");
         Receiver_input_inverted = uvm_reg_field::type_id::create("Receiver_input_inverted");
         Receiver_type = uvm_reg_field::type_id::create("Receiver_type");
         Transmitter_mode = uvm_reg_field::type_id::create("Transmitter_mode");
         Transmitter_type = uvm_reg_field::type_id::create("Transmitter_type");
         Lane_Number = uvm_reg_field::type_id::create("Lane_Number");
         Port_Number = uvm_reg_field::type_id::create("Port_Number");

         Status2_7_CSRs_implemented.configure(this, 3, 29, "RO", 0, 3'b000, 1, 0, 0);
         Status1_CSR_implemented.configure(this, 1, 28, "RO", 0, 1'b0, 1, 0, 0);
         Reserved.configure(this, 2, 26, "RO", 0, 2'b00, 1, 0, 0);
         Rcvr_trained_state_change.configure(this, 1, 25, "RO", 0, 1'b0, 1, 0, 0);
         Lane_sync_state_change.configure(this, 1, 24, "RO", 0, 1'b0, 1, 0, 0);
         lane_8B_10B_decoding_errors.configure(this, 4, 20, "RO", 0, 4'h0, 1, 0, 0);
         Receiver_lane_ready.configure(this, 1, 19, "RO", 0, 1'b0, 1, 0, 0);
         Receiver_lane_sync.configure(this, 1, 18, "RO", 0, 1'b0, 1, 0, 0);
         Receiver_trained.configure(this, 1, 17, "RO", 0, 1'b0, 1, 0, 0);
         Receiver_input_inverted.configure(this, 1, 16, "RO", 0, 1'b0, 1, 0, 0);
         Receiver_type.configure(this, 2, 14, "RO", 0, 2'b00, 1, 0, 0);
         Transmitter_mode.configure(this, 1, 13, "RO", 0, 1'b0, 1, 0, 0);
         Transmitter_type.configure(this, 1, 12, "RO", 0, 1'b0, 1, 0, 0);
         Lane_Number.configure(this, 4, 8, "RO", 0, 4'h0, 1, 0, 0);
         Port_Number.configure(this, 8, 0, "RO", 0, 8'h00, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_11_Link_Maintenance_Request_CSR_reg
   // 
   // Link  Maintenance Request Register
   //--------------------------------------------------------------------

   class Port_11_Link_Maintenance_Request_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_11_Link_Maintenance_Request_CSR_reg)

      uvm_reg_field Command; 
      uvm_reg_field Reserved; 


      // Function: new
      // 
      function new(string name = "Port_11_Link_Maintenance_Request_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Command = uvm_reg_field::type_id::create("Command");
         Reserved = uvm_reg_field::type_id::create("Reserved");

         Command.configure(this, 3, 29, "RW", 0, 3'b000, 1, 1, 1);
         Reserved.configure(this, 29, 0, "RO", 0, 29'b00000000000000000000000000000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_4_Timestamp_Offset_CSR_reg
   // 
   // Timestamp_Offset_CSR_Register
   //--------------------------------------------------------------------

   class Port_4_Timestamp_Offset_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_4_Timestamp_Offset_CSR_reg)

      uvm_reg_field Reserved; 
      rand uvm_reg_field Offset; 


      // Function: new
      // 
      function new(string name = "Port_4_Timestamp_Offset_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Offset = uvm_reg_field::type_id::create("Offset");

         Reserved.configure(this, 16, 16, "RO", 0, 16'h0000, 1, 0, 1);
         Offset.configure(this, 16, 0, "RW", 0, 16'h0000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_1_VC8_VC4_BW_Allocation_Register_reg
   // 
   // BW Allocation Register
   //--------------------------------------------------------------------

   class Port_1_VC8_VC4_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_1_VC8_VC4_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 


      // Function: new
      // 
      function new(string name = "Port_1_VC8_VC4_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");

         Bandwidth_Allocation.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Lane_6_Status_2_CSR_reg
   // 
   // Status 2 Register
   //--------------------------------------------------------------------

   class Lane_6_Status_2_CSR_reg extends uvm_reg;
      `uvm_object_utils(Lane_6_Status_2_CSR_reg)

      uvm_reg_field Reserved; 
      uvm_reg_field LP_Change_Receiver_Width_Command_Negative_Acknowlege; 
      uvm_reg_field LP_Change_Receiver_Width_Command_Acknowlege; 
      uvm_reg_field LP_Change_Receiver_Width_Command; 
      uvm_reg_field LP_Lane_Trained; 
      uvm_reg_field LP_Receive_Lane_Ready; 
      uvm_reg_field LP_Receive_Lanes_Ready; 
      uvm_reg_field LP_Receive_Width; 
      uvm_reg_field LP_Transmit_1x_Mode; 
      uvm_reg_field LP_Port_Intialized; 
      uvm_reg_field LP_Asymmetric_mode_Enabled; 
      uvm_reg_field LP_Retraining_Enabled; 
      uvm_reg_field LP_Remort_Training_Support; 
      uvm_reg_field LP_Lane_Number; 
      uvm_reg_field LP_Port_Number; 


      // Function: new
      // 
      function new(string name = "Lane_6_Status_2_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         LP_Change_Receiver_Width_Command_Negative_Acknowlege = uvm_reg_field::type_id::create("LP_Change_Receiver_Width_Command_Negative_Acknowlege");
         LP_Change_Receiver_Width_Command_Acknowlege = uvm_reg_field::type_id::create("LP_Change_Receiver_Width_Command_Acknowlege");
         LP_Change_Receiver_Width_Command = uvm_reg_field::type_id::create("LP_Change_Receiver_Width_Command");
         LP_Lane_Trained = uvm_reg_field::type_id::create("LP_Lane_Trained");
         LP_Receive_Lane_Ready = uvm_reg_field::type_id::create("LP_Receive_Lane_Ready");
         LP_Receive_Lanes_Ready = uvm_reg_field::type_id::create("LP_Receive_Lanes_Ready");
         LP_Receive_Width = uvm_reg_field::type_id::create("LP_Receive_Width");
         LP_Transmit_1x_Mode = uvm_reg_field::type_id::create("LP_Transmit_1x_Mode");
         LP_Port_Intialized = uvm_reg_field::type_id::create("LP_Port_Intialized");
         LP_Asymmetric_mode_Enabled = uvm_reg_field::type_id::create("LP_Asymmetric_mode_Enabled");
         LP_Retraining_Enabled = uvm_reg_field::type_id::create("LP_Retraining_Enabled");
         LP_Remort_Training_Support = uvm_reg_field::type_id::create("LP_Remort_Training_Support");
         LP_Lane_Number = uvm_reg_field::type_id::create("LP_Lane_Number");
         LP_Port_Number = uvm_reg_field::type_id::create("LP_Port_Number");

         Reserved.configure(this, 2, 30, "RO", 0, 2'b00, 1, 0, 0);
         LP_Change_Receiver_Width_Command_Negative_Acknowlege.configure(this, 1, 29, "RO", 0, 1'b0, 1, 0, 0);
         LP_Change_Receiver_Width_Command_Acknowlege.configure(this, 1, 28, "RO", 0, 1'b0, 1, 0, 0);
         LP_Change_Receiver_Width_Command.configure(this, 3, 25, "RO", 0, 3'b000, 1, 0, 0);
         LP_Lane_Trained.configure(this, 1, 24, "RO", 0, 1'b0, 1, 0, 0);
         LP_Receive_Lane_Ready.configure(this, 1, 23, "RO", 0, 1'b0, 1, 0, 0);
         LP_Receive_Lanes_Ready.configure(this, 3, 20, "RO", 0, 3'b000, 1, 0, 0);
         LP_Receive_Width.configure(this, 3, 17, "RO", 0, 3'b000, 1, 0, 0);
         LP_Transmit_1x_Mode.configure(this, 1, 16, "RO", 0, 1'b0, 1, 0, 0);
         LP_Port_Intialized.configure(this, 1, 15, "RO", 0, 1'b0, 1, 0, 0);
         LP_Asymmetric_mode_Enabled.configure(this, 1, 14, "RO", 0, 1'b0, 1, 0, 0);
         LP_Retraining_Enabled.configure(this, 1, 13, "RO", 0, 1'b0, 1, 0, 0);
         LP_Remort_Training_Support.configure(this, 1, 12, "RO", 0, 1'b0, 1, 0, 0);
         LP_Lane_Number.configure(this, 4, 8, "RO", 0, 4'h0, 1, 0, 0);
         LP_Port_Number.configure(this, 8, 0, "RO", 0, 8'h00, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_12_VC_Control_and_Status_Register_reg
   // 
   // CSR Register
   //--------------------------------------------------------------------

   class Port_12_VC_Control_and_Status_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_12_VC_Control_and_Status_Register_reg)

      rand uvm_reg_field VCs_Enable; 
      uvm_reg_field VCs_Support; 
      rand uvm_reg_field CT_Mode; 
      rand uvm_reg_field VC_Refresh_Interval; 


      // Function: new
      // 
      function new(string name = "Port_12_VC_Control_and_Status_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         VCs_Enable = uvm_reg_field::type_id::create("VCs_Enable");
         VCs_Support = uvm_reg_field::type_id::create("VCs_Support");
         CT_Mode = uvm_reg_field::type_id::create("CT_Mode");
         VC_Refresh_Interval = uvm_reg_field::type_id::create("VC_Refresh_Interval");

         VCs_Enable.configure(this, 8, 24, "RW", 0, 8'h00, 1, 1, 1);
         VCs_Support.configure(this, 8, 16, "RO", 0, 8'h00, 1, 0, 1);
         CT_Mode.configure(this, 8, 8, "RW", 0, 8'h00, 1, 1, 1);
         VC_Refresh_Interval.configure(this, 8, 0, "RW", 0, 8'h00, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_12_Outbound_ackID_CSR_reg
   // 
   // Outbound_Register
   //--------------------------------------------------------------------

   class Port_12_Outbound_ackID_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_12_Outbound_ackID_CSR_reg)

      rand uvm_reg_field Outbound_ackID; 
      uvm_reg_field Outstanding_ackID; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Clr_outstanding_ackID; 


      // Function: new
      // 
      function new(string name = "Port_12_Outbound_ackID_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Outbound_ackID = uvm_reg_field::type_id::create("Outbound_ackID");
         Outstanding_ackID = uvm_reg_field::type_id::create("Outstanding_ackID");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Clr_outstanding_ackID = uvm_reg_field::type_id::create("Clr_outstanding_ackID");

         Outbound_ackID.configure(this, 12, 20, "RW", 0, 12'h000, 1, 1, 0);
         Outstanding_ackID.configure(this, 12, 8, "RW", 0, 12'h000, 1, 1, 0);
         Reserved.configure(this, 7, 1, "RO", 0, 7'b0000000, 1, 0, 0);
         Clr_outstanding_ackID.configure(this, 1, 0, "W1C", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_9_VC6_VC2_BW_Allocation_Register_reg
   // 
   // BW Allocation Register
   //--------------------------------------------------------------------

   class Port_9_VC6_VC2_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_9_VC6_VC2_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 


      // Function: new
      // 
      function new(string name = "Port_9_VC6_VC2_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");

         Bandwidth_Allocation.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Lane_4_Status_3_CSR_reg
   // 
   // Status 3 Register
   //--------------------------------------------------------------------

   class Lane_4_Status_3_CSR_reg extends uvm_reg;
      `uvm_object_utils(Lane_4_Status_3_CSR_reg)

      uvm_reg_field Reserved; 
      uvm_reg_field LP_State_Control_Reserved; 
      uvm_reg_field LP_Lane_Entering_Silence; 
      uvm_reg_field LP_Port_Entering_Silence; 
      uvm_reg_field LP_Retraining; 
      uvm_reg_field LP_Retrain_Ready; 
      uvm_reg_field LP_Retrain_Grant; 
      uvm_reg_field LP_Transmit_Equalizer_Status; 
      uvm_reg_field LP_Transmit_Equalizer_Command; 
      uvm_reg_field LP_Transmit_Equalizer_Tap; 
      uvm_reg_field LP_Transmit_SC_Sequences; 
      uvm_reg_field LP_Transmit_Width_Request_Pending; 
      uvm_reg_field LP_Transmit_Width_Request; 


      // Function: new
      // 
      function new(string name = "Lane_4_Status_3_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         LP_State_Control_Reserved = uvm_reg_field::type_id::create("LP_State_Control_Reserved");
         LP_Lane_Entering_Silence = uvm_reg_field::type_id::create("LP_Lane_Entering_Silence");
         LP_Port_Entering_Silence = uvm_reg_field::type_id::create("LP_Port_Entering_Silence");
         LP_Retraining = uvm_reg_field::type_id::create("LP_Retraining");
         LP_Retrain_Ready = uvm_reg_field::type_id::create("LP_Retrain_Ready");
         LP_Retrain_Grant = uvm_reg_field::type_id::create("LP_Retrain_Grant");
         LP_Transmit_Equalizer_Status = uvm_reg_field::type_id::create("LP_Transmit_Equalizer_Status");
         LP_Transmit_Equalizer_Command = uvm_reg_field::type_id::create("LP_Transmit_Equalizer_Command");
         LP_Transmit_Equalizer_Tap = uvm_reg_field::type_id::create("LP_Transmit_Equalizer_Tap");
         LP_Transmit_SC_Sequences = uvm_reg_field::type_id::create("LP_Transmit_SC_Sequences");
         LP_Transmit_Width_Request_Pending = uvm_reg_field::type_id::create("LP_Transmit_Width_Request_Pending");
         LP_Transmit_Width_Request = uvm_reg_field::type_id::create("LP_Transmit_Width_Request");

         Reserved.configure(this, 4, 28, "RO", 0, 4'h0, 1, 0, 0);
         LP_State_Control_Reserved.configure(this, 8, 20, "RO", 0, 8'h00, 1, 0, 0);
         LP_Lane_Entering_Silence.configure(this, 1, 19, "RO", 0, 1'b0, 1, 0, 0);
         LP_Port_Entering_Silence.configure(this, 1, 18, "RO", 0, 1'b0, 1, 0, 0);
         LP_Retraining.configure(this, 1, 17, "RO", 0, 1'b0, 1, 0, 0);
         LP_Retrain_Ready.configure(this, 1, 16, "RO", 0, 1'b0, 1, 0, 0);
         LP_Retrain_Grant.configure(this, 1, 15, "RO", 0, 1'b0, 1, 0, 0);
         LP_Transmit_Equalizer_Status.configure(this, 3, 12, "RO", 0, 3'b000, 1, 0, 0);
         LP_Transmit_Equalizer_Command.configure(this, 3, 9, "RO", 0, 3'b000, 1, 0, 0);
         LP_Transmit_Equalizer_Tap.configure(this, 4, 5, "RO", 0, 4'h0, 1, 0, 0);
         LP_Transmit_SC_Sequences.configure(this, 1, 4, "RO", 0, 1'b0, 1, 0, 0);
         LP_Transmit_Width_Request_Pending.configure(this, 1, 3, "RO", 0, 1'b0, 1, 0, 0);
         LP_Transmit_Width_Request.configure(this, 3, 0, "RO", 0, 3'b000, 1, 0, 0);
      endfunction
   endclass

   //--------------------------------------------------------------------
   // Class: Lane_14_Status_0_CSR_reg
   // 
   // Status 0 Register
   //--------------------------------------------------------------------

   class Lane_14_Status_0_CSR_reg extends uvm_reg;
      `uvm_object_utils(Lane_14_Status_0_CSR_reg)

      uvm_reg_field Status2_7_CSRs_implemented; 
      uvm_reg_field Status1_CSR_implemented; 
      uvm_reg_field Reserved; 
      uvm_reg_field Rcvr_trained_state_change; 
      uvm_reg_field Lane_sync_state_change; 
      uvm_reg_field lane_8B_10B_decoding_errors; 
      uvm_reg_field Receiver_lane_ready; 
      uvm_reg_field Receiver_lane_sync; 
      uvm_reg_field Receiver_trained; 
      uvm_reg_field Receiver_input_inverted; 
      uvm_reg_field Receiver_type; 
      uvm_reg_field Transmitter_mode; 
      uvm_reg_field Transmitter_type; 
      uvm_reg_field Lane_Number; 
      uvm_reg_field Port_Number; 


      // Function: new
      // 
      function new(string name = "Lane_14_Status_0_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Status2_7_CSRs_implemented = uvm_reg_field::type_id::create("Status2_7_CSRs_implemented");
         Status1_CSR_implemented = uvm_reg_field::type_id::create("Status1_CSR_implemented");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Rcvr_trained_state_change = uvm_reg_field::type_id::create("Rcvr_trained_state_change");
         Lane_sync_state_change = uvm_reg_field::type_id::create("Lane_sync_state_change");
         lane_8B_10B_decoding_errors = uvm_reg_field::type_id::create("lane_8B_10B_decoding_errors");
         Receiver_lane_ready = uvm_reg_field::type_id::create("Receiver_lane_ready");
         Receiver_lane_sync = uvm_reg_field::type_id::create("Receiver_lane_sync");
         Receiver_trained = uvm_reg_field::type_id::create("Receiver_trained");
         Receiver_input_inverted = uvm_reg_field::type_id::create("Receiver_input_inverted");
         Receiver_type = uvm_reg_field::type_id::create("Receiver_type");
         Transmitter_mode = uvm_reg_field::type_id::create("Transmitter_mode");
         Transmitter_type = uvm_reg_field::type_id::create("Transmitter_type");
         Lane_Number = uvm_reg_field::type_id::create("Lane_Number");
         Port_Number = uvm_reg_field::type_id::create("Port_Number");

         Status2_7_CSRs_implemented.configure(this, 3, 29, "RO", 0, 3'b000, 1, 0, 0);
         Status1_CSR_implemented.configure(this, 1, 28, "RO", 0, 1'b0, 1, 0, 0);
         Reserved.configure(this, 2, 26, "RO", 0, 2'b00, 1, 0, 0);
         Rcvr_trained_state_change.configure(this, 1, 25, "RO", 0, 1'b0, 1, 0, 0);
         Lane_sync_state_change.configure(this, 1, 24, "RO", 0, 1'b0, 1, 0, 0);
         lane_8B_10B_decoding_errors.configure(this, 4, 20, "RO", 0, 4'h0, 1, 0, 0);
         Receiver_lane_ready.configure(this, 1, 19, "RO", 0, 1'b0, 1, 0, 0);
         Receiver_lane_sync.configure(this, 1, 18, "RO", 0, 1'b0, 1, 0, 0);
         Receiver_trained.configure(this, 1, 17, "RO", 0, 1'b0, 1, 0, 0);
         Receiver_input_inverted.configure(this, 1, 16, "RO", 0, 1'b0, 1, 0, 0);
         Receiver_type.configure(this, 2, 14, "RO", 0, 2'b00, 1, 0, 0);
         Transmitter_mode.configure(this, 1, 13, "RO", 0, 1'b0, 1, 0, 0);
         Transmitter_type.configure(this, 1, 12, "RO", 0, 1'b0, 1, 0, 0);
         Lane_Number.configure(this, 4, 8, "RO", 0, 4'h0, 1, 0, 0);
         Port_Number.configure(this, 8, 0, "RO", 0, 8'h00, 1, 0, 1);
      endfunction
   endclass

   //--------------------------------------------------------------------
   // Class: Port_15_Packet_Capture_3_CSR_reg
   // 
   // Packet Capture 3 Register
   //--------------------------------------------------------------------

   class Port_15_Packet_Capture_3_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_15_Packet_Capture_3_CSR_reg)

      rand uvm_reg_field Capture3; 


      // Function: new
      // 
      function new(string name = "Port_15_Packet_Capture_3_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture3 = uvm_reg_field::type_id::create("Capture3");

         Capture3.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_14_VC8_VC4_BW_Allocation_Register_reg
   // 
   // BW Allocation Register
   //--------------------------------------------------------------------

   class Port_14_VC8_VC4_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_14_VC8_VC4_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 


      // Function: new
      // 
      function new(string name = "Port_14_VC8_VC4_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");

         Bandwidth_Allocation.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_13_Link_Timers_Control_2_CSR_reg
   // 
   // Link_Timers_Control_2_Register
   //--------------------------------------------------------------------

   class Port_13_Link_Timers_Control_2_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_13_Link_Timers_Control_2_CSR_reg)

      uvm_reg_field Reserved; 
      rand uvm_reg_field Recovery_Timer; 
      rand uvm_reg_field Discovery_Completion_Timer; 
      rand uvm_reg_field Retraining_Completion_Timer; 


      // Function: new
      // 
      function new(string name = "Port_13_Link_Timers_Control_2_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Recovery_Timer = uvm_reg_field::type_id::create("Recovery_Timer");
         Discovery_Completion_Timer = uvm_reg_field::type_id::create("Discovery_Completion_Timer");
         Retraining_Completion_Timer = uvm_reg_field::type_id::create("Retraining_Completion_Timer");

         Reserved.configure(this, 8, 24, "RO", 0, 8'h00, 1, 0, 1);
         Recovery_Timer.configure(this, 8, 16, "RW", 0, 8'hff, 1, 1, 1);
         Discovery_Completion_Timer.configure(this, 8, 8, "RW", 0, 8'h00, 1, 1, 1);
         Retraining_Completion_Timer.configure(this, 8, 0, "RW", 0, 8'hfe, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_10_Timestamp_0_MSW_CSR_reg
   // 
   // Timestamp_0_MSW_Register
   //--------------------------------------------------------------------

   class Port_10_Timestamp_0_MSW_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_10_Timestamp_0_MSW_CSR_reg)

      uvm_reg_field MSW_Bits; 


      // Function: new
      // 
      function new(string name = "Port_10_Timestamp_0_MSW_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         MSW_Bits = uvm_reg_field::type_id::create("MSW_Bits");

         MSW_Bits.configure(this, 32, 0, "RO", 0, 32'h00000000, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Lane_14_Status_3_CSR_reg
   // 
   // Status 3 Register
   //--------------------------------------------------------------------

   class Lane_14_Status_3_CSR_reg extends uvm_reg;
      `uvm_object_utils(Lane_14_Status_3_CSR_reg)

      uvm_reg_field Reserved; 
      uvm_reg_field LP_State_Control_Reserved; 
      uvm_reg_field LP_Lane_Entering_Silence; 
      uvm_reg_field LP_Port_Entering_Silence; 
      uvm_reg_field LP_Retraining; 
      uvm_reg_field LP_Retrain_Ready; 
      uvm_reg_field LP_Retrain_Grant; 
      uvm_reg_field LP_Transmit_Equalizer_Status; 
      uvm_reg_field LP_Transmit_Equalizer_Command; 
      uvm_reg_field LP_Transmit_Equalizer_Tap; 
      uvm_reg_field LP_Transmit_SC_Sequences; 
      uvm_reg_field LP_Transmit_Width_Request_Pending; 
      uvm_reg_field LP_Transmit_Width_Request; 


      // Function: new
      // 
      function new(string name = "Lane_14_Status_3_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         LP_State_Control_Reserved = uvm_reg_field::type_id::create("LP_State_Control_Reserved");
         LP_Lane_Entering_Silence = uvm_reg_field::type_id::create("LP_Lane_Entering_Silence");
         LP_Port_Entering_Silence = uvm_reg_field::type_id::create("LP_Port_Entering_Silence");
         LP_Retraining = uvm_reg_field::type_id::create("LP_Retraining");
         LP_Retrain_Ready = uvm_reg_field::type_id::create("LP_Retrain_Ready");
         LP_Retrain_Grant = uvm_reg_field::type_id::create("LP_Retrain_Grant");
         LP_Transmit_Equalizer_Status = uvm_reg_field::type_id::create("LP_Transmit_Equalizer_Status");
         LP_Transmit_Equalizer_Command = uvm_reg_field::type_id::create("LP_Transmit_Equalizer_Command");
         LP_Transmit_Equalizer_Tap = uvm_reg_field::type_id::create("LP_Transmit_Equalizer_Tap");
         LP_Transmit_SC_Sequences = uvm_reg_field::type_id::create("LP_Transmit_SC_Sequences");
         LP_Transmit_Width_Request_Pending = uvm_reg_field::type_id::create("LP_Transmit_Width_Request_Pending");
         LP_Transmit_Width_Request = uvm_reg_field::type_id::create("LP_Transmit_Width_Request");

         Reserved.configure(this, 4, 28, "RO", 0, 4'h0, 1, 0, 0);
         LP_State_Control_Reserved.configure(this, 8, 20, "RO", 0, 8'h00, 1, 0, 0);
         LP_Lane_Entering_Silence.configure(this, 1, 19, "RO", 0, 1'b0, 1, 0, 0);
         LP_Port_Entering_Silence.configure(this, 1, 18, "RO", 0, 1'b0, 1, 0, 0);
         LP_Retraining.configure(this, 1, 17, "RO", 0, 1'b0, 1, 0, 0);
         LP_Retrain_Ready.configure(this, 1, 16, "RO", 0, 1'b0, 1, 0, 0);
         LP_Retrain_Grant.configure(this, 1, 15, "RO", 0, 1'b0, 1, 0, 0);
         LP_Transmit_Equalizer_Status.configure(this, 3, 12, "RO", 0, 3'b000, 1, 0, 0);
         LP_Transmit_Equalizer_Command.configure(this, 3, 9, "RO", 0, 3'b000, 1, 0, 0);
         LP_Transmit_Equalizer_Tap.configure(this, 4, 5, "RO", 0, 4'h0, 1, 0, 0);
         LP_Transmit_SC_Sequences.configure(this, 1, 4, "RO", 0, 1'b0, 1, 0, 0);
         LP_Transmit_Width_Request_Pending.configure(this, 1, 3, "RO", 0, 1'b0, 1, 0, 0);
         LP_Transmit_Width_Request.configure(this, 3, 0, "RO", 0, 3'b000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_0_Auto_Update_Counter_CSR_reg
   // 
   // Auto_Update_Counter_CSR_Register
   //--------------------------------------------------------------------

   class Port_0_Auto_Update_Counter_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_0_Auto_Update_Counter_CSR_reg)

      rand uvm_reg_field Update_Period; 


      // Function: new
      // 
      function new(string name = "Port_0_Auto_Update_Counter_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Update_Period = uvm_reg_field::type_id::create("Update_Period");

         Update_Period.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_5_Timestamp_0_MSW_CSR_reg
   // 
   // Timestamp_0_MSW_Register
   //--------------------------------------------------------------------

   class Port_5_Timestamp_0_MSW_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_5_Timestamp_0_MSW_CSR_reg)

      uvm_reg_field MSW_Bits; 


      // Function: new
      // 
      function new(string name = "Port_5_Timestamp_0_MSW_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         MSW_Bits = uvm_reg_field::type_id::create("MSW_Bits");

         MSW_Bits.configure(this, 32, 0, "RO", 0, 32'h00000000, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_15_Local_ackID_CSR_reg
   // 
   // ackID Register
   //--------------------------------------------------------------------

   class Port_15_Local_ackID_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_15_Local_ackID_CSR_reg)

      rand uvm_reg_field Outbound_ackID; 
      uvm_reg_field Reserved_2; 
      uvm_reg_field Outstanding_ackID; 
      uvm_reg_field Reserved_1; 
      rand uvm_reg_field Inbound_ackID; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Clr_outstanding_ackID; 


      // Function: new
      // 
      function new(string name = "Port_15_Local_ackID_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Outbound_ackID = uvm_reg_field::type_id::create("Outbound_ackID");
         Reserved_2 = uvm_reg_field::type_id::create("Reserved_2");
         Outstanding_ackID = uvm_reg_field::type_id::create("Outstanding_ackID");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         Inbound_ackID = uvm_reg_field::type_id::create("Inbound_ackID");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Clr_outstanding_ackID = uvm_reg_field::type_id::create("Clr_outstanding_ackID");

         Outbound_ackID.configure(this, 6, 26, "RW", 0, 6'b000000, 1, 1, 0);
         Reserved_2.configure(this, 2, 24, "RO", 0, 2'b00, 1, 0, 0);
         Outstanding_ackID.configure(this, 6, 18, "RW", 0, 6'b000000, 1, 1, 0);
         Reserved_1.configure(this, 10, 8, "RO", 0, 10'b0000000000, 1, 0, 0);
         Inbound_ackID.configure(this, 6, 2, "RW", 0, 6'b000000, 1, 1, 0);
         Reserved.configure(this, 1, 1, "RO", 0, 1'b0, 1, 0, 0);
         Clr_outstanding_ackID.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Component_Tag_CSR_reg
   // 
   // Tag Register
   //--------------------------------------------------------------------

   class Component_Tag_CSR_reg extends uvm_reg;
      `uvm_object_utils(Component_Tag_CSR_reg)

      rand uvm_reg_field component_tag; 


      // Function: new
      // 
      function new(string name = "Component_Tag_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         component_tag = uvm_reg_field::type_id::create("component_tag");

         component_tag.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_15_Link_Timers_Control_2_CSR_reg
   // 
   // Link_Timers_Control_2_Register
   //--------------------------------------------------------------------

   class Port_15_Link_Timers_Control_2_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_15_Link_Timers_Control_2_CSR_reg)

      uvm_reg_field Reserved; 
      rand uvm_reg_field Recovery_Timer; 
      rand uvm_reg_field Discovery_Completion_Timer; 
      rand uvm_reg_field Retraining_Completion_Timer; 


      // Function: new
      // 
      function new(string name = "Port_15_Link_Timers_Control_2_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Recovery_Timer = uvm_reg_field::type_id::create("Recovery_Timer");
         Discovery_Completion_Timer = uvm_reg_field::type_id::create("Discovery_Completion_Timer");
         Retraining_Completion_Timer = uvm_reg_field::type_id::create("Retraining_Completion_Timer");

         Reserved.configure(this, 8, 24, "RO", 0, 8'h00, 1, 0, 1);
         Recovery_Timer.configure(this, 8, 16, "RW", 0, 8'hff, 1, 1, 1);
         Discovery_Completion_Timer.configure(this, 8, 8, "RW", 0, 8'h00, 1, 1, 1);
         Retraining_Completion_Timer.configure(this, 8, 0, "RW", 0, 8'hfe, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_8_VC7_VC3_BW_Allocation_Register_reg
   // 
   // BW Allocation Register
   //--------------------------------------------------------------------

   class Port_8_VC7_VC3_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_8_VC7_VC3_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 


      // Function: new
      // 
      function new(string name = "Port_8_VC7_VC3_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");

         Bandwidth_Allocation.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_4_Link_Timers_Control_CSR_reg
   // 
   // Link_Timers_Control_Register
   //--------------------------------------------------------------------

   class Port_4_Link_Timers_Control_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_4_Link_Timers_Control_CSR_reg)

      rand uvm_reg_field Emphasis_Command_Timeout; 
      rand uvm_reg_field CW_Training_Completion_Timer; 
      rand uvm_reg_field DME_Wait_Timer; 
      rand uvm_reg_field DME_Training_Completion_Timer; 


      // Function: new
      // 
      function new(string name = "Port_4_Link_Timers_Control_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Emphasis_Command_Timeout = uvm_reg_field::type_id::create("Emphasis_Command_Timeout");
         CW_Training_Completion_Timer = uvm_reg_field::type_id::create("CW_Training_Completion_Timer");
         DME_Wait_Timer = uvm_reg_field::type_id::create("DME_Wait_Timer");
         DME_Training_Completion_Timer = uvm_reg_field::type_id::create("DME_Training_Completion_Timer");

         Emphasis_Command_Timeout.configure(this, 8, 24, "RW", 0, 8'hff, 1, 1, 1);
         CW_Training_Completion_Timer.configure(this, 8, 16, "RW", 0, 8'h00, 1, 1, 1);
         DME_Wait_Timer.configure(this, 8, 8, "RW", 0, 8'h3f, 1, 1, 1);
         DME_Training_Completion_Timer.configure(this, 8, 0, "RW", 0, 8'h00, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Base_Device_ID_CSR_reg
   // 
   // Base Device ID Register
   //--------------------------------------------------------------------

   class Base_Device_ID_CSR_reg extends uvm_reg;
      `uvm_object_utils(Base_Device_ID_CSR_reg)

      rand uvm_reg_field Large_base_deviceID; 
      rand uvm_reg_field Base_deviceID; 
      uvm_reg_field Reserved; 


      // Function: new
      // 
      function new(string name = "Base_Device_ID_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Large_base_deviceID = uvm_reg_field::type_id::create("Large_base_deviceID");
         Base_deviceID = uvm_reg_field::type_id::create("Base_deviceID");
         Reserved = uvm_reg_field::type_id::create("Reserved");

         Large_base_deviceID.configure(this, 16, 16, "RW", 0, 16'h0000, 1, 1, 1);
         Base_deviceID.configure(this, 8, 8, "RW", 0, 8'h00, 1, 1, 1);
         Reserved.configure(this, 8, 0, "RO", 0, 8'h00, 1, 0, 1);
      endfunction
   endclass

   //--------------------------------------------------------------------
   // Class: Port_7_VC8_VC4_BW_Allocation_Register_reg
   // 
   // BW Allocation Register
   //--------------------------------------------------------------------

   class Port_7_VC8_VC4_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_7_VC8_VC4_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 


      // Function: new
      // 
      function new(string name = "Port_7_VC8_VC4_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");

         Bandwidth_Allocation.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_5_Timestamp_Synchronization_Status_CSR_reg
   // 
   // Timestamp_Synchronization_Status_CSR_Register
   //--------------------------------------------------------------------

   class Port_5_Timestamp_Synchronization_Status_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_5_Timestamp_Synchronization_Status_CSR_reg)

      uvm_reg_field Delay; 
      uvm_reg_field Reserved; 
      uvm_reg_field Response_Valid; 


      // Function: new
      // 
      function new(string name = "Port_5_Timestamp_Synchronization_Status_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Delay = uvm_reg_field::type_id::create("Delay");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Response_Valid = uvm_reg_field::type_id::create("Response_Valid");

         Delay.configure(this, 10, 22, "RO", 0, 10'b0000000000, 1, 0, 0);
         Reserved.configure(this, 21, 1, "RO", 0, 21'b000000000000000000000, 1, 0, 0);
         Response_Valid.configure(this, 1, 0, "RO", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_6_Timestamp_Generator_Synchronization_CSR_reg
   // 
   // Timestamp_Generator_Synchronization_Register
   //--------------------------------------------------------------------

   class Port_6_Timestamp_Generator_Synchronization_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_6_Timestamp_Generator_Synchronization_CSR_reg)

      rand uvm_reg_field Asymmetry; 
      rand uvm_reg_field TX_Has_Lowwer_Latency; 
      uvm_reg_field Reserved_1; 
      rand uvm_reg_field Port_Opening_Mode; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Auto_Update_Link_Partner_Timestamp_Generators; 
      rand uvm_reg_field Disable_Clock_Compensation_Sequence; 
      rand uvm_reg_field Accept_Timestamps; 


      // Function: new
      // 
      function new(string name = "Port_6_Timestamp_Generator_Synchronization_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Asymmetry = uvm_reg_field::type_id::create("Asymmetry");
         TX_Has_Lowwer_Latency = uvm_reg_field::type_id::create("TX_Has_Lowwer_Latency");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         Port_Opening_Mode = uvm_reg_field::type_id::create("Port_Opening_Mode");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Auto_Update_Link_Partner_Timestamp_Generators = uvm_reg_field::type_id::create("Auto_Update_Link_Partner_Timestamp_Generators");
         Disable_Clock_Compensation_Sequence = uvm_reg_field::type_id::create("Disable_Clock_Compensation_Sequence");
         Accept_Timestamps = uvm_reg_field::type_id::create("Accept_Timestamps");

         Asymmetry.configure(this, 12, 20, "RW", 0, 12'h000, 1, 1, 0);
         TX_Has_Lowwer_Latency.configure(this, 1, 19, "RW", 0, 1'b0, 1, 1, 0);
         Reserved_1.configure(this, 11, 8, "RO", 0, 11'b00000000000, 1, 0, 0);
         Port_Opening_Mode.configure(this, 2, 6, "RW", 0, 2'b00, 1, 1, 0);
         Reserved.configure(this, 3, 3, "RO", 0, 3'b000, 1, 0, 0);
         Auto_Update_Link_Partner_Timestamp_Generators.configure(this, 1, 2, "RW", 0, 1'b0, 1, 1, 0);
         Disable_Clock_Compensation_Sequence.configure(this, 1, 1, "RW", 0, 1'b0, 1, 1, 0);
         Accept_Timestamps.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_4_Link_Timers_Control_3_CSR_reg
   // 
   // Link_Timers_Control_3_Register
   //--------------------------------------------------------------------

   class Port_4_Link_Timers_Control_3_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_4_Link_Timers_Control_3_CSR_reg)

      rand uvm_reg_field Keep_alive_Transmission_Interval; 
      rand uvm_reg_field Keep_alive_Transmission_Period; 
      rand uvm_reg_field Receive_Width_Command_Timeout; 
      rand uvm_reg_field Transmit_Width_Command_Timeout; 


      // Function: new
      // 
      function new(string name = "Port_4_Link_Timers_Control_3_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Keep_alive_Transmission_Interval = uvm_reg_field::type_id::create("Keep_alive_Transmission_Interval");
         Keep_alive_Transmission_Period = uvm_reg_field::type_id::create("Keep_alive_Transmission_Period");
         Receive_Width_Command_Timeout = uvm_reg_field::type_id::create("Receive_Width_Command_Timeout");
         Transmit_Width_Command_Timeout = uvm_reg_field::type_id::create("Transmit_Width_Command_Timeout");

         Keep_alive_Transmission_Interval.configure(this, 10, 22, "RW", 0, 10'b1111111111, 1, 1, 0);
         Keep_alive_Transmission_Period.configure(this, 6, 16, "RW", 0, 6'b000001, 1, 1, 0);
         Receive_Width_Command_Timeout.configure(this, 8, 8, "RW", 0, 8'h40, 1, 1, 1);
         Transmit_Width_Command_Timeout.configure(this, 8, 0, "RW", 0, 8'hff, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_12_Timestamp_0_MSW_CSR_reg
   // 
   // Timestamp_0_MSW_Register
   //--------------------------------------------------------------------

   class Port_12_Timestamp_0_MSW_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_12_Timestamp_0_MSW_CSR_reg)

      uvm_reg_field MSW_Bits; 


      // Function: new
      // 
      function new(string name = "Port_12_Timestamp_0_MSW_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         MSW_Bits = uvm_reg_field::type_id::create("MSW_Bits");

         MSW_Bits.configure(this, 32, 0, "RO", 0, 32'h00000000, 1, 0, 1);
      endfunction
   endclass

   //--------------------------------------------------------------------
   // Class: Port_4_VC8_VC4_BW_Allocation_Register_reg
   // 
   // BW Allocation Register
   //--------------------------------------------------------------------

   class Port_4_VC8_VC4_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_4_VC8_VC4_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 


      // Function: new
      // 
      function new(string name = "Port_4_VC8_VC4_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");

         Bandwidth_Allocation.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_11_Link_Timers_Control_3_CSR_reg
   // 
   // Link_Timers_Control_3_Register
   //--------------------------------------------------------------------

   class Port_11_Link_Timers_Control_3_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_11_Link_Timers_Control_3_CSR_reg)

      rand uvm_reg_field Keep_alive_Transmission_Interval; 
      rand uvm_reg_field Keep_alive_Transmission_Period; 
      rand uvm_reg_field Receive_Width_Command_Timeout; 
      rand uvm_reg_field Transmit_Width_Command_Timeout; 


      // Function: new
      // 
      function new(string name = "Port_11_Link_Timers_Control_3_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Keep_alive_Transmission_Interval = uvm_reg_field::type_id::create("Keep_alive_Transmission_Interval");
         Keep_alive_Transmission_Period = uvm_reg_field::type_id::create("Keep_alive_Transmission_Period");
         Receive_Width_Command_Timeout = uvm_reg_field::type_id::create("Receive_Width_Command_Timeout");
         Transmit_Width_Command_Timeout = uvm_reg_field::type_id::create("Transmit_Width_Command_Timeout");

         Keep_alive_Transmission_Interval.configure(this, 10, 22, "RW", 0, 10'b1111111111, 1, 1, 0);
         Keep_alive_Transmission_Period.configure(this, 6, 16, "RW", 0, 6'b000001, 1, 1, 0);
         Receive_Width_Command_Timeout.configure(this, 8, 8, "RW", 0, 8'h40, 1, 1, 1);
         Transmit_Width_Command_Timeout.configure(this, 8, 0, "RW", 0, 8'hff, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_7_Link_Uninit_Discard_Timer_CSR_reg
   // 
   // Link_Uninit_Discard_Timer_CSR_Register
   //--------------------------------------------------------------------

   class Port_7_Link_Uninit_Discard_Timer_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_7_Link_Uninit_Discard_Timer_CSR_reg)

      uvm_reg_field Reserved; 
      rand uvm_reg_field Link_Uninit_Timeout; 


      // Function: new
      // 
      function new(string name = "Port_7_Link_Uninit_Discard_Timer_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Link_Uninit_Timeout = uvm_reg_field::type_id::create("Link_Uninit_Timeout");

         Reserved.configure(this, 8, 24, "RO", 0, 8'h00, 1, 0, 1);
         Link_Uninit_Timeout.configure(this, 24, 0, "RW", 0, 24'h000000, 1, 1, 1);
      endfunction
   endclass

   //--------------------------------------------------------------------
   // Class: Port_15_Timestamp_0_MSW_CSR_reg
   // 
   // Timestamp_0_MSW_Register
   //--------------------------------------------------------------------

   class Port_15_Timestamp_0_MSW_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_15_Timestamp_0_MSW_CSR_reg)

      uvm_reg_field MSW_Bits; 


      // Function: new
      // 
      function new(string name = "Port_15_Timestamp_0_MSW_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         MSW_Bits = uvm_reg_field::type_id::create("MSW_Bits");

         MSW_Bits.configure(this, 32, 0, "RO", 0, 32'h00000000, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_1_VC7_VC3_BW_Allocation_Register_reg
   // 
   // BW Allocation Register
   //--------------------------------------------------------------------

   class Port_1_VC7_VC3_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_1_VC7_VC3_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 


      // Function: new
      // 
      function new(string name = "Port_1_VC7_VC3_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");

         Bandwidth_Allocation.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass

   //--------------------------------------------------------------------
   // Class: Port_4_Link_Timers_Control_2_CSR_reg
   // 
   // Link_Timers_Control_2_Register
   //--------------------------------------------------------------------

   class Port_4_Link_Timers_Control_2_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_4_Link_Timers_Control_2_CSR_reg)

      uvm_reg_field Reserved; 
      rand uvm_reg_field Recovery_Timer; 
      rand uvm_reg_field Discovery_Completion_Timer; 
      rand uvm_reg_field Retraining_Completion_Timer; 


      // Function: new
      // 
      function new(string name = "Port_4_Link_Timers_Control_2_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Recovery_Timer = uvm_reg_field::type_id::create("Recovery_Timer");
         Discovery_Completion_Timer = uvm_reg_field::type_id::create("Discovery_Completion_Timer");
         Retraining_Completion_Timer = uvm_reg_field::type_id::create("Retraining_Completion_Timer");

         Reserved.configure(this, 8, 24, "RO", 0, 8'h00, 1, 0, 1);
         Recovery_Timer.configure(this, 8, 16, "RW", 0, 8'hff, 1, 1, 1);
         Discovery_Completion_Timer.configure(this, 8, 8, "RW", 0, 8'h00, 1, 1, 1);
         Retraining_Completion_Timer.configure(this, 8, 0, "RW", 0, 8'hfe, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_8_Packet_Capture_4_CSR_reg
   // 
   // Packet Capture 4 Register
   //--------------------------------------------------------------------

   class Port_8_Packet_Capture_4_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_8_Packet_Capture_4_CSR_reg)

      rand uvm_reg_field Capture4; 


      // Function: new
      // 
      function new(string name = "Port_8_Packet_Capture_4_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture4 = uvm_reg_field::type_id::create("Capture4");

         Capture4.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_15_Timestamp_Generator_Synchronization_CSR_reg
   // 
   // Timestamp_Generator_Synchronization_Register
   //--------------------------------------------------------------------

   class Port_15_Timestamp_Generator_Synchronization_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_15_Timestamp_Generator_Synchronization_CSR_reg)

      rand uvm_reg_field Asymmetry; 
      rand uvm_reg_field TX_Has_Lowwer_Latency; 
      uvm_reg_field Reserved_1; 
      rand uvm_reg_field Port_Opening_Mode; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Auto_Update_Link_Partner_Timestamp_Generators; 
      rand uvm_reg_field Disable_Clock_Compensation_Sequence; 
      rand uvm_reg_field Accept_Timestamps; 


      // Function: new
      // 
      function new(string name = "Port_15_Timestamp_Generator_Synchronization_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Asymmetry = uvm_reg_field::type_id::create("Asymmetry");
         TX_Has_Lowwer_Latency = uvm_reg_field::type_id::create("TX_Has_Lowwer_Latency");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         Port_Opening_Mode = uvm_reg_field::type_id::create("Port_Opening_Mode");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Auto_Update_Link_Partner_Timestamp_Generators = uvm_reg_field::type_id::create("Auto_Update_Link_Partner_Timestamp_Generators");
         Disable_Clock_Compensation_Sequence = uvm_reg_field::type_id::create("Disable_Clock_Compensation_Sequence");
         Accept_Timestamps = uvm_reg_field::type_id::create("Accept_Timestamps");

         Asymmetry.configure(this, 12, 20, "RW", 0, 12'h000, 1, 1, 0);
         TX_Has_Lowwer_Latency.configure(this, 1, 19, "RW", 0, 1'b0, 1, 1, 0);
         Reserved_1.configure(this, 11, 8, "RO", 0, 11'b00000000000, 1, 0, 0);
         Port_Opening_Mode.configure(this, 2, 6, "RW", 0, 2'b00, 1, 1, 0);
         Reserved.configure(this, 3, 3, "RO", 0, 3'b000, 1, 0, 0);
         Auto_Update_Link_Partner_Timestamp_Generators.configure(this, 1, 2, "RW", 0, 1'b0, 1, 1, 0);
         Disable_Clock_Compensation_Sequence.configure(this, 1, 1, "RW", 0, 1'b0, 1, 1, 0);
         Accept_Timestamps.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass

   //--------------------------------------------------------------------
   // Class: Port_13_Link_Maintenance_Response_CSR_reg
   // 
   // Link Maintenance Response Register
   //--------------------------------------------------------------------

   class Port_13_Link_Maintenance_Response_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_13_Link_Maintenance_Response_CSR_reg)

      uvm_reg_field port_status; 
      uvm_reg_field ackID_status; 
      uvm_reg_field Port_status_cs64; 
      uvm_reg_field Reserved; 
      uvm_reg_field response_valid; 


      // Function: new
      // 
      function new(string name = "Port_13_Link_Maintenance_Response_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         port_status = uvm_reg_field::type_id::create("port_status");
         ackID_status = uvm_reg_field::type_id::create("ackID_status");
         Port_status_cs64 = uvm_reg_field::type_id::create("Port_status_cs64");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         response_valid = uvm_reg_field::type_id::create("response_valid");

         port_status.configure(this, 5, 27, "RO", 0, 5'b00000, 1, 0, 0);
         ackID_status.configure(this, 12, 15, "RO", 0, 12'h000, 1, 0, 0);
         Port_status_cs64.configure(this, 12, 3, "RO", 0, 12'h000, 1, 0, 0);
         Reserved.configure(this, 2, 1, "RO", 0, 2'b00, 1, 0, 0);
         response_valid.configure(this, 1, 0, "RO", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_11_VC6_VC2_BW_Allocation_Register_reg
   // 
   // BW Allocation Register
   //--------------------------------------------------------------------

   class Port_11_VC6_VC2_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_11_VC6_VC2_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 


      // Function: new
      // 
      function new(string name = "Port_11_VC6_VC2_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");

         Bandwidth_Allocation.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_3_VC7_VC3_BW_Allocation_Register_reg
   // 
   // BW Allocation Register
   //--------------------------------------------------------------------

   class Port_3_VC7_VC3_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_3_VC7_VC3_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 


      // Function: new
      // 
      function new(string name = "Port_3_VC7_VC3_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");

         Bandwidth_Allocation.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_4_Timestamp_Synchronization_Command_CSR_reg
   // 
   // Timestamp_Synchronization_Command_CSR_Register
   //--------------------------------------------------------------------

   class Port_4_Timestamp_Synchronization_Command_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_4_Timestamp_Synchronization_Command_CSR_reg)

      rand uvm_reg_field Command; 
      uvm_reg_field Reserved_2; 
      rand uvm_reg_field Send_Timestamp; 
      uvm_reg_field Reserved_1; 
      rand uvm_reg_field Send_Zero_Timestamp; 
      uvm_reg_field Reserved; 


      // Function: new
      // 
      function new(string name = "Port_4_Timestamp_Synchronization_Command_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Command = uvm_reg_field::type_id::create("Command");
         Reserved_2 = uvm_reg_field::type_id::create("Reserved_2");
         Send_Timestamp = uvm_reg_field::type_id::create("Send_Timestamp");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         Send_Zero_Timestamp = uvm_reg_field::type_id::create("Send_Zero_Timestamp");
         Reserved = uvm_reg_field::type_id::create("Reserved");

         Command.configure(this, 3, 29, "RW", 0, 3'b000, 1, 1, 0);
         Reserved_2.configure(this, 1, 28, "RO", 0, 1'b0, 1, 0, 0);
         Send_Timestamp.configure(this, 1, 27, "RW", 0, 1'b0, 1, 1, 0);
         Reserved_1.configure(this, 3, 24, "RO", 0, 3'b000, 1, 0, 0);
         Send_Zero_Timestamp.configure(this, 1, 23, "RW", 0, 1'b0, 1, 1, 0);
         Reserved.configure(this, 23, 0, "RO", 0, 23'b00000000000000000000000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_9_Packet_Capture_1_CSR_reg
   // 
   // Packet Capture 1 Register
   //--------------------------------------------------------------------

   class Port_9_Packet_Capture_1_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_9_Packet_Capture_1_CSR_reg)

      rand uvm_reg_field Capture1; 


      // Function: new
      // 
      function new(string name = "Port_9_Packet_Capture_1_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture1 = uvm_reg_field::type_id::create("Capture1");

         Capture1.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_3_Attributes_Capture_CSR_reg
   // 
   // Attributes Register
   //--------------------------------------------------------------------

   class Port_3_Attributes_Capture_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_3_Attributes_Capture_CSR_reg)

      rand uvm_reg_field Capture_valid_info; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Implementation_Dependent; 
      rand uvm_reg_field Error_type; 
      rand uvm_reg_field Info_type; 


      // Function: new
      // 
      function new(string name = "Port_3_Attributes_Capture_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture_valid_info = uvm_reg_field::type_id::create("Capture_valid_info");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Implementation_Dependent = uvm_reg_field::type_id::create("Implementation_Dependent");
         Error_type = uvm_reg_field::type_id::create("Error_type");
         Info_type = uvm_reg_field::type_id::create("Info_type");

         Capture_valid_info.configure(this, 1, 31, "RW", 0, 1'b0, 1, 1, 0);
         Reserved.configure(this, 3, 28, "RO", 0, 3'b000, 1, 0, 0);
         Implementation_Dependent.configure(this, 20, 8, "RW", 0, 20'h00000, 1, 1, 0);
         Error_type.configure(this, 5, 3, "RW", 0, 5'b00000, 1, 1, 0);
         Info_type.configure(this, 3, 0, "RW", 0, 3'b000, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Lane_7_Status_0_CSR_reg
   // 
   // Status 0 Register
   //--------------------------------------------------------------------

   class Lane_7_Status_0_CSR_reg extends uvm_reg;
      `uvm_object_utils(Lane_7_Status_0_CSR_reg)

      uvm_reg_field Status2_7_CSRs_implemented; 
      uvm_reg_field Status1_CSR_implemented; 
      uvm_reg_field Reserved; 
      uvm_reg_field Rcvr_trained_state_change; 
      uvm_reg_field Lane_sync_state_change; 
      uvm_reg_field lane_8B_10B_decoding_errors; 
      uvm_reg_field Receiver_lane_ready; 
      uvm_reg_field Receiver_lane_sync; 
      uvm_reg_field Receiver_trained; 
      uvm_reg_field Receiver_input_inverted; 
      uvm_reg_field Receiver_type; 
      uvm_reg_field Transmitter_mode; 
      uvm_reg_field Transmitter_type; 
      uvm_reg_field Lane_Number; 
      uvm_reg_field Port_Number; 


      // Function: new
      // 
      function new(string name = "Lane_7_Status_0_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Status2_7_CSRs_implemented = uvm_reg_field::type_id::create("Status2_7_CSRs_implemented");
         Status1_CSR_implemented = uvm_reg_field::type_id::create("Status1_CSR_implemented");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Rcvr_trained_state_change = uvm_reg_field::type_id::create("Rcvr_trained_state_change");
         Lane_sync_state_change = uvm_reg_field::type_id::create("Lane_sync_state_change");
         lane_8B_10B_decoding_errors = uvm_reg_field::type_id::create("lane_8B_10B_decoding_errors");
         Receiver_lane_ready = uvm_reg_field::type_id::create("Receiver_lane_ready");
         Receiver_lane_sync = uvm_reg_field::type_id::create("Receiver_lane_sync");
         Receiver_trained = uvm_reg_field::type_id::create("Receiver_trained");
         Receiver_input_inverted = uvm_reg_field::type_id::create("Receiver_input_inverted");
         Receiver_type = uvm_reg_field::type_id::create("Receiver_type");
         Transmitter_mode = uvm_reg_field::type_id::create("Transmitter_mode");
         Transmitter_type = uvm_reg_field::type_id::create("Transmitter_type");
         Lane_Number = uvm_reg_field::type_id::create("Lane_Number");
         Port_Number = uvm_reg_field::type_id::create("Port_Number");

         Status2_7_CSRs_implemented.configure(this, 3, 29, "RO", 0, 3'b000, 1, 0, 0);
         Status1_CSR_implemented.configure(this, 1, 28, "RO", 0, 1'b0, 1, 0, 0);
         Reserved.configure(this, 2, 26, "RO", 0, 2'b00, 1, 0, 0);
         Rcvr_trained_state_change.configure(this, 1, 25, "RO", 0, 1'b0, 1, 0, 0);
         Lane_sync_state_change.configure(this, 1, 24, "RO", 0, 1'b0, 1, 0, 0);
         lane_8B_10B_decoding_errors.configure(this, 4, 20, "RO", 0, 4'h0, 1, 0, 0);
         Receiver_lane_ready.configure(this, 1, 19, "RO", 0, 1'b0, 1, 0, 0);
         Receiver_lane_sync.configure(this, 1, 18, "RO", 0, 1'b0, 1, 0, 0);
         Receiver_trained.configure(this, 1, 17, "RO", 0, 1'b0, 1, 0, 0);
         Receiver_input_inverted.configure(this, 1, 16, "RO", 0, 1'b0, 1, 0, 0);
         Receiver_type.configure(this, 2, 14, "RO", 0, 2'b00, 1, 0, 0);
         Transmitter_mode.configure(this, 1, 13, "RO", 0, 1'b0, 1, 0, 0);
         Transmitter_type.configure(this, 1, 12, "RO", 0, 1'b0, 1, 0, 0);
         Lane_Number.configure(this, 4, 8, "RO", 0, 4'h0, 1, 0, 0);
         Port_Number.configure(this, 8, 0, "RO", 0, 8'h00, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_7_Initialization_Status_CSR_reg
   // 
   // Initialization_Status_Register
   //--------------------------------------------------------------------

   class Port_7_Initialization_Status_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_7_Initialization_Status_CSR_reg)

      uvm_reg_field Reserved_3; 
      uvm_reg_field Transmitted_Status_Control_Symbols; 
      uvm_reg_field Reserved_2; 
      uvm_reg_field Received_Status_Control_Symbols; 
      uvm_reg_field Port_Initialization_State_Machine; 
      uvm_reg_field Reserved_1; 
      uvm_reg_field x1_x2_Mode_Detection; 
      uvm_reg_field Reserved; 
      uvm_reg_field Lane_Alignment; 


      // Function: new
      // 
      function new(string name = "Port_7_Initialization_Status_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved_3 = uvm_reg_field::type_id::create("Reserved_3");
         Transmitted_Status_Control_Symbols = uvm_reg_field::type_id::create("Transmitted_Status_Control_Symbols");
         Reserved_2 = uvm_reg_field::type_id::create("Reserved_2");
         Received_Status_Control_Symbols = uvm_reg_field::type_id::create("Received_Status_Control_Symbols");
         Port_Initialization_State_Machine = uvm_reg_field::type_id::create("Port_Initialization_State_Machine");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         x1_x2_Mode_Detection = uvm_reg_field::type_id::create("x1_x2_Mode_Detection");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Lane_Alignment = uvm_reg_field::type_id::create("Lane_Alignment");

         Reserved_3.configure(this, 4, 28, "RO", 0, 4'h0, 1, 0, 0);
         Transmitted_Status_Control_Symbols.configure(this, 7, 21, "RO", 0, 7'b0000000, 1, 0, 0);
         Reserved_2.configure(this, 1, 20, "RO", 0, 1'b0, 1, 0, 0);
         Received_Status_Control_Symbols.configure(this, 4, 16, "RO", 0, 4'h0, 1, 0, 0);
         Port_Initialization_State_Machine.configure(this, 5, 11, "RO", 0, 5'b00000, 1, 0, 0);
         Reserved_1.configure(this, 1, 10, "RO", 0, 1'b0, 1, 0, 0);
         x1_x2_Mode_Detection.configure(this, 4, 6, "RO", 0, 4'h0, 1, 0, 0);
         Reserved.configure(this, 1, 5, "RO", 0, 1'b0, 1, 0, 0);
         Lane_Alignment.configure(this, 5, 0, "RO", 0, 5'b00000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Logical_Transport_Layer_Dev32_Destination_ID_Capture_CSR_reg
   // 
   // Logical_Transport_Layer_Dev32_Destination_ID_Capture_CSR_Register
   //--------------------------------------------------------------------

   class Logical_Transport_Layer_Dev32_Destination_ID_Capture_CSR_reg extends uvm_reg;
      `uvm_object_utils(Logical_Transport_Layer_Dev32_Destination_ID_Capture_CSR_reg)

      uvm_reg_field Dev32_DestID; 


      // Function: new
      // 
      function new(string name = "Logical_Transport_Layer_Dev32_Destination_ID_Capture_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Dev32_DestID = uvm_reg_field::type_id::create("Dev32_DestID");

         Dev32_DestID.configure(this, 32, 0, "RO", 0, 32'h00000000, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_5_Link_Maintenance_Response_CSR_reg
   // 
   // Link Maintenance Response Register
   //--------------------------------------------------------------------

   class Port_5_Link_Maintenance_Response_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_5_Link_Maintenance_Response_CSR_reg)

      uvm_reg_field port_status; 
      uvm_reg_field ackID_status; 
      uvm_reg_field Port_status_cs64; 
      uvm_reg_field Reserved; 
      uvm_reg_field response_valid; 


      // Function: new
      // 
      function new(string name = "Port_5_Link_Maintenance_Response_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         port_status = uvm_reg_field::type_id::create("port_status");
         ackID_status = uvm_reg_field::type_id::create("ackID_status");
         Port_status_cs64 = uvm_reg_field::type_id::create("Port_status_cs64");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         response_valid = uvm_reg_field::type_id::create("response_valid");

         port_status.configure(this, 5, 27, "RO", 0, 5'b00000, 1, 0, 0);
         ackID_status.configure(this, 12, 15, "RO", 0, 12'h000, 1, 0, 0);
         Port_status_cs64.configure(this, 12, 3, "RO", 0, 12'h000, 1, 0, 0);
         Reserved.configure(this, 2, 1, "RO", 0, 2'b00, 1, 0, 0);
         response_valid.configure(this, 1, 0, "RO", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_8_Link_Uninit_Discard_Timer_CSR_reg
   // 
   // Link_Uninit_Discard_Timer_CSR_Register
   //--------------------------------------------------------------------

   class Port_8_Link_Uninit_Discard_Timer_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_8_Link_Uninit_Discard_Timer_CSR_reg)

      uvm_reg_field Reserved; 
      rand uvm_reg_field Link_Uninit_Timeout; 


      // Function: new
      // 
      function new(string name = "Port_8_Link_Uninit_Discard_Timer_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Link_Uninit_Timeout = uvm_reg_field::type_id::create("Link_Uninit_Timeout");

         Reserved.configure(this, 8, 24, "RO", 0, 8'h00, 1, 0, 1);
         Link_Uninit_Timeout.configure(this, 24, 0, "RW", 0, 24'h000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_8_Attributes_Capture_CSR_reg
   // 
   // Attributes Register
   //--------------------------------------------------------------------

   class Port_8_Attributes_Capture_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_8_Attributes_Capture_CSR_reg)

      rand uvm_reg_field Capture_valid_info; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Implementation_Dependent; 
      rand uvm_reg_field Error_type; 
      rand uvm_reg_field Info_type; 


      // Function: new
      // 
      function new(string name = "Port_8_Attributes_Capture_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture_valid_info = uvm_reg_field::type_id::create("Capture_valid_info");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Implementation_Dependent = uvm_reg_field::type_id::create("Implementation_Dependent");
         Error_type = uvm_reg_field::type_id::create("Error_type");
         Info_type = uvm_reg_field::type_id::create("Info_type");

         Capture_valid_info.configure(this, 1, 31, "RW", 0, 1'b0, 1, 1, 0);
         Reserved.configure(this, 3, 28, "RO", 0, 3'b000, 1, 0, 0);
         Implementation_Dependent.configure(this, 20, 8, "RW", 0, 20'h00000, 1, 1, 0);
         Error_type.configure(this, 5, 3, "RW", 0, 5'b00000, 1, 1, 0);
         Info_type.configure(this, 3, 0, "RW", 0, 3'b000, 1, 1, 0);
      endfunction
   endclass

   //--------------------------------------------------------------------
   // Class: Port_9_Timestamp_Offset_CSR_reg
   // 
   // Timestamp_Offset_CSR_Register
   //--------------------------------------------------------------------

   class Port_9_Timestamp_Offset_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_9_Timestamp_Offset_CSR_reg)

      uvm_reg_field Reserved; 
      rand uvm_reg_field Offset; 


      // Function: new
      // 
      function new(string name = "Port_9_Timestamp_Offset_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Offset = uvm_reg_field::type_id::create("Offset");

         Reserved.configure(this, 16, 16, "RO", 0, 16'h0000, 1, 0, 1);
         Offset.configure(this, 16, 0, "RW", 0, 16'h0000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_5_VC7_VC3_BW_Allocation_Register_reg
   // 
   // BW Allocation Register
   //--------------------------------------------------------------------

   class Port_5_VC7_VC3_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_5_VC7_VC3_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 


      // Function: new
      // 
      function new(string name = "Port_5_VC7_VC3_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");

         Bandwidth_Allocation.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Lane_11_Status_1_CSR_reg
   // 
   // Status 1 Register
   //--------------------------------------------------------------------

   class Lane_11_Status_1_CSR_reg extends uvm_reg;
      `uvm_object_utils(Lane_11_Status_1_CSR_reg)

      uvm_reg_field Reserved; 
      uvm_reg_field IDLE3_SC_Retraining_State; 
      uvm_reg_field IDLE3_SC_Training_State; 
      uvm_reg_field IDLE3_DME_Training_State; 
      uvm_reg_field IDLE3_Training_Type; 
      uvm_reg_field IDLE3_Loss_of_Signals; 
      uvm_reg_field IDLE2_Connected_port_scrambling_descrambling_enabled; 
      uvm_reg_field IDLE2_Connected_port_transmit_emphasis_Tap_plus1_status; 
      uvm_reg_field IDLE2_Connected_port_transmit_emphasis_Tap_minus1_status; 
      uvm_reg_field IDLE2_Lane_number_in_connected_port; 
      uvm_reg_field IDLE2_Received_port_width; 
      uvm_reg_field IDLE2_Connected_port_lane_receiver_trained; 
      uvm_reg_field Implementation_defined; 
      uvm_reg_field Values_changed; 
      uvm_reg_field IDLE_information_current; 
      rand uvm_reg_field IDLE_received; 


      // Function: new
      // 
      function new(string name = "Lane_11_Status_1_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         IDLE3_SC_Retraining_State = uvm_reg_field::type_id::create("IDLE3_SC_Retraining_State");
         IDLE3_SC_Training_State = uvm_reg_field::type_id::create("IDLE3_SC_Training_State");
         IDLE3_DME_Training_State = uvm_reg_field::type_id::create("IDLE3_DME_Training_State");
         IDLE3_Training_Type = uvm_reg_field::type_id::create("IDLE3_Training_Type");
         IDLE3_Loss_of_Signals = uvm_reg_field::type_id::create("IDLE3_Loss_of_Signals");
         IDLE2_Connected_port_scrambling_descrambling_enabled = uvm_reg_field::type_id::create("IDLE2_Connected_port_scrambling_descrambling_enabled");
         IDLE2_Connected_port_transmit_emphasis_Tap_plus1_status = uvm_reg_field::type_id::create("IDLE2_Connected_port_transmit_emphasis_Tap_plus1_status");
         IDLE2_Connected_port_transmit_emphasis_Tap_minus1_status = uvm_reg_field::type_id::create("IDLE2_Connected_port_transmit_emphasis_Tap_minus1_status");
         IDLE2_Lane_number_in_connected_port = uvm_reg_field::type_id::create("IDLE2_Lane_number_in_connected_port");
         IDLE2_Received_port_width = uvm_reg_field::type_id::create("IDLE2_Received_port_width");
         IDLE2_Connected_port_lane_receiver_trained = uvm_reg_field::type_id::create("IDLE2_Connected_port_lane_receiver_trained");
         Implementation_defined = uvm_reg_field::type_id::create("Implementation_defined");
         Values_changed = uvm_reg_field::type_id::create("Values_changed");
         IDLE_information_current = uvm_reg_field::type_id::create("IDLE_information_current");
         IDLE_received = uvm_reg_field::type_id::create("IDLE_received");

         Reserved.configure(this, 6, 26, "RO", 0, 6'b000000, 1, 0, 0);
         IDLE3_SC_Retraining_State.configure(this, 2, 24, "RO", 0, 2'b00, 1, 0, 0);
         IDLE3_SC_Training_State.configure(this, 2, 22, "RO", 0, 2'b00, 1, 0, 0);
         IDLE3_DME_Training_State.configure(this, 2, 20, "RO", 0, 2'b00, 1, 0, 0);
         IDLE3_Training_Type.configure(this, 2, 18, "RO", 0, 2'b00, 1, 0, 0);
         IDLE3_Loss_of_Signals.configure(this, 1, 17, "RO", 0, 1'b0, 1, 0, 0);
         IDLE2_Connected_port_scrambling_descrambling_enabled.configure(this, 1, 16, "RO", 0, 1'b0, 1, 0, 0);
         IDLE2_Connected_port_transmit_emphasis_Tap_plus1_status.configure(this, 2, 14, "RO", 0, 2'b00, 1, 0, 0);
         IDLE2_Connected_port_transmit_emphasis_Tap_minus1_status.configure(this, 2, 12, "RO", 0, 2'b00, 1, 0, 0);
         IDLE2_Lane_number_in_connected_port.configure(this, 4, 8, "RO", 0, 4'h0, 1, 0, 0);
         IDLE2_Received_port_width.configure(this, 3, 5, "RO", 0, 3'b000, 1, 0, 0);
         IDLE2_Connected_port_lane_receiver_trained.configure(this, 1, 4, "RO", 0, 1'b0, 1, 0, 0);
         Implementation_defined.configure(this, 1, 3, "RO", 0, 1'b0, 1, 0, 0);
         Values_changed.configure(this, 1, 2, "RO", 0, 1'b1, 1, 0, 0);
         IDLE_information_current.configure(this, 1, 1, "RO", 0, 1'b0, 1, 0, 0);
         IDLE_received.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_0_VC6_VC2_BW_Allocation_Register_reg
   // 
   // BW Allocation Register
   //--------------------------------------------------------------------

   class Port_0_VC6_VC2_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_0_VC6_VC2_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 


      // Function: new
      // 
      function new(string name = "Port_0_VC6_VC2_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");

         Bandwidth_Allocation.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_8_Power_Management_CSR_reg
   // 
   // Power_Management_Register
   //--------------------------------------------------------------------

   class Port_8_Power_Management_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_8_Power_Management_CSR_reg)

      uvm_reg_field Reserved; 
      uvm_reg_field Status_of_Link_Partner_Transmit_Width_Change; 
      rand uvm_reg_field Change_Link_Partner_Transmit_width; 
      uvm_reg_field Status_of_My_Transmit_Width_Change; 
      rand uvm_reg_field Change_My_Transmit_Width; 
      uvm_reg_field Reciever_Width_Status; 
      uvm_reg_field Transmit_Width_Status; 
      rand uvm_reg_field Asymmetric_Modes_Enabled; 
      uvm_reg_field Asymmetric_Modes_Supported; 


      // Function: new
      // 
      function new(string name = "Port_8_Power_Management_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Status_of_Link_Partner_Transmit_Width_Change = uvm_reg_field::type_id::create("Status_of_Link_Partner_Transmit_Width_Change");
         Change_Link_Partner_Transmit_width = uvm_reg_field::type_id::create("Change_Link_Partner_Transmit_width");
         Status_of_My_Transmit_Width_Change = uvm_reg_field::type_id::create("Status_of_My_Transmit_Width_Change");
         Change_My_Transmit_Width = uvm_reg_field::type_id::create("Change_My_Transmit_Width");
         Reciever_Width_Status = uvm_reg_field::type_id::create("Reciever_Width_Status");
         Transmit_Width_Status = uvm_reg_field::type_id::create("Transmit_Width_Status");
         Asymmetric_Modes_Enabled = uvm_reg_field::type_id::create("Asymmetric_Modes_Enabled");
         Asymmetric_Modes_Supported = uvm_reg_field::type_id::create("Asymmetric_Modes_Supported");

         Reserved.configure(this, 6, 26, "RO", 0, 6'b000000, 1, 0, 0);
         Status_of_Link_Partner_Transmit_Width_Change.configure(this, 2, 24, "RO", 0, 2'b00, 1, 0, 0);
         Change_Link_Partner_Transmit_width.configure(this, 3, 21, "WRC", 0, 3'b000, 1, 1, 0);
         Status_of_My_Transmit_Width_Change.configure(this, 2, 19, "RO", 0, 2'b00, 1, 0, 0);
         Change_My_Transmit_Width.configure(this, 3, 16, "WRC", 0, 3'b000, 1, 1, 0);
         Reciever_Width_Status.configure(this, 3, 13, "RO", 0, 3'b000, 1, 0, 0);
         Transmit_Width_Status.configure(this, 3, 10, "RO", 0, 3'b000, 1, 0, 0);
         Asymmetric_Modes_Enabled.configure(this, 5, 5, "RW", 0, 5'b00000, 1, 1, 0);
         Asymmetric_Modes_Supported.configure(this, 5, 0, "RO", 0, 5'b00000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_3_Outbound_ackID_CSR_reg
   // 
   // Outbound_Register
   //--------------------------------------------------------------------

   class Port_3_Outbound_ackID_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_3_Outbound_ackID_CSR_reg)

      rand uvm_reg_field Outbound_ackID; 
      uvm_reg_field Outstanding_ackID; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Clr_outstanding_ackID; 


      // Function: new
      // 
      function new(string name = "Port_3_Outbound_ackID_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Outbound_ackID = uvm_reg_field::type_id::create("Outbound_ackID");
         Outstanding_ackID = uvm_reg_field::type_id::create("Outstanding_ackID");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Clr_outstanding_ackID = uvm_reg_field::type_id::create("Clr_outstanding_ackID");

         Outbound_ackID.configure(this, 12, 20, "RW", 0, 12'h000, 1, 1, 0);
         Outstanding_ackID.configure(this, 12, 8, "RW", 0, 12'h000, 1, 1, 0);
         Reserved.configure(this, 7, 1, "RO", 0, 7'b0000000, 1, 0, 0);
         Clr_outstanding_ackID.configure(this, 1, 0, "W1C", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_12_Timestamp_Synchronization_Command_CSR_reg
   // 
   // Timestamp_Synchronization_Command_CSR_Register
   //--------------------------------------------------------------------

   class Port_12_Timestamp_Synchronization_Command_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_12_Timestamp_Synchronization_Command_CSR_reg)

      rand uvm_reg_field Command; 
      uvm_reg_field Reserved_2; 
      rand uvm_reg_field Send_Timestamp; 
      uvm_reg_field Reserved_1; 
      rand uvm_reg_field Send_Zero_Timestamp; 
      uvm_reg_field Reserved; 


      // Function: new
      // 
      function new(string name = "Port_12_Timestamp_Synchronization_Command_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Command = uvm_reg_field::type_id::create("Command");
         Reserved_2 = uvm_reg_field::type_id::create("Reserved_2");
         Send_Timestamp = uvm_reg_field::type_id::create("Send_Timestamp");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         Send_Zero_Timestamp = uvm_reg_field::type_id::create("Send_Zero_Timestamp");
         Reserved = uvm_reg_field::type_id::create("Reserved");

         Command.configure(this, 3, 29, "RW", 0, 3'b000, 1, 1, 0);
         Reserved_2.configure(this, 1, 28, "RO", 0, 1'b0, 1, 0, 0);
         Send_Timestamp.configure(this, 1, 27, "RW", 0, 1'b0, 1, 1, 0);
         Reserved_1.configure(this, 3, 24, "RO", 0, 3'b000, 1, 0, 0);
         Send_Zero_Timestamp.configure(this, 1, 23, "RW", 0, 1'b0, 1, 1, 0);
         Reserved.configure(this, 23, 0, "RO", 0, 23'b00000000000000000000000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_General_Control_CSR_reg
   // 
   // General Control Register
   //--------------------------------------------------------------------

   class Port_General_Control_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_General_Control_CSR_reg)

      uvm_reg_field Reserved; 
      rand uvm_reg_field Discovered; 
      rand uvm_reg_field Master_Enable; 
      rand uvm_reg_field Host; 


      // Function: new
      // 
      function new(string name = "Port_General_Control_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Discovered = uvm_reg_field::type_id::create("Discovered");
         Master_Enable = uvm_reg_field::type_id::create("Master_Enable");
         Host = uvm_reg_field::type_id::create("Host");

         Reserved.configure(this, 29, 3, "RO", 0, 29'b00000000000000000000000000000, 1, 0, 0);
         Discovered.configure(this, 1, 2, "RW", 0, 1'b0, 1, 1, 0);
         Master_Enable.configure(this, 1, 1, "RW", 0, 1'b0, 1, 1, 0);
         Host.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_14_Link_Timers_Control_CSR_reg
   // 
   // Link_Timers_Control_Register
   //--------------------------------------------------------------------

   class Port_14_Link_Timers_Control_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_14_Link_Timers_Control_CSR_reg)

      rand uvm_reg_field Emphasis_Command_Timeout; 
      rand uvm_reg_field CW_Training_Completion_Timer; 
      rand uvm_reg_field DME_Wait_Timer; 
      rand uvm_reg_field DME_Training_Completion_Timer; 


      // Function: new
      // 
      function new(string name = "Port_14_Link_Timers_Control_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Emphasis_Command_Timeout = uvm_reg_field::type_id::create("Emphasis_Command_Timeout");
         CW_Training_Completion_Timer = uvm_reg_field::type_id::create("CW_Training_Completion_Timer");
         DME_Wait_Timer = uvm_reg_field::type_id::create("DME_Wait_Timer");
         DME_Training_Completion_Timer = uvm_reg_field::type_id::create("DME_Training_Completion_Timer");

         Emphasis_Command_Timeout.configure(this, 8, 24, "RW", 0, 8'hff, 1, 1, 1);
         CW_Training_Completion_Timer.configure(this, 8, 16, "RW", 0, 8'h00, 1, 1, 1);
         DME_Wait_Timer.configure(this, 8, 8, "RW", 0, 8'h3f, 1, 1, 1);
         DME_Training_Completion_Timer.configure(this, 8, 0, "RW", 0, 8'h00, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_3_Packet_Capture_4_CSR_reg
   // 
   // Packet Capture 4 Register
   //--------------------------------------------------------------------

   class Port_3_Packet_Capture_4_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_3_Packet_Capture_4_CSR_reg)

      rand uvm_reg_field Capture4; 


      // Function: new
      // 
      function new(string name = "Port_3_Packet_Capture_4_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture4 = uvm_reg_field::type_id::create("Capture4");

         Capture4.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_9_VC5_VC1_BW_Allocation_Register_reg
   // 
   // BW Allocation Register
   //--------------------------------------------------------------------

   class Port_9_VC5_VC1_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_9_VC5_VC1_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 


      // Function: new
      // 
      function new(string name = "Port_9_VC5_VC1_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");

         Bandwidth_Allocation.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Lane_9_Status_1_CSR_reg
   // 
   // Status 1 Register
   //--------------------------------------------------------------------

   class Lane_9_Status_1_CSR_reg extends uvm_reg;
      `uvm_object_utils(Lane_9_Status_1_CSR_reg)

      uvm_reg_field Reserved; 
      uvm_reg_field IDLE3_SC_Retraining_State; 
      uvm_reg_field IDLE3_SC_Training_State; 
      uvm_reg_field IDLE3_DME_Training_State; 
      uvm_reg_field IDLE3_Training_Type; 
      uvm_reg_field IDLE3_Loss_of_Signals; 
      uvm_reg_field IDLE2_Connected_port_scrambling_descrambling_enabled; 
      uvm_reg_field IDLE2_Connected_port_transmit_emphasis_Tap_plus1_status; 
      uvm_reg_field IDLE2_Connected_port_transmit_emphasis_Tap_minus1_status; 
      uvm_reg_field IDLE2_Lane_number_in_connected_port; 
      uvm_reg_field IDLE2_Received_port_width; 
      uvm_reg_field IDLE2_Connected_port_lane_receiver_trained; 
      uvm_reg_field Implementation_defined; 
      uvm_reg_field Values_changed; 
      uvm_reg_field IDLE_information_current; 
      rand uvm_reg_field IDLE_received; 


      // Function: new
      // 
      function new(string name = "Lane_9_Status_1_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         IDLE3_SC_Retraining_State = uvm_reg_field::type_id::create("IDLE3_SC_Retraining_State");
         IDLE3_SC_Training_State = uvm_reg_field::type_id::create("IDLE3_SC_Training_State");
         IDLE3_DME_Training_State = uvm_reg_field::type_id::create("IDLE3_DME_Training_State");
         IDLE3_Training_Type = uvm_reg_field::type_id::create("IDLE3_Training_Type");
         IDLE3_Loss_of_Signals = uvm_reg_field::type_id::create("IDLE3_Loss_of_Signals");
         IDLE2_Connected_port_scrambling_descrambling_enabled = uvm_reg_field::type_id::create("IDLE2_Connected_port_scrambling_descrambling_enabled");
         IDLE2_Connected_port_transmit_emphasis_Tap_plus1_status = uvm_reg_field::type_id::create("IDLE2_Connected_port_transmit_emphasis_Tap_plus1_status");
         IDLE2_Connected_port_transmit_emphasis_Tap_minus1_status = uvm_reg_field::type_id::create("IDLE2_Connected_port_transmit_emphasis_Tap_minus1_status");
         IDLE2_Lane_number_in_connected_port = uvm_reg_field::type_id::create("IDLE2_Lane_number_in_connected_port");
         IDLE2_Received_port_width = uvm_reg_field::type_id::create("IDLE2_Received_port_width");
         IDLE2_Connected_port_lane_receiver_trained = uvm_reg_field::type_id::create("IDLE2_Connected_port_lane_receiver_trained");
         Implementation_defined = uvm_reg_field::type_id::create("Implementation_defined");
         Values_changed = uvm_reg_field::type_id::create("Values_changed");
         IDLE_information_current = uvm_reg_field::type_id::create("IDLE_information_current");
         IDLE_received = uvm_reg_field::type_id::create("IDLE_received");

         Reserved.configure(this, 6, 26, "RO", 0, 6'b000000, 1, 0, 0);
         IDLE3_SC_Retraining_State.configure(this, 2, 24, "RO", 0, 2'b00, 1, 0, 0);
         IDLE3_SC_Training_State.configure(this, 2, 22, "RO", 0, 2'b00, 1, 0, 0);
         IDLE3_DME_Training_State.configure(this, 2, 20, "RO", 0, 2'b00, 1, 0, 0);
         IDLE3_Training_Type.configure(this, 2, 18, "RO", 0, 2'b00, 1, 0, 0);
         IDLE3_Loss_of_Signals.configure(this, 1, 17, "RO", 0, 1'b0, 1, 0, 0);
         IDLE2_Connected_port_scrambling_descrambling_enabled.configure(this, 1, 16, "RO", 0, 1'b0, 1, 0, 0);
         IDLE2_Connected_port_transmit_emphasis_Tap_plus1_status.configure(this, 2, 14, "RO", 0, 2'b00, 1, 0, 0);
         IDLE2_Connected_port_transmit_emphasis_Tap_minus1_status.configure(this, 2, 12, "RO", 0, 2'b00, 1, 0, 0);
         IDLE2_Lane_number_in_connected_port.configure(this, 4, 8, "RO", 0, 4'h0, 1, 0, 0);
         IDLE2_Received_port_width.configure(this, 3, 5, "RO", 0, 3'b000, 1, 0, 0);
         IDLE2_Connected_port_lane_receiver_trained.configure(this, 1, 4, "RO", 0, 1'b0, 1, 0, 0);
         Implementation_defined.configure(this, 1, 3, "RO", 0, 1'b0, 1, 0, 0);
         Values_changed.configure(this, 1, 2, "RO", 0, 1'b1, 1, 0, 0);
         IDLE_information_current.configure(this, 1, 1, "RO", 0, 1'b0, 1, 0, 0);
         IDLE_received.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_7_Timestamp_Synchronization_Command_CSR_reg
   // 
   // Timestamp_Synchronization_Command_CSR_Register
   //--------------------------------------------------------------------

   class Port_7_Timestamp_Synchronization_Command_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_7_Timestamp_Synchronization_Command_CSR_reg)

      rand uvm_reg_field Command; 
      uvm_reg_field Reserved_2; 
      rand uvm_reg_field Send_Timestamp; 
      uvm_reg_field Reserved_1; 
      rand uvm_reg_field Send_Zero_Timestamp; 
      uvm_reg_field Reserved; 


      // Function: new
      // 
      function new(string name = "Port_7_Timestamp_Synchronization_Command_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Command = uvm_reg_field::type_id::create("Command");
         Reserved_2 = uvm_reg_field::type_id::create("Reserved_2");
         Send_Timestamp = uvm_reg_field::type_id::create("Send_Timestamp");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         Send_Zero_Timestamp = uvm_reg_field::type_id::create("Send_Zero_Timestamp");
         Reserved = uvm_reg_field::type_id::create("Reserved");

         Command.configure(this, 3, 29, "RW", 0, 3'b000, 1, 1, 0);
         Reserved_2.configure(this, 1, 28, "RO", 0, 1'b0, 1, 0, 0);
         Send_Timestamp.configure(this, 1, 27, "RW", 0, 1'b0, 1, 1, 0);
         Reserved_1.configure(this, 3, 24, "RO", 0, 3'b000, 1, 0, 0);
         Send_Zero_Timestamp.configure(this, 1, 23, "RW", 0, 1'b0, 1, 1, 0);
         Reserved.configure(this, 23, 0, "RO", 0, 23'b00000000000000000000000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Processing_Element_Features_CAR_reg
   // 
   // Element Features Register
   //--------------------------------------------------------------------

   class Processing_Element_Features_CAR_reg extends uvm_reg;
      `uvm_object_utils(Processing_Element_Features_CAR_reg)

      uvm_reg_field Extended_addressing_support; 
      uvm_reg_field Extended_features; 
      uvm_reg_field Dev16_Support; 
      uvm_reg_field CRF_Support; 
      uvm_reg_field Implementation_defined; 
      uvm_reg_field Flow_Control_Support; 
      uvm_reg_field Standard_route_table_configuration_support; 
      uvm_reg_field Extended_route_table_configuration_support; 
      uvm_reg_field Reserved_1; 
      uvm_reg_field Flow_Arbitration_Support; 
      uvm_reg_field Dev32_Support; 
      uvm_reg_field Reserved; 
      uvm_reg_field Multiport; 
      uvm_reg_field Switch; 
      uvm_reg_field Processor; 
      uvm_reg_field Memory; 
      uvm_reg_field Bridge; 


      // Function: new
      // 
      function new(string name = "Processing_Element_Features_CAR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Extended_addressing_support = uvm_reg_field::type_id::create("Extended_addressing_support");
         Extended_features = uvm_reg_field::type_id::create("Extended_features");
         Dev16_Support = uvm_reg_field::type_id::create("Dev16_Support");
         CRF_Support = uvm_reg_field::type_id::create("CRF_Support");
         Implementation_defined = uvm_reg_field::type_id::create("Implementation_defined");
         Flow_Control_Support = uvm_reg_field::type_id::create("Flow_Control_Support");
         Standard_route_table_configuration_support = uvm_reg_field::type_id::create("Standard_route_table_configuration_support");
         Extended_route_table_configuration_support = uvm_reg_field::type_id::create("Extended_route_table_configuration_support");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         Flow_Arbitration_Support = uvm_reg_field::type_id::create("Flow_Arbitration_Support");
         Dev32_Support = uvm_reg_field::type_id::create("Dev32_Support");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Multiport = uvm_reg_field::type_id::create("Multiport");
         Switch = uvm_reg_field::type_id::create("Switch");
         Processor = uvm_reg_field::type_id::create("Processor");
         Memory = uvm_reg_field::type_id::create("Memory");
         Bridge = uvm_reg_field::type_id::create("Bridge");

         Extended_addressing_support.configure(this, 3, 29, "RO", 0, 3'b000, 1, 0, 0);
         Extended_features.configure(this, 1, 28, "RO", 0, 1'b0, 1, 0, 0);
         Dev16_Support.configure(this, 1, 27, "RO", 0, 1'b0, 1, 0, 0);
         CRF_Support.configure(this, 1, 26, "RO", 0, 1'b0, 1, 0, 0);
         Implementation_defined.configure(this, 1, 25, "RO", 0, 1'b0, 1, 0, 0);
         Flow_Control_Support.configure(this, 1, 24, "RO", 0, 1'b0, 1, 0, 0);
         Standard_route_table_configuration_support.configure(this, 1, 23, "RO", 0, 1'b0, 1, 0, 0);
         Extended_route_table_configuration_support.configure(this, 1, 22, "RO", 0, 1'b0, 1, 0, 0);
         Reserved_1.configure(this, 1, 21, "RO", 0, 1'b0, 1, 0, 0);
         Flow_Arbitration_Support.configure(this, 1, 20, "RO", 0, 1'b0, 1, 0, 0);
         Dev32_Support.configure(this, 1, 19, "RO", 0, 1'b0, 1, 0, 0);
         Reserved.configure(this, 14, 5, "RO", 0, 14'b00000000000000, 1, 0, 0);
         Multiport.configure(this, 1, 4, "RO", 0, 1'b0, 1, 0, 0);
         Switch.configure(this, 1, 3, "RO", 0, 1'b0, 1, 0, 0);
         Processor.configure(this, 1, 2, "RO", 0, 1'b0, 1, 0, 0);
         Memory.configure(this, 1, 1, "RO", 0, 1'b0, 1, 0, 0);
         Bridge.configure(this, 1, 0, "RO", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass

   //--------------------------------------------------------------------
   // Class: Port_10_Timestamp_1_LSW_CSR_reg
   // 
   // Timestamp_1_LSW_Register
   //--------------------------------------------------------------------

   class Port_10_Timestamp_1_LSW_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_10_Timestamp_1_LSW_CSR_reg)

      uvm_reg_field LSW_Bits; 


      // Function: new
      // 
      function new(string name = "Port_10_Timestamp_1_LSW_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         LSW_Bits = uvm_reg_field::type_id::create("LSW_Bits");

         LSW_Bits.configure(this, 32, 0, "RO", 0, 32'h00000000, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_8_Timestamp_1_MSW_CSR_reg
   // 
   // Timestamp_1_MSW_Register
   //--------------------------------------------------------------------

   class Port_8_Timestamp_1_MSW_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_8_Timestamp_1_MSW_CSR_reg)

      uvm_reg_field MSW_Bits; 


      // Function: new
      // 
      function new(string name = "Port_8_Timestamp_1_MSW_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         MSW_Bits = uvm_reg_field::type_id::create("MSW_Bits");

         MSW_Bits.configure(this, 32, 0, "RO", 0, 32'h00000000, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_13_VoQ_Control_Status_Register_reg
   // 
   // VoQ_Control_Status_Register
   //--------------------------------------------------------------------

   class Port_13_VoQ_Control_Status_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_13_VoQ_Control_Status_Register_reg)

      rand uvm_reg_field RX_Port_Group_Size; 
      rand uvm_reg_field TX_Port_Group_Size; 
      uvm_reg_field Reserved_1; 
      rand uvm_reg_field Port_Group_Size_6_Supported; 
      rand uvm_reg_field Port_Group_Size_5_Supported; 
      rand uvm_reg_field Port_Group_Size_4_Supported; 
      rand uvm_reg_field Port_Group_Size_3_Supported; 
      rand uvm_reg_field Port_Group_Size_2_Supported; 
      rand uvm_reg_field Port_Group_Size_1_Supported; 
      rand uvm_reg_field Port_Group_Size_0_Supported; 
      rand uvm_reg_field Enable_VoQ_Backpressure_Per_VC_Transmission; 
      rand uvm_reg_field Port_XOFF; 
      rand uvm_reg_field Enable_VoQ_Symbol_Participation; 
      rand uvm_reg_field Enable_VoQ_Symbol_Genreation; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field VoQ_Backpressure_Per_VC_Supported; 
      rand uvm_reg_field VoQ_Backpressure_Symbol_Reception_Supported; 
      rand uvm_reg_field VoQ_Backpressure_Symbol_Generation_Supported; 


      // Function: new
      // 
      function new(string name = "Port_13_VoQ_Control_Status_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         RX_Port_Group_Size = uvm_reg_field::type_id::create("RX_Port_Group_Size");
         TX_Port_Group_Size = uvm_reg_field::type_id::create("TX_Port_Group_Size");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         Port_Group_Size_6_Supported = uvm_reg_field::type_id::create("Port_Group_Size_6_Supported");
         Port_Group_Size_5_Supported = uvm_reg_field::type_id::create("Port_Group_Size_5_Supported");
         Port_Group_Size_4_Supported = uvm_reg_field::type_id::create("Port_Group_Size_4_Supported");
         Port_Group_Size_3_Supported = uvm_reg_field::type_id::create("Port_Group_Size_3_Supported");
         Port_Group_Size_2_Supported = uvm_reg_field::type_id::create("Port_Group_Size_2_Supported");
         Port_Group_Size_1_Supported = uvm_reg_field::type_id::create("Port_Group_Size_1_Supported");
         Port_Group_Size_0_Supported = uvm_reg_field::type_id::create("Port_Group_Size_0_Supported");
         Enable_VoQ_Backpressure_Per_VC_Transmission = uvm_reg_field::type_id::create("Enable_VoQ_Backpressure_Per_VC_Transmission");
         Port_XOFF = uvm_reg_field::type_id::create("Port_XOFF");
         Enable_VoQ_Symbol_Participation = uvm_reg_field::type_id::create("Enable_VoQ_Symbol_Participation");
         Enable_VoQ_Symbol_Genreation = uvm_reg_field::type_id::create("Enable_VoQ_Symbol_Genreation");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         VoQ_Backpressure_Per_VC_Supported = uvm_reg_field::type_id::create("VoQ_Backpressure_Per_VC_Supported");
         VoQ_Backpressure_Symbol_Reception_Supported = uvm_reg_field::type_id::create("VoQ_Backpressure_Symbol_Reception_Supported");
         VoQ_Backpressure_Symbol_Generation_Supported = uvm_reg_field::type_id::create("VoQ_Backpressure_Symbol_Generation_Supported");

         RX_Port_Group_Size.configure(this, 3, 29, "RW", 0, 3'b000, 1, 1, 0);
         TX_Port_Group_Size.configure(this, 3, 26, "RW", 0, 3'b000, 1, 1, 0);
         Reserved_1.configure(this, 7, 19, "RO", 0, 7'b0000000, 1, 0, 0);
         Port_Group_Size_6_Supported.configure(this, 1, 18, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_5_Supported.configure(this, 1, 17, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_4_Supported.configure(this, 1, 16, "RW", 0, 1'b1, 1, 1, 0);
         Port_Group_Size_3_Supported.configure(this, 1, 15, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_2_Supported.configure(this, 1, 14, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_1_Supported.configure(this, 1, 13, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_0_Supported.configure(this, 1, 12, "RW", 0, 1'b1, 1, 1, 0);
         Enable_VoQ_Backpressure_Per_VC_Transmission.configure(this, 1, 11, "RW", 0, 1'b0, 1, 1, 0);
         Port_XOFF.configure(this, 1, 10, "RW", 0, 1'b0, 1, 1, 0);
         Enable_VoQ_Symbol_Participation.configure(this, 1, 9, "RW", 0, 1'b0, 1, 1, 0);
         Enable_VoQ_Symbol_Genreation.configure(this, 1, 8, "RW", 0, 1'b0, 1, 1, 0);
         Reserved.configure(this, 5, 3, "RO", 0, 5'b00000, 1, 0, 0);
         VoQ_Backpressure_Per_VC_Supported.configure(this, 1, 2, "RW", 0, 1'b0, 1, 1, 0);
         VoQ_Backpressure_Symbol_Reception_Supported.configure(this, 1, 1, "RW", 0, 1'b0, 1, 1, 0);
         VoQ_Backpressure_Symbol_Generation_Supported.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_Write_Dev32_Target_DeviceID_CSR_reg
   // 
   // Port_Write_Dev32_Target_DeviceID_CSR_Register
   //--------------------------------------------------------------------

   class Port_Write_Dev32_Target_DeviceID_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_Write_Dev32_Target_DeviceID_CSR_reg)

      rand uvm_reg_field Dev32_DestID; 


      // Function: new
      // 
      function new(string name = "Port_Write_Dev32_Target_DeviceID_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Dev32_DestID = uvm_reg_field::type_id::create("Dev32_DestID");

         Dev32_DestID.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: VC_Register_Block_Header_reg
   // 
   // Block Header Register
   //--------------------------------------------------------------------

   class VC_Register_Block_Header_reg extends uvm_reg;
      `uvm_object_utils(VC_Register_Block_Header_reg)

      uvm_reg_field EF_ID; 
      uvm_reg_field EF_PTR; 


      // Function: new
      // 
      function new(string name = "VC_Register_Block_Header_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         EF_ID = uvm_reg_field::type_id::create("EF_ID");
         EF_PTR = uvm_reg_field::type_id::create("EF_PTR");

         EF_ID.configure(this, 16, 16, "RO", 0, 16'h000a, 1, 0, 1);
         EF_PTR.configure(this, 16, 0, "RO", 0, 16'h1600, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_14_Timestamp_Synchronization_Command_CSR_reg
   // 
   // Timestamp_Synchronization_Command_CSR_Register
   //--------------------------------------------------------------------

   class Port_14_Timestamp_Synchronization_Command_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_14_Timestamp_Synchronization_Command_CSR_reg)

      rand uvm_reg_field Command; 
      uvm_reg_field Reserved_2; 
      rand uvm_reg_field Send_Timestamp; 
      uvm_reg_field Reserved_1; 
      rand uvm_reg_field Send_Zero_Timestamp; 
      uvm_reg_field Reserved; 


      // Function: new
      // 
      function new(string name = "Port_14_Timestamp_Synchronization_Command_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Command = uvm_reg_field::type_id::create("Command");
         Reserved_2 = uvm_reg_field::type_id::create("Reserved_2");
         Send_Timestamp = uvm_reg_field::type_id::create("Send_Timestamp");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         Send_Zero_Timestamp = uvm_reg_field::type_id::create("Send_Zero_Timestamp");
         Reserved = uvm_reg_field::type_id::create("Reserved");

         Command.configure(this, 3, 29, "RW", 0, 3'b000, 1, 1, 0);
         Reserved_2.configure(this, 1, 28, "RO", 0, 1'b0, 1, 0, 0);
         Send_Timestamp.configure(this, 1, 27, "RW", 0, 1'b0, 1, 1, 0);
         Reserved_1.configure(this, 3, 24, "RO", 0, 3'b000, 1, 0, 0);
         Send_Zero_Timestamp.configure(this, 1, 23, "RW", 0, 1'b0, 1, 1, 0);
         Reserved.configure(this, 23, 0, "RO", 0, 23'b00000000000000000000000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_13_Timestamp_0_LSW_CSR_reg
   // 
   // Timestamp_0_LSW_Register
   //--------------------------------------------------------------------

   class Port_13_Timestamp_0_LSW_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_13_Timestamp_0_LSW_CSR_reg)

      uvm_reg_field LSW_Bits; 


      // Function: new
      // 
      function new(string name = "Port_13_Timestamp_0_LSW_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         LSW_Bits = uvm_reg_field::type_id::create("LSW_Bits");

         LSW_Bits.configure(this, 32, 0, "RO", 0, 32'h00000000, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_Response_Timeout_Control_CSR_reg
   // 
   // Response Timeout Register
   //--------------------------------------------------------------------

   class Port_Response_Timeout_Control_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_Response_Timeout_Control_CSR_reg)

      uvm_reg_field Reserved; 
      rand uvm_reg_field timeout_value; 


      // Function: new
      // 
      function new(string name = "Port_Response_Timeout_Control_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         timeout_value = uvm_reg_field::type_id::create("timeout_value");

         Reserved.configure(this, 8, 24, "RO", 0, 8'h00, 1, 0, 1);
         timeout_value.configure(this, 24, 0, "RW", 0, 24'hffffff, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Lane_0_Status_1_CSR_reg
   // 
   // Status 1 Register
   //--------------------------------------------------------------------

   class Lane_0_Status_1_CSR_reg extends uvm_reg;
      `uvm_object_utils(Lane_0_Status_1_CSR_reg)

      uvm_reg_field Reserved; 
      uvm_reg_field IDLE3_SC_Retraining_State; 
      uvm_reg_field IDLE3_SC_Training_State; 
      uvm_reg_field IDLE3_DME_Training_State; 
      uvm_reg_field IDLE3_Training_Type; 
      uvm_reg_field IDLE3_Loss_of_Signals; 
      uvm_reg_field IDLE2_Connected_port_scrambling_descrambling_enabled; 
      uvm_reg_field IDLE2_Connected_port_transmit_emphasis_Tap_plus1_status; 
      uvm_reg_field IDLE2_Connected_port_transmit_emphasis_Tap_minus1_status; 
      uvm_reg_field IDLE2_Lane_number_in_connected_port; 
      uvm_reg_field IDLE2_Received_port_width; 
      uvm_reg_field IDLE2_Connected_port_lane_receiver_trained; 
      uvm_reg_field Implementation_defined; 
      uvm_reg_field Values_changed; 
      uvm_reg_field IDLE_information_current; 
      rand uvm_reg_field IDLE_received; 


      // Function: new
      // 
      function new(string name = "Lane_0_Status_1_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         IDLE3_SC_Retraining_State = uvm_reg_field::type_id::create("IDLE3_SC_Retraining_State");
         IDLE3_SC_Training_State = uvm_reg_field::type_id::create("IDLE3_SC_Training_State");
         IDLE3_DME_Training_State = uvm_reg_field::type_id::create("IDLE3_DME_Training_State");
         IDLE3_Training_Type = uvm_reg_field::type_id::create("IDLE3_Training_Type");
         IDLE3_Loss_of_Signals = uvm_reg_field::type_id::create("IDLE3_Loss_of_Signals");
         IDLE2_Connected_port_scrambling_descrambling_enabled = uvm_reg_field::type_id::create("IDLE2_Connected_port_scrambling_descrambling_enabled");
         IDLE2_Connected_port_transmit_emphasis_Tap_plus1_status = uvm_reg_field::type_id::create("IDLE2_Connected_port_transmit_emphasis_Tap_plus1_status");
         IDLE2_Connected_port_transmit_emphasis_Tap_minus1_status = uvm_reg_field::type_id::create("IDLE2_Connected_port_transmit_emphasis_Tap_minus1_status");
         IDLE2_Lane_number_in_connected_port = uvm_reg_field::type_id::create("IDLE2_Lane_number_in_connected_port");
         IDLE2_Received_port_width = uvm_reg_field::type_id::create("IDLE2_Received_port_width");
         IDLE2_Connected_port_lane_receiver_trained = uvm_reg_field::type_id::create("IDLE2_Connected_port_lane_receiver_trained");
         Implementation_defined = uvm_reg_field::type_id::create("Implementation_defined");
         Values_changed = uvm_reg_field::type_id::create("Values_changed");
         IDLE_information_current = uvm_reg_field::type_id::create("IDLE_information_current");
         IDLE_received = uvm_reg_field::type_id::create("IDLE_received");

         Reserved.configure(this, 6, 26, "RO", 0, 6'b000000, 1, 0, 0);
         IDLE3_SC_Retraining_State.configure(this, 2, 24, "RO", 0, 2'b00, 1, 0, 0);
         IDLE3_SC_Training_State.configure(this, 2, 22, "RO", 0, 2'b00, 1, 0, 0);
         IDLE3_DME_Training_State.configure(this, 2, 20, "RO", 0, 2'b00, 1, 0, 0);
         IDLE3_Training_Type.configure(this, 2, 18, "RO", 0, 2'b00, 1, 0, 0);
         IDLE3_Loss_of_Signals.configure(this, 1, 17, "RO", 0, 1'b0, 1, 0, 0);
         IDLE2_Connected_port_scrambling_descrambling_enabled.configure(this, 1, 16, "RO", 0, 1'b0, 1, 0, 0);
         IDLE2_Connected_port_transmit_emphasis_Tap_plus1_status.configure(this, 2, 14, "RO", 0, 2'b00, 1, 0, 0);
         IDLE2_Connected_port_transmit_emphasis_Tap_minus1_status.configure(this, 2, 12, "RO", 0, 2'b00, 1, 0, 0);
         IDLE2_Lane_number_in_connected_port.configure(this, 4, 8, "RO", 0, 4'h0, 1, 0, 0);
         IDLE2_Received_port_width.configure(this, 3, 5, "RO", 0, 3'b000, 1, 0, 0);
         IDLE2_Connected_port_lane_receiver_trained.configure(this, 1, 4, "RO", 0, 1'b0, 1, 0, 0);
         Implementation_defined.configure(this, 1, 3, "RO", 0, 1'b0, 1, 0, 0);
         Values_changed.configure(this, 1, 2, "RO", 0, 1'b0, 1, 0, 0);
         IDLE_information_current.configure(this, 1, 1, "RO", 0, 1'b0, 1, 0, 0);
         IDLE_received.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_2_Packet_Capture_1_CSR_reg
   // 
   // Packet Capture 1 Register
   //--------------------------------------------------------------------

   class Port_2_Packet_Capture_1_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_2_Packet_Capture_1_CSR_reg)

      rand uvm_reg_field Capture1; 


      // Function: new
      // 
      function new(string name = "Port_2_Packet_Capture_1_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture1 = uvm_reg_field::type_id::create("Capture1");

         Capture1.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass

   //--------------------------------------------------------------------
   // Class: Port_5_Link_Timers_Control_3_CSR_reg
   // 
   // Link_Timers_Control_3_Register
   //--------------------------------------------------------------------

   class Port_5_Link_Timers_Control_3_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_5_Link_Timers_Control_3_CSR_reg)

      rand uvm_reg_field Keep_alive_Transmission_Interval; 
      rand uvm_reg_field Keep_alive_Transmission_Period; 
      rand uvm_reg_field Receive_Width_Command_Timeout; 
      rand uvm_reg_field Transmit_Width_Command_Timeout; 


      // Function: new
      // 
      function new(string name = "Port_5_Link_Timers_Control_3_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Keep_alive_Transmission_Interval = uvm_reg_field::type_id::create("Keep_alive_Transmission_Interval");
         Keep_alive_Transmission_Period = uvm_reg_field::type_id::create("Keep_alive_Transmission_Period");
         Receive_Width_Command_Timeout = uvm_reg_field::type_id::create("Receive_Width_Command_Timeout");
         Transmit_Width_Command_Timeout = uvm_reg_field::type_id::create("Transmit_Width_Command_Timeout");

         Keep_alive_Transmission_Interval.configure(this, 10, 22, "RW", 0, 10'b1111111111, 1, 1, 0);
         Keep_alive_Transmission_Period.configure(this, 6, 16, "RW", 0, 6'b000001, 1, 1, 0);
         Receive_Width_Command_Timeout.configure(this, 8, 8, "RW", 0, 8'h40, 1, 1, 1);
         Transmit_Width_Command_Timeout.configure(this, 8, 0, "RW", 0, 8'hff, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Lane_0_Status_2_CSR_reg
   // 
   // Status 2 Register
   //--------------------------------------------------------------------

   class Lane_0_Status_2_CSR_reg extends uvm_reg;
      `uvm_object_utils(Lane_0_Status_2_CSR_reg)

      uvm_reg_field Reserved; 
      uvm_reg_field LP_Change_Receiver_Width_Command_Negative_Acknowlege; 
      uvm_reg_field LP_Change_Receiver_Width_Command_Acknowlege; 
      uvm_reg_field LP_Change_Receiver_Width_Command; 
      uvm_reg_field LP_Lane_Trained; 
      uvm_reg_field LP_Receive_Lane_Ready; 
      uvm_reg_field LP_Receive_Lanes_Ready; 
      uvm_reg_field LP_Receive_Width; 
      uvm_reg_field LP_Transmit_1x_Mode; 
      uvm_reg_field LP_Port_Intialized; 
      uvm_reg_field LP_Asymmetric_mode_Enabled; 
      uvm_reg_field LP_Retraining_Enabled; 
      uvm_reg_field LP_Remort_Training_Support; 
      uvm_reg_field LP_Lane_Number; 
      uvm_reg_field LP_Port_Number; 


      // Function: new
      // 
      function new(string name = "Lane_0_Status_2_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         LP_Change_Receiver_Width_Command_Negative_Acknowlege = uvm_reg_field::type_id::create("LP_Change_Receiver_Width_Command_Negative_Acknowlege");
         LP_Change_Receiver_Width_Command_Acknowlege = uvm_reg_field::type_id::create("LP_Change_Receiver_Width_Command_Acknowlege");
         LP_Change_Receiver_Width_Command = uvm_reg_field::type_id::create("LP_Change_Receiver_Width_Command");
         LP_Lane_Trained = uvm_reg_field::type_id::create("LP_Lane_Trained");
         LP_Receive_Lane_Ready = uvm_reg_field::type_id::create("LP_Receive_Lane_Ready");
         LP_Receive_Lanes_Ready = uvm_reg_field::type_id::create("LP_Receive_Lanes_Ready");
         LP_Receive_Width = uvm_reg_field::type_id::create("LP_Receive_Width");
         LP_Transmit_1x_Mode = uvm_reg_field::type_id::create("LP_Transmit_1x_Mode");
         LP_Port_Intialized = uvm_reg_field::type_id::create("LP_Port_Intialized");
         LP_Asymmetric_mode_Enabled = uvm_reg_field::type_id::create("LP_Asymmetric_mode_Enabled");
         LP_Retraining_Enabled = uvm_reg_field::type_id::create("LP_Retraining_Enabled");
         LP_Remort_Training_Support = uvm_reg_field::type_id::create("LP_Remort_Training_Support");
         LP_Lane_Number = uvm_reg_field::type_id::create("LP_Lane_Number");
         LP_Port_Number = uvm_reg_field::type_id::create("LP_Port_Number");

         Reserved.configure(this, 2, 30, "RO", 0, 2'b00, 1, 0, 0);
         LP_Change_Receiver_Width_Command_Negative_Acknowlege.configure(this, 1, 29, "RO", 0, 1'b0, 1, 0, 0);
         LP_Change_Receiver_Width_Command_Acknowlege.configure(this, 1, 28, "RO", 0, 1'b0, 1, 0, 0);
         LP_Change_Receiver_Width_Command.configure(this, 3, 25, "RO", 0, 3'b000, 1, 0, 0);
         LP_Lane_Trained.configure(this, 1, 24, "RO", 0, 1'b0, 1, 0, 0);
         LP_Receive_Lane_Ready.configure(this, 1, 23, "RO", 0, 1'b0, 1, 0, 0);
         LP_Receive_Lanes_Ready.configure(this, 3, 20, "RO", 0, 3'b000, 1, 0, 0);
         LP_Receive_Width.configure(this, 3, 17, "RO", 0, 3'b000, 1, 0, 0);
         LP_Transmit_1x_Mode.configure(this, 1, 16, "RO", 0, 1'b0, 1, 0, 0);
         LP_Port_Intialized.configure(this, 1, 15, "RO", 0, 1'b0, 1, 0, 0);
         LP_Asymmetric_mode_Enabled.configure(this, 1, 14, "RO", 0, 1'b0, 1, 0, 0);
         LP_Retraining_Enabled.configure(this, 1, 13, "RO", 0, 1'b0, 1, 0, 0);
         LP_Remort_Training_Support.configure(this, 1, 12, "RO", 0, 1'b0, 1, 0, 0);
         LP_Lane_Number.configure(this, 4, 8, "RO", 0, 4'h0, 1, 0, 0);
         LP_Port_Number.configure(this, 8, 0, "RO", 0, 8'h00, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_13_Timestamp_1_LSW_CSR_reg
   // 
   // Timestamp_1_LSW_Register
   //--------------------------------------------------------------------

   class Port_13_Timestamp_1_LSW_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_13_Timestamp_1_LSW_CSR_reg)

      uvm_reg_field LSW_Bits; 


      // Function: new
      // 
      function new(string name = "Port_13_Timestamp_1_LSW_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         LSW_Bits = uvm_reg_field::type_id::create("LSW_Bits");

         LSW_Bits.configure(this, 32, 0, "RO", 0, 32'h00000000, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Lane_9_Status_2_CSR_reg
   // 
   // Status 2 Register
   //--------------------------------------------------------------------

   class Lane_9_Status_2_CSR_reg extends uvm_reg;
      `uvm_object_utils(Lane_9_Status_2_CSR_reg)

      uvm_reg_field Reserved; 
      uvm_reg_field LP_Change_Receiver_Width_Command_Negative_Acknowlege; 
      uvm_reg_field LP_Change_Receiver_Width_Command_Acknowlege; 
      uvm_reg_field LP_Change_Receiver_Width_Command; 
      uvm_reg_field LP_Lane_Trained; 
      uvm_reg_field LP_Receive_Lane_Ready; 
      uvm_reg_field LP_Receive_Lanes_Ready; 
      uvm_reg_field LP_Receive_Width; 
      uvm_reg_field LP_Transmit_1x_Mode; 
      uvm_reg_field LP_Port_Intialized; 
      uvm_reg_field LP_Asymmetric_mode_Enabled; 
      uvm_reg_field LP_Retraining_Enabled; 
      uvm_reg_field LP_Remort_Training_Support; 
      uvm_reg_field LP_Lane_Number; 
      uvm_reg_field LP_Port_Number; 


      // Function: new
      // 
      function new(string name = "Lane_9_Status_2_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         LP_Change_Receiver_Width_Command_Negative_Acknowlege = uvm_reg_field::type_id::create("LP_Change_Receiver_Width_Command_Negative_Acknowlege");
         LP_Change_Receiver_Width_Command_Acknowlege = uvm_reg_field::type_id::create("LP_Change_Receiver_Width_Command_Acknowlege");
         LP_Change_Receiver_Width_Command = uvm_reg_field::type_id::create("LP_Change_Receiver_Width_Command");
         LP_Lane_Trained = uvm_reg_field::type_id::create("LP_Lane_Trained");
         LP_Receive_Lane_Ready = uvm_reg_field::type_id::create("LP_Receive_Lane_Ready");
         LP_Receive_Lanes_Ready = uvm_reg_field::type_id::create("LP_Receive_Lanes_Ready");
         LP_Receive_Width = uvm_reg_field::type_id::create("LP_Receive_Width");
         LP_Transmit_1x_Mode = uvm_reg_field::type_id::create("LP_Transmit_1x_Mode");
         LP_Port_Intialized = uvm_reg_field::type_id::create("LP_Port_Intialized");
         LP_Asymmetric_mode_Enabled = uvm_reg_field::type_id::create("LP_Asymmetric_mode_Enabled");
         LP_Retraining_Enabled = uvm_reg_field::type_id::create("LP_Retraining_Enabled");
         LP_Remort_Training_Support = uvm_reg_field::type_id::create("LP_Remort_Training_Support");
         LP_Lane_Number = uvm_reg_field::type_id::create("LP_Lane_Number");
         LP_Port_Number = uvm_reg_field::type_id::create("LP_Port_Number");

         Reserved.configure(this, 2, 30, "RO", 0, 2'b00, 1, 0, 0);
         LP_Change_Receiver_Width_Command_Negative_Acknowlege.configure(this, 1, 29, "RO", 0, 1'b0, 1, 0, 0);
         LP_Change_Receiver_Width_Command_Acknowlege.configure(this, 1, 28, "RO", 0, 1'b0, 1, 0, 0);
         LP_Change_Receiver_Width_Command.configure(this, 3, 25, "RO", 0, 3'b000, 1, 0, 0);
         LP_Lane_Trained.configure(this, 1, 24, "RO", 0, 1'b0, 1, 0, 0);
         LP_Receive_Lane_Ready.configure(this, 1, 23, "RO", 0, 1'b0, 1, 0, 0);
         LP_Receive_Lanes_Ready.configure(this, 3, 20, "RO", 0, 3'b000, 1, 0, 0);
         LP_Receive_Width.configure(this, 3, 17, "RO", 0, 3'b000, 1, 0, 0);
         LP_Transmit_1x_Mode.configure(this, 1, 16, "RO", 0, 1'b0, 1, 0, 0);
         LP_Port_Intialized.configure(this, 1, 15, "RO", 0, 1'b0, 1, 0, 0);
         LP_Asymmetric_mode_Enabled.configure(this, 1, 14, "RO", 0, 1'b0, 1, 0, 0);
         LP_Retraining_Enabled.configure(this, 1, 13, "RO", 0, 1'b0, 1, 0, 0);
         LP_Remort_Training_Support.configure(this, 1, 12, "RO", 0, 1'b0, 1, 0, 0);
         LP_Lane_Number.configure(this, 4, 8, "RO", 0, 4'h0, 1, 0, 0);
         LP_Port_Number.configure(this, 8, 0, "RO", 0, 8'h00, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_14_Outbound_ackID_CSR_reg
   // 
   // Outbound_Register
   //--------------------------------------------------------------------

   class Port_14_Outbound_ackID_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_14_Outbound_ackID_CSR_reg)

      rand uvm_reg_field Outbound_ackID; 
      uvm_reg_field Outstanding_ackID; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Clr_outstanding_ackID; 


      // Function: new
      // 
      function new(string name = "Port_14_Outbound_ackID_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Outbound_ackID = uvm_reg_field::type_id::create("Outbound_ackID");
         Outstanding_ackID = uvm_reg_field::type_id::create("Outstanding_ackID");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Clr_outstanding_ackID = uvm_reg_field::type_id::create("Clr_outstanding_ackID");

         Outbound_ackID.configure(this, 12, 20, "RW", 0, 12'h000, 1, 1, 0);
         Outstanding_ackID.configure(this, 12, 8, "RW", 0, 12'h000, 1, 1, 0);
         Reserved.configure(this, 7, 1, "RO", 0, 7'b0000000, 1, 0, 0);
         Clr_outstanding_ackID.configure(this, 1, 0, "W1C", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_1_Timestamp_Synchronization_Status_CSR_reg
   // 
   // Timestamp_Synchronization_Status_CSR_Register
   //--------------------------------------------------------------------

   class Port_1_Timestamp_Synchronization_Status_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_1_Timestamp_Synchronization_Status_CSR_reg)

      uvm_reg_field Delay; 
      uvm_reg_field Reserved; 
      uvm_reg_field Response_Valid; 


      // Function: new
      // 
      function new(string name = "Port_1_Timestamp_Synchronization_Status_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Delay = uvm_reg_field::type_id::create("Delay");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Response_Valid = uvm_reg_field::type_id::create("Response_Valid");

         Delay.configure(this, 10, 22, "RO", 0, 10'b0000000000, 1, 0, 0);
         Reserved.configure(this, 21, 1, "RO", 0, 21'b000000000000000000000, 1, 0, 0);
         Response_Valid.configure(this, 1, 0, "RO", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_1_Link_Timers_Control_2_CSR_reg
   // 
   // Link_Timers_Control_2_Register
   //--------------------------------------------------------------------

   class Port_1_Link_Timers_Control_2_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_1_Link_Timers_Control_2_CSR_reg)

      uvm_reg_field Reserved; 
      rand uvm_reg_field Recovery_Timer; 
      rand uvm_reg_field Discovery_Completion_Timer; 
      rand uvm_reg_field Retraining_Completion_Timer; 


      // Function: new
      // 
      function new(string name = "Port_1_Link_Timers_Control_2_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Recovery_Timer = uvm_reg_field::type_id::create("Recovery_Timer");
         Discovery_Completion_Timer = uvm_reg_field::type_id::create("Discovery_Completion_Timer");
         Retraining_Completion_Timer = uvm_reg_field::type_id::create("Retraining_Completion_Timer");

         Reserved.configure(this, 8, 24, "RO", 0, 8'h00, 1, 0, 1);
         Recovery_Timer.configure(this, 8, 16, "RW", 0, 8'hff, 1, 1, 1);
         Discovery_Completion_Timer.configure(this, 8, 8, "RW", 0, 8'h00, 1, 1, 1);
         Retraining_Completion_Timer.configure(this, 8, 0, "RW", 0, 8'hfe, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_5_Timestamp_1_MSW_CSR_reg
   // 
   // Timestamp_1_MSW_Register
   //--------------------------------------------------------------------

   class Port_5_Timestamp_1_MSW_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_5_Timestamp_1_MSW_CSR_reg)

      uvm_reg_field MSW_Bits; 


      // Function: new
      // 
      function new(string name = "Port_5_Timestamp_1_MSW_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         MSW_Bits = uvm_reg_field::type_id::create("MSW_Bits");

         MSW_Bits.configure(this, 32, 0, "RO", 0, 32'h00000000, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_1_Control_CSR_reg
   // 
   // Control Register
   //--------------------------------------------------------------------

   class Port_1_Control_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_1_Control_CSR_reg)

      uvm_reg_field Port_Type; 
      rand uvm_reg_field Port_Lockout; 
      rand uvm_reg_field Drop_Packet_Enable; 
      rand uvm_reg_field Stop_on_Port_Failed_encountered_Enable; 
      rand uvm_reg_field Implementation_defined; 
      uvm_reg_field Extended_Port_Width_Support; 
      rand uvm_reg_field Extended_Port_Width_Override; 
      rand uvm_reg_field Flow_Arbitration_Participant; 
      rand uvm_reg_field Enumeration_Boundary; 
      rand uvm_reg_field Flow_Control_Participant; 
      rand uvm_reg_field Multicast_event_Participant; 
      rand uvm_reg_field Error_Checking_Disable; 
      rand uvm_reg_field Input_Port_Enable; 
      rand uvm_reg_field Output_Port_Enable; 
      rand uvm_reg_field Port_Disable; 
      uvm_reg_field Port_Width_Override; 
      rand uvm_reg_field Initialized_Port_Width; 
      uvm_reg_field Port_Width_Support; 


      // Function: new
      // 
      function new(string name = "Port_1_Control_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Port_Type = uvm_reg_field::type_id::create("Port_Type");
         Port_Lockout = uvm_reg_field::type_id::create("Port_Lockout");
         Drop_Packet_Enable = uvm_reg_field::type_id::create("Drop_Packet_Enable");
         Stop_on_Port_Failed_encountered_Enable = uvm_reg_field::type_id::create("Stop_on_Port_Failed_encountered_Enable");
         Implementation_defined = uvm_reg_field::type_id::create("Implementation_defined");
         Extended_Port_Width_Support = uvm_reg_field::type_id::create("Extended_Port_Width_Support");
         Extended_Port_Width_Override = uvm_reg_field::type_id::create("Extended_Port_Width_Override");
         Flow_Arbitration_Participant = uvm_reg_field::type_id::create("Flow_Arbitration_Participant");
         Enumeration_Boundary = uvm_reg_field::type_id::create("Enumeration_Boundary");
         Flow_Control_Participant = uvm_reg_field::type_id::create("Flow_Control_Participant");
         Multicast_event_Participant = uvm_reg_field::type_id::create("Multicast_event_Participant");
         Error_Checking_Disable = uvm_reg_field::type_id::create("Error_Checking_Disable");
         Input_Port_Enable = uvm_reg_field::type_id::create("Input_Port_Enable");
         Output_Port_Enable = uvm_reg_field::type_id::create("Output_Port_Enable");
         Port_Disable = uvm_reg_field::type_id::create("Port_Disable");
         Port_Width_Override = uvm_reg_field::type_id::create("Port_Width_Override");
         Initialized_Port_Width = uvm_reg_field::type_id::create("Initialized_Port_Width");
         Port_Width_Support = uvm_reg_field::type_id::create("Port_Width_Support");

         Port_Type.configure(this, 1, 31, "RO", 0, 1'b0, 1, 0, 0);
         Port_Lockout.configure(this, 1, 30, "RW", 0, 1'b0, 1, 1, 0);
         Drop_Packet_Enable.configure(this, 1, 29, "RW", 0, 1'b0, 1, 1, 0);
         Stop_on_Port_Failed_encountered_Enable.configure(this, 1, 28, "RW", 0, 1'b0, 1, 1, 0);
         Implementation_defined.configure(this, 8, 20, "RW", 0, 8'h00, 1, 1, 0);
         Extended_Port_Width_Support.configure(this, 2, 18, "RO", 0, 2'b00, 1, 0, 0);
         Extended_Port_Width_Override.configure(this, 2, 16, "RW", 0, 2'b00, 1, 1, 0);
         Flow_Arbitration_Participant.configure(this, 1, 15, "RW", 0, 1'b0, 1, 1, 0);
         Enumeration_Boundary.configure(this, 1, 14, "RW", 0, 1'b0, 1, 1, 0);
         Flow_Control_Participant.configure(this, 1, 13, "RW", 0, 1'b0, 1, 1, 0);
         Multicast_event_Participant.configure(this, 1, 12, "RW", 0, 1'b0, 1, 1, 0);
         Error_Checking_Disable.configure(this, 1, 11, "RW", 0, 1'b0, 1, 1, 0);
         Input_Port_Enable.configure(this, 1, 10, "RW", 0, 1'b0, 1, 1, 0);
         Output_Port_Enable.configure(this, 1, 9, "RW", 0, 1'b0, 1, 1, 0);
         Port_Disable.configure(this, 1, 8, "RW", 0, 1'b0, 1, 1, 0);
         Port_Width_Override.configure(this, 3, 5, "RO", 0, 3'b000, 1, 0, 0);
         Initialized_Port_Width.configure(this, 3, 2, "RW", 0, 3'b000, 1, 1, 0);
         Port_Width_Support.configure(this, 2, 0, "RO", 0, 2'b00, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_14_Error_Rate_CSR_reg
   // 
   // Error Rate Register
   //--------------------------------------------------------------------

   class Port_14_Error_Rate_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_14_Error_Rate_CSR_reg)

      rand uvm_reg_field Error_Rate_Counter; 
      rand uvm_reg_field Peak_Error_Rate; 
      rand uvm_reg_field Error_Rate_Recovery; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Error_Rate_Bias; 


      // Function: new
      // 
      function new(string name = "Port_14_Error_Rate_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Error_Rate_Counter = uvm_reg_field::type_id::create("Error_Rate_Counter");
         Peak_Error_Rate = uvm_reg_field::type_id::create("Peak_Error_Rate");
         Error_Rate_Recovery = uvm_reg_field::type_id::create("Error_Rate_Recovery");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Error_Rate_Bias = uvm_reg_field::type_id::create("Error_Rate_Bias");

         Error_Rate_Counter.configure(this, 8, 24, "RW", 0, 8'h00, 1, 1, 1);
         Peak_Error_Rate.configure(this, 8, 16, "RW", 0, 8'h00, 1, 1, 1);
         Error_Rate_Recovery.configure(this, 2, 14, "RW", 0, 2'b00, 1, 1, 0);
         Reserved.configure(this, 6, 8, "RO", 0, 6'b000000, 1, 0, 0);
         Error_Rate_Bias.configure(this, 8, 0, "RW", 0, 8'h80, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_11_Timestamp_Synchronization_Command_CSR_reg
   // 
   // Timestamp_Synchronization_Command_CSR_Register
   //--------------------------------------------------------------------

   class Port_11_Timestamp_Synchronization_Command_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_11_Timestamp_Synchronization_Command_CSR_reg)

      rand uvm_reg_field Command; 
      uvm_reg_field Reserved_2; 
      rand uvm_reg_field Send_Timestamp; 
      uvm_reg_field Reserved_1; 
      rand uvm_reg_field Send_Zero_Timestamp; 
      uvm_reg_field Reserved; 


      // Function: new
      // 
      function new(string name = "Port_11_Timestamp_Synchronization_Command_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Command = uvm_reg_field::type_id::create("Command");
         Reserved_2 = uvm_reg_field::type_id::create("Reserved_2");
         Send_Timestamp = uvm_reg_field::type_id::create("Send_Timestamp");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         Send_Zero_Timestamp = uvm_reg_field::type_id::create("Send_Zero_Timestamp");
         Reserved = uvm_reg_field::type_id::create("Reserved");

         Command.configure(this, 3, 29, "RW", 0, 3'b000, 1, 1, 0);
         Reserved_2.configure(this, 1, 28, "RO", 0, 1'b0, 1, 0, 0);
         Send_Timestamp.configure(this, 1, 27, "RW", 0, 1'b0, 1, 1, 0);
         Reserved_1.configure(this, 3, 24, "RO", 0, 3'b000, 1, 0, 0);
         Send_Zero_Timestamp.configure(this, 1, 23, "RW", 0, 1'b0, 1, 1, 0);
         Reserved.configure(this, 23, 0, "RO", 0, 23'b00000000000000000000000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_0_Error_Rate_CSR_reg
   // 
   // Error Rate Register
   //--------------------------------------------------------------------

   class Port_0_Error_Rate_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_0_Error_Rate_CSR_reg)

      rand uvm_reg_field Error_Rate_Counter; 
      rand uvm_reg_field Peak_Error_Rate; 
      rand uvm_reg_field Error_Rate_Recovery; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Error_Rate_Bias; 


      // Function: new
      // 
      function new(string name = "Port_0_Error_Rate_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Error_Rate_Counter = uvm_reg_field::type_id::create("Error_Rate_Counter");
         Peak_Error_Rate = uvm_reg_field::type_id::create("Peak_Error_Rate");
         Error_Rate_Recovery = uvm_reg_field::type_id::create("Error_Rate_Recovery");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Error_Rate_Bias = uvm_reg_field::type_id::create("Error_Rate_Bias");

         Error_Rate_Counter.configure(this, 8, 24, "RW", 0, 8'h00, 1, 1, 1);
         Peak_Error_Rate.configure(this, 8, 16, "RW", 0, 8'h00, 1, 1, 1);
         Error_Rate_Recovery.configure(this, 2, 14, "RW", 0, 2'b00, 1, 1, 0);
         Reserved.configure(this, 6, 8, "RO", 0, 6'b000000, 1, 0, 0);
         Error_Rate_Bias.configure(this, 8, 0, "RW", 0, 8'h80, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_2_Packet_Capture_3_CSR_reg
   // 
   // Packet Capture 3 Register
   //--------------------------------------------------------------------

   class Port_2_Packet_Capture_3_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_2_Packet_Capture_3_CSR_reg)

      rand uvm_reg_field Capture3; 


      // Function: new
      // 
      function new(string name = "Port_2_Packet_Capture_3_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture3 = uvm_reg_field::type_id::create("Capture3");

         Capture3.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_14_Link_Timers_Control_2_CSR_reg
   // 
   // Link_Timers_Control_2_Register
   //--------------------------------------------------------------------

   class Port_14_Link_Timers_Control_2_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_14_Link_Timers_Control_2_CSR_reg)

      uvm_reg_field Reserved; 
      rand uvm_reg_field Recovery_Timer; 
      rand uvm_reg_field Discovery_Completion_Timer; 
      rand uvm_reg_field Retraining_Completion_Timer; 


      // Function: new
      // 
      function new(string name = "Port_14_Link_Timers_Control_2_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Recovery_Timer = uvm_reg_field::type_id::create("Recovery_Timer");
         Discovery_Completion_Timer = uvm_reg_field::type_id::create("Discovery_Completion_Timer");
         Retraining_Completion_Timer = uvm_reg_field::type_id::create("Retraining_Completion_Timer");

         Reserved.configure(this, 8, 24, "RO", 0, 8'h00, 1, 0, 1);
         Recovery_Timer.configure(this, 8, 16, "RW", 0, 8'hff, 1, 1, 1);
         Discovery_Completion_Timer.configure(this, 8, 8, "RW", 0, 8'h00, 1, 1, 1);
         Retraining_Completion_Timer.configure(this, 8, 0, "RW", 0, 8'hfe, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_12_Local_ackID_CSR_reg
   // 
   // ackID Register
   //--------------------------------------------------------------------

   class Port_12_Local_ackID_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_12_Local_ackID_CSR_reg)

      rand uvm_reg_field Outbound_ackID; 
      uvm_reg_field Reserved_2; 
      uvm_reg_field Outstanding_ackID; 
      uvm_reg_field Reserved_1; 
      rand uvm_reg_field Inbound_ackID; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Clr_outstanding_ackID; 


      // Function: new
      // 
      function new(string name = "Port_12_Local_ackID_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Outbound_ackID = uvm_reg_field::type_id::create("Outbound_ackID");
         Reserved_2 = uvm_reg_field::type_id::create("Reserved_2");
         Outstanding_ackID = uvm_reg_field::type_id::create("Outstanding_ackID");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         Inbound_ackID = uvm_reg_field::type_id::create("Inbound_ackID");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Clr_outstanding_ackID = uvm_reg_field::type_id::create("Clr_outstanding_ackID");

         Outbound_ackID.configure(this, 6, 26, "RW", 0, 6'b000000, 1, 1, 0);
         Reserved_2.configure(this, 2, 24, "RO", 0, 2'b00, 1, 0, 0);
         Outstanding_ackID.configure(this, 6, 18, "RW", 0, 6'b000000, 1, 1, 0);
         Reserved_1.configure(this, 10, 8, "RO", 0, 10'b0000000000, 1, 0, 0);
         Inbound_ackID.configure(this, 6, 2, "RW", 0, 6'b000000, 1, 1, 0);
         Reserved.configure(this, 1, 1, "RO", 0, 1'b0, 1, 0, 0);
         Clr_outstanding_ackID.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_6_VC7_VC3_BW_Allocation_Register_reg
   // 
   // BW Allocation Register
   //--------------------------------------------------------------------

   class Port_6_VC7_VC3_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_6_VC7_VC3_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 


      // Function: new
      // 
      function new(string name = "Port_6_VC7_VC3_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");

         Bandwidth_Allocation.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_1_Timestamp_1_MSW_CSR_reg
   // 
   // Timestamp_1_MSW_Register
   //--------------------------------------------------------------------

   class Port_1_Timestamp_1_MSW_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_1_Timestamp_1_MSW_CSR_reg)

      uvm_reg_field MSW_Bits; 


      // Function: new
      // 
      function new(string name = "Port_1_Timestamp_1_MSW_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         MSW_Bits = uvm_reg_field::type_id::create("MSW_Bits");

         MSW_Bits.configure(this, 32, 0, "RO", 0, 32'h00000000, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_9_Link_Maintenance_Response_CSR_reg
   // 
   // Link Maintenance Response Register
   //--------------------------------------------------------------------

   class Port_9_Link_Maintenance_Response_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_9_Link_Maintenance_Response_CSR_reg)

      uvm_reg_field port_status; 
      uvm_reg_field ackID_status; 
      uvm_reg_field Port_status_cs64; 
      uvm_reg_field Reserved; 
      uvm_reg_field response_valid; 


      // Function: new
      // 
      function new(string name = "Port_9_Link_Maintenance_Response_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         port_status = uvm_reg_field::type_id::create("port_status");
         ackID_status = uvm_reg_field::type_id::create("ackID_status");
         Port_status_cs64 = uvm_reg_field::type_id::create("Port_status_cs64");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         response_valid = uvm_reg_field::type_id::create("response_valid");

         port_status.configure(this, 5, 27, "RO", 0, 5'b00000, 1, 0, 0);
         ackID_status.configure(this, 12, 15, "RO", 0, 12'h000, 1, 0, 0);
         Port_status_cs64.configure(this, 12, 3, "RO", 0, 12'h000, 1, 0, 0);
         Reserved.configure(this, 2, 1, "RO", 0, 2'b00, 1, 0, 0);
         response_valid.configure(this, 1, 0, "RO", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_11_Packet_Control_Symbol_Capture_0_CSR_reg
   // 
   // Symbol Capture Register
   //--------------------------------------------------------------------

   class Port_11_Packet_Control_Symbol_Capture_0_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_11_Packet_Control_Symbol_Capture_0_CSR_reg)

      rand uvm_reg_field Capture0; 


      // Function: new
      // 
      function new(string name = "Port_11_Packet_Control_Symbol_Capture_0_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture0 = uvm_reg_field::type_id::create("Capture0");

         Capture0.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass

   //--------------------------------------------------------------------
   // Class: LP_Serial_Lane_Register_Block_Header_reg
   // 
   // Block Header Register
   //--------------------------------------------------------------------

   class LP_Serial_Lane_Register_Block_Header_reg extends uvm_reg;
      `uvm_object_utils(LP_Serial_Lane_Register_Block_Header_reg)

      uvm_reg_field EF_ID; 
      uvm_reg_field EF_PTR; 


      // Function: new
      // 
      function new(string name = "LP_Serial_Lane_Register_Block_Header_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         EF_ID = uvm_reg_field::type_id::create("EF_ID");
         EF_PTR = uvm_reg_field::type_id::create("EF_PTR");

         EF_ID.configure(this, 16, 16, "RO", 0, 16'h000d, 1, 0, 1);
         EF_PTR.configure(this, 16, 0, "RO", 0, 16'h0c00, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_6_VC6_VC2_BW_Allocation_Register_reg
   // 
   // BW Allocation Register
   //--------------------------------------------------------------------

   class Port_6_VC6_VC2_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_6_VC6_VC2_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 


      // Function: new
      // 
      function new(string name = "Port_6_VC6_VC2_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");

         Bandwidth_Allocation.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_4_VC5_VC1_BW_Allocation_Register_reg
   // 
   // BW Allocation Register
   //--------------------------------------------------------------------

   class Port_4_VC5_VC1_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_4_VC5_VC1_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 


      // Function: new
      // 
      function new(string name = "Port_4_VC5_VC1_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");

         Bandwidth_Allocation.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_3_Error_Rate_CSR_reg
   // 
   // Error Rate Register
   //--------------------------------------------------------------------

   class Port_3_Error_Rate_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_3_Error_Rate_CSR_reg)

      rand uvm_reg_field Error_Rate_Counter; 
      rand uvm_reg_field Peak_Error_Rate; 
      rand uvm_reg_field Error_Rate_Recovery; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Error_Rate_Bias; 


      // Function: new
      // 
      function new(string name = "Port_3_Error_Rate_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Error_Rate_Counter = uvm_reg_field::type_id::create("Error_Rate_Counter");
         Peak_Error_Rate = uvm_reg_field::type_id::create("Peak_Error_Rate");
         Error_Rate_Recovery = uvm_reg_field::type_id::create("Error_Rate_Recovery");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Error_Rate_Bias = uvm_reg_field::type_id::create("Error_Rate_Bias");

         Error_Rate_Counter.configure(this, 8, 24, "RW", 0, 8'h00, 1, 1, 1);
         Peak_Error_Rate.configure(this, 8, 16, "RW", 0, 8'h00, 1, 1, 1);
         Error_Rate_Recovery.configure(this, 2, 14, "RW", 0, 2'b00, 1, 1, 0);
         Reserved.configure(this, 6, 8, "RO", 0, 6'b000000, 1, 0, 0);
         Error_Rate_Bias.configure(this, 8, 0, "RW", 0, 8'h80, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_9_Link_Uninit_Discard_Timer_CSR_reg
   // 
   // Link_Uninit_Discard_Timer_CSR_Register
   //--------------------------------------------------------------------

   class Port_9_Link_Uninit_Discard_Timer_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_9_Link_Uninit_Discard_Timer_CSR_reg)

      uvm_reg_field Reserved; 
      rand uvm_reg_field Link_Uninit_Timeout; 


      // Function: new
      // 
      function new(string name = "Port_9_Link_Uninit_Discard_Timer_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Link_Uninit_Timeout = uvm_reg_field::type_id::create("Link_Uninit_Timeout");

         Reserved.configure(this, 8, 24, "RO", 0, 8'h00, 1, 0, 1);
         Link_Uninit_Timeout.configure(this, 24, 0, "RW", 0, 24'h000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_5_Local_ackID_CSR_reg
   // 
   // ackID Register
   //--------------------------------------------------------------------

   class Port_5_Local_ackID_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_5_Local_ackID_CSR_reg)

      rand uvm_reg_field Outbound_ackID; 
      uvm_reg_field Reserved_2; 
      uvm_reg_field Outstanding_ackID; 
      uvm_reg_field Reserved_1; 
      rand uvm_reg_field Inbound_ackID; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Clr_outstanding_ackID; 


      // Function: new
      // 
      function new(string name = "Port_5_Local_ackID_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Outbound_ackID = uvm_reg_field::type_id::create("Outbound_ackID");
         Reserved_2 = uvm_reg_field::type_id::create("Reserved_2");
         Outstanding_ackID = uvm_reg_field::type_id::create("Outstanding_ackID");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         Inbound_ackID = uvm_reg_field::type_id::create("Inbound_ackID");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Clr_outstanding_ackID = uvm_reg_field::type_id::create("Clr_outstanding_ackID");

         Outbound_ackID.configure(this, 6, 26, "RW", 0, 6'b000000, 1, 1, 0);
         Reserved_2.configure(this, 2, 24, "RO", 0, 2'b00, 1, 0, 0);
         Outstanding_ackID.configure(this, 6, 18, "RW", 0, 6'b000000, 1, 1, 0);
         Reserved_1.configure(this, 10, 8, "RO", 0, 10'b0000000000, 1, 0, 0);
         Inbound_ackID.configure(this, 6, 2, "RW", 0, 6'b000000, 1, 1, 0);
         Reserved.configure(this, 1, 1, "RO", 0, 1'b0, 1, 0, 0);
         Clr_outstanding_ackID.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_5_VC6_VC2_BW_Allocation_Register_reg
   // 
   // BW Allocation Register
   //--------------------------------------------------------------------

   class Port_5_VC6_VC2_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_5_VC6_VC2_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 


      // Function: new
      // 
      function new(string name = "Port_5_VC6_VC2_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");

         Bandwidth_Allocation.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_3_Link_Maintenance_Request_CSR_reg
   // 
   // Link  Maintenance Request Register
   //--------------------------------------------------------------------

   class Port_3_Link_Maintenance_Request_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_3_Link_Maintenance_Request_CSR_reg)

      uvm_reg_field Command; 
      uvm_reg_field Reserved; 


      // Function: new
      // 
      function new(string name = "Port_3_Link_Maintenance_Request_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Command = uvm_reg_field::type_id::create("Command");
         Reserved = uvm_reg_field::type_id::create("Reserved");

         Command.configure(this, 3, 29, "RW", 0, 3'b000, 1, 1, 1);
         Reserved.configure(this, 29, 0, "RO", 0, 29'b00000000000000000000000000000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_13_Timestamp_1_MSW_CSR_reg
   // 
   // Timestamp_1_MSW_Register
   //--------------------------------------------------------------------

   class Port_13_Timestamp_1_MSW_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_13_Timestamp_1_MSW_CSR_reg)

      uvm_reg_field MSW_Bits; 


      // Function: new
      // 
      function new(string name = "Port_13_Timestamp_1_MSW_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         MSW_Bits = uvm_reg_field::type_id::create("MSW_Bits");

         MSW_Bits.configure(this, 32, 0, "RO", 0, 32'h00000000, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_1_Timestamp_0_MSW_CSR_reg
   // 
   // Timestamp_0_MSW_Register
   //--------------------------------------------------------------------

   class Port_1_Timestamp_0_MSW_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_1_Timestamp_0_MSW_CSR_reg)

      uvm_reg_field MSW_Bits; 


      // Function: new
      // 
      function new(string name = "Port_1_Timestamp_0_MSW_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         MSW_Bits = uvm_reg_field::type_id::create("MSW_Bits");

         MSW_Bits.configure(this, 32, 0, "RO", 0, 32'h00000000, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_2_Auto_Update_Counter_CSR_reg
   // 
   // Auto_Update_Counter_CSR_Register
   //--------------------------------------------------------------------

   class Port_2_Auto_Update_Counter_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_2_Auto_Update_Counter_CSR_reg)

      rand uvm_reg_field Update_Period; 


      // Function: new
      // 
      function new(string name = "Port_2_Auto_Update_Counter_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Update_Period = uvm_reg_field::type_id::create("Update_Period");

         Update_Period.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Lane_4_Status_1_CSR_reg
   // 
   // Status 1 Register
   //--------------------------------------------------------------------

   class Lane_4_Status_1_CSR_reg extends uvm_reg;
      `uvm_object_utils(Lane_4_Status_1_CSR_reg)

      uvm_reg_field Reserved; 
      uvm_reg_field IDLE3_SC_Retraining_State; 
      uvm_reg_field IDLE3_SC_Training_State; 
      uvm_reg_field IDLE3_DME_Training_State; 
      uvm_reg_field IDLE3_Training_Type; 
      uvm_reg_field IDLE3_Loss_of_Signals; 
      uvm_reg_field IDLE2_Connected_port_scrambling_descrambling_enabled; 
      uvm_reg_field IDLE2_Connected_port_transmit_emphasis_Tap_plus1_status; 
      uvm_reg_field IDLE2_Connected_port_transmit_emphasis_Tap_minus1_status; 
      uvm_reg_field IDLE2_Lane_number_in_connected_port; 
      uvm_reg_field IDLE2_Received_port_width; 
      uvm_reg_field IDLE2_Connected_port_lane_receiver_trained; 
      uvm_reg_field Implementation_defined; 
      uvm_reg_field Values_changed; 
      uvm_reg_field IDLE_information_current; 
      rand uvm_reg_field IDLE_received; 


      // Function: new
      // 
      function new(string name = "Lane_4_Status_1_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         IDLE3_SC_Retraining_State = uvm_reg_field::type_id::create("IDLE3_SC_Retraining_State");
         IDLE3_SC_Training_State = uvm_reg_field::type_id::create("IDLE3_SC_Training_State");
         IDLE3_DME_Training_State = uvm_reg_field::type_id::create("IDLE3_DME_Training_State");
         IDLE3_Training_Type = uvm_reg_field::type_id::create("IDLE3_Training_Type");
         IDLE3_Loss_of_Signals = uvm_reg_field::type_id::create("IDLE3_Loss_of_Signals");
         IDLE2_Connected_port_scrambling_descrambling_enabled = uvm_reg_field::type_id::create("IDLE2_Connected_port_scrambling_descrambling_enabled");
         IDLE2_Connected_port_transmit_emphasis_Tap_plus1_status = uvm_reg_field::type_id::create("IDLE2_Connected_port_transmit_emphasis_Tap_plus1_status");
         IDLE2_Connected_port_transmit_emphasis_Tap_minus1_status = uvm_reg_field::type_id::create("IDLE2_Connected_port_transmit_emphasis_Tap_minus1_status");
         IDLE2_Lane_number_in_connected_port = uvm_reg_field::type_id::create("IDLE2_Lane_number_in_connected_port");
         IDLE2_Received_port_width = uvm_reg_field::type_id::create("IDLE2_Received_port_width");
         IDLE2_Connected_port_lane_receiver_trained = uvm_reg_field::type_id::create("IDLE2_Connected_port_lane_receiver_trained");
         Implementation_defined = uvm_reg_field::type_id::create("Implementation_defined");
         Values_changed = uvm_reg_field::type_id::create("Values_changed");
         IDLE_information_current = uvm_reg_field::type_id::create("IDLE_information_current");
         IDLE_received = uvm_reg_field::type_id::create("IDLE_received");

         Reserved.configure(this, 6, 26, "RO", 0, 6'b000000, 1, 0, 0);
         IDLE3_SC_Retraining_State.configure(this, 2, 24, "RO", 0, 2'b00, 1, 0, 0);
         IDLE3_SC_Training_State.configure(this, 2, 22, "RO", 0, 2'b00, 1, 0, 0);
         IDLE3_DME_Training_State.configure(this, 2, 20, "RO", 0, 2'b00, 1, 0, 0);
         IDLE3_Training_Type.configure(this, 2, 18, "RO", 0, 2'b00, 1, 0, 0);
         IDLE3_Loss_of_Signals.configure(this, 1, 17, "RO", 0, 1'b0, 1, 0, 0);
         IDLE2_Connected_port_scrambling_descrambling_enabled.configure(this, 1, 16, "RO", 0, 1'b0, 1, 0, 0);
         IDLE2_Connected_port_transmit_emphasis_Tap_plus1_status.configure(this, 2, 14, "RO", 0, 2'b00, 1, 0, 0);
         IDLE2_Connected_port_transmit_emphasis_Tap_minus1_status.configure(this, 2, 12, "RO", 0, 2'b00, 1, 0, 0);
         IDLE2_Lane_number_in_connected_port.configure(this, 4, 8, "RO", 0, 4'h0, 1, 0, 0);
         IDLE2_Received_port_width.configure(this, 3, 5, "RO", 0, 3'b000, 1, 0, 0);
         IDLE2_Connected_port_lane_receiver_trained.configure(this, 1, 4, "RO", 0, 1'b0, 1, 0, 0);
         Implementation_defined.configure(this, 1, 3, "RO", 0, 1'b0, 1, 0, 0);
         Values_changed.configure(this, 1, 2, "RO", 0, 1'b1, 1, 0, 0);
         IDLE_information_current.configure(this, 1, 1, "RO", 0, 1'b0, 1, 0, 0);
         IDLE_received.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_6_Packet_Capture_4_CSR_reg
   // 
   // Packet Capture 4 Register
   //--------------------------------------------------------------------

   class Port_6_Packet_Capture_4_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_6_Packet_Capture_4_CSR_reg)

      rand uvm_reg_field Capture4; 


      // Function: new
      // 
      function new(string name = "Port_6_Packet_Capture_4_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture4 = uvm_reg_field::type_id::create("Capture4");

         Capture4.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_1_Timestamp_Offset_CSR_reg
   // 
   // Timestamp_Offset_CSR_Register
   //--------------------------------------------------------------------

   class Port_1_Timestamp_Offset_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_1_Timestamp_Offset_CSR_reg)

      uvm_reg_field Reserved; 
      rand uvm_reg_field Offset; 


      // Function: new
      // 
      function new(string name = "Port_1_Timestamp_Offset_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Offset = uvm_reg_field::type_id::create("Offset");

         Reserved.configure(this, 16, 16, "RO", 0, 16'h0000, 1, 0, 1);
         Offset.configure(this, 16, 0, "RW", 0, 16'h0000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_0_Control_CSR_reg
   // 
   // Control Register
   //--------------------------------------------------------------------

   class Port_0_Control_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_0_Control_CSR_reg)

      uvm_reg_field Port_Type; 
      rand uvm_reg_field Port_Lockout; 
      rand uvm_reg_field Drop_Packet_Enable; 
      rand uvm_reg_field Stop_on_Port_Failed_encountered_Enable; 
      rand uvm_reg_field Implementation_defined; 
      uvm_reg_field Extended_Port_Width_Support; 
      rand uvm_reg_field Extended_Port_Width_Override; 
      rand uvm_reg_field Flow_Arbitration_Participant; 
      rand uvm_reg_field Enumeration_Boundary; 
      rand uvm_reg_field Flow_Control_Participant; 
      rand uvm_reg_field Multicast_event_Participant; 
      rand uvm_reg_field Error_Checking_Disable; 
      rand uvm_reg_field Input_Port_Enable; 
      rand uvm_reg_field Output_Port_Enable; 
      rand uvm_reg_field Port_Disable; 
      uvm_reg_field Port_Width_Override; 
      rand uvm_reg_field Initialized_Port_Width; 
      uvm_reg_field Port_Width_Support; 


      // Function: new
      // 
      function new(string name = "Port_0_Control_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Port_Type = uvm_reg_field::type_id::create("Port_Type");
         Port_Lockout = uvm_reg_field::type_id::create("Port_Lockout");
         Drop_Packet_Enable = uvm_reg_field::type_id::create("Drop_Packet_Enable");
         Stop_on_Port_Failed_encountered_Enable = uvm_reg_field::type_id::create("Stop_on_Port_Failed_encountered_Enable");
         Implementation_defined = uvm_reg_field::type_id::create("Implementation_defined");
         Extended_Port_Width_Support = uvm_reg_field::type_id::create("Extended_Port_Width_Support");
         Extended_Port_Width_Override = uvm_reg_field::type_id::create("Extended_Port_Width_Override");
         Flow_Arbitration_Participant = uvm_reg_field::type_id::create("Flow_Arbitration_Participant");
         Enumeration_Boundary = uvm_reg_field::type_id::create("Enumeration_Boundary");
         Flow_Control_Participant = uvm_reg_field::type_id::create("Flow_Control_Participant");
         Multicast_event_Participant = uvm_reg_field::type_id::create("Multicast_event_Participant");
         Error_Checking_Disable = uvm_reg_field::type_id::create("Error_Checking_Disable");
         Input_Port_Enable = uvm_reg_field::type_id::create("Input_Port_Enable");
         Output_Port_Enable = uvm_reg_field::type_id::create("Output_Port_Enable");
         Port_Disable = uvm_reg_field::type_id::create("Port_Disable");
         Port_Width_Override = uvm_reg_field::type_id::create("Port_Width_Override");
         Initialized_Port_Width = uvm_reg_field::type_id::create("Initialized_Port_Width");
         Port_Width_Support = uvm_reg_field::type_id::create("Port_Width_Support");

         Port_Type.configure(this, 1, 31, "RO", 0, 1'b0, 1, 0, 0);
         Port_Lockout.configure(this, 1, 30, "RW", 0, 1'b0, 1, 1, 0);
         Drop_Packet_Enable.configure(this, 1, 29, "RW", 0, 1'b0, 1, 1, 0);
         Stop_on_Port_Failed_encountered_Enable.configure(this, 1, 28, "RW", 0, 1'b0, 1, 1, 0);
         Implementation_defined.configure(this, 8, 20, "RO", 0, 8'h00, 1, 0, 0);
         Extended_Port_Width_Support.configure(this, 2, 18, "RO", 0, 2'b00, 1, 0, 0);
         Extended_Port_Width_Override.configure(this, 2, 16, "RO", 0, 2'b00, 1, 0, 0);
         Flow_Arbitration_Participant.configure(this, 1, 15, "RO", 0, 1'b0, 1, 0, 0);
         Enumeration_Boundary.configure(this, 1, 14, "RO", 0, 1'b0, 1, 0, 0);
         Flow_Control_Participant.configure(this, 1, 13, "RW", 0, 1'b0, 1, 1, 0);
         Multicast_event_Participant.configure(this, 1, 12, "RO", 0, 1'b0, 1, 1, 0);
         Error_Checking_Disable.configure(this, 1, 11, "RO", 0, 1'b0, 1, 1, 0);
         Input_Port_Enable.configure(this, 1, 10, "RW", 0, 1'b0, 1, 1, 0);
         Output_Port_Enable.configure(this, 1, 9, "RW", 0, 1'b0, 1, 1, 0);
         Port_Disable.configure(this, 1, 8, "RW", 0, 1'b0, 1, 1, 0);
         Port_Width_Override.configure(this, 3, 5, "RW", 0, 3'b000, 1, 0, 0);
         Initialized_Port_Width.configure(this, 3, 2, "RO", 0, 3'b000, 1, 1, 0);
         Port_Width_Support.configure(this, 2, 0, "RO", 0, 2'b00, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_7_Error_Rate_CSR_reg
   // 
   // Error Rate Register
   //--------------------------------------------------------------------

   class Port_7_Error_Rate_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_7_Error_Rate_CSR_reg)

      rand uvm_reg_field Error_Rate_Counter; 
      rand uvm_reg_field Peak_Error_Rate; 
      rand uvm_reg_field Error_Rate_Recovery; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Error_Rate_Bias; 


      // Function: new
      // 
      function new(string name = "Port_7_Error_Rate_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Error_Rate_Counter = uvm_reg_field::type_id::create("Error_Rate_Counter");
         Peak_Error_Rate = uvm_reg_field::type_id::create("Peak_Error_Rate");
         Error_Rate_Recovery = uvm_reg_field::type_id::create("Error_Rate_Recovery");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Error_Rate_Bias = uvm_reg_field::type_id::create("Error_Rate_Bias");

         Error_Rate_Counter.configure(this, 8, 24, "RW", 0, 8'h00, 1, 1, 1);
         Peak_Error_Rate.configure(this, 8, 16, "RW", 0, 8'h00, 1, 1, 1);
         Error_Rate_Recovery.configure(this, 2, 14, "RW", 0, 2'b00, 1, 1, 0);
         Reserved.configure(this, 6, 8, "RO", 0, 6'b000000, 1, 0, 0);
         Error_Rate_Bias.configure(this, 8, 0, "RW", 0, 8'h80, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_12_Link_Timers_Control_CSR_reg
   // 
   // Link_Timers_Control_Register
   //--------------------------------------------------------------------

   class Port_12_Link_Timers_Control_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_12_Link_Timers_Control_CSR_reg)

      rand uvm_reg_field Emphasis_Command_Timeout; 
      rand uvm_reg_field CW_Training_Completion_Timer; 
      rand uvm_reg_field DME_Wait_Timer; 
      rand uvm_reg_field DME_Training_Completion_Timer; 


      // Function: new
      // 
      function new(string name = "Port_12_Link_Timers_Control_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Emphasis_Command_Timeout = uvm_reg_field::type_id::create("Emphasis_Command_Timeout");
         CW_Training_Completion_Timer = uvm_reg_field::type_id::create("CW_Training_Completion_Timer");
         DME_Wait_Timer = uvm_reg_field::type_id::create("DME_Wait_Timer");
         DME_Training_Completion_Timer = uvm_reg_field::type_id::create("DME_Training_Completion_Timer");

         Emphasis_Command_Timeout.configure(this, 8, 24, "RW", 0, 8'hff, 1, 1, 1);
         CW_Training_Completion_Timer.configure(this, 8, 16, "RW", 0, 8'h00, 1, 1, 1);
         DME_Wait_Timer.configure(this, 8, 8, "RW", 0, 8'h3f, 1, 1, 1);
         DME_Training_Completion_Timer.configure(this, 8, 0, "RW", 0, 8'h00, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_8_Error_Rate_CSR_reg
   // 
   // Error Rate Register
   //--------------------------------------------------------------------

   class Port_8_Error_Rate_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_8_Error_Rate_CSR_reg)

      rand uvm_reg_field Error_Rate_Counter; 
      rand uvm_reg_field Peak_Error_Rate; 
      rand uvm_reg_field Error_Rate_Recovery; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Error_Rate_Bias; 


      // Function: new
      // 
      function new(string name = "Port_8_Error_Rate_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Error_Rate_Counter = uvm_reg_field::type_id::create("Error_Rate_Counter");
         Peak_Error_Rate = uvm_reg_field::type_id::create("Peak_Error_Rate");
         Error_Rate_Recovery = uvm_reg_field::type_id::create("Error_Rate_Recovery");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Error_Rate_Bias = uvm_reg_field::type_id::create("Error_Rate_Bias");

         Error_Rate_Counter.configure(this, 8, 24, "RW", 0, 8'h00, 1, 1, 1);
         Peak_Error_Rate.configure(this, 8, 16, "RW", 0, 8'h00, 1, 1, 1);
         Error_Rate_Recovery.configure(this, 2, 14, "RW", 0, 2'b00, 1, 1, 0);
         Reserved.configure(this, 6, 8, "RO", 0, 6'b000000, 1, 0, 0);
         Error_Rate_Bias.configure(this, 8, 0, "RW", 0, 8'h80, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_15_Packet_Capture_1_CSR_reg
   // 
   // Packet Capture 1 Register
   //--------------------------------------------------------------------

   class Port_15_Packet_Capture_1_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_15_Packet_Capture_1_CSR_reg)

      rand uvm_reg_field Capture1; 


      // Function: new
      // 
      function new(string name = "Port_15_Packet_Capture_1_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture1 = uvm_reg_field::type_id::create("Capture1");

         Capture1.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_6_Link_Maintenance_Request_CSR_reg
   // 
   // Link  Maintenance Request Register
   //--------------------------------------------------------------------

   class Port_6_Link_Maintenance_Request_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_6_Link_Maintenance_Request_CSR_reg)

      uvm_reg_field Command; 
      uvm_reg_field Reserved; 


      // Function: new
      // 
      function new(string name = "Port_6_Link_Maintenance_Request_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Command = uvm_reg_field::type_id::create("Command");
         Reserved = uvm_reg_field::type_id::create("Reserved");

         Command.configure(this, 3, 29, "RW", 0, 3'b000, 1, 1, 1);
         Reserved.configure(this, 29, 0, "RO", 0, 29'b00000000000000000000000000000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_11_VC5_VC1_BW_Allocation_Register_reg
   // 
   // BW Allocation Register
   //--------------------------------------------------------------------

   class Port_11_VC5_VC1_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_11_VC5_VC1_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 


      // Function: new
      // 
      function new(string name = "Port_11_VC5_VC1_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");

         Bandwidth_Allocation.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_6_Link_Timers_Control_3_CSR_reg
   // 
   // Link_Timers_Control_3_Register
   //--------------------------------------------------------------------

   class Port_6_Link_Timers_Control_3_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_6_Link_Timers_Control_3_CSR_reg)

      rand uvm_reg_field Keep_alive_Transmission_Interval; 
      rand uvm_reg_field Keep_alive_Transmission_Period; 
      rand uvm_reg_field Receive_Width_Command_Timeout; 
      rand uvm_reg_field Transmit_Width_Command_Timeout; 


      // Function: new
      // 
      function new(string name = "Port_6_Link_Timers_Control_3_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Keep_alive_Transmission_Interval = uvm_reg_field::type_id::create("Keep_alive_Transmission_Interval");
         Keep_alive_Transmission_Period = uvm_reg_field::type_id::create("Keep_alive_Transmission_Period");
         Receive_Width_Command_Timeout = uvm_reg_field::type_id::create("Receive_Width_Command_Timeout");
         Transmit_Width_Command_Timeout = uvm_reg_field::type_id::create("Transmit_Width_Command_Timeout");

         Keep_alive_Transmission_Interval.configure(this, 10, 22, "RW", 0, 10'b1111111111, 1, 1, 0);
         Keep_alive_Transmission_Period.configure(this, 6, 16, "RW", 0, 6'b000001, 1, 1, 0);
         Receive_Width_Command_Timeout.configure(this, 8, 8, "RW", 0, 8'h40, 1, 1, 1);
         Transmit_Width_Command_Timeout.configure(this, 8, 0, "RW", 0, 8'hff, 1, 1, 1);
      endfunction
   endclass

   //--------------------------------------------------------------------
   // Class: Port_3_Local_ackID_CSR_reg
   // 
   // ackID Register
   //--------------------------------------------------------------------

   class Port_3_Local_ackID_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_3_Local_ackID_CSR_reg)

      rand uvm_reg_field Outbound_ackID; 
      uvm_reg_field Reserved_2; 
      uvm_reg_field Outstanding_ackID; 
      uvm_reg_field Reserved_1; 
      rand uvm_reg_field Inbound_ackID; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Clr_outstanding_ackID; 


      // Function: new
      // 
      function new(string name = "Port_3_Local_ackID_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Outbound_ackID = uvm_reg_field::type_id::create("Outbound_ackID");
         Reserved_2 = uvm_reg_field::type_id::create("Reserved_2");
         Outstanding_ackID = uvm_reg_field::type_id::create("Outstanding_ackID");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         Inbound_ackID = uvm_reg_field::type_id::create("Inbound_ackID");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Clr_outstanding_ackID = uvm_reg_field::type_id::create("Clr_outstanding_ackID");

         Outbound_ackID.configure(this, 6, 26, "RW", 0, 6'b000000, 1, 1, 0);
         Reserved_2.configure(this, 2, 24, "RO", 0, 2'b00, 1, 0, 0);
         Outstanding_ackID.configure(this, 6, 18, "RW", 0, 6'b000000, 1, 1, 0);
         Reserved_1.configure(this, 10, 8, "RO", 0, 10'b0000000000, 1, 0, 0);
         Inbound_ackID.configure(this, 6, 2, "RW", 0, 6'b000000, 1, 1, 0);
         Reserved.configure(this, 1, 1, "RO", 0, 1'b0, 1, 0, 0);
         Clr_outstanding_ackID.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Lane_4_Status_2_CSR_reg
   // 
   // Status 2 Register
   //--------------------------------------------------------------------

   class Lane_4_Status_2_CSR_reg extends uvm_reg;
      `uvm_object_utils(Lane_4_Status_2_CSR_reg)

      uvm_reg_field Reserved; 
      uvm_reg_field LP_Change_Receiver_Width_Command_Negative_Acknowlege; 
      uvm_reg_field LP_Change_Receiver_Width_Command_Acknowlege; 
      uvm_reg_field LP_Change_Receiver_Width_Command; 
      uvm_reg_field LP_Lane_Trained; 
      uvm_reg_field LP_Receive_Lane_Ready; 
      uvm_reg_field LP_Receive_Lanes_Ready; 
      uvm_reg_field LP_Receive_Width; 
      uvm_reg_field LP_Transmit_1x_Mode; 
      uvm_reg_field LP_Port_Intialized; 
      uvm_reg_field LP_Asymmetric_mode_Enabled; 
      uvm_reg_field LP_Retraining_Enabled; 
      uvm_reg_field LP_Remort_Training_Support; 
      uvm_reg_field LP_Lane_Number; 
      uvm_reg_field LP_Port_Number; 


      // Function: new
      // 
      function new(string name = "Lane_4_Status_2_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         LP_Change_Receiver_Width_Command_Negative_Acknowlege = uvm_reg_field::type_id::create("LP_Change_Receiver_Width_Command_Negative_Acknowlege");
         LP_Change_Receiver_Width_Command_Acknowlege = uvm_reg_field::type_id::create("LP_Change_Receiver_Width_Command_Acknowlege");
         LP_Change_Receiver_Width_Command = uvm_reg_field::type_id::create("LP_Change_Receiver_Width_Command");
         LP_Lane_Trained = uvm_reg_field::type_id::create("LP_Lane_Trained");
         LP_Receive_Lane_Ready = uvm_reg_field::type_id::create("LP_Receive_Lane_Ready");
         LP_Receive_Lanes_Ready = uvm_reg_field::type_id::create("LP_Receive_Lanes_Ready");
         LP_Receive_Width = uvm_reg_field::type_id::create("LP_Receive_Width");
         LP_Transmit_1x_Mode = uvm_reg_field::type_id::create("LP_Transmit_1x_Mode");
         LP_Port_Intialized = uvm_reg_field::type_id::create("LP_Port_Intialized");
         LP_Asymmetric_mode_Enabled = uvm_reg_field::type_id::create("LP_Asymmetric_mode_Enabled");
         LP_Retraining_Enabled = uvm_reg_field::type_id::create("LP_Retraining_Enabled");
         LP_Remort_Training_Support = uvm_reg_field::type_id::create("LP_Remort_Training_Support");
         LP_Lane_Number = uvm_reg_field::type_id::create("LP_Lane_Number");
         LP_Port_Number = uvm_reg_field::type_id::create("LP_Port_Number");

         Reserved.configure(this, 2, 30, "RO", 0, 2'b00, 1, 0, 0);
         LP_Change_Receiver_Width_Command_Negative_Acknowlege.configure(this, 1, 29, "RO", 0, 1'b0, 1, 0, 0);
         LP_Change_Receiver_Width_Command_Acknowlege.configure(this, 1, 28, "RO", 0, 1'b0, 1, 0, 0);
         LP_Change_Receiver_Width_Command.configure(this, 3, 25, "RO", 0, 3'b000, 1, 0, 0);
         LP_Lane_Trained.configure(this, 1, 24, "RO", 0, 1'b0, 1, 0, 0);
         LP_Receive_Lane_Ready.configure(this, 1, 23, "RO", 0, 1'b0, 1, 0, 0);
         LP_Receive_Lanes_Ready.configure(this, 3, 20, "RO", 0, 3'b000, 1, 0, 0);
         LP_Receive_Width.configure(this, 3, 17, "RO", 0, 3'b000, 1, 0, 0);
         LP_Transmit_1x_Mode.configure(this, 1, 16, "RO", 0, 1'b0, 1, 0, 0);
         LP_Port_Intialized.configure(this, 1, 15, "RO", 0, 1'b0, 1, 0, 0);
         LP_Asymmetric_mode_Enabled.configure(this, 1, 14, "RO", 0, 1'b0, 1, 0, 0);
         LP_Retraining_Enabled.configure(this, 1, 13, "RO", 0, 1'b0, 1, 0, 0);
         LP_Remort_Training_Support.configure(this, 1, 12, "RO", 0, 1'b0, 1, 0, 0);
         LP_Lane_Number.configure(this, 4, 8, "RO", 0, 4'h0, 1, 0, 0);
         LP_Port_Number.configure(this, 8, 0, "RO", 0, 8'h00, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_5_Error_Rate_CSR_reg
   // 
   // Error Rate Register
   //--------------------------------------------------------------------

   class Port_5_Error_Rate_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_5_Error_Rate_CSR_reg)

      rand uvm_reg_field Error_Rate_Counter; 
      rand uvm_reg_field Peak_Error_Rate; 
      rand uvm_reg_field Error_Rate_Recovery; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Error_Rate_Bias; 


      // Function: new
      // 
      function new(string name = "Port_5_Error_Rate_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Error_Rate_Counter = uvm_reg_field::type_id::create("Error_Rate_Counter");
         Peak_Error_Rate = uvm_reg_field::type_id::create("Peak_Error_Rate");
         Error_Rate_Recovery = uvm_reg_field::type_id::create("Error_Rate_Recovery");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Error_Rate_Bias = uvm_reg_field::type_id::create("Error_Rate_Bias");

         Error_Rate_Counter.configure(this, 8, 24, "RW", 0, 8'h00, 1, 1, 1);
         Peak_Error_Rate.configure(this, 8, 16, "RW", 0, 8'h00, 1, 1, 1);
         Error_Rate_Recovery.configure(this, 2, 14, "RW", 0, 2'b00, 1, 1, 0);
         Reserved.configure(this, 6, 8, "RO", 0, 6'b000000, 1, 0, 0);
         Error_Rate_Bias.configure(this, 8, 0, "RW", 0, 8'h80, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_13_Inbound_ackID_CSR_reg
   // 
   // Inbound_Register
   //--------------------------------------------------------------------

   class Port_13_Inbound_ackID_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_13_Inbound_ackID_CSR_reg)

      rand uvm_reg_field Inbound_ackID;  
      uvm_reg_field Reserved; 


      // Function: new
      // 
      function new(string name = "Port_13_Inbound_ackID_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Inbound_ackID = uvm_reg_field::type_id::create("Inbound_ackID");
         Reserved = uvm_reg_field::type_id::create("Reserved");

         Inbound_ackID.configure(this, 12, 20, "RW", 0, 12'h000, 1, 1, 0);
         Reserved.configure(this, 20, 0, "RO", 0, 20'h00000, 1, 0, 0);
      endfunction
   endclass

   //--------------------------------------------------------------------
   // Class: Port_10_VC8_VC4_BW_Allocation_Register_reg
   // 
   // BW Allocation Register
   //--------------------------------------------------------------------

   class Port_10_VC8_VC4_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_10_VC8_VC4_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 


      // Function: new
      // 
      function new(string name = "Port_10_VC8_VC4_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");

         Bandwidth_Allocation.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_9_Control_CSR_reg
   // 
   // Control Register
   //--------------------------------------------------------------------

   class Port_9_Control_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_9_Control_CSR_reg)

      uvm_reg_field Port_Type; 
      rand uvm_reg_field Port_Lockout; 
      rand uvm_reg_field Drop_Packet_Enable; 
      rand uvm_reg_field Stop_on_Port_Failed_encountered_Enable; 
      rand uvm_reg_field Implementation_defined; 
      uvm_reg_field Extended_Port_Width_Support; 
      rand uvm_reg_field Extended_Port_Width_Override; 
      rand uvm_reg_field Flow_Arbitration_Participant; 
      rand uvm_reg_field Enumeration_Boundary; 
      rand uvm_reg_field Flow_Control_Participant; 
      rand uvm_reg_field Multicast_event_Participant; 
      rand uvm_reg_field Error_Checking_Disable; 
      rand uvm_reg_field Input_Port_Enable; 
      rand uvm_reg_field Output_Port_Enable; 
      rand uvm_reg_field Port_Disable; 
      uvm_reg_field Port_Width_Override; 
      rand uvm_reg_field Initialized_Port_Width; 
      uvm_reg_field Port_Width_Support; 


      // Function: new
      // 
      function new(string name = "Port_9_Control_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Port_Type = uvm_reg_field::type_id::create("Port_Type");
         Port_Lockout = uvm_reg_field::type_id::create("Port_Lockout");
         Drop_Packet_Enable = uvm_reg_field::type_id::create("Drop_Packet_Enable");
         Stop_on_Port_Failed_encountered_Enable = uvm_reg_field::type_id::create("Stop_on_Port_Failed_encountered_Enable");
         Implementation_defined = uvm_reg_field::type_id::create("Implementation_defined");
         Extended_Port_Width_Support = uvm_reg_field::type_id::create("Extended_Port_Width_Support");
         Extended_Port_Width_Override = uvm_reg_field::type_id::create("Extended_Port_Width_Override");
         Flow_Arbitration_Participant = uvm_reg_field::type_id::create("Flow_Arbitration_Participant");
         Enumeration_Boundary = uvm_reg_field::type_id::create("Enumeration_Boundary");
         Flow_Control_Participant = uvm_reg_field::type_id::create("Flow_Control_Participant");
         Multicast_event_Participant = uvm_reg_field::type_id::create("Multicast_event_Participant");
         Error_Checking_Disable = uvm_reg_field::type_id::create("Error_Checking_Disable");
         Input_Port_Enable = uvm_reg_field::type_id::create("Input_Port_Enable");
         Output_Port_Enable = uvm_reg_field::type_id::create("Output_Port_Enable");
         Port_Disable = uvm_reg_field::type_id::create("Port_Disable");
         Port_Width_Override = uvm_reg_field::type_id::create("Port_Width_Override");
         Initialized_Port_Width = uvm_reg_field::type_id::create("Initialized_Port_Width");
         Port_Width_Support = uvm_reg_field::type_id::create("Port_Width_Support");

         Port_Type.configure(this, 1, 31, "RO", 0, 1'b0, 1, 0, 0);
         Port_Lockout.configure(this, 1, 30, "RW", 0, 1'b0, 1, 1, 0);
         Drop_Packet_Enable.configure(this, 1, 29, "RW", 0, 1'b0, 1, 1, 0);
         Stop_on_Port_Failed_encountered_Enable.configure(this, 1, 28, "RW", 0, 1'b0, 1, 1, 0);
         Implementation_defined.configure(this, 8, 20, "RW", 0, 8'h00, 1, 1, 0);
         Extended_Port_Width_Support.configure(this, 2, 18, "RO", 0, 2'b00, 1, 0, 0);
         Extended_Port_Width_Override.configure(this, 2, 16, "RW", 0, 2'b00, 1, 1, 0);
         Flow_Arbitration_Participant.configure(this, 1, 15, "RW", 0, 1'b0, 1, 1, 0);
         Enumeration_Boundary.configure(this, 1, 14, "RW", 0, 1'b0, 1, 1, 0);
         Flow_Control_Participant.configure(this, 1, 13, "RW", 0, 1'b0, 1, 1, 0);
         Multicast_event_Participant.configure(this, 1, 12, "RW", 0, 1'b0, 1, 1, 0);
         Error_Checking_Disable.configure(this, 1, 11, "RW", 0, 1'b0, 1, 1, 0);
         Input_Port_Enable.configure(this, 1, 10, "RW", 0, 1'b0, 1, 1, 0);
         Output_Port_Enable.configure(this, 1, 9, "RW", 0, 1'b0, 1, 1, 0);
         Port_Disable.configure(this, 1, 8, "RW", 0, 1'b0, 1, 1, 0);
         Port_Width_Override.configure(this, 3, 5, "RO", 0, 3'b000, 1, 0, 0);
         Initialized_Port_Width.configure(this, 3, 2, "RW", 0, 3'b000, 1, 1, 0);
         Port_Width_Support.configure(this, 2, 0, "RO", 0, 2'b00, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_14_VC6_VC2_BW_Allocation_Register_reg
   // 
   // BW Allocation Register
   //--------------------------------------------------------------------

   class Port_14_VC6_VC2_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_14_VC6_VC2_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 


      // Function: new
      // 
      function new(string name = "Port_14_VC6_VC2_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");

         Bandwidth_Allocation.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_4_Power_Management_CSR_reg
   // 
   // Power_Management_Register
   //--------------------------------------------------------------------

   class Port_4_Power_Management_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_4_Power_Management_CSR_reg)

      uvm_reg_field Reserved; 
      uvm_reg_field Status_of_Link_Partner_Transmit_Width_Change; 
      rand uvm_reg_field Change_Link_Partner_Transmit_width; 
      uvm_reg_field Status_of_My_Transmit_Width_Change; 
      rand uvm_reg_field Change_My_Transmit_Width; 
      uvm_reg_field Reciever_Width_Status; 
      uvm_reg_field Transmit_Width_Status; 
      rand uvm_reg_field Asymmetric_Modes_Enabled; 
      uvm_reg_field Asymmetric_Modes_Supported; 


      // Function: new
      // 
      function new(string name = "Port_4_Power_Management_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Status_of_Link_Partner_Transmit_Width_Change = uvm_reg_field::type_id::create("Status_of_Link_Partner_Transmit_Width_Change");
         Change_Link_Partner_Transmit_width = uvm_reg_field::type_id::create("Change_Link_Partner_Transmit_width");
         Status_of_My_Transmit_Width_Change = uvm_reg_field::type_id::create("Status_of_My_Transmit_Width_Change");
         Change_My_Transmit_Width = uvm_reg_field::type_id::create("Change_My_Transmit_Width");
         Reciever_Width_Status = uvm_reg_field::type_id::create("Reciever_Width_Status");
         Transmit_Width_Status = uvm_reg_field::type_id::create("Transmit_Width_Status");
         Asymmetric_Modes_Enabled = uvm_reg_field::type_id::create("Asymmetric_Modes_Enabled");
         Asymmetric_Modes_Supported = uvm_reg_field::type_id::create("Asymmetric_Modes_Supported");

         Reserved.configure(this, 6, 26, "RO", 0, 6'b000000, 1, 0, 0);
         Status_of_Link_Partner_Transmit_Width_Change.configure(this, 2, 24, "RO", 0, 2'b00, 1, 0, 0);
         Change_Link_Partner_Transmit_width.configure(this, 3, 21, "WRC", 0, 3'b000, 1, 1, 0);
         Status_of_My_Transmit_Width_Change.configure(this, 2, 19, "RO", 0, 2'b00, 1, 0, 0);
         Change_My_Transmit_Width.configure(this, 3, 16, "WRC", 0, 3'b000, 1, 1, 0);
         Reciever_Width_Status.configure(this, 3, 13, "RO", 0, 3'b000, 1, 0, 0);
         Transmit_Width_Status.configure(this, 3, 10, "RO", 0, 3'b000, 1, 0, 0);
         Asymmetric_Modes_Enabled.configure(this, 5, 5, "RW", 0, 5'b00000, 1, 1, 0);
         Asymmetric_Modes_Supported.configure(this, 5, 0, "RO", 0, 5'b00000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_2_Local_ackID_CSR_reg
   // 
   // ackID Register
   //--------------------------------------------------------------------

   class Port_2_Local_ackID_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_2_Local_ackID_CSR_reg)

      rand uvm_reg_field Outbound_ackID; 
      uvm_reg_field Reserved_2; 
      uvm_reg_field Outstanding_ackID; 
      uvm_reg_field Reserved_1; 
      rand uvm_reg_field Inbound_ackID; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Clr_outstanding_ackID; 


      // Function: new
      // 
      function new(string name = "Port_2_Local_ackID_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Outbound_ackID = uvm_reg_field::type_id::create("Outbound_ackID");
         Reserved_2 = uvm_reg_field::type_id::create("Reserved_2");
         Outstanding_ackID = uvm_reg_field::type_id::create("Outstanding_ackID");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         Inbound_ackID = uvm_reg_field::type_id::create("Inbound_ackID");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Clr_outstanding_ackID = uvm_reg_field::type_id::create("Clr_outstanding_ackID");

         Outbound_ackID.configure(this, 6, 26, "RW", 0, 6'b000000, 1, 1, 0);
         Reserved_2.configure(this, 2, 24, "RO", 0, 2'b00, 1, 0, 0);
         Outstanding_ackID.configure(this, 6, 18, "RW", 0, 6'b000000, 1, 1, 0);
         Reserved_1.configure(this, 10, 8, "RO", 0, 10'b0000000000, 1, 0, 0);
         Inbound_ackID.configure(this, 6, 2, "RW", 0, 6'b000000, 1, 1, 0);
         Reserved.configure(this, 1, 1, "RO", 0, 1'b0, 1, 0, 0);
         Clr_outstanding_ackID.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_13_VC0_BW_Allocation_Register_reg
   // 
   // BW Register
   //--------------------------------------------------------------------

   class Port_13_VC0_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_13_VC0_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 
      rand uvm_reg_field Bandwidth_Reservation_Precision; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field VC0_BW_Res_Enable; 
      uvm_reg_field VC0_Bandwidth_Reservation_Capable; 


      // Function: new
      // 
      function new(string name = "Port_13_VC0_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");
         Bandwidth_Reservation_Precision = uvm_reg_field::type_id::create("Bandwidth_Reservation_Precision");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         VC0_BW_Res_Enable = uvm_reg_field::type_id::create("VC0_BW_Res_Enable");
         VC0_Bandwidth_Reservation_Capable = uvm_reg_field::type_id::create("VC0_Bandwidth_Reservation_Capable");

         Bandwidth_Allocation.configure(this, 16, 16, "RW", 0, 16'h0000, 1, 1, 1);
         Bandwidth_Reservation_Precision.configure(this, 8, 8, "RW", 0, 8'h00, 1, 1, 1);
         Reserved.configure(this, 6, 2, "RO", 0, 6'b000000, 1, 0, 0);
         VC0_BW_Res_Enable.configure(this, 1, 1, "RW", 0, 1'b0, 1, 1, 0);
         VC0_Bandwidth_Reservation_Capable.configure(this, 1, 0, "RO", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_7_VC7_VC3_BW_Allocation_Register_reg
   // 
   // BW Allocation Register
   //--------------------------------------------------------------------

   class Port_7_VC7_VC3_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_7_VC7_VC3_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 


      // Function: new
      // 
      function new(string name = "Port_7_VC7_VC3_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");

         Bandwidth_Allocation.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_15_Timestamp_0_LSW_CSR_reg
   // 
   // Timestamp_0_LSW_Register
   //--------------------------------------------------------------------

   class Port_15_Timestamp_0_LSW_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_15_Timestamp_0_LSW_CSR_reg)

      uvm_reg_field LSW_Bits; 


      // Function: new
      // 
      function new(string name = "Port_15_Timestamp_0_LSW_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         LSW_Bits = uvm_reg_field::type_id::create("LSW_Bits");

         LSW_Bits.configure(this, 32, 0, "RO", 0, 32'h00000000, 1, 0, 1);
      endfunction
   endclass

   //--------------------------------------------------------------------
   // Class: Port_13_Power_Management_CSR_reg
   // 
   // Power_Management_Register
   //--------------------------------------------------------------------

   class Port_13_Power_Management_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_13_Power_Management_CSR_reg)

      uvm_reg_field Reserved; 
      uvm_reg_field Status_of_Link_Partner_Transmit_Width_Change; 
      rand uvm_reg_field Change_Link_Partner_Transmit_width; 
      uvm_reg_field Status_of_My_Transmit_Width_Change; 
      rand uvm_reg_field Change_My_Transmit_Width; 
      uvm_reg_field Reciever_Width_Status; 
      uvm_reg_field Transmit_Width_Status; 
      rand uvm_reg_field Asymmetric_Modes_Enabled; 
      uvm_reg_field Asymmetric_Modes_Supported; 


      // Function: new
      // 
      function new(string name = "Port_13_Power_Management_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Status_of_Link_Partner_Transmit_Width_Change = uvm_reg_field::type_id::create("Status_of_Link_Partner_Transmit_Width_Change");
         Change_Link_Partner_Transmit_width = uvm_reg_field::type_id::create("Change_Link_Partner_Transmit_width");
         Status_of_My_Transmit_Width_Change = uvm_reg_field::type_id::create("Status_of_My_Transmit_Width_Change");
         Change_My_Transmit_Width = uvm_reg_field::type_id::create("Change_My_Transmit_Width");
         Reciever_Width_Status = uvm_reg_field::type_id::create("Reciever_Width_Status");
         Transmit_Width_Status = uvm_reg_field::type_id::create("Transmit_Width_Status");
         Asymmetric_Modes_Enabled = uvm_reg_field::type_id::create("Asymmetric_Modes_Enabled");
         Asymmetric_Modes_Supported = uvm_reg_field::type_id::create("Asymmetric_Modes_Supported");

         Reserved.configure(this, 6, 26, "RO", 0, 6'b000000, 1, 0, 0);
         Status_of_Link_Partner_Transmit_Width_Change.configure(this, 2, 24, "RO", 0, 2'b00, 1, 0, 0);
         Change_Link_Partner_Transmit_width.configure(this, 3, 21, "WRC", 0, 3'b000, 1, 1, 0);
         Status_of_My_Transmit_Width_Change.configure(this, 2, 19, "RO", 0, 2'b00, 1, 0, 0);
         Change_My_Transmit_Width.configure(this, 3, 16, "WRC", 0, 3'b000, 1, 1, 0);
         Reciever_Width_Status.configure(this, 3, 13, "RO", 0, 3'b000, 1, 0, 0);
         Transmit_Width_Status.configure(this, 3, 10, "RO", 0, 3'b000, 1, 0, 0);
         Asymmetric_Modes_Enabled.configure(this, 5, 5, "RW", 0, 5'b00000, 1, 1, 0);
         Asymmetric_Modes_Supported.configure(this, 5, 0, "RO", 0, 5'b00000, 1, 0, 0);
      endfunction
   endclass

   //--------------------------------------------------------------------
   // Class: Port_10_Link_Maintenance_Request_CSR_reg
   // 
   // Link  Maintenance Request Register
   //--------------------------------------------------------------------

   class Port_10_Link_Maintenance_Request_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_10_Link_Maintenance_Request_CSR_reg)

      uvm_reg_field Command; 
      uvm_reg_field Reserved; 


      // Function: new
      // 
      function new(string name = "Port_10_Link_Maintenance_Request_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Command = uvm_reg_field::type_id::create("Command");
         Reserved = uvm_reg_field::type_id::create("Reserved");

         Command.configure(this, 3, 29, "RW", 0, 3'b000, 1, 1, 1);
         Reserved.configure(this, 29, 0, "RO", 0, 29'b00000000000000000000000000000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_4_Control_CSR_reg
   // 
   // Control Register
   //--------------------------------------------------------------------

   class Port_4_Control_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_4_Control_CSR_reg)

      uvm_reg_field Port_Type; 
      rand uvm_reg_field Port_Lockout; 
      rand uvm_reg_field Drop_Packet_Enable; 
      rand uvm_reg_field Stop_on_Port_Failed_encountered_Enable; 
      rand uvm_reg_field Implementation_defined; 
      uvm_reg_field Extended_Port_Width_Support; 
      rand uvm_reg_field Extended_Port_Width_Override; 
      rand uvm_reg_field Flow_Arbitration_Participant; 
      rand uvm_reg_field Enumeration_Boundary; 
      rand uvm_reg_field Flow_Control_Participant; 
      rand uvm_reg_field Multicast_event_Participant; 
      rand uvm_reg_field Error_Checking_Disable; 
      rand uvm_reg_field Input_Port_Enable; 
      rand uvm_reg_field Output_Port_Enable; 
      rand uvm_reg_field Port_Disable; 
      uvm_reg_field Port_Width_Override; 
      rand uvm_reg_field Initialized_Port_Width; 
      uvm_reg_field Port_Width_Support; 


      // Function: new
      // 
      function new(string name = "Port_4_Control_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Port_Type = uvm_reg_field::type_id::create("Port_Type");
         Port_Lockout = uvm_reg_field::type_id::create("Port_Lockout");
         Drop_Packet_Enable = uvm_reg_field::type_id::create("Drop_Packet_Enable");
         Stop_on_Port_Failed_encountered_Enable = uvm_reg_field::type_id::create("Stop_on_Port_Failed_encountered_Enable");
         Implementation_defined = uvm_reg_field::type_id::create("Implementation_defined");
         Extended_Port_Width_Support = uvm_reg_field::type_id::create("Extended_Port_Width_Support");
         Extended_Port_Width_Override = uvm_reg_field::type_id::create("Extended_Port_Width_Override");
         Flow_Arbitration_Participant = uvm_reg_field::type_id::create("Flow_Arbitration_Participant");
         Enumeration_Boundary = uvm_reg_field::type_id::create("Enumeration_Boundary");
         Flow_Control_Participant = uvm_reg_field::type_id::create("Flow_Control_Participant");
         Multicast_event_Participant = uvm_reg_field::type_id::create("Multicast_event_Participant");
         Error_Checking_Disable = uvm_reg_field::type_id::create("Error_Checking_Disable");
         Input_Port_Enable = uvm_reg_field::type_id::create("Input_Port_Enable");
         Output_Port_Enable = uvm_reg_field::type_id::create("Output_Port_Enable");
         Port_Disable = uvm_reg_field::type_id::create("Port_Disable");
         Port_Width_Override = uvm_reg_field::type_id::create("Port_Width_Override");
         Initialized_Port_Width = uvm_reg_field::type_id::create("Initialized_Port_Width");
         Port_Width_Support = uvm_reg_field::type_id::create("Port_Width_Support");

         Port_Type.configure(this, 1, 31, "RO", 0, 1'b0, 1, 0, 0);
         Port_Lockout.configure(this, 1, 30, "RW", 0, 1'b0, 1, 1, 0);
         Drop_Packet_Enable.configure(this, 1, 29, "RW", 0, 1'b0, 1, 1, 0);
         Stop_on_Port_Failed_encountered_Enable.configure(this, 1, 28, "RW", 0, 1'b0, 1, 1, 0);
         Implementation_defined.configure(this, 8, 20, "RW", 0, 8'h00, 1, 1, 0);
         Extended_Port_Width_Support.configure(this, 2, 18, "RO", 0, 2'b00, 1, 0, 0);
         Extended_Port_Width_Override.configure(this, 2, 16, "RW", 0, 2'b00, 1, 1, 0);
         Flow_Arbitration_Participant.configure(this, 1, 15, "RW", 0, 1'b0, 1, 1, 0);
         Enumeration_Boundary.configure(this, 1, 14, "RW", 0, 1'b0, 1, 1, 0);
         Flow_Control_Participant.configure(this, 1, 13, "RW", 0, 1'b0, 1, 1, 0);
         Multicast_event_Participant.configure(this, 1, 12, "RW", 0, 1'b0, 1, 1, 0);
         Error_Checking_Disable.configure(this, 1, 11, "RW", 0, 1'b0, 1, 1, 0);
         Input_Port_Enable.configure(this, 1, 10, "RW", 0, 1'b0, 1, 1, 0);
         Output_Port_Enable.configure(this, 1, 9, "RW", 0, 1'b0, 1, 1, 0);
         Port_Disable.configure(this, 1, 8, "RW", 0, 1'b0, 1, 1, 0);
         Port_Width_Override.configure(this, 3, 5, "RO", 0, 3'b000, 1, 0, 0);
         Initialized_Port_Width.configure(this, 3, 2, "RW", 0, 3'b000, 1, 1, 0);
         Port_Width_Support.configure(this, 2, 0, "RO", 0, 2'b00, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_1_VC_Control_and_Status_Register_reg
   // 
   // CSR Register
   //--------------------------------------------------------------------

   class Port_1_VC_Control_and_Status_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_1_VC_Control_and_Status_Register_reg)

      rand uvm_reg_field VCs_Enable; 
      uvm_reg_field VCs_Support; 
      rand uvm_reg_field CT_Mode; 
      rand uvm_reg_field VC_Refresh_Interval; 


      // Function: new
      // 
      function new(string name = "Port_1_VC_Control_and_Status_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         VCs_Enable = uvm_reg_field::type_id::create("VCs_Enable");
         VCs_Support = uvm_reg_field::type_id::create("VCs_Support");
         CT_Mode = uvm_reg_field::type_id::create("CT_Mode");
         VC_Refresh_Interval = uvm_reg_field::type_id::create("VC_Refresh_Interval");

         VCs_Enable.configure(this, 8, 24, "RW", 0, 8'h00, 1, 1, 1);
         VCs_Support.configure(this, 8, 16, "RO", 0, 8'h00, 1, 0, 1);
         CT_Mode.configure(this, 8, 8, "RW", 0, 8'h00, 1, 1, 1);
         VC_Refresh_Interval.configure(this, 8, 0, "RW", 0, 8'h00, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_4_Local_ackID_CSR_reg
   // 
   // ackID Register
   //--------------------------------------------------------------------

   class Port_4_Local_ackID_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_4_Local_ackID_CSR_reg)

      rand uvm_reg_field Outbound_ackID; 
      uvm_reg_field Reserved_2; 
      uvm_reg_field Outstanding_ackID; 
      uvm_reg_field Reserved_1; 
      rand uvm_reg_field Inbound_ackID; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Clr_outstanding_ackID; 


      // Function: new
      // 
      function new(string name = "Port_4_Local_ackID_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Outbound_ackID = uvm_reg_field::type_id::create("Outbound_ackID");
         Reserved_2 = uvm_reg_field::type_id::create("Reserved_2");
         Outstanding_ackID = uvm_reg_field::type_id::create("Outstanding_ackID");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         Inbound_ackID = uvm_reg_field::type_id::create("Inbound_ackID");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Clr_outstanding_ackID = uvm_reg_field::type_id::create("Clr_outstanding_ackID");

         Outbound_ackID.configure(this, 6, 26, "RW", 0, 6'b000000, 1, 1, 0);
         Reserved_2.configure(this, 2, 24, "RO", 0, 2'b00, 1, 0, 0);
         Outstanding_ackID.configure(this, 6, 18, "RW", 0, 6'b000000, 1, 1, 0);
         Reserved_1.configure(this, 10, 8, "RO", 0, 10'b0000000000, 1, 0, 0);
         Inbound_ackID.configure(this, 6, 2, "RW", 0, 6'b000000, 1, 1, 0);
         Reserved.configure(this, 1, 1, "RO", 0, 1'b0, 1, 0, 0);
         Clr_outstanding_ackID.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_10_Timestamp_Synchronization_Status_CSR_reg
   // 
   // Timestamp_Synchronization_Status_CSR_Register
   //--------------------------------------------------------------------

   class Port_10_Timestamp_Synchronization_Status_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_10_Timestamp_Synchronization_Status_CSR_reg)

      uvm_reg_field Delay; 
      uvm_reg_field Reserved; 
      uvm_reg_field Response_Valid; 


      // Function: new
      // 
      function new(string name = "Port_10_Timestamp_Synchronization_Status_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Delay = uvm_reg_field::type_id::create("Delay");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Response_Valid = uvm_reg_field::type_id::create("Response_Valid");

         Delay.configure(this, 10, 22, "RO", 0, 10'b0000000000, 1, 0, 0);
         Reserved.configure(this, 21, 1, "RO", 0, 21'b000000000000000000000, 1, 0, 0);
         Response_Valid.configure(this, 1, 0, "RO", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_Link_Timeout_Control_CSR_reg
   // 
   // Link Time out Register
   //--------------------------------------------------------------------

   class Port_Link_Timeout_Control_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_Link_Timeout_Control_CSR_reg)

      uvm_reg_field Reserved; 
      rand uvm_reg_field timeout_value; 


      // Function: new
      // 
      function new(string name = "Port_Link_Timeout_Control_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         timeout_value = uvm_reg_field::type_id::create("timeout_value");

         Reserved.configure(this, 8, 24, "RO", 0, 8'h00, 1, 0, 1);
         timeout_value.configure(this, 24, 0, "RW", 0, 24'hffffff, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_8_VC5_VC1_BW_Allocation_Register_reg
   // 
   // BW Allocation Register
   //--------------------------------------------------------------------

   class Port_8_VC5_VC1_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_8_VC5_VC1_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 


      // Function: new
      // 
      function new(string name = "Port_8_VC5_VC1_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");

         Bandwidth_Allocation.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Lane_9_Status_3_CSR_reg
   // 
   // Status 3 Register
   //--------------------------------------------------------------------

   class Lane_9_Status_3_CSR_reg extends uvm_reg;
      `uvm_object_utils(Lane_9_Status_3_CSR_reg)

      uvm_reg_field Reserved; 
      uvm_reg_field LP_State_Control_Reserved; 
      uvm_reg_field LP_Lane_Entering_Silence; 
      uvm_reg_field LP_Port_Entering_Silence; 
      uvm_reg_field LP_Retraining; 
      uvm_reg_field LP_Retrain_Ready; 
      uvm_reg_field LP_Retrain_Grant; 
      uvm_reg_field LP_Transmit_Equalizer_Status; 
      uvm_reg_field LP_Transmit_Equalizer_Command; 
      uvm_reg_field LP_Transmit_Equalizer_Tap; 
      uvm_reg_field LP_Transmit_SC_Sequences; 
      uvm_reg_field LP_Transmit_Width_Request_Pending; 
      uvm_reg_field LP_Transmit_Width_Request; 


      // Function: new
      // 
      function new(string name = "Lane_9_Status_3_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         LP_State_Control_Reserved = uvm_reg_field::type_id::create("LP_State_Control_Reserved");
         LP_Lane_Entering_Silence = uvm_reg_field::type_id::create("LP_Lane_Entering_Silence");
         LP_Port_Entering_Silence = uvm_reg_field::type_id::create("LP_Port_Entering_Silence");
         LP_Retraining = uvm_reg_field::type_id::create("LP_Retraining");
         LP_Retrain_Ready = uvm_reg_field::type_id::create("LP_Retrain_Ready");
         LP_Retrain_Grant = uvm_reg_field::type_id::create("LP_Retrain_Grant");
         LP_Transmit_Equalizer_Status = uvm_reg_field::type_id::create("LP_Transmit_Equalizer_Status");
         LP_Transmit_Equalizer_Command = uvm_reg_field::type_id::create("LP_Transmit_Equalizer_Command");
         LP_Transmit_Equalizer_Tap = uvm_reg_field::type_id::create("LP_Transmit_Equalizer_Tap");
         LP_Transmit_SC_Sequences = uvm_reg_field::type_id::create("LP_Transmit_SC_Sequences");
         LP_Transmit_Width_Request_Pending = uvm_reg_field::type_id::create("LP_Transmit_Width_Request_Pending");
         LP_Transmit_Width_Request = uvm_reg_field::type_id::create("LP_Transmit_Width_Request");

         Reserved.configure(this, 4, 28, "RO", 0, 4'h0, 1, 0, 0);
         LP_State_Control_Reserved.configure(this, 8, 20, "RO", 0, 8'h00, 1, 0, 0);
         LP_Lane_Entering_Silence.configure(this, 1, 19, "RO", 0, 1'b0, 1, 0, 0);
         LP_Port_Entering_Silence.configure(this, 1, 18, "RO", 0, 1'b0, 1, 0, 0);
         LP_Retraining.configure(this, 1, 17, "RO", 0, 1'b0, 1, 0, 0);
         LP_Retrain_Ready.configure(this, 1, 16, "RO", 0, 1'b0, 1, 0, 0);
         LP_Retrain_Grant.configure(this, 1, 15, "RO", 0, 1'b0, 1, 0, 0);
         LP_Transmit_Equalizer_Status.configure(this, 3, 12, "RO", 0, 3'b000, 1, 0, 0);
         LP_Transmit_Equalizer_Command.configure(this, 3, 9, "RO", 0, 3'b000, 1, 0, 0);
         LP_Transmit_Equalizer_Tap.configure(this, 4, 5, "RO", 0, 4'h0, 1, 0, 0);
         LP_Transmit_SC_Sequences.configure(this, 1, 4, "RO", 0, 1'b0, 1, 0, 0);
         LP_Transmit_Width_Request_Pending.configure(this, 1, 3, "RO", 0, 1'b0, 1, 0, 0);
         LP_Transmit_Width_Request.configure(this, 3, 0, "RO", 0, 3'b000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_5_Timestamp_1_LSW_CSR_reg
   // 
   // Timestamp_1_LSW_Register
   //--------------------------------------------------------------------

   class Port_5_Timestamp_1_LSW_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_5_Timestamp_1_LSW_CSR_reg)

      uvm_reg_field LSW_Bits; 


      // Function: new
      // 
      function new(string name = "Port_5_Timestamp_1_LSW_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         LSW_Bits = uvm_reg_field::type_id::create("LSW_Bits");

         LSW_Bits.configure(this, 32, 0, "RO", 0, 32'h00000000, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_6_Local_ackID_CSR_reg
   // 
   // ackID Register
   //--------------------------------------------------------------------

   class Port_6_Local_ackID_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_6_Local_ackID_CSR_reg)

      rand uvm_reg_field Outbound_ackID; 
      uvm_reg_field Reserved_2; 
      uvm_reg_field Outstanding_ackID; 
      uvm_reg_field Reserved_1; 
      rand uvm_reg_field Inbound_ackID; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Clr_outstanding_ackID; 


      // Function: new
      // 
      function new(string name = "Port_6_Local_ackID_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Outbound_ackID = uvm_reg_field::type_id::create("Outbound_ackID");
         Reserved_2 = uvm_reg_field::type_id::create("Reserved_2");
         Outstanding_ackID = uvm_reg_field::type_id::create("Outstanding_ackID");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         Inbound_ackID = uvm_reg_field::type_id::create("Inbound_ackID");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Clr_outstanding_ackID = uvm_reg_field::type_id::create("Clr_outstanding_ackID");

         Outbound_ackID.configure(this, 6, 26, "RW", 0, 6'b000000, 1, 1, 0);
         Reserved_2.configure(this, 2, 24, "RO", 0, 2'b00, 1, 0, 0);
         Outstanding_ackID.configure(this, 6, 18, "RW", 0, 6'b000000, 1, 1, 0);
         Reserved_1.configure(this, 10, 8, "RO", 0, 10'b0000000000, 1, 0, 0);
         Inbound_ackID.configure(this, 6, 2, "RW", 0, 6'b000000, 1, 1, 0);
         Reserved.configure(this, 1, 1, "RO", 0, 1'b0, 1, 0, 0);
         Clr_outstanding_ackID.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_0_Timestamp_1_MSW_CSR_reg
   // 
   // Timestamp_1_MSW_Register
   //--------------------------------------------------------------------

   class Port_0_Timestamp_1_MSW_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_0_Timestamp_1_MSW_CSR_reg)

      uvm_reg_field MSW_Bits; 


      // Function: new
      // 
      function new(string name = "Port_0_Timestamp_1_MSW_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         MSW_Bits = uvm_reg_field::type_id::create("MSW_Bits");

         MSW_Bits.configure(this, 32, 0, "RO", 0, 32'h00000000, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_6_Packet_Capture_2_CSR_reg
   // 
   // Packet Capture 2 Register
   //--------------------------------------------------------------------

   class Port_6_Packet_Capture_2_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_6_Packet_Capture_2_CSR_reg)

      rand uvm_reg_field Capture2; 


      // Function: new
      // 
      function new(string name = "Port_6_Packet_Capture_2_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture2 = uvm_reg_field::type_id::create("Capture2");

         Capture2.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_13_Timestamp_Offset_CSR_reg
   // 
   // Timestamp_Offset_CSR_Register
   //--------------------------------------------------------------------

   class Port_13_Timestamp_Offset_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_13_Timestamp_Offset_CSR_reg)

      uvm_reg_field Reserved; 
      rand uvm_reg_field Offset; 


      // Function: new
      // 
      function new(string name = "Port_13_Timestamp_Offset_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Offset = uvm_reg_field::type_id::create("Offset");

         Reserved.configure(this, 16, 16, "RO", 0, 16'h0000, 1, 0, 1);
         Offset.configure(this, 16, 0, "RW", 0, 16'h0000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_13_Link_Maintenance_Request_CSR_reg
   // 
   // Link  Maintenance Request Register
   //--------------------------------------------------------------------

   class Port_13_Link_Maintenance_Request_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_13_Link_Maintenance_Request_CSR_reg)

      uvm_reg_field Command; 
      uvm_reg_field Reserved; 


      // Function: new
      // 
      function new(string name = "Port_13_Link_Maintenance_Request_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Command = uvm_reg_field::type_id::create("Command");
         Reserved = uvm_reg_field::type_id::create("Reserved");

         Command.configure(this, 3, 29, "RW", 0, 3'b000, 1, 1, 1);
         Reserved.configure(this, 29, 0, "RO", 0, 29'b00000000000000000000000000000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_14_Timestamp_0_LSW_CSR_reg
   // 
   // Timestamp_0_LSW_Register
   //--------------------------------------------------------------------

   class Port_14_Timestamp_0_LSW_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_14_Timestamp_0_LSW_CSR_reg)

      uvm_reg_field LSW_Bits; 


      // Function: new
      // 
      function new(string name = "Port_14_Timestamp_0_LSW_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         LSW_Bits = uvm_reg_field::type_id::create("LSW_Bits");

         LSW_Bits.configure(this, 32, 0, "RO", 0, 32'h00000000, 1, 0, 1);
      endfunction
   endclass

   //--------------------------------------------------------------------
   // Class: Port_0_Link_Timers_Control_2_CSR_reg
   // 
   // Link_Timers_Control_2_Register
   //--------------------------------------------------------------------

   class Port_0_Link_Timers_Control_2_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_0_Link_Timers_Control_2_CSR_reg)

      uvm_reg_field Reserved; 
      rand uvm_reg_field Recovery_Timer; 
      rand uvm_reg_field Discovery_Completion_Timer; 
      rand uvm_reg_field Retraining_Completion_Timer; 


      // Function: new
      // 
      function new(string name = "Port_0_Link_Timers_Control_2_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Recovery_Timer = uvm_reg_field::type_id::create("Recovery_Timer");
         Discovery_Completion_Timer = uvm_reg_field::type_id::create("Discovery_Completion_Timer");
         Retraining_Completion_Timer = uvm_reg_field::type_id::create("Retraining_Completion_Timer");

         Reserved.configure(this, 8, 24, "RO", 0, 8'h00, 1, 0, 1);
         Recovery_Timer.configure(this, 8, 16, "RW", 0, 8'hff, 1, 1, 1);
         Discovery_Completion_Timer.configure(this, 8, 8, "RW", 0, 8'h00, 1, 1, 1);
         Retraining_Completion_Timer.configure(this, 8, 0, "RW", 0, 8'hfe, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_13_Link_Timers_Control_3_CSR_reg
   // 
   // Link_Timers_Control_3_Register
   //--------------------------------------------------------------------

   class Port_13_Link_Timers_Control_3_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_13_Link_Timers_Control_3_CSR_reg)

      rand uvm_reg_field Keep_alive_Transmission_Interval; 
      rand uvm_reg_field Keep_alive_Transmission_Period; 
      rand uvm_reg_field Receive_Width_Command_Timeout; 
      rand uvm_reg_field Transmit_Width_Command_Timeout; 


      // Function: new
      // 
      function new(string name = "Port_13_Link_Timers_Control_3_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Keep_alive_Transmission_Interval = uvm_reg_field::type_id::create("Keep_alive_Transmission_Interval");
         Keep_alive_Transmission_Period = uvm_reg_field::type_id::create("Keep_alive_Transmission_Period");
         Receive_Width_Command_Timeout = uvm_reg_field::type_id::create("Receive_Width_Command_Timeout");
         Transmit_Width_Command_Timeout = uvm_reg_field::type_id::create("Transmit_Width_Command_Timeout");

         Keep_alive_Transmission_Interval.configure(this, 10, 22, "RW", 0, 10'b1111111111, 1, 1, 0);
         Keep_alive_Transmission_Period.configure(this, 6, 16, "RW", 0, 6'b000001, 1, 1, 0);
         Receive_Width_Command_Timeout.configure(this, 8, 8, "RW", 0, 8'h40, 1, 1, 1);
         Transmit_Width_Command_Timeout.configure(this, 8, 0, "RW", 0, 8'hff, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_15_Attributes_Capture_CSR_reg
   // 
   // Attributes Register
   //--------------------------------------------------------------------

   class Port_15_Attributes_Capture_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_15_Attributes_Capture_CSR_reg)

      rand uvm_reg_field Capture_valid_info; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Implementation_Dependent; 
      rand uvm_reg_field Error_type; 
      rand uvm_reg_field Info_type; 


      // Function: new
      // 
      function new(string name = "Port_15_Attributes_Capture_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture_valid_info = uvm_reg_field::type_id::create("Capture_valid_info");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Implementation_Dependent = uvm_reg_field::type_id::create("Implementation_Dependent");
         Error_type = uvm_reg_field::type_id::create("Error_type");
         Info_type = uvm_reg_field::type_id::create("Info_type");

         Capture_valid_info.configure(this, 1, 31, "RW", 0, 1'b0, 1, 1, 0);
         Reserved.configure(this, 3, 28, "RO", 0, 3'b000, 1, 0, 0);
         Implementation_Dependent.configure(this, 20, 8, "RW", 0, 20'h00000, 1, 1, 0);
         Error_type.configure(this, 5, 3, "RW", 0, 5'b00000, 1, 1, 0);
         Info_type.configure(this, 3, 0, "RW", 0, 3'b000, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_7_Packet_Capture_1_CSR_reg
   // 
   // Packet Capture 1 Register
   //--------------------------------------------------------------------

   class Port_7_Packet_Capture_1_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_7_Packet_Capture_1_CSR_reg)

      rand uvm_reg_field Capture1; 


      // Function: new
      // 
      function new(string name = "Port_7_Packet_Capture_1_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture1 = uvm_reg_field::type_id::create("Capture1");

         Capture1.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Lane_12_Status_3_CSR_reg
   // 
   // Status 3 Register
   //--------------------------------------------------------------------

   class Lane_12_Status_3_CSR_reg extends uvm_reg;
      `uvm_object_utils(Lane_12_Status_3_CSR_reg)

      uvm_reg_field Reserved; 
      uvm_reg_field LP_State_Control_Reserved; 
      uvm_reg_field LP_Lane_Entering_Silence; 
      uvm_reg_field LP_Port_Entering_Silence; 
      uvm_reg_field LP_Retraining; 
      uvm_reg_field LP_Retrain_Ready; 
      uvm_reg_field LP_Retrain_Grant; 
      uvm_reg_field LP_Transmit_Equalizer_Status; 
      uvm_reg_field LP_Transmit_Equalizer_Command; 
      uvm_reg_field LP_Transmit_Equalizer_Tap; 
      uvm_reg_field LP_Transmit_SC_Sequences; 
      uvm_reg_field LP_Transmit_Width_Request_Pending; 
      uvm_reg_field LP_Transmit_Width_Request; 


      // Function: new
      // 
      function new(string name = "Lane_12_Status_3_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         LP_State_Control_Reserved = uvm_reg_field::type_id::create("LP_State_Control_Reserved");
         LP_Lane_Entering_Silence = uvm_reg_field::type_id::create("LP_Lane_Entering_Silence");
         LP_Port_Entering_Silence = uvm_reg_field::type_id::create("LP_Port_Entering_Silence");
         LP_Retraining = uvm_reg_field::type_id::create("LP_Retraining");
         LP_Retrain_Ready = uvm_reg_field::type_id::create("LP_Retrain_Ready");
         LP_Retrain_Grant = uvm_reg_field::type_id::create("LP_Retrain_Grant");
         LP_Transmit_Equalizer_Status = uvm_reg_field::type_id::create("LP_Transmit_Equalizer_Status");
         LP_Transmit_Equalizer_Command = uvm_reg_field::type_id::create("LP_Transmit_Equalizer_Command");
         LP_Transmit_Equalizer_Tap = uvm_reg_field::type_id::create("LP_Transmit_Equalizer_Tap");
         LP_Transmit_SC_Sequences = uvm_reg_field::type_id::create("LP_Transmit_SC_Sequences");
         LP_Transmit_Width_Request_Pending = uvm_reg_field::type_id::create("LP_Transmit_Width_Request_Pending");
         LP_Transmit_Width_Request = uvm_reg_field::type_id::create("LP_Transmit_Width_Request");

         Reserved.configure(this, 4, 28, "RO", 0, 4'h0, 1, 0, 0);
         LP_State_Control_Reserved.configure(this, 8, 20, "RO", 0, 8'h00, 1, 0, 0);
         LP_Lane_Entering_Silence.configure(this, 1, 19, "RO", 0, 1'b0, 1, 0, 0);
         LP_Port_Entering_Silence.configure(this, 1, 18, "RO", 0, 1'b0, 1, 0, 0);
         LP_Retraining.configure(this, 1, 17, "RO", 0, 1'b0, 1, 0, 0);
         LP_Retrain_Ready.configure(this, 1, 16, "RO", 0, 1'b0, 1, 0, 0);
         LP_Retrain_Grant.configure(this, 1, 15, "RO", 0, 1'b0, 1, 0, 0);
         LP_Transmit_Equalizer_Status.configure(this, 3, 12, "RO", 0, 3'b000, 1, 0, 0);
         LP_Transmit_Equalizer_Command.configure(this, 3, 9, "RO", 0, 3'b000, 1, 0, 0);
         LP_Transmit_Equalizer_Tap.configure(this, 4, 5, "RO", 0, 4'h0, 1, 0, 0);
         LP_Transmit_SC_Sequences.configure(this, 1, 4, "RO", 0, 1'b0, 1, 0, 0);
         LP_Transmit_Width_Request_Pending.configure(this, 1, 3, "RO", 0, 1'b0, 1, 0, 0);
         LP_Transmit_Width_Request.configure(this, 3, 0, "RO", 0, 3'b000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_4_Timestamp_1_MSW_CSR_reg
   // 
   // Timestamp_1_MSW_Register
   //--------------------------------------------------------------------

   class Port_4_Timestamp_1_MSW_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_4_Timestamp_1_MSW_CSR_reg)

      uvm_reg_field MSW_Bits; 


      // Function: new
      // 
      function new(string name = "Port_4_Timestamp_1_MSW_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         MSW_Bits = uvm_reg_field::type_id::create("MSW_Bits");

         MSW_Bits.configure(this, 32, 0, "RO", 0, 32'h00000000, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_7_VC6_VC2_BW_Allocation_Register_reg
   // 
   // BW Allocation Register
   //--------------------------------------------------------------------

   class Port_7_VC6_VC2_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_7_VC6_VC2_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 


      // Function: new
      // 
      function new(string name = "Port_7_VC6_VC2_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");

         Bandwidth_Allocation.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_15_VC6_VC2_BW_Allocation_Register_reg
   // 
   // BW Allocation Register
   //--------------------------------------------------------------------

   class Port_15_VC6_VC2_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_15_VC6_VC2_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 


      // Function: new
      // 
      function new(string name = "Port_15_VC6_VC2_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");

         Bandwidth_Allocation.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_4_VC7_VC3_BW_Allocation_Register_reg
   // 
   // BW Allocation Register
   //--------------------------------------------------------------------

   class Port_4_VC7_VC3_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_4_VC7_VC3_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 


      // Function: new
      // 
      function new(string name = "Port_4_VC7_VC3_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");

         Bandwidth_Allocation.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_4_Link_Uninit_Discard_Timer_CSR_reg
   // 
   // Link_Uninit_Discard_Timer_CSR_Register
   //--------------------------------------------------------------------

   class Port_4_Link_Uninit_Discard_Timer_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_4_Link_Uninit_Discard_Timer_CSR_reg)

      uvm_reg_field Reserved; 
      rand uvm_reg_field Link_Uninit_Timeout; 


      // Function: new
      // 
      function new(string name = "Port_4_Link_Uninit_Discard_Timer_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Link_Uninit_Timeout = uvm_reg_field::type_id::create("Link_Uninit_Timeout");

         Reserved.configure(this, 8, 24, "RO", 0, 8'h00, 1, 0, 1);
         Link_Uninit_Timeout.configure(this, 24, 0, "RW", 0, 24'h000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Lane_1_Status_3_CSR_reg
   // 
   // Status 3 Register
   //--------------------------------------------------------------------

   class Lane_1_Status_3_CSR_reg extends uvm_reg;
      `uvm_object_utils(Lane_1_Status_3_CSR_reg)

      uvm_reg_field Reserved; 
      uvm_reg_field LP_State_Control_Reserved; 
      uvm_reg_field LP_Lane_Entering_Silence; 
      uvm_reg_field LP_Port_Entering_Silence; 
      uvm_reg_field LP_Retraining; 
      uvm_reg_field LP_Retrain_Ready; 
      uvm_reg_field LP_Retrain_Grant; 
      uvm_reg_field LP_Transmit_Equalizer_Status; 
      uvm_reg_field LP_Transmit_Equalizer_Command; 
      uvm_reg_field LP_Transmit_Equalizer_Tap; 
      uvm_reg_field LP_Transmit_SC_Sequences; 
      uvm_reg_field LP_Transmit_Width_Request_Pending; 
      uvm_reg_field LP_Transmit_Width_Request; 


      // Function: new
      // 
      function new(string name = "Lane_1_Status_3_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         LP_State_Control_Reserved = uvm_reg_field::type_id::create("LP_State_Control_Reserved");
         LP_Lane_Entering_Silence = uvm_reg_field::type_id::create("LP_Lane_Entering_Silence");
         LP_Port_Entering_Silence = uvm_reg_field::type_id::create("LP_Port_Entering_Silence");
         LP_Retraining = uvm_reg_field::type_id::create("LP_Retraining");
         LP_Retrain_Ready = uvm_reg_field::type_id::create("LP_Retrain_Ready");
         LP_Retrain_Grant = uvm_reg_field::type_id::create("LP_Retrain_Grant");
         LP_Transmit_Equalizer_Status = uvm_reg_field::type_id::create("LP_Transmit_Equalizer_Status");
         LP_Transmit_Equalizer_Command = uvm_reg_field::type_id::create("LP_Transmit_Equalizer_Command");
         LP_Transmit_Equalizer_Tap = uvm_reg_field::type_id::create("LP_Transmit_Equalizer_Tap");
         LP_Transmit_SC_Sequences = uvm_reg_field::type_id::create("LP_Transmit_SC_Sequences");
         LP_Transmit_Width_Request_Pending = uvm_reg_field::type_id::create("LP_Transmit_Width_Request_Pending");
         LP_Transmit_Width_Request = uvm_reg_field::type_id::create("LP_Transmit_Width_Request");

         Reserved.configure(this, 4, 28, "RO", 0, 4'h0, 1, 0, 0);
         LP_State_Control_Reserved.configure(this, 8, 20, "RO", 0, 8'h00, 1, 0, 0);
         LP_Lane_Entering_Silence.configure(this, 1, 19, "RO", 0, 1'b0, 1, 0, 0);
         LP_Port_Entering_Silence.configure(this, 1, 18, "RO", 0, 1'b0, 1, 0, 0);
         LP_Retraining.configure(this, 1, 17, "RO", 0, 1'b0, 1, 0, 0);
         LP_Retrain_Ready.configure(this, 1, 16, "RO", 0, 1'b0, 1, 0, 0);
         LP_Retrain_Grant.configure(this, 1, 15, "RO", 0, 1'b0, 1, 0, 0);
         LP_Transmit_Equalizer_Status.configure(this, 3, 12, "RO", 0, 3'b000, 1, 0, 0);
         LP_Transmit_Equalizer_Command.configure(this, 3, 9, "RO", 0, 3'b000, 1, 0, 0);
         LP_Transmit_Equalizer_Tap.configure(this, 4, 5, "RO", 0, 4'h0, 1, 0, 0);
         LP_Transmit_SC_Sequences.configure(this, 1, 4, "RO", 0, 1'b0, 1, 0, 0);
         LP_Transmit_Width_Request_Pending.configure(this, 1, 3, "RO", 0, 1'b0, 1, 0, 0);
         LP_Transmit_Width_Request.configure(this, 3, 0, "RO", 0, 3'b000, 1, 0, 0);
      endfunction
   endclass


   //--------------------------------------------------------------------
   // Class: Port_12_Timestamp_Offset_CSR_reg
   // 
   // Timestamp_Offset_CSR_Register
   //--------------------------------------------------------------------

   class Port_12_Timestamp_Offset_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_12_Timestamp_Offset_CSR_reg)

      uvm_reg_field Reserved; 
      rand uvm_reg_field Offset; 


      // Function: new
      // 
      function new(string name = "Port_12_Timestamp_Offset_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Offset = uvm_reg_field::type_id::create("Offset");

         Reserved.configure(this, 16, 16, "RO", 0, 16'h0000, 1, 0, 1);
         Offset.configure(this, 16, 0, "RW", 0, 16'h0000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Lane_2_Status_2_CSR_reg
   // 
   // Status 2 Register
   //--------------------------------------------------------------------

   class Lane_2_Status_2_CSR_reg extends uvm_reg;
      `uvm_object_utils(Lane_2_Status_2_CSR_reg)

      uvm_reg_field Reserved; 
      uvm_reg_field LP_Change_Receiver_Width_Command_Negative_Acknowlege; 
      uvm_reg_field LP_Change_Receiver_Width_Command_Acknowlege; 
      uvm_reg_field LP_Change_Receiver_Width_Command; 
      uvm_reg_field LP_Lane_Trained; 
      uvm_reg_field LP_Receive_Lane_Ready; 
      uvm_reg_field LP_Receive_Lanes_Ready; 
      uvm_reg_field LP_Receive_Width; 
      uvm_reg_field LP_Transmit_1x_Mode; 
      uvm_reg_field LP_Port_Intialized; 
      uvm_reg_field LP_Asymmetric_mode_Enabled; 
      uvm_reg_field LP_Retraining_Enabled; 
      uvm_reg_field LP_Remort_Training_Support; 
      uvm_reg_field LP_Lane_Number; 
      uvm_reg_field LP_Port_Number; 


      // Function: new
      // 
      function new(string name = "Lane_2_Status_2_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         LP_Change_Receiver_Width_Command_Negative_Acknowlege = uvm_reg_field::type_id::create("LP_Change_Receiver_Width_Command_Negative_Acknowlege");
         LP_Change_Receiver_Width_Command_Acknowlege = uvm_reg_field::type_id::create("LP_Change_Receiver_Width_Command_Acknowlege");
         LP_Change_Receiver_Width_Command = uvm_reg_field::type_id::create("LP_Change_Receiver_Width_Command");
         LP_Lane_Trained = uvm_reg_field::type_id::create("LP_Lane_Trained");
         LP_Receive_Lane_Ready = uvm_reg_field::type_id::create("LP_Receive_Lane_Ready");
         LP_Receive_Lanes_Ready = uvm_reg_field::type_id::create("LP_Receive_Lanes_Ready");
         LP_Receive_Width = uvm_reg_field::type_id::create("LP_Receive_Width");
         LP_Transmit_1x_Mode = uvm_reg_field::type_id::create("LP_Transmit_1x_Mode");
         LP_Port_Intialized = uvm_reg_field::type_id::create("LP_Port_Intialized");
         LP_Asymmetric_mode_Enabled = uvm_reg_field::type_id::create("LP_Asymmetric_mode_Enabled");
         LP_Retraining_Enabled = uvm_reg_field::type_id::create("LP_Retraining_Enabled");
         LP_Remort_Training_Support = uvm_reg_field::type_id::create("LP_Remort_Training_Support");
         LP_Lane_Number = uvm_reg_field::type_id::create("LP_Lane_Number");
         LP_Port_Number = uvm_reg_field::type_id::create("LP_Port_Number");

         Reserved.configure(this, 2, 30, "RO", 0, 2'b00, 1, 0, 0);
         LP_Change_Receiver_Width_Command_Negative_Acknowlege.configure(this, 1, 29, "RO", 0, 1'b0, 1, 0, 0);
         LP_Change_Receiver_Width_Command_Acknowlege.configure(this, 1, 28, "RO", 0, 1'b0, 1, 0, 0);
         LP_Change_Receiver_Width_Command.configure(this, 3, 25, "RO", 0, 3'b000, 1, 0, 0);
         LP_Lane_Trained.configure(this, 1, 24, "RO", 0, 1'b0, 1, 0, 0);
         LP_Receive_Lane_Ready.configure(this, 1, 23, "RO", 0, 1'b0, 1, 0, 0);
         LP_Receive_Lanes_Ready.configure(this, 3, 20, "RO", 0, 3'b000, 1, 0, 0);
         LP_Receive_Width.configure(this, 3, 17, "RO", 0, 3'b000, 1, 0, 0);
         LP_Transmit_1x_Mode.configure(this, 1, 16, "RO", 0, 1'b0, 1, 0, 0);
         LP_Port_Intialized.configure(this, 1, 15, "RO", 0, 1'b0, 1, 0, 0);
         LP_Asymmetric_mode_Enabled.configure(this, 1, 14, "RO", 0, 1'b0, 1, 0, 0);
         LP_Retraining_Enabled.configure(this, 1, 13, "RO", 0, 1'b0, 1, 0, 0);
         LP_Remort_Training_Support.configure(this, 1, 12, "RO", 0, 1'b0, 1, 0, 0);
         LP_Lane_Number.configure(this, 4, 8, "RO", 0, 4'h0, 1, 0, 0);
         LP_Port_Number.configure(this, 8, 0, "RO", 0, 8'h00, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Lane_0_Status_0_CSR_reg
   // 
   // Status 0 Register
   //--------------------------------------------------------------------

   class Lane_0_Status_0_CSR_reg extends uvm_reg;
      `uvm_object_utils(Lane_0_Status_0_CSR_reg)

      uvm_reg_field Status2_7_CSRs_implemented; 
      uvm_reg_field Status1_CSR_implemented; 
      uvm_reg_field Reserved; 
      uvm_reg_field Rcvr_trained_state_change; 
      uvm_reg_field Lane_sync_state_change; 
      uvm_reg_field lane_8B_10B_decoding_errors; 
      uvm_reg_field Receiver_lane_ready; 
      uvm_reg_field Receiver_lane_sync; 
      uvm_reg_field Receiver_trained; 
      uvm_reg_field Receiver_input_inverted; 
      uvm_reg_field Receiver_type; 
      uvm_reg_field Transmitter_mode; 
      uvm_reg_field Transmitter_type; 
      uvm_reg_field Lane_Number; 
      uvm_reg_field Port_Number; 


      // Function: new
      // 
      function new(string name = "Lane_0_Status_0_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Status2_7_CSRs_implemented = uvm_reg_field::type_id::create("Status2_7_CSRs_implemented");
         Status1_CSR_implemented = uvm_reg_field::type_id::create("Status1_CSR_implemented");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Rcvr_trained_state_change = uvm_reg_field::type_id::create("Rcvr_trained_state_change");
         Lane_sync_state_change = uvm_reg_field::type_id::create("Lane_sync_state_change");
         lane_8B_10B_decoding_errors = uvm_reg_field::type_id::create("lane_8B_10B_decoding_errors");
         Receiver_lane_ready = uvm_reg_field::type_id::create("Receiver_lane_ready");
         Receiver_lane_sync = uvm_reg_field::type_id::create("Receiver_lane_sync");
         Receiver_trained = uvm_reg_field::type_id::create("Receiver_trained");
         Receiver_input_inverted = uvm_reg_field::type_id::create("Receiver_input_inverted");
         Receiver_type = uvm_reg_field::type_id::create("Receiver_type");
         Transmitter_mode = uvm_reg_field::type_id::create("Transmitter_mode");
         Transmitter_type = uvm_reg_field::type_id::create("Transmitter_type");
         Lane_Number = uvm_reg_field::type_id::create("Lane_Number");
         Port_Number = uvm_reg_field::type_id::create("Port_Number");

         Status2_7_CSRs_implemented.configure(this, 3, 29, "RO", 0, 3'b000, 1, 0, 0);
         Status1_CSR_implemented.configure(this, 1, 28, "RO", 0, 1'b0, 1, 0, 0);
         Reserved.configure(this, 2, 26, "RO", 0, 2'b00, 1, 0, 0);
         Rcvr_trained_state_change.configure(this, 1, 25, "RO", 0, 1'b0, 1, 0, 0);
         Lane_sync_state_change.configure(this, 1, 24, "RO", 0, 1'b0, 1, 0, 0);
         lane_8B_10B_decoding_errors.configure(this, 4, 20, "RO", 0, 4'h0, 1, 0, 0);
         Receiver_lane_ready.configure(this, 1, 19, "RO", 0, 1'b0, 1, 0, 0);
         Receiver_lane_sync.configure(this, 1, 18, "RO", 0, 1'b0, 1, 0, 0);
         Receiver_trained.configure(this, 1, 17, "RO", 0, 1'b0, 1, 0, 0);
         Receiver_input_inverted.configure(this, 1, 16, "RO", 0, 1'b0, 1, 0, 0);
         Receiver_type.configure(this, 2, 14, "RO", 0, 2'b00, 1, 0, 0);
         Transmitter_mode.configure(this, 1, 13, "RO", 0, 1'b0, 1, 0, 0);
         Transmitter_type.configure(this, 1, 12, "RO", 0, 1'b0, 1, 0, 0);
         Lane_Number.configure(this, 4, 8, "RO", 0, 4'h0, 1, 0, 0);
         Port_Number.configure(this, 8, 0, "RO", 0, 8'h00, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_3_Timestamp_1_MSW_CSR_reg
   // 
   // Timestamp_1_MSW_Register
   //--------------------------------------------------------------------

   class Port_3_Timestamp_1_MSW_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_3_Timestamp_1_MSW_CSR_reg)

      uvm_reg_field MSW_Bits; 


      // Function: new
      // 
      function new(string name = "Port_3_Timestamp_1_MSW_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         MSW_Bits = uvm_reg_field::type_id::create("MSW_Bits");

         MSW_Bits.configure(this, 32, 0, "RO", 0, 32'h00000000, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_12_Packet_Control_Symbol_Capture_0_CSR_reg
   // 
   // Symbol Capture Register
   //--------------------------------------------------------------------

   class Port_12_Packet_Control_Symbol_Capture_0_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_12_Packet_Control_Symbol_Capture_0_CSR_reg)

      rand uvm_reg_field Capture0; 


      // Function: new
      // 
      function new(string name = "Port_12_Packet_Control_Symbol_Capture_0_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture0 = uvm_reg_field::type_id::create("Capture0");

         Capture0.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_7_Timestamp_0_LSW_CSR_reg
   // 
   // Timestamp_0_LSW_Register
   //--------------------------------------------------------------------

   class Port_7_Timestamp_0_LSW_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_7_Timestamp_0_LSW_CSR_reg)

      uvm_reg_field LSW_Bits; 


      // Function: new
      // 
      function new(string name = "Port_7_Timestamp_0_LSW_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         LSW_Bits = uvm_reg_field::type_id::create("LSW_Bits");

         LSW_Bits.configure(this, 32, 0, "RO", 0, 32'h00000000, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_13_Initialization_Status_CSR_reg
   // 
   // Initialization_Status_Register
   //--------------------------------------------------------------------

   class Port_13_Initialization_Status_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_13_Initialization_Status_CSR_reg)

      uvm_reg_field Reserved_3; 
      uvm_reg_field Transmitted_Status_Control_Symbols; 
      uvm_reg_field Reserved_2; 
      uvm_reg_field Received_Status_Control_Symbols; 
      uvm_reg_field Port_Initialization_State_Machine; 
      uvm_reg_field Reserved_1; 
      uvm_reg_field x1_x2_Mode_Detection; 
      uvm_reg_field Reserved; 
      uvm_reg_field Lane_Alignment; 


      // Function: new
      // 
      function new(string name = "Port_13_Initialization_Status_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved_3 = uvm_reg_field::type_id::create("Reserved_3");
         Transmitted_Status_Control_Symbols = uvm_reg_field::type_id::create("Transmitted_Status_Control_Symbols");
         Reserved_2 = uvm_reg_field::type_id::create("Reserved_2");
         Received_Status_Control_Symbols = uvm_reg_field::type_id::create("Received_Status_Control_Symbols");
         Port_Initialization_State_Machine = uvm_reg_field::type_id::create("Port_Initialization_State_Machine");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         x1_x2_Mode_Detection = uvm_reg_field::type_id::create("x1_x2_Mode_Detection");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Lane_Alignment = uvm_reg_field::type_id::create("Lane_Alignment");

         Reserved_3.configure(this, 4, 28, "RO", 0, 4'h0, 1, 0, 0);
         Transmitted_Status_Control_Symbols.configure(this, 7, 21, "RO", 0, 7'b0000000, 1, 0, 0);
         Reserved_2.configure(this, 1, 20, "RO", 0, 1'b0, 1, 0, 0);
         Received_Status_Control_Symbols.configure(this, 4, 16, "RO", 0, 4'h0, 1, 0, 0);
         Port_Initialization_State_Machine.configure(this, 5, 11, "RO", 0, 5'b00000, 1, 0, 0);
         Reserved_1.configure(this, 1, 10, "RO", 0, 1'b0, 1, 0, 0);
         x1_x2_Mode_Detection.configure(this, 4, 6, "RO", 0, 4'h0, 1, 0, 0);
         Reserved.configure(this, 1, 5, "RO", 0, 1'b0, 1, 0, 0);
         Lane_Alignment.configure(this, 5, 0, "RO", 0, 5'b00000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Lane_10_Status_1_CSR_reg
   // 
   // Status 1 Register
   //--------------------------------------------------------------------

   class Lane_10_Status_1_CSR_reg extends uvm_reg;
      `uvm_object_utils(Lane_10_Status_1_CSR_reg)

      uvm_reg_field Reserved; 
      uvm_reg_field IDLE3_SC_Retraining_State; 
      uvm_reg_field IDLE3_SC_Training_State; 
      uvm_reg_field IDLE3_DME_Training_State; 
      uvm_reg_field IDLE3_Training_Type; 
      uvm_reg_field IDLE3_Loss_of_Signals; 
      uvm_reg_field IDLE2_Connected_port_scrambling_descrambling_enabled; 
      uvm_reg_field IDLE2_Connected_port_transmit_emphasis_Tap_plus1_status; 
      uvm_reg_field IDLE2_Connected_port_transmit_emphasis_Tap_minus1_status; 
      uvm_reg_field IDLE2_Lane_number_in_connected_port; 
      uvm_reg_field IDLE2_Received_port_width; 
      uvm_reg_field IDLE2_Connected_port_lane_receiver_trained; 
      uvm_reg_field Implementation_defined; 
      uvm_reg_field Values_changed; 
      uvm_reg_field IDLE_information_current; 
      rand uvm_reg_field IDLE_received; 


      // Function: new
      // 
      function new(string name = "Lane_10_Status_1_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         IDLE3_SC_Retraining_State = uvm_reg_field::type_id::create("IDLE3_SC_Retraining_State");
         IDLE3_SC_Training_State = uvm_reg_field::type_id::create("IDLE3_SC_Training_State");
         IDLE3_DME_Training_State = uvm_reg_field::type_id::create("IDLE3_DME_Training_State");
         IDLE3_Training_Type = uvm_reg_field::type_id::create("IDLE3_Training_Type");
         IDLE3_Loss_of_Signals = uvm_reg_field::type_id::create("IDLE3_Loss_of_Signals");
         IDLE2_Connected_port_scrambling_descrambling_enabled = uvm_reg_field::type_id::create("IDLE2_Connected_port_scrambling_descrambling_enabled");
         IDLE2_Connected_port_transmit_emphasis_Tap_plus1_status = uvm_reg_field::type_id::create("IDLE2_Connected_port_transmit_emphasis_Tap_plus1_status");
         IDLE2_Connected_port_transmit_emphasis_Tap_minus1_status = uvm_reg_field::type_id::create("IDLE2_Connected_port_transmit_emphasis_Tap_minus1_status");
         IDLE2_Lane_number_in_connected_port = uvm_reg_field::type_id::create("IDLE2_Lane_number_in_connected_port");
         IDLE2_Received_port_width = uvm_reg_field::type_id::create("IDLE2_Received_port_width");
         IDLE2_Connected_port_lane_receiver_trained = uvm_reg_field::type_id::create("IDLE2_Connected_port_lane_receiver_trained");
         Implementation_defined = uvm_reg_field::type_id::create("Implementation_defined");
         Values_changed = uvm_reg_field::type_id::create("Values_changed");
         IDLE_information_current = uvm_reg_field::type_id::create("IDLE_information_current");
         IDLE_received = uvm_reg_field::type_id::create("IDLE_received");

         Reserved.configure(this, 6, 26, "RO", 0, 6'b000000, 1, 0, 0);
         IDLE3_SC_Retraining_State.configure(this, 2, 24, "RO", 0, 2'b00, 1, 0, 0);
         IDLE3_SC_Training_State.configure(this, 2, 22, "RO", 0, 2'b00, 1, 0, 0);
         IDLE3_DME_Training_State.configure(this, 2, 20, "RO", 0, 2'b00, 1, 0, 0);
         IDLE3_Training_Type.configure(this, 2, 18, "RO", 0, 2'b00, 1, 0, 0);
         IDLE3_Loss_of_Signals.configure(this, 1, 17, "RO", 0, 1'b0, 1, 0, 0);
         IDLE2_Connected_port_scrambling_descrambling_enabled.configure(this, 1, 16, "RO", 0, 1'b0, 1, 0, 0);
         IDLE2_Connected_port_transmit_emphasis_Tap_plus1_status.configure(this, 2, 14, "RO", 0, 2'b00, 1, 0, 0);
         IDLE2_Connected_port_transmit_emphasis_Tap_minus1_status.configure(this, 2, 12, "RO", 0, 2'b00, 1, 0, 0);
         IDLE2_Lane_number_in_connected_port.configure(this, 4, 8, "RO", 0, 4'h0, 1, 0, 0);
         IDLE2_Received_port_width.configure(this, 3, 5, "RO", 0, 3'b000, 1, 0, 0);
         IDLE2_Connected_port_lane_receiver_trained.configure(this, 1, 4, "RO", 0, 1'b0, 1, 0, 0);
         Implementation_defined.configure(this, 1, 3, "RO", 0, 1'b0, 1, 0, 0);
         Values_changed.configure(this, 1, 2, "RO", 0, 1'b1, 1, 0, 0);
         IDLE_information_current.configure(this, 1, 1, "RO", 0, 1'b0, 1, 0, 0);
         IDLE_received.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_0_VC5_VC1_BW_Allocation_Register_reg
   // 
   // BW Allocation Register
   //--------------------------------------------------------------------

   class Port_0_VC5_VC1_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_0_VC5_VC1_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 


      // Function: new
      // 
      function new(string name = "Port_0_VC5_VC1_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");

         Bandwidth_Allocation.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: LP_Serial_VC_Register_Block_Header_reg
   // 
   // VC_Register_Block_Header
   //--------------------------------------------------------------------

   class LP_Serial_VC_Register_Block_Header_reg extends uvm_reg;
      `uvm_object_utils(LP_Serial_VC_Register_Block_Header_reg)

      uvm_reg_field EF_ID; 
      uvm_reg_field EF_PTR; 


      // Function: new
      // 
      function new(string name = "LP_Serial_VC_Register_Block_Header_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         EF_ID = uvm_reg_field::type_id::create("EF_ID");
         EF_PTR = uvm_reg_field::type_id::create("EF_PTR");

         EF_ID.configure(this, 16, 16, "RO", 0, 16'h000b, 1, 0, 1);
         EF_PTR.configure(this, 16, 0, "RO", 0, 16'h1c00, 1, 0, 1);
      endfunction
   endclass

   //--------------------------------------------------------------------
   // Class: Port_15_Timestamp_1_MSW_CSR_reg
   // 
   // Timestamp_1_MSW_Register
   //--------------------------------------------------------------------

   class Port_15_Timestamp_1_MSW_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_15_Timestamp_1_MSW_CSR_reg)

      uvm_reg_field MSW_Bits; 


      // Function: new
      // 
      function new(string name = "Port_15_Timestamp_1_MSW_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         MSW_Bits = uvm_reg_field::type_id::create("MSW_Bits");

         MSW_Bits.configure(this, 32, 0, "RO", 0, 32'h00000000, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_1_Power_Management_CSR_reg
   // 
   // Power_Management_Register
   //--------------------------------------------------------------------

   class Port_1_Power_Management_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_1_Power_Management_CSR_reg)

      uvm_reg_field Reserved; 
      uvm_reg_field Status_of_Link_Partner_Transmit_Width_Change; 
      rand uvm_reg_field Change_Link_Partner_Transmit_width; 
      uvm_reg_field Status_of_My_Transmit_Width_Change; 
      rand uvm_reg_field Change_My_Transmit_Width; 
      uvm_reg_field Reciever_Width_Status; 
      uvm_reg_field Transmit_Width_Status; 
      rand uvm_reg_field Asymmetric_Modes_Enabled; 
      uvm_reg_field Asymmetric_Modes_Supported; 


      // Function: new
      // 
      function new(string name = "Port_1_Power_Management_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Status_of_Link_Partner_Transmit_Width_Change = uvm_reg_field::type_id::create("Status_of_Link_Partner_Transmit_Width_Change");
         Change_Link_Partner_Transmit_width = uvm_reg_field::type_id::create("Change_Link_Partner_Transmit_width");
         Status_of_My_Transmit_Width_Change = uvm_reg_field::type_id::create("Status_of_My_Transmit_Width_Change");
         Change_My_Transmit_Width = uvm_reg_field::type_id::create("Change_My_Transmit_Width");
         Reciever_Width_Status = uvm_reg_field::type_id::create("Reciever_Width_Status");
         Transmit_Width_Status = uvm_reg_field::type_id::create("Transmit_Width_Status");
         Asymmetric_Modes_Enabled = uvm_reg_field::type_id::create("Asymmetric_Modes_Enabled");
         Asymmetric_Modes_Supported = uvm_reg_field::type_id::create("Asymmetric_Modes_Supported");

         Reserved.configure(this, 6, 26, "RO", 0, 6'b000000, 1, 0, 0);
         Status_of_Link_Partner_Transmit_Width_Change.configure(this, 2, 24, "RO", 0, 2'b00, 1, 0, 0);
         Change_Link_Partner_Transmit_width.configure(this, 3, 21, "WRC", 0, 3'b000, 1, 1, 0);
         Status_of_My_Transmit_Width_Change.configure(this, 2, 19, "RO", 0, 2'b00, 1, 0, 0);
         Change_My_Transmit_Width.configure(this, 3, 16, "WRC", 0, 3'b000, 1, 1, 0);
         Reciever_Width_Status.configure(this, 3, 13, "RO", 0, 3'b000, 1, 0, 0);
         Transmit_Width_Status.configure(this, 3, 10, "RO", 0, 3'b000, 1, 0, 0);
         Asymmetric_Modes_Enabled.configure(this, 5, 5, "RW", 0, 5'b00000, 1, 1, 0);
         Asymmetric_Modes_Supported.configure(this, 5, 0, "RO", 0, 5'b00000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_9_Timestamp_1_LSW_CSR_reg
   // 
   // Timestamp_1_LSW_Register
   //--------------------------------------------------------------------

   class Port_9_Timestamp_1_LSW_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_9_Timestamp_1_LSW_CSR_reg)

      uvm_reg_field LSW_Bits; 


      // Function: new
      // 
      function new(string name = "Port_9_Timestamp_1_LSW_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         LSW_Bits = uvm_reg_field::type_id::create("LSW_Bits");

         LSW_Bits.configure(this, 32, 0, "RO", 0, 32'h00000000, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_0_Link_Uninit_Discard_Timer_CSR_reg
   // 
   // Link_Uninit_Discard_Timer_CSR_Register
   //--------------------------------------------------------------------

   class Port_0_Link_Uninit_Discard_Timer_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_0_Link_Uninit_Discard_Timer_CSR_reg)

      uvm_reg_field Reserved; 
      rand uvm_reg_field Link_Uninit_Timeout; 


      // Function: new
      // 
      function new(string name = "Port_0_Link_Uninit_Discard_Timer_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Link_Uninit_Timeout = uvm_reg_field::type_id::create("Link_Uninit_Timeout");

         Reserved.configure(this, 8, 24, "RO", 0, 8'h00, 1, 0, 1);
         Link_Uninit_Timeout.configure(this, 24, 0, "RW", 0, 24'h000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_11_VC8_VC4_BW_Allocation_Register_reg
   // 
   // BW Allocation Register
   //--------------------------------------------------------------------

   class Port_11_VC8_VC4_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_11_VC8_VC4_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 


      // Function: new
      // 
      function new(string name = "Port_11_VC8_VC4_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");

         Bandwidth_Allocation.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_13_Packet_Capture_2_CSR_reg
   // 
   // Packet Capture 2 Register
   //--------------------------------------------------------------------

   class Port_13_Packet_Capture_2_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_13_Packet_Capture_2_CSR_reg)

      rand uvm_reg_field Capture2; 


      // Function: new
      // 
      function new(string name = "Port_13_Packet_Capture_2_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture2 = uvm_reg_field::type_id::create("Capture2");

         Capture2.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_15_Link_Uninit_Discard_Timer_CSR_reg
   // 
   // Link_Uninit_Discard_Timer_CSR_Register
   //--------------------------------------------------------------------

   class Port_15_Link_Uninit_Discard_Timer_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_15_Link_Uninit_Discard_Timer_CSR_reg)

      uvm_reg_field Reserved; 
      rand uvm_reg_field Link_Uninit_Timeout; 


      // Function: new
      // 
      function new(string name = "Port_15_Link_Uninit_Discard_Timer_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Link_Uninit_Timeout = uvm_reg_field::type_id::create("Link_Uninit_Timeout");

         Reserved.configure(this, 8, 24, "RO", 0, 8'h00, 1, 0, 1);
         Link_Uninit_Timeout.configure(this, 24, 0, "RW", 0, 24'h000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Logical_Transport_Layer_High_Address_Capture_CSR_reg
   // 
   // High Address capture register
   //--------------------------------------------------------------------

   class Logical_Transport_Layer_High_Address_Capture_CSR_reg extends uvm_reg;
      `uvm_object_utils(Logical_Transport_Layer_High_Address_Capture_CSR_reg)

      rand uvm_reg_field msb_addr_err; 
      uvm_reg_field Reserved;

      // Function: new
      // 
      function new(string name = "Logical_Transport_Layer_High_Address_Capture_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         msb_addr_err = uvm_reg_field::type_id::create("msb_addr_err");

         Reserved.configure(this, 16, 16, "RO", 0, 16'h0000, 1, 0, 0);
         msb_addr_err.configure(this, 16, 0, "RW", 0, 16'h0000, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_5_VC8_VC4_BW_Allocation_Register_reg
   // 
   // BW Allocation Register
   //--------------------------------------------------------------------

   class Port_5_VC8_VC4_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_5_VC8_VC4_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 


      // Function: new
      // 
      function new(string name = "Port_5_VC8_VC4_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");

         Bandwidth_Allocation.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_9_Packet_Capture_2_CSR_reg
   // 
   // Packet Capture 2 Register
   //--------------------------------------------------------------------

   class Port_9_Packet_Capture_2_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_9_Packet_Capture_2_CSR_reg)

      rand uvm_reg_field Capture2; 


      // Function: new
      // 
      function new(string name = "Port_9_Packet_Capture_2_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture2 = uvm_reg_field::type_id::create("Capture2");

         Capture2.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_14_Link_Maintenance_Request_CSR_reg
   // 
   // Link  Maintenance Request Register
   //--------------------------------------------------------------------

   class Port_14_Link_Maintenance_Request_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_14_Link_Maintenance_Request_CSR_reg)

      uvm_reg_field Command; 
      uvm_reg_field Reserved; 


      // Function: new
      // 
      function new(string name = "Port_14_Link_Maintenance_Request_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Command = uvm_reg_field::type_id::create("Command");
         Reserved = uvm_reg_field::type_id::create("Reserved");

         Command.configure(this, 3, 29, "RW", 0, 3'b000, 1, 1, 1);
         Reserved.configure(this, 29, 0, "RO", 0, 29'b00000000000000000000000000000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_4_Timestamp_0_LSW_CSR_reg
   // 
   // Timestamp_0_LSW_Register
   //--------------------------------------------------------------------

   class Port_4_Timestamp_0_LSW_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_4_Timestamp_0_LSW_CSR_reg)

      uvm_reg_field LSW_Bits; 


      // Function: new
      // 
      function new(string name = "Port_4_Timestamp_0_LSW_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         LSW_Bits = uvm_reg_field::type_id::create("LSW_Bits");

         LSW_Bits.configure(this, 32, 0, "RO", 0, 32'h00000000, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Device_Information_CAR_reg
   // 
   // Information Register
   //--------------------------------------------------------------------

   class Device_Information_CAR_reg extends uvm_reg;
      `uvm_object_utils(Device_Information_CAR_reg)

      uvm_reg_field DeviceRev; 


      // Function: new
      // 
      function new(string name = "Device_Information_CAR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         DeviceRev = uvm_reg_field::type_id::create("DeviceRev");

         DeviceRev.configure(this, 32, 0, "RO", 0, 32'h00000000, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_15_Control_CSR_reg
   // 
   // Control Register
   //--------------------------------------------------------------------

   class Port_15_Control_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_15_Control_CSR_reg)

      uvm_reg_field Port_Type; 
      rand uvm_reg_field Port_Lockout; 
      rand uvm_reg_field Drop_Packet_Enable; 
      rand uvm_reg_field Stop_on_Port_Failed_encountered_Enable; 
      rand uvm_reg_field Implementation_defined; 
      uvm_reg_field Extended_Port_Width_Support; 
      rand uvm_reg_field Extended_Port_Width_Override; 
      rand uvm_reg_field Flow_Arbitration_Participant; 
      rand uvm_reg_field Enumeration_Boundary; 
      rand uvm_reg_field Flow_Control_Participant; 
      rand uvm_reg_field Multicast_event_Participant; 
      rand uvm_reg_field Error_Checking_Disable; 
      rand uvm_reg_field Input_Port_Enable; 
      rand uvm_reg_field Output_Port_Enable; 
      rand uvm_reg_field Port_Disable; 
      uvm_reg_field Port_Width_Override; 
      rand uvm_reg_field Initialized_Port_Width; 
      uvm_reg_field Port_Width_Support; 


      // Function: new
      // 
      function new(string name = "Port_15_Control_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Port_Type = uvm_reg_field::type_id::create("Port_Type");
         Port_Lockout = uvm_reg_field::type_id::create("Port_Lockout");
         Drop_Packet_Enable = uvm_reg_field::type_id::create("Drop_Packet_Enable");
         Stop_on_Port_Failed_encountered_Enable = uvm_reg_field::type_id::create("Stop_on_Port_Failed_encountered_Enable");
         Implementation_defined = uvm_reg_field::type_id::create("Implementation_defined");
         Extended_Port_Width_Support = uvm_reg_field::type_id::create("Extended_Port_Width_Support");
         Extended_Port_Width_Override = uvm_reg_field::type_id::create("Extended_Port_Width_Override");
         Flow_Arbitration_Participant = uvm_reg_field::type_id::create("Flow_Arbitration_Participant");
         Enumeration_Boundary = uvm_reg_field::type_id::create("Enumeration_Boundary");
         Flow_Control_Participant = uvm_reg_field::type_id::create("Flow_Control_Participant");
         Multicast_event_Participant = uvm_reg_field::type_id::create("Multicast_event_Participant");
         Error_Checking_Disable = uvm_reg_field::type_id::create("Error_Checking_Disable");
         Input_Port_Enable = uvm_reg_field::type_id::create("Input_Port_Enable");
         Output_Port_Enable = uvm_reg_field::type_id::create("Output_Port_Enable");
         Port_Disable = uvm_reg_field::type_id::create("Port_Disable");
         Port_Width_Override = uvm_reg_field::type_id::create("Port_Width_Override");
         Initialized_Port_Width = uvm_reg_field::type_id::create("Initialized_Port_Width");
         Port_Width_Support = uvm_reg_field::type_id::create("Port_Width_Support");

         Port_Type.configure(this, 1, 31, "RO", 0, 1'b0, 1, 0, 0);
         Port_Lockout.configure(this, 1, 30, "RW", 0, 1'b0, 1, 1, 0);
         Drop_Packet_Enable.configure(this, 1, 29, "RW", 0, 1'b0, 1, 1, 0);
         Stop_on_Port_Failed_encountered_Enable.configure(this, 1, 28, "RW", 0, 1'b0, 1, 1, 0);
         Implementation_defined.configure(this, 8, 20, "RW", 0, 8'h00, 1, 1, 0);
         Extended_Port_Width_Support.configure(this, 2, 18, "RO", 0, 2'b00, 1, 0, 0);
         Extended_Port_Width_Override.configure(this, 2, 16, "RW", 0, 2'b00, 1, 1, 0);
         Flow_Arbitration_Participant.configure(this, 1, 15, "RW", 0, 1'b0, 1, 1, 0);
         Enumeration_Boundary.configure(this, 1, 14, "RW", 0, 1'b0, 1, 1, 0);
         Flow_Control_Participant.configure(this, 1, 13, "RW", 0, 1'b0, 1, 1, 0);
         Multicast_event_Participant.configure(this, 1, 12, "RW", 0, 1'b0, 1, 1, 0);
         Error_Checking_Disable.configure(this, 1, 11, "RW", 0, 1'b0, 1, 1, 0);
         Input_Port_Enable.configure(this, 1, 10, "RW", 0, 1'b0, 1, 1, 0);
         Output_Port_Enable.configure(this, 1, 9, "RW", 0, 1'b0, 1, 1, 0);
         Port_Disable.configure(this, 1, 8, "RW", 0, 1'b0, 1, 1, 0);
         Port_Width_Override.configure(this, 3, 5, "RO", 0, 3'b000, 1, 0, 0);
         Initialized_Port_Width.configure(this, 3, 2, "RW", 0, 3'b000, 1, 1, 0);
         Port_Width_Support.configure(this, 2, 0, "RO", 0, 2'b00, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_4_VC_Control_and_Status_Register_reg
   // 
   // CSR Register
   //--------------------------------------------------------------------

   class Port_4_VC_Control_and_Status_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_4_VC_Control_and_Status_Register_reg)

      rand uvm_reg_field VCs_Enable; 
      uvm_reg_field VCs_Support; 
      rand uvm_reg_field CT_Mode; 
      rand uvm_reg_field VC_Refresh_Interval; 


      // Function: new
      // 
      function new(string name = "Port_4_VC_Control_and_Status_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         VCs_Enable = uvm_reg_field::type_id::create("VCs_Enable");
         VCs_Support = uvm_reg_field::type_id::create("VCs_Support");
         CT_Mode = uvm_reg_field::type_id::create("CT_Mode");
         VC_Refresh_Interval = uvm_reg_field::type_id::create("VC_Refresh_Interval");

         VCs_Enable.configure(this, 8, 24, "RW", 0, 8'h00, 1, 1, 1);
         VCs_Support.configure(this, 8, 16, "RO", 0, 8'h00, 1, 0, 1);
         CT_Mode.configure(this, 8, 8, "RW", 0, 8'h00, 1, 1, 1);
         VC_Refresh_Interval.configure(this, 8, 0, "RW", 0, 8'h00, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Lane_15_Status_3_CSR_reg
   // 
   // Status 3 Register
   //--------------------------------------------------------------------

   class Lane_15_Status_3_CSR_reg extends uvm_reg;
      `uvm_object_utils(Lane_15_Status_3_CSR_reg)

      uvm_reg_field Reserved; 
      uvm_reg_field LP_State_Control_Reserved; 
      uvm_reg_field LP_Lane_Entering_Silence; 
      uvm_reg_field LP_Port_Entering_Silence; 
      uvm_reg_field LP_Retraining; 
      uvm_reg_field LP_Retrain_Ready; 
      uvm_reg_field LP_Retrain_Grant; 
      uvm_reg_field LP_Transmit_Equalizer_Status; 
      uvm_reg_field LP_Transmit_Equalizer_Command; 
      uvm_reg_field LP_Transmit_Equalizer_Tap; 
      uvm_reg_field LP_Transmit_SC_Sequences; 
      uvm_reg_field LP_Transmit_Width_Request_Pending; 
      uvm_reg_field LP_Transmit_Width_Request; 


      // Function: new
      // 
      function new(string name = "Lane_15_Status_3_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         LP_State_Control_Reserved = uvm_reg_field::type_id::create("LP_State_Control_Reserved");
         LP_Lane_Entering_Silence = uvm_reg_field::type_id::create("LP_Lane_Entering_Silence");
         LP_Port_Entering_Silence = uvm_reg_field::type_id::create("LP_Port_Entering_Silence");
         LP_Retraining = uvm_reg_field::type_id::create("LP_Retraining");
         LP_Retrain_Ready = uvm_reg_field::type_id::create("LP_Retrain_Ready");
         LP_Retrain_Grant = uvm_reg_field::type_id::create("LP_Retrain_Grant");
         LP_Transmit_Equalizer_Status = uvm_reg_field::type_id::create("LP_Transmit_Equalizer_Status");
         LP_Transmit_Equalizer_Command = uvm_reg_field::type_id::create("LP_Transmit_Equalizer_Command");
         LP_Transmit_Equalizer_Tap = uvm_reg_field::type_id::create("LP_Transmit_Equalizer_Tap");
         LP_Transmit_SC_Sequences = uvm_reg_field::type_id::create("LP_Transmit_SC_Sequences");
         LP_Transmit_Width_Request_Pending = uvm_reg_field::type_id::create("LP_Transmit_Width_Request_Pending");
         LP_Transmit_Width_Request = uvm_reg_field::type_id::create("LP_Transmit_Width_Request");

         Reserved.configure(this, 4, 28, "RO", 0, 4'h0, 1, 0, 0);
         LP_State_Control_Reserved.configure(this, 8, 20, "RO", 0, 8'h00, 1, 0, 0);
         LP_Lane_Entering_Silence.configure(this, 1, 19, "RO", 0, 1'b0, 1, 0, 0);
         LP_Port_Entering_Silence.configure(this, 1, 18, "RO", 0, 1'b0, 1, 0, 0);
         LP_Retraining.configure(this, 1, 17, "RO", 0, 1'b0, 1, 0, 0);
         LP_Retrain_Ready.configure(this, 1, 16, "RO", 0, 1'b0, 1, 0, 0);
         LP_Retrain_Grant.configure(this, 1, 15, "RO", 0, 1'b0, 1, 0, 0);
         LP_Transmit_Equalizer_Status.configure(this, 3, 12, "RO", 0, 3'b000, 1, 0, 0);
         LP_Transmit_Equalizer_Command.configure(this, 3, 9, "RO", 0, 3'b000, 1, 0, 0);
         LP_Transmit_Equalizer_Tap.configure(this, 4, 5, "RO", 0, 4'h0, 1, 0, 0);
         LP_Transmit_SC_Sequences.configure(this, 1, 4, "RO", 0, 1'b0, 1, 0, 0);
         LP_Transmit_Width_Request_Pending.configure(this, 1, 3, "RO", 0, 1'b0, 1, 0, 0);
         LP_Transmit_Width_Request.configure(this, 3, 0, "RO", 0, 3'b000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_7_VC5_VC1_BW_Allocation_Register_reg
   // 
   // BW Allocation Register
   //--------------------------------------------------------------------

   class Port_7_VC5_VC1_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_7_VC5_VC1_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 


      // Function: new
      // 
      function new(string name = "Port_7_VC5_VC1_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");

         Bandwidth_Allocation.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_14_Timestamp_Offset_CSR_reg
   // 
   // Timestamp_Offset_CSR_Register
   //--------------------------------------------------------------------

   class Port_14_Timestamp_Offset_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_14_Timestamp_Offset_CSR_reg)

      uvm_reg_field Reserved; 
      rand uvm_reg_field Offset; 


      // Function: new
      // 
      function new(string name = "Port_14_Timestamp_Offset_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Offset = uvm_reg_field::type_id::create("Offset");

         Reserved.configure(this, 16, 16, "RO", 0, 16'h0000, 1, 0, 1);
         Offset.configure(this, 16, 0, "RW", 0, 16'h0000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_14_Attributes_Capture_CSR_reg
   // 
   // Attributes Register
   //--------------------------------------------------------------------

   class Port_14_Attributes_Capture_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_14_Attributes_Capture_CSR_reg)

      rand uvm_reg_field Capture_valid_info; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Implementation_Dependent; 
      rand uvm_reg_field Error_type; 
      rand uvm_reg_field Info_type; 


      // Function: new
      // 
      function new(string name = "Port_14_Attributes_Capture_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture_valid_info = uvm_reg_field::type_id::create("Capture_valid_info");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Implementation_Dependent = uvm_reg_field::type_id::create("Implementation_Dependent");
         Error_type = uvm_reg_field::type_id::create("Error_type");
         Info_type = uvm_reg_field::type_id::create("Info_type");

         Capture_valid_info.configure(this, 1, 31, "RW", 0, 1'b0, 1, 1, 0);
         Reserved.configure(this, 3, 28, "RO", 0, 3'b000, 1, 0, 0);
         Implementation_Dependent.configure(this, 20, 8, "RW", 0, 20'h00000, 1, 1, 0);
         Error_type.configure(this, 5, 3, "RW", 0, 5'b00000, 1, 1, 0);
         Info_type.configure(this, 3, 0, "RW", 0, 3'b000, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_15_VC_Control_and_Status_Register_reg
   // 
   // CSR Register
   //--------------------------------------------------------------------

   class Port_15_VC_Control_and_Status_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_15_VC_Control_and_Status_Register_reg)

      rand uvm_reg_field VCs_Enable; 
      uvm_reg_field VCs_Support; 
      rand uvm_reg_field CT_Mode; 
      rand uvm_reg_field VC_Refresh_Interval; 


      // Function: new
      // 
      function new(string name = "Port_15_VC_Control_and_Status_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         VCs_Enable = uvm_reg_field::type_id::create("VCs_Enable");
         VCs_Support = uvm_reg_field::type_id::create("VCs_Support");
         CT_Mode = uvm_reg_field::type_id::create("CT_Mode");
         VC_Refresh_Interval = uvm_reg_field::type_id::create("VC_Refresh_Interval");

         VCs_Enable.configure(this, 8, 24, "RW", 0, 8'h00, 1, 1, 1);
         VCs_Support.configure(this, 8, 16, "RO", 0, 8'h00, 1, 0, 1);
         CT_Mode.configure(this, 8, 8, "RW", 0, 8'h00, 1, 1, 1);
         VC_Refresh_Interval.configure(this, 8, 0, "RW", 0, 8'h00, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Lane_13_Status_2_CSR_reg
   // 
   // Status 2 Register
   //--------------------------------------------------------------------

   class Lane_13_Status_2_CSR_reg extends uvm_reg;
      `uvm_object_utils(Lane_13_Status_2_CSR_reg)

      uvm_reg_field Reserved; 
      uvm_reg_field LP_Change_Receiver_Width_Command_Negative_Acknowlege; 
      uvm_reg_field LP_Change_Receiver_Width_Command_Acknowlege; 
      uvm_reg_field LP_Change_Receiver_Width_Command; 
      uvm_reg_field LP_Lane_Trained; 
      uvm_reg_field LP_Receive_Lane_Ready; 
      uvm_reg_field LP_Receive_Lanes_Ready; 
      uvm_reg_field LP_Receive_Width; 
      uvm_reg_field LP_Transmit_1x_Mode; 
      uvm_reg_field LP_Port_Intialized; 
      uvm_reg_field LP_Asymmetric_mode_Enabled; 
      uvm_reg_field LP_Retraining_Enabled; 
      uvm_reg_field LP_Remort_Training_Support; 
      uvm_reg_field LP_Lane_Number; 
      uvm_reg_field LP_Port_Number; 


      // Function: new
      // 
      function new(string name = "Lane_13_Status_2_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         LP_Change_Receiver_Width_Command_Negative_Acknowlege = uvm_reg_field::type_id::create("LP_Change_Receiver_Width_Command_Negative_Acknowlege");
         LP_Change_Receiver_Width_Command_Acknowlege = uvm_reg_field::type_id::create("LP_Change_Receiver_Width_Command_Acknowlege");
         LP_Change_Receiver_Width_Command = uvm_reg_field::type_id::create("LP_Change_Receiver_Width_Command");
         LP_Lane_Trained = uvm_reg_field::type_id::create("LP_Lane_Trained");
         LP_Receive_Lane_Ready = uvm_reg_field::type_id::create("LP_Receive_Lane_Ready");
         LP_Receive_Lanes_Ready = uvm_reg_field::type_id::create("LP_Receive_Lanes_Ready");
         LP_Receive_Width = uvm_reg_field::type_id::create("LP_Receive_Width");
         LP_Transmit_1x_Mode = uvm_reg_field::type_id::create("LP_Transmit_1x_Mode");
         LP_Port_Intialized = uvm_reg_field::type_id::create("LP_Port_Intialized");
         LP_Asymmetric_mode_Enabled = uvm_reg_field::type_id::create("LP_Asymmetric_mode_Enabled");
         LP_Retraining_Enabled = uvm_reg_field::type_id::create("LP_Retraining_Enabled");
         LP_Remort_Training_Support = uvm_reg_field::type_id::create("LP_Remort_Training_Support");
         LP_Lane_Number = uvm_reg_field::type_id::create("LP_Lane_Number");
         LP_Port_Number = uvm_reg_field::type_id::create("LP_Port_Number");

         Reserved.configure(this, 2, 30, "RO", 0, 2'b00, 1, 0, 0);
         LP_Change_Receiver_Width_Command_Negative_Acknowlege.configure(this, 1, 29, "RO", 0, 1'b0, 1, 0, 0);
         LP_Change_Receiver_Width_Command_Acknowlege.configure(this, 1, 28, "RO", 0, 1'b0, 1, 0, 0);
         LP_Change_Receiver_Width_Command.configure(this, 3, 25, "RO", 0, 3'b000, 1, 0, 0);
         LP_Lane_Trained.configure(this, 1, 24, "RO", 0, 1'b0, 1, 0, 0);
         LP_Receive_Lane_Ready.configure(this, 1, 23, "RO", 0, 1'b0, 1, 0, 0);
         LP_Receive_Lanes_Ready.configure(this, 3, 20, "RO", 0, 3'b000, 1, 0, 0);
         LP_Receive_Width.configure(this, 3, 17, "RO", 0, 3'b000, 1, 0, 0);
         LP_Transmit_1x_Mode.configure(this, 1, 16, "RO", 0, 1'b0, 1, 0, 0);
         LP_Port_Intialized.configure(this, 1, 15, "RO", 0, 1'b0, 1, 0, 0);
         LP_Asymmetric_mode_Enabled.configure(this, 1, 14, "RO", 0, 1'b0, 1, 0, 0);
         LP_Retraining_Enabled.configure(this, 1, 13, "RO", 0, 1'b0, 1, 0, 0);
         LP_Remort_Training_Support.configure(this, 1, 12, "RO", 0, 1'b0, 1, 0, 0);
         LP_Lane_Number.configure(this, 4, 8, "RO", 0, 4'h0, 1, 0, 0);
         LP_Port_Number.configure(this, 8, 0, "RO", 0, 8'h00, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_12_Error_Rate_CSR_reg
   // 
   // Error Rate Register
   //--------------------------------------------------------------------

   class Port_12_Error_Rate_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_12_Error_Rate_CSR_reg)

      rand uvm_reg_field Error_Rate_Counter; 
      rand uvm_reg_field Peak_Error_Rate; 
      rand uvm_reg_field Error_Rate_Recovery; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Error_Rate_Bias; 


      // Function: new
      // 
      function new(string name = "Port_12_Error_Rate_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Error_Rate_Counter = uvm_reg_field::type_id::create("Error_Rate_Counter");
         Peak_Error_Rate = uvm_reg_field::type_id::create("Peak_Error_Rate");
         Error_Rate_Recovery = uvm_reg_field::type_id::create("Error_Rate_Recovery");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Error_Rate_Bias = uvm_reg_field::type_id::create("Error_Rate_Bias");

         Error_Rate_Counter.configure(this, 8, 24, "RW", 0, 8'h00, 1, 1, 1);
         Peak_Error_Rate.configure(this, 8, 16, "RW", 0, 8'h00, 1, 1, 1);
         Error_Rate_Recovery.configure(this, 2, 14, "RW", 0, 2'b00, 1, 1, 0);
         Reserved.configure(this, 6, 8, "RO", 0, 6'b000000, 1, 0, 0);
         Error_Rate_Bias.configure(this, 8, 0, "RW", 0, 8'h80, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_6_Packet_Capture_1_CSR_reg
   // 
   // Packet Capture 1 Register
   //--------------------------------------------------------------------

   class Port_6_Packet_Capture_1_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_6_Packet_Capture_1_CSR_reg)

      rand uvm_reg_field Capture1; 


      // Function: new
      // 
      function new(string name = "Port_6_Packet_Capture_1_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture1 = uvm_reg_field::type_id::create("Capture1");

         Capture1.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Lane_8_Status_1_CSR_reg
   // 
   // Status 1 Register
   //--------------------------------------------------------------------

   class Lane_8_Status_1_CSR_reg extends uvm_reg;
      `uvm_object_utils(Lane_8_Status_1_CSR_reg)

      uvm_reg_field Reserved; 
      uvm_reg_field IDLE3_SC_Retraining_State; 
      uvm_reg_field IDLE3_SC_Training_State; 
      uvm_reg_field IDLE3_DME_Training_State; 
      uvm_reg_field IDLE3_Training_Type; 
      uvm_reg_field IDLE3_Loss_of_Signals; 
      uvm_reg_field IDLE2_Connected_port_scrambling_descrambling_enabled; 
      uvm_reg_field IDLE2_Connected_port_transmit_emphasis_Tap_plus1_status; 
      uvm_reg_field IDLE2_Connected_port_transmit_emphasis_Tap_minus1_status; 
      uvm_reg_field IDLE2_Lane_number_in_connected_port; 
      uvm_reg_field IDLE2_Received_port_width; 
      uvm_reg_field IDLE2_Connected_port_lane_receiver_trained; 
      uvm_reg_field Implementation_defined; 
      uvm_reg_field Values_changed; 
      uvm_reg_field IDLE_information_current; 
      rand uvm_reg_field IDLE_received; 


      // Function: new
      // 
      function new(string name = "Lane_8_Status_1_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         IDLE3_SC_Retraining_State = uvm_reg_field::type_id::create("IDLE3_SC_Retraining_State");
         IDLE3_SC_Training_State = uvm_reg_field::type_id::create("IDLE3_SC_Training_State");
         IDLE3_DME_Training_State = uvm_reg_field::type_id::create("IDLE3_DME_Training_State");
         IDLE3_Training_Type = uvm_reg_field::type_id::create("IDLE3_Training_Type");
         IDLE3_Loss_of_Signals = uvm_reg_field::type_id::create("IDLE3_Loss_of_Signals");
         IDLE2_Connected_port_scrambling_descrambling_enabled = uvm_reg_field::type_id::create("IDLE2_Connected_port_scrambling_descrambling_enabled");
         IDLE2_Connected_port_transmit_emphasis_Tap_plus1_status = uvm_reg_field::type_id::create("IDLE2_Connected_port_transmit_emphasis_Tap_plus1_status");
         IDLE2_Connected_port_transmit_emphasis_Tap_minus1_status = uvm_reg_field::type_id::create("IDLE2_Connected_port_transmit_emphasis_Tap_minus1_status");
         IDLE2_Lane_number_in_connected_port = uvm_reg_field::type_id::create("IDLE2_Lane_number_in_connected_port");
         IDLE2_Received_port_width = uvm_reg_field::type_id::create("IDLE2_Received_port_width");
         IDLE2_Connected_port_lane_receiver_trained = uvm_reg_field::type_id::create("IDLE2_Connected_port_lane_receiver_trained");
         Implementation_defined = uvm_reg_field::type_id::create("Implementation_defined");
         Values_changed = uvm_reg_field::type_id::create("Values_changed");
         IDLE_information_current = uvm_reg_field::type_id::create("IDLE_information_current");
         IDLE_received = uvm_reg_field::type_id::create("IDLE_received");

         Reserved.configure(this, 6, 26, "RO", 0, 6'b000000, 1, 0, 0);
         IDLE3_SC_Retraining_State.configure(this, 2, 24, "RO", 0, 2'b00, 1, 0, 0);
         IDLE3_SC_Training_State.configure(this, 2, 22, "RO", 0, 2'b00, 1, 0, 0);
         IDLE3_DME_Training_State.configure(this, 2, 20, "RO", 0, 2'b00, 1, 0, 0);
         IDLE3_Training_Type.configure(this, 2, 18, "RO", 0, 2'b00, 1, 0, 0);
         IDLE3_Loss_of_Signals.configure(this, 1, 17, "RO", 0, 1'b0, 1, 0, 0);
         IDLE2_Connected_port_scrambling_descrambling_enabled.configure(this, 1, 16, "RO", 0, 1'b0, 1, 0, 0);
         IDLE2_Connected_port_transmit_emphasis_Tap_plus1_status.configure(this, 2, 14, "RO", 0, 2'b00, 1, 0, 0);
         IDLE2_Connected_port_transmit_emphasis_Tap_minus1_status.configure(this, 2, 12, "RO", 0, 2'b00, 1, 0, 0);
         IDLE2_Lane_number_in_connected_port.configure(this, 4, 8, "RO", 0, 4'h0, 1, 0, 0);
         IDLE2_Received_port_width.configure(this, 3, 5, "RO", 0, 3'b000, 1, 0, 0);
         IDLE2_Connected_port_lane_receiver_trained.configure(this, 1, 4, "RO", 0, 1'b0, 1, 0, 0);
         Implementation_defined.configure(this, 1, 3, "RO", 0, 1'b0, 1, 0, 0);
         Values_changed.configure(this, 1, 2, "RO", 0, 1'b1, 1, 0, 0);
         IDLE_information_current.configure(this, 1, 1, "RO", 0, 1'b0, 1, 0, 0);
         IDLE_received.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_7_Link_Timers_Control_2_CSR_reg
   // 
   // Link_Timers_Control_2_Register
   //--------------------------------------------------------------------

   class Port_7_Link_Timers_Control_2_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_7_Link_Timers_Control_2_CSR_reg)

      uvm_reg_field Reserved; 
      rand uvm_reg_field Recovery_Timer; 
      rand uvm_reg_field Discovery_Completion_Timer; 
      rand uvm_reg_field Retraining_Completion_Timer; 


      // Function: new
      // 
      function new(string name = "Port_7_Link_Timers_Control_2_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Recovery_Timer = uvm_reg_field::type_id::create("Recovery_Timer");
         Discovery_Completion_Timer = uvm_reg_field::type_id::create("Discovery_Completion_Timer");
         Retraining_Completion_Timer = uvm_reg_field::type_id::create("Retraining_Completion_Timer");

         Reserved.configure(this, 8, 24, "RO", 0, 8'h00, 1, 0, 1);
         Recovery_Timer.configure(this, 8, 16, "RW", 0, 8'hff, 1, 1, 1);
         Discovery_Completion_Timer.configure(this, 8, 8, "RW", 0, 8'h00, 1, 1, 1);
         Retraining_Completion_Timer.configure(this, 8, 0, "RW", 0, 8'hfe, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_7_Outbound_ackID_CSR_reg
   // 
   // Outbound_Register
   //--------------------------------------------------------------------

   class Port_7_Outbound_ackID_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_7_Outbound_ackID_CSR_reg)

      rand uvm_reg_field Outbound_ackID; 
      uvm_reg_field Outstanding_ackID; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Clr_outstanding_ackID; 


      // Function: new
      // 
      function new(string name = "Port_7_Outbound_ackID_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Outbound_ackID = uvm_reg_field::type_id::create("Outbound_ackID");
         Outstanding_ackID = uvm_reg_field::type_id::create("Outstanding_ackID");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Clr_outstanding_ackID = uvm_reg_field::type_id::create("Clr_outstanding_ackID");

         Outbound_ackID.configure(this, 12, 20, "RW", 0, 12'h000, 1, 1, 0);
         Outstanding_ackID.configure(this, 12, 8, "RW", 0, 12'h000, 1, 1, 0);
         Reserved.configure(this, 7, 1, "RO", 0, 7'b0000000, 1, 0, 0);
         Clr_outstanding_ackID.configure(this, 1, 0, "W1C", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_15_VC7_VC3_BW_Allocation_Register_reg
   // 
   // BW Allocation Register
   //--------------------------------------------------------------------

   class Port_15_VC7_VC3_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_15_VC7_VC3_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 


      // Function: new
      // 
      function new(string name = "Port_15_VC7_VC3_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");

         Bandwidth_Allocation.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_15_Timestamp_Synchronization_Command_CSR_reg
   // 
   // Timestamp_Synchronization_Command_CSR_Register
   //--------------------------------------------------------------------

   class Port_15_Timestamp_Synchronization_Command_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_15_Timestamp_Synchronization_Command_CSR_reg)

      rand uvm_reg_field Command; 
      uvm_reg_field Reserved_2; 
      rand uvm_reg_field Send_Timestamp; 
      uvm_reg_field Reserved_1; 
      rand uvm_reg_field Send_Zero_Timestamp; 
      uvm_reg_field Reserved; 


      // Function: new
      // 
      function new(string name = "Port_15_Timestamp_Synchronization_Command_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Command = uvm_reg_field::type_id::create("Command");
         Reserved_2 = uvm_reg_field::type_id::create("Reserved_2");
         Send_Timestamp = uvm_reg_field::type_id::create("Send_Timestamp");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         Send_Zero_Timestamp = uvm_reg_field::type_id::create("Send_Zero_Timestamp");
         Reserved = uvm_reg_field::type_id::create("Reserved");

         Command.configure(this, 3, 29, "RW", 0, 3'b000, 1, 1, 0);
         Reserved_2.configure(this, 1, 28, "RO", 0, 1'b0, 1, 0, 0);
         Send_Timestamp.configure(this, 1, 27, "RW", 0, 1'b0, 1, 1, 0);
         Reserved_1.configure(this, 3, 24, "RO", 0, 3'b000, 1, 0, 0);
         Send_Zero_Timestamp.configure(this, 1, 23, "RW", 0, 1'b0, 1, 1, 0);
         Reserved.configure(this, 23, 0, "RO", 0, 23'b00000000000000000000000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_5_Power_Management_CSR_reg
   // 
   // Power_Management_Register
   //--------------------------------------------------------------------

   class Port_5_Power_Management_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_5_Power_Management_CSR_reg)

      uvm_reg_field Reserved; 
      uvm_reg_field Status_of_Link_Partner_Transmit_Width_Change; 
      rand uvm_reg_field Change_Link_Partner_Transmit_width; 
      uvm_reg_field Status_of_My_Transmit_Width_Change; 
      rand uvm_reg_field Change_My_Transmit_Width; 
      uvm_reg_field Reciever_Width_Status; 
      uvm_reg_field Transmit_Width_Status; 
      rand uvm_reg_field Asymmetric_Modes_Enabled; 
      uvm_reg_field Asymmetric_Modes_Supported; 


      // Function: new
      // 
      function new(string name = "Port_5_Power_Management_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Status_of_Link_Partner_Transmit_Width_Change = uvm_reg_field::type_id::create("Status_of_Link_Partner_Transmit_Width_Change");
         Change_Link_Partner_Transmit_width = uvm_reg_field::type_id::create("Change_Link_Partner_Transmit_width");
         Status_of_My_Transmit_Width_Change = uvm_reg_field::type_id::create("Status_of_My_Transmit_Width_Change");
         Change_My_Transmit_Width = uvm_reg_field::type_id::create("Change_My_Transmit_Width");
         Reciever_Width_Status = uvm_reg_field::type_id::create("Reciever_Width_Status");
         Transmit_Width_Status = uvm_reg_field::type_id::create("Transmit_Width_Status");
         Asymmetric_Modes_Enabled = uvm_reg_field::type_id::create("Asymmetric_Modes_Enabled");
         Asymmetric_Modes_Supported = uvm_reg_field::type_id::create("Asymmetric_Modes_Supported");

         Reserved.configure(this, 6, 26, "RO", 0, 6'b000000, 1, 0, 0);
         Status_of_Link_Partner_Transmit_Width_Change.configure(this, 2, 24, "RO", 0, 2'b00, 1, 0, 0);
         Change_Link_Partner_Transmit_width.configure(this, 3, 21, "WRC", 0, 3'b000, 1, 1, 0);
         Status_of_My_Transmit_Width_Change.configure(this, 2, 19, "RO", 0, 2'b00, 1, 0, 0);
         Change_My_Transmit_Width.configure(this, 3, 16, "WRC", 0, 3'b000, 1, 1, 0);
         Reciever_Width_Status.configure(this, 3, 13, "RO", 0, 3'b000, 1, 0, 0);
         Transmit_Width_Status.configure(this, 3, 10, "RO", 0, 3'b000, 1, 0, 0);
         Asymmetric_Modes_Enabled.configure(this, 5, 5, "RW", 0, 5'b00000, 1, 1, 0);
         Asymmetric_Modes_Supported.configure(this, 5, 0, "RO", 0, 5'b00000, 1, 0, 0);
      endfunction
   endclass

   //--------------------------------------------------------------------
   // Class: Port_10_Timestamp_Offset_CSR_reg
   // 
   // Timestamp_Offset_CSR_Register
   //--------------------------------------------------------------------

   class Port_10_Timestamp_Offset_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_10_Timestamp_Offset_CSR_reg)

      uvm_reg_field Reserved; 
      rand uvm_reg_field Offset; 


      // Function: new
      // 
      function new(string name = "Port_10_Timestamp_Offset_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Offset = uvm_reg_field::type_id::create("Offset");

         Reserved.configure(this, 16, 16, "RO", 0, 16'h0000, 1, 0, 1);
         Offset.configure(this, 16, 0, "RW", 0, 16'h0000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Error_Management_Extensions_Block_Header_reg
   // 
   // Error Management Header
   //--------------------------------------------------------------------

   class Error_Management_Extensions_Block_Header_reg extends uvm_reg;
      `uvm_object_utils(Error_Management_Extensions_Block_Header_reg)

      uvm_reg_field EF_ID; 
      uvm_reg_field EF_PTR; 


      // Function: new
      // 
      function new(string name = "Error_Management_Extensions_Block_Header_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         EF_ID = uvm_reg_field::type_id::create("EF_ID");
         EF_PTR = uvm_reg_field::type_id::create("EF_PTR");

         EF_ID.configure(this, 16, 16, "RO", 0, 16'h0007, 1, 0, 1);
         EF_PTR.configure(this, 16, 0, "RO", 0, 16'h0600, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_5_Packet_Capture_3_CSR_reg
   // 
   // Packet Capture 3 Register
   //--------------------------------------------------------------------

   class Port_5_Packet_Capture_3_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_5_Packet_Capture_3_CSR_reg)

      rand uvm_reg_field Capture3; 


      // Function: new
      // 
      function new(string name = "Port_5_Packet_Capture_3_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture3 = uvm_reg_field::type_id::create("Capture3");

         Capture3.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Lane_7_Status_1_CSR_reg
   // 
   // Status 1 Register
   //--------------------------------------------------------------------

   class Lane_7_Status_1_CSR_reg extends uvm_reg;
      `uvm_object_utils(Lane_7_Status_1_CSR_reg)

      uvm_reg_field Reserved; 
      uvm_reg_field IDLE3_SC_Retraining_State; 
      uvm_reg_field IDLE3_SC_Training_State; 
      uvm_reg_field IDLE3_DME_Training_State; 
      uvm_reg_field IDLE3_Training_Type; 
      uvm_reg_field IDLE3_Loss_of_Signals; 
      uvm_reg_field IDLE2_Connected_port_scrambling_descrambling_enabled; 
      uvm_reg_field IDLE2_Connected_port_transmit_emphasis_Tap_plus1_status; 
      uvm_reg_field IDLE2_Connected_port_transmit_emphasis_Tap_minus1_status; 
      uvm_reg_field IDLE2_Lane_number_in_connected_port; 
      uvm_reg_field IDLE2_Received_port_width; 
      uvm_reg_field IDLE2_Connected_port_lane_receiver_trained; 
      uvm_reg_field Implementation_defined; 
      uvm_reg_field Values_changed; 
      uvm_reg_field IDLE_information_current; 
      rand uvm_reg_field IDLE_received; 


      // Function: new
      // 
      function new(string name = "Lane_7_Status_1_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         IDLE3_SC_Retraining_State = uvm_reg_field::type_id::create("IDLE3_SC_Retraining_State");
         IDLE3_SC_Training_State = uvm_reg_field::type_id::create("IDLE3_SC_Training_State");
         IDLE3_DME_Training_State = uvm_reg_field::type_id::create("IDLE3_DME_Training_State");
         IDLE3_Training_Type = uvm_reg_field::type_id::create("IDLE3_Training_Type");
         IDLE3_Loss_of_Signals = uvm_reg_field::type_id::create("IDLE3_Loss_of_Signals");
         IDLE2_Connected_port_scrambling_descrambling_enabled = uvm_reg_field::type_id::create("IDLE2_Connected_port_scrambling_descrambling_enabled");
         IDLE2_Connected_port_transmit_emphasis_Tap_plus1_status = uvm_reg_field::type_id::create("IDLE2_Connected_port_transmit_emphasis_Tap_plus1_status");
         IDLE2_Connected_port_transmit_emphasis_Tap_minus1_status = uvm_reg_field::type_id::create("IDLE2_Connected_port_transmit_emphasis_Tap_minus1_status");
         IDLE2_Lane_number_in_connected_port = uvm_reg_field::type_id::create("IDLE2_Lane_number_in_connected_port");
         IDLE2_Received_port_width = uvm_reg_field::type_id::create("IDLE2_Received_port_width");
         IDLE2_Connected_port_lane_receiver_trained = uvm_reg_field::type_id::create("IDLE2_Connected_port_lane_receiver_trained");
         Implementation_defined = uvm_reg_field::type_id::create("Implementation_defined");
         Values_changed = uvm_reg_field::type_id::create("Values_changed");
         IDLE_information_current = uvm_reg_field::type_id::create("IDLE_information_current");
         IDLE_received = uvm_reg_field::type_id::create("IDLE_received");

         Reserved.configure(this, 6, 26, "RO", 0, 6'b000000, 1, 0, 0);
         IDLE3_SC_Retraining_State.configure(this, 2, 24, "RO", 0, 2'b00, 1, 0, 0);
         IDLE3_SC_Training_State.configure(this, 2, 22, "RO", 0, 2'b00, 1, 0, 0);
         IDLE3_DME_Training_State.configure(this, 2, 20, "RO", 0, 2'b00, 1, 0, 0);
         IDLE3_Training_Type.configure(this, 2, 18, "RO", 0, 2'b00, 1, 0, 0);
         IDLE3_Loss_of_Signals.configure(this, 1, 17, "RO", 0, 1'b0, 1, 0, 0);
         IDLE2_Connected_port_scrambling_descrambling_enabled.configure(this, 1, 16, "RO", 0, 1'b0, 1, 0, 0);
         IDLE2_Connected_port_transmit_emphasis_Tap_plus1_status.configure(this, 2, 14, "RO", 0, 2'b00, 1, 0, 0);
         IDLE2_Connected_port_transmit_emphasis_Tap_minus1_status.configure(this, 2, 12, "RO", 0, 2'b00, 1, 0, 0);
         IDLE2_Lane_number_in_connected_port.configure(this, 4, 8, "RO", 0, 4'h0, 1, 0, 0);
         IDLE2_Received_port_width.configure(this, 3, 5, "RO", 0, 3'b000, 1, 0, 0);
         IDLE2_Connected_port_lane_receiver_trained.configure(this, 1, 4, "RO", 0, 1'b0, 1, 0, 0);
         Implementation_defined.configure(this, 1, 3, "RO", 0, 1'b0, 1, 0, 0);
         Values_changed.configure(this, 1, 2, "RO", 0, 1'b1, 1, 0, 0);
         IDLE_information_current.configure(this, 1, 1, "RO", 0, 1'b0, 1, 0, 0);
         IDLE_received.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_8_Inbound_ackID_CSR_reg
   // 
   // Inbound_Register
   //--------------------------------------------------------------------

   class Port_8_Inbound_ackID_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_8_Inbound_ackID_CSR_reg)

      rand uvm_reg_field Inbound_ackID;  
      uvm_reg_field Reserved; 


      // Function: new
      // 
      function new(string name = "Port_8_Inbound_ackID_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Inbound_ackID = uvm_reg_field::type_id::create("Inbound_ackID");
         Reserved = uvm_reg_field::type_id::create("Reserved");

       Inbound_ackID.configure(this, 12, 20, "RW", 0, 12'h000, 1, 1, 0);
         Reserved.configure(this, 20, 0, "RO", 0, 20'h00000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_13_Timestamp_0_MSW_CSR_reg
   // 
   // Timestamp_0_MSW_Register
   //--------------------------------------------------------------------

   class Port_13_Timestamp_0_MSW_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_13_Timestamp_0_MSW_CSR_reg)

      uvm_reg_field MSW_Bits; 


      // Function: new
      // 
      function new(string name = "Port_13_Timestamp_0_MSW_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         MSW_Bits = uvm_reg_field::type_id::create("MSW_Bits");

         MSW_Bits.configure(this, 32, 0, "RO", 0, 32'h00000000, 1, 0, 1);
      endfunction
   endclass

   //--------------------------------------------------------------------
   // Class: Port_3_Initialization_Status_CSR_reg
   // 
   // Initialization_Status_Register
   //--------------------------------------------------------------------

   class Port_3_Initialization_Status_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_3_Initialization_Status_CSR_reg)

      uvm_reg_field Reserved_3; 
      uvm_reg_field Transmitted_Status_Control_Symbols; 
      uvm_reg_field Reserved_2; 
      uvm_reg_field Received_Status_Control_Symbols; 
      uvm_reg_field Port_Initialization_State_Machine; 
      uvm_reg_field Reserved_1; 
      uvm_reg_field x1_x2_Mode_Detection; 
      uvm_reg_field Reserved; 
      uvm_reg_field Lane_Alignment; 


      // Function: new
      // 
      function new(string name = "Port_3_Initialization_Status_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved_3 = uvm_reg_field::type_id::create("Reserved_3");
         Transmitted_Status_Control_Symbols = uvm_reg_field::type_id::create("Transmitted_Status_Control_Symbols");
         Reserved_2 = uvm_reg_field::type_id::create("Reserved_2");
         Received_Status_Control_Symbols = uvm_reg_field::type_id::create("Received_Status_Control_Symbols");
         Port_Initialization_State_Machine = uvm_reg_field::type_id::create("Port_Initialization_State_Machine");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         x1_x2_Mode_Detection = uvm_reg_field::type_id::create("x1_x2_Mode_Detection");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Lane_Alignment = uvm_reg_field::type_id::create("Lane_Alignment");

         Reserved_3.configure(this, 4, 28, "RO", 0, 4'h0, 1, 0, 0);
         Transmitted_Status_Control_Symbols.configure(this, 7, 21, "RO", 0, 7'b0000000, 1, 0, 0);
         Reserved_2.configure(this, 1, 20, "RO", 0, 1'b0, 1, 0, 0);
         Received_Status_Control_Symbols.configure(this, 4, 16, "RO", 0, 4'h0, 1, 0, 0);
         Port_Initialization_State_Machine.configure(this, 5, 11, "RO", 0, 5'b00000, 1, 0, 0);
         Reserved_1.configure(this, 1, 10, "RO", 0, 1'b0, 1, 0, 0);
         x1_x2_Mode_Detection.configure(this, 4, 6, "RO", 0, 4'h0, 1, 0, 0);
         Reserved.configure(this, 1, 5, "RO", 0, 1'b0, 1, 0, 0);
         Lane_Alignment.configure(this, 5, 0, "RO", 0, 5'b00000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_3_Timestamp_1_LSW_CSR_reg
   // 
   // Timestamp_1_LSW_Register
   //--------------------------------------------------------------------

   class Port_3_Timestamp_1_LSW_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_3_Timestamp_1_LSW_CSR_reg)

      uvm_reg_field LSW_Bits; 


      // Function: new
      // 
      function new(string name = "Port_3_Timestamp_1_LSW_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         LSW_Bits = uvm_reg_field::type_id::create("LSW_Bits");

         LSW_Bits.configure(this, 32, 0, "RO", 0, 32'h00000000, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_2_Link_Maintenance_Response_CSR_reg
   // 
   // Link Maintenance Response Register
   //--------------------------------------------------------------------

   class Port_2_Link_Maintenance_Response_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_2_Link_Maintenance_Response_CSR_reg)

      uvm_reg_field port_status; 
      uvm_reg_field ackID_status; 
      uvm_reg_field Port_status_cs64; 
      uvm_reg_field Reserved; 
      uvm_reg_field response_valid; 


      // Function: new
      // 
      function new(string name = "Port_2_Link_Maintenance_Response_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         port_status = uvm_reg_field::type_id::create("port_status");
         ackID_status = uvm_reg_field::type_id::create("ackID_status");
         Port_status_cs64 = uvm_reg_field::type_id::create("Port_status_cs64");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         response_valid = uvm_reg_field::type_id::create("response_valid");

         port_status.configure(this, 5, 27, "RO", 0, 5'b00000, 1, 0, 0);
         ackID_status.configure(this, 12, 15, "RO", 0, 12'h000, 1, 0, 0);
         Port_status_cs64.configure(this, 12, 3, "RO", 0, 12'h000, 1, 0, 0);
         Reserved.configure(this, 2, 1, "RO", 0, 2'b00, 1, 0, 0);
         response_valid.configure(this, 1, 0, "RO", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_11_VC7_VC3_BW_Allocation_Register_reg
   // 
   // BW Allocation Register
   //--------------------------------------------------------------------

   class Port_11_VC7_VC3_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_11_VC7_VC3_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 


      // Function: new
      // 
      function new(string name = "Port_11_VC7_VC3_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");

         Bandwidth_Allocation.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_13_Outbound_ackID_CSR_reg
   // 
   // Outbound_Register
   //--------------------------------------------------------------------

   class Port_13_Outbound_ackID_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_13_Outbound_ackID_CSR_reg)

      rand uvm_reg_field Outbound_ackID; 
      uvm_reg_field Outstanding_ackID; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Clr_outstanding_ackID; 


      // Function: new
      // 
      function new(string name = "Port_13_Outbound_ackID_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Outbound_ackID = uvm_reg_field::type_id::create("Outbound_ackID");
         Outstanding_ackID = uvm_reg_field::type_id::create("Outstanding_ackID");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Clr_outstanding_ackID = uvm_reg_field::type_id::create("Clr_outstanding_ackID");

         Outbound_ackID.configure(this, 12, 20, "RW", 0, 12'h000, 1, 1, 0);
         Outstanding_ackID.configure(this, 12, 8, "RW", 0, 12'h000, 1, 1, 0);
         Reserved.configure(this, 7, 1, "RO", 0, 7'b0000000, 1, 0, 0);
         Clr_outstanding_ackID.configure(this, 1, 0, "W1C", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_5_Link_Timers_Control_2_CSR_reg
   // 
   // Link_Timers_Control_2_Register
   //--------------------------------------------------------------------

   class Port_5_Link_Timers_Control_2_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_5_Link_Timers_Control_2_CSR_reg)

      uvm_reg_field Reserved; 
      rand uvm_reg_field Recovery_Timer; 
      rand uvm_reg_field Discovery_Completion_Timer; 
      rand uvm_reg_field Retraining_Completion_Timer; 


      // Function: new
      // 
      function new(string name = "Port_5_Link_Timers_Control_2_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Recovery_Timer = uvm_reg_field::type_id::create("Recovery_Timer");
         Discovery_Completion_Timer = uvm_reg_field::type_id::create("Discovery_Completion_Timer");
         Retraining_Completion_Timer = uvm_reg_field::type_id::create("Retraining_Completion_Timer");

         Reserved.configure(this, 8, 24, "RO", 0, 8'h00, 1, 0, 1);
         Recovery_Timer.configure(this, 8, 16, "RW", 0, 8'hff, 1, 1, 1);
         Discovery_Completion_Timer.configure(this, 8, 8, "RW", 0, 8'h00, 1, 1, 1);
         Retraining_Completion_Timer.configure(this, 8, 0, "RW", 0, 8'hfe, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_13_Link_Timers_Control_CSR_reg
   // 
   // Link_Timers_Control_Register
   //--------------------------------------------------------------------

   class Port_13_Link_Timers_Control_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_13_Link_Timers_Control_CSR_reg)

      rand uvm_reg_field Emphasis_Command_Timeout; 
      rand uvm_reg_field CW_Training_Completion_Timer; 
      rand uvm_reg_field DME_Wait_Timer; 
      rand uvm_reg_field DME_Training_Completion_Timer; 


      // Function: new
      // 
      function new(string name = "Port_13_Link_Timers_Control_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Emphasis_Command_Timeout = uvm_reg_field::type_id::create("Emphasis_Command_Timeout");
         CW_Training_Completion_Timer = uvm_reg_field::type_id::create("CW_Training_Completion_Timer");
         DME_Wait_Timer = uvm_reg_field::type_id::create("DME_Wait_Timer");
         DME_Training_Completion_Timer = uvm_reg_field::type_id::create("DME_Training_Completion_Timer");

         Emphasis_Command_Timeout.configure(this, 8, 24, "RW", 0, 8'hff, 1, 1, 1);
         CW_Training_Completion_Timer.configure(this, 8, 16, "RW", 0, 8'h00, 1, 1, 1);
         DME_Wait_Timer.configure(this, 8, 8, "RW", 0, 8'h3f, 1, 1, 1);
         DME_Training_Completion_Timer.configure(this, 8, 0, "RW", 0, 8'h00, 1, 1, 1);
      endfunction
   endclass

   //--------------------------------------------------------------------
   // Class: Port_8_Link_Timers_Control_3_CSR_reg
   // 
   // Link_Timers_Control_3_Register
   //--------------------------------------------------------------------

   class Port_8_Link_Timers_Control_3_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_8_Link_Timers_Control_3_CSR_reg)

      rand uvm_reg_field Keep_alive_Transmission_Interval; 
      rand uvm_reg_field Keep_alive_Transmission_Period; 
      rand uvm_reg_field Receive_Width_Command_Timeout; 
      rand uvm_reg_field Transmit_Width_Command_Timeout; 


      // Function: new
      // 
      function new(string name = "Port_8_Link_Timers_Control_3_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Keep_alive_Transmission_Interval = uvm_reg_field::type_id::create("Keep_alive_Transmission_Interval");
         Keep_alive_Transmission_Period = uvm_reg_field::type_id::create("Keep_alive_Transmission_Period");
         Receive_Width_Command_Timeout = uvm_reg_field::type_id::create("Receive_Width_Command_Timeout");
         Transmit_Width_Command_Timeout = uvm_reg_field::type_id::create("Transmit_Width_Command_Timeout");

         Keep_alive_Transmission_Interval.configure(this, 10, 22, "RW", 0, 10'b1111111111, 1, 1, 0);
         Keep_alive_Transmission_Period.configure(this, 6, 16, "RW", 0, 6'b000001, 1, 1, 0);
         Receive_Width_Command_Timeout.configure(this, 8, 8, "RW", 0, 8'h40, 1, 1, 1);
         Transmit_Width_Command_Timeout.configure(this, 8, 0, "RW", 0, 8'hff, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_9_Inbound_ackID_CSR_reg
   // 
   // Inbound_Register
   //--------------------------------------------------------------------

   class Port_9_Inbound_ackID_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_9_Inbound_ackID_CSR_reg)

      rand uvm_reg_field Inbound_ackID;  
      uvm_reg_field Reserved; 


      // Function: new
      // 
      function new(string name = "Port_9_Inbound_ackID_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Inbound_ackID = uvm_reg_field::type_id::create("Inbound_ackID");
         Reserved = uvm_reg_field::type_id::create("Reserved");

       Inbound_ackID.configure(this, 12, 20, "RW", 0, 12'h000, 1, 1, 0);
         Reserved.configure(this, 20, 0, "RO", 0, 20'h00000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Timestamp_Generator_LSW_CSR_reg
   // 
   // Timestamp_Generator_LSW_Register
   //--------------------------------------------------------------------

   class Timestamp_Generator_LSW_CSR_reg extends uvm_reg;
      `uvm_object_utils(Timestamp_Generator_LSW_CSR_reg)

      rand uvm_reg_field LSW_Bits; 


      // Function: new
      // 
      function new(string name = "Timestamp_Generator_LSW_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         LSW_Bits = uvm_reg_field::type_id::create("LSW_Bits");

         LSW_Bits.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_11_Control_CSR_reg
   // 
   // Control Register
   //--------------------------------------------------------------------

   class Port_11_Control_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_11_Control_CSR_reg)

      uvm_reg_field Port_Type; 
      rand uvm_reg_field Port_Lockout; 
      rand uvm_reg_field Drop_Packet_Enable; 
      rand uvm_reg_field Stop_on_Port_Failed_encountered_Enable; 
      rand uvm_reg_field Implementation_defined; 
      uvm_reg_field Extended_Port_Width_Support; 
      rand uvm_reg_field Extended_Port_Width_Override; 
      rand uvm_reg_field Flow_Arbitration_Participant; 
      rand uvm_reg_field Enumeration_Boundary; 
      rand uvm_reg_field Flow_Control_Participant; 
      rand uvm_reg_field Multicast_event_Participant; 
      rand uvm_reg_field Error_Checking_Disable; 
      rand uvm_reg_field Input_Port_Enable; 
      rand uvm_reg_field Output_Port_Enable; 
      rand uvm_reg_field Port_Disable; 
      uvm_reg_field Port_Width_Override; 
      rand uvm_reg_field Initialized_Port_Width; 
      uvm_reg_field Port_Width_Support; 


      // Function: new
      // 
      function new(string name = "Port_11_Control_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Port_Type = uvm_reg_field::type_id::create("Port_Type");
         Port_Lockout = uvm_reg_field::type_id::create("Port_Lockout");
         Drop_Packet_Enable = uvm_reg_field::type_id::create("Drop_Packet_Enable");
         Stop_on_Port_Failed_encountered_Enable = uvm_reg_field::type_id::create("Stop_on_Port_Failed_encountered_Enable");
         Implementation_defined = uvm_reg_field::type_id::create("Implementation_defined");
         Extended_Port_Width_Support = uvm_reg_field::type_id::create("Extended_Port_Width_Support");
         Extended_Port_Width_Override = uvm_reg_field::type_id::create("Extended_Port_Width_Override");
         Flow_Arbitration_Participant = uvm_reg_field::type_id::create("Flow_Arbitration_Participant");
         Enumeration_Boundary = uvm_reg_field::type_id::create("Enumeration_Boundary");
         Flow_Control_Participant = uvm_reg_field::type_id::create("Flow_Control_Participant");
         Multicast_event_Participant = uvm_reg_field::type_id::create("Multicast_event_Participant");
         Error_Checking_Disable = uvm_reg_field::type_id::create("Error_Checking_Disable");
         Input_Port_Enable = uvm_reg_field::type_id::create("Input_Port_Enable");
         Output_Port_Enable = uvm_reg_field::type_id::create("Output_Port_Enable");
         Port_Disable = uvm_reg_field::type_id::create("Port_Disable");
         Port_Width_Override = uvm_reg_field::type_id::create("Port_Width_Override");
         Initialized_Port_Width = uvm_reg_field::type_id::create("Initialized_Port_Width");
         Port_Width_Support = uvm_reg_field::type_id::create("Port_Width_Support");

         Port_Type.configure(this, 1, 31, "RO", 0, 1'b0, 1, 0, 0);
         Port_Lockout.configure(this, 1, 30, "RW", 0, 1'b0, 1, 1, 0);
         Drop_Packet_Enable.configure(this, 1, 29, "RW", 0, 1'b0, 1, 1, 0);
         Stop_on_Port_Failed_encountered_Enable.configure(this, 1, 28, "RW", 0, 1'b0, 1, 1, 0);
         Implementation_defined.configure(this, 8, 20, "RW", 0, 8'h00, 1, 1, 0);
         Extended_Port_Width_Support.configure(this, 2, 18, "RO", 0, 2'b00, 1, 0, 0);
         Extended_Port_Width_Override.configure(this, 2, 16, "RW", 0, 2'b00, 1, 1, 0);
         Flow_Arbitration_Participant.configure(this, 1, 15, "RW", 0, 1'b0, 1, 1, 0);
         Enumeration_Boundary.configure(this, 1, 14, "RW", 0, 1'b0, 1, 1, 0);
         Flow_Control_Participant.configure(this, 1, 13, "RW", 0, 1'b0, 1, 1, 0);
         Multicast_event_Participant.configure(this, 1, 12, "RW", 0, 1'b0, 1, 1, 0);
         Error_Checking_Disable.configure(this, 1, 11, "RW", 0, 1'b0, 1, 1, 0);
         Input_Port_Enable.configure(this, 1, 10, "RW", 0, 1'b0, 1, 1, 0);
         Output_Port_Enable.configure(this, 1, 9, "RW", 0, 1'b0, 1, 1, 0);
         Port_Disable.configure(this, 1, 8, "RW", 0, 1'b0, 1, 1, 0);
         Port_Width_Override.configure(this, 3, 5, "RO", 0, 3'b000, 1, 0, 0);
         Initialized_Port_Width.configure(this, 3, 2, "RW", 0, 3'b000, 1, 1, 0);
         Port_Width_Support.configure(this, 2, 0, "RO", 0, 2'b00, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_0_Timestamp_Offset_CSR_reg
   // 
   // Timestamp_Offset_CSR_Register
   //--------------------------------------------------------------------

   class Port_0_Timestamp_Offset_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_0_Timestamp_Offset_CSR_reg)

      uvm_reg_field Reserved; 
      rand uvm_reg_field Offset; 


      // Function: new
      // 
      function new(string name = "Port_0_Timestamp_Offset_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Offset = uvm_reg_field::type_id::create("Offset");

         Reserved.configure(this, 16, 16, "RO", 0, 16'h0000, 1, 0, 1);
         Offset.configure(this, 16, 0, "RW", 0, 16'h0000, 1, 1, 1);
      endfunction
   endclass

   //--------------------------------------------------------------------
   // Class: Port_7_Link_Maintenance_Request_CSR_reg
   // 
   // Link  Maintenance Request Register
   //--------------------------------------------------------------------

   class Port_7_Link_Maintenance_Request_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_7_Link_Maintenance_Request_CSR_reg)

      uvm_reg_field Command; 
      uvm_reg_field Reserved; 


      // Function: new
      // 
      function new(string name = "Port_7_Link_Maintenance_Request_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Command = uvm_reg_field::type_id::create("Command");
         Reserved = uvm_reg_field::type_id::create("Reserved");

         Command.configure(this, 3, 29, "RW", 0, 3'b000, 1, 1, 1);
         Reserved.configure(this, 29, 0, "RO", 0, 29'b00000000000000000000000000000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Timestamp_Generator_MSW_CSR_reg
   // 
   // Timestamp_Generator_MSW_Register
   //--------------------------------------------------------------------

   class Timestamp_Generator_MSW_CSR_reg extends uvm_reg;
      `uvm_object_utils(Timestamp_Generator_MSW_CSR_reg)

      rand uvm_reg_field MSW_Bits; 


      // Function: new
      // 
      function new(string name = "Timestamp_Generator_MSW_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         MSW_Bits = uvm_reg_field::type_id::create("MSW_Bits");

         MSW_Bits.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_7_Link_Timers_Control_3_CSR_reg
   // 
   // Link_Timers_Control_3_Register
   //--------------------------------------------------------------------

   class Port_7_Link_Timers_Control_3_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_7_Link_Timers_Control_3_CSR_reg)

      rand uvm_reg_field Keep_alive_Transmission_Interval; 
      rand uvm_reg_field Keep_alive_Transmission_Period; 
      rand uvm_reg_field Receive_Width_Command_Timeout; 
      rand uvm_reg_field Transmit_Width_Command_Timeout; 


      // Function: new
      // 
      function new(string name = "Port_7_Link_Timers_Control_3_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Keep_alive_Transmission_Interval = uvm_reg_field::type_id::create("Keep_alive_Transmission_Interval");
         Keep_alive_Transmission_Period = uvm_reg_field::type_id::create("Keep_alive_Transmission_Period");
         Receive_Width_Command_Timeout = uvm_reg_field::type_id::create("Receive_Width_Command_Timeout");
         Transmit_Width_Command_Timeout = uvm_reg_field::type_id::create("Transmit_Width_Command_Timeout");

         Keep_alive_Transmission_Interval.configure(this, 10, 22, "RW", 0, 10'b1111111111, 1, 1, 0);
         Keep_alive_Transmission_Period.configure(this, 6, 16, "RW", 0, 6'b000001, 1, 1, 0);
         Receive_Width_Command_Timeout.configure(this, 8, 8, "RW", 0, 8'h40, 1, 1, 1);
         Transmit_Width_Command_Timeout.configure(this, 8, 0, "RW", 0, 8'hff, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_10_Packet_Capture_4_CSR_reg
   // 
   // Packet Capture 4 Register
   //--------------------------------------------------------------------

   class Port_10_Packet_Capture_4_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_10_Packet_Capture_4_CSR_reg)

      rand uvm_reg_field Capture4; 


      // Function: new
      // 
      function new(string name = "Port_10_Packet_Capture_4_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture4 = uvm_reg_field::type_id::create("Capture4");

         Capture4.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_0_Timestamp_Generator_Synchronization_CSR_reg
   // 
   // Timestamp_Generator_Synchronization_Register
   //--------------------------------------------------------------------

   class Port_0_Timestamp_Generator_Synchronization_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_0_Timestamp_Generator_Synchronization_CSR_reg)

      rand uvm_reg_field Asymmetry; 
      rand uvm_reg_field TX_Has_Lowwer_Latency; 
      uvm_reg_field Reserved_1; 
      rand uvm_reg_field Port_Opening_Mode; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Auto_Update_Link_Partner_Timestamp_Generators; 
      rand uvm_reg_field Disable_Clock_Compensation_Sequence; 
      rand uvm_reg_field Accept_Timestamps; 


      // Function: new
      // 
      function new(string name = "Port_0_Timestamp_Generator_Synchronization_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Asymmetry = uvm_reg_field::type_id::create("Asymmetry");
         TX_Has_Lowwer_Latency = uvm_reg_field::type_id::create("TX_Has_Lowwer_Latency");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         Port_Opening_Mode = uvm_reg_field::type_id::create("Port_Opening_Mode");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Auto_Update_Link_Partner_Timestamp_Generators = uvm_reg_field::type_id::create("Auto_Update_Link_Partner_Timestamp_Generators");
         Disable_Clock_Compensation_Sequence = uvm_reg_field::type_id::create("Disable_Clock_Compensation_Sequence");
         Accept_Timestamps = uvm_reg_field::type_id::create("Accept_Timestamps");

         Asymmetry.configure(this, 12, 20, "RW", 0, 12'h000, 1, 1, 0);
         TX_Has_Lowwer_Latency.configure(this, 1, 19, "RW", 0, 1'b0, 1, 1, 0);
         Reserved_1.configure(this, 11, 8, "RO", 0, 11'b00000000000, 1, 0, 0);
         Port_Opening_Mode.configure(this, 2, 6, "RW", 0, 2'b00, 1, 1, 0);
         Reserved.configure(this, 3, 3, "RO", 0, 3'b000, 1, 0, 0);
         Auto_Update_Link_Partner_Timestamp_Generators.configure(this, 1, 2, "RW", 0, 1'b0, 1, 1, 0);
         Disable_Clock_Compensation_Sequence.configure(this, 1, 1, "RW", 0, 1'b0, 1, 1, 0);
         Accept_Timestamps.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_4_VC0_BW_Allocation_Register_reg
   // 
   // BW Register
   //--------------------------------------------------------------------

   class Port_4_VC0_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_4_VC0_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 
      rand uvm_reg_field Bandwidth_Reservation_Precision; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field VC0_BW_Res_Enable; 
      uvm_reg_field VC0_Bandwidth_Reservation_Capable; 


      // Function: new
      // 
      function new(string name = "Port_4_VC0_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");
         Bandwidth_Reservation_Precision = uvm_reg_field::type_id::create("Bandwidth_Reservation_Precision");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         VC0_BW_Res_Enable = uvm_reg_field::type_id::create("VC0_BW_Res_Enable");
         VC0_Bandwidth_Reservation_Capable = uvm_reg_field::type_id::create("VC0_Bandwidth_Reservation_Capable");

         Bandwidth_Allocation.configure(this, 16, 16, "RW", 0, 16'h0000, 1, 1, 1);
         Bandwidth_Reservation_Precision.configure(this, 8, 8, "RW", 0, 8'h00, 1, 1, 1);
         Reserved.configure(this, 6, 2, "RO", 0, 6'b000000, 1, 0, 0);
         VC0_BW_Res_Enable.configure(this, 1, 1, "RW", 0, 1'b0, 1, 1, 0);
         VC0_Bandwidth_Reservation_Capable.configure(this, 1, 0, "RO", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_3_VC0_BW_Allocation_Register_reg
   // 
   // BW Register
   //--------------------------------------------------------------------

   class Port_3_VC0_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_3_VC0_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 
      rand uvm_reg_field Bandwidth_Reservation_Precision; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field VC0_BW_Res_Enable; 
      uvm_reg_field VC0_Bandwidth_Reservation_Capable; 


      // Function: new
      // 
      function new(string name = "Port_3_VC0_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");
         Bandwidth_Reservation_Precision = uvm_reg_field::type_id::create("Bandwidth_Reservation_Precision");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         VC0_BW_Res_Enable = uvm_reg_field::type_id::create("VC0_BW_Res_Enable");
         VC0_Bandwidth_Reservation_Capable = uvm_reg_field::type_id::create("VC0_Bandwidth_Reservation_Capable");

         Bandwidth_Allocation.configure(this, 16, 16, "RW", 0, 16'h0000, 1, 1, 1);
         Bandwidth_Reservation_Precision.configure(this, 8, 8, "RW", 0, 8'h00, 1, 1, 1);
         Reserved.configure(this, 6, 2, "RO", 0, 6'b000000, 1, 0, 0);
         VC0_BW_Res_Enable.configure(this, 1, 1, "RW", 0, 1'b0, 1, 1, 0);
         VC0_Bandwidth_Reservation_Capable.configure(this, 1, 0, "RO", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_12_Timestamp_Generator_Synchronization_CSR_reg
   // 
   // Timestamp_Generator_Synchronization_Register
   //--------------------------------------------------------------------

   class Port_12_Timestamp_Generator_Synchronization_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_12_Timestamp_Generator_Synchronization_CSR_reg)

      rand uvm_reg_field Asymmetry; 
      rand uvm_reg_field TX_Has_Lowwer_Latency; 
      uvm_reg_field Reserved_1; 
      rand uvm_reg_field Port_Opening_Mode; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Auto_Update_Link_Partner_Timestamp_Generators; 
      rand uvm_reg_field Disable_Clock_Compensation_Sequence; 
      rand uvm_reg_field Accept_Timestamps; 


      // Function: new
      // 
      function new(string name = "Port_12_Timestamp_Generator_Synchronization_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Asymmetry = uvm_reg_field::type_id::create("Asymmetry");
         TX_Has_Lowwer_Latency = uvm_reg_field::type_id::create("TX_Has_Lowwer_Latency");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         Port_Opening_Mode = uvm_reg_field::type_id::create("Port_Opening_Mode");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Auto_Update_Link_Partner_Timestamp_Generators = uvm_reg_field::type_id::create("Auto_Update_Link_Partner_Timestamp_Generators");
         Disable_Clock_Compensation_Sequence = uvm_reg_field::type_id::create("Disable_Clock_Compensation_Sequence");
         Accept_Timestamps = uvm_reg_field::type_id::create("Accept_Timestamps");

         Asymmetry.configure(this, 12, 20, "RW", 0, 12'h000, 1, 1, 0);
         TX_Has_Lowwer_Latency.configure(this, 1, 19, "RW", 0, 1'b0, 1, 1, 0);
         Reserved_1.configure(this, 11, 8, "RO", 0, 11'b00000000000, 1, 0, 0);
         Port_Opening_Mode.configure(this, 2, 6, "RW", 0, 2'b00, 1, 1, 0);
         Reserved.configure(this, 3, 3, "RO", 0, 3'b000, 1, 0, 0);
         Auto_Update_Link_Partner_Timestamp_Generators.configure(this, 1, 2, "RW", 0, 1'b0, 1, 1, 0);
         Disable_Clock_Compensation_Sequence.configure(this, 1, 1, "RW", 0, 1'b0, 1, 1, 0);
         Accept_Timestamps.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_6_Link_Timers_Control_2_CSR_reg
   // 
   // Link_Timers_Control_2_Register
   //--------------------------------------------------------------------

   class Port_6_Link_Timers_Control_2_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_6_Link_Timers_Control_2_CSR_reg)

      uvm_reg_field Reserved; 
      rand uvm_reg_field Recovery_Timer; 
      rand uvm_reg_field Discovery_Completion_Timer; 
      rand uvm_reg_field Retraining_Completion_Timer; 


      // Function: new
      // 
      function new(string name = "Port_6_Link_Timers_Control_2_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Recovery_Timer = uvm_reg_field::type_id::create("Recovery_Timer");
         Discovery_Completion_Timer = uvm_reg_field::type_id::create("Discovery_Completion_Timer");
         Retraining_Completion_Timer = uvm_reg_field::type_id::create("Retraining_Completion_Timer");

         Reserved.configure(this, 8, 24, "RO", 0, 8'h00, 1, 0, 1);
         Recovery_Timer.configure(this, 8, 16, "RW", 0, 8'hff, 1, 1, 1);
         Discovery_Completion_Timer.configure(this, 8, 8, "RW", 0, 8'h00, 1, 1, 1);
         Retraining_Completion_Timer.configure(this, 8, 0, "RW", 0, 8'hfe, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_7_Packet_Control_Symbol_Capture_0_CSR_reg
   // 
   // Symbol Capture Register
   //--------------------------------------------------------------------

   class Port_7_Packet_Control_Symbol_Capture_0_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_7_Packet_Control_Symbol_Capture_0_CSR_reg)

      rand uvm_reg_field Capture0; 


      // Function: new
      // 
      function new(string name = "Port_7_Packet_Control_Symbol_Capture_0_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture0 = uvm_reg_field::type_id::create("Capture0");

         Capture0.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass
   //--------------------------------------------------------------------
   // Class: Lane_5_Status_1_CSR_reg
   // 
   // Status 1 Register
   //--------------------------------------------------------------------

   class Lane_5_Status_1_CSR_reg extends uvm_reg;
      `uvm_object_utils(Lane_5_Status_1_CSR_reg)

      uvm_reg_field Reserved; 
      uvm_reg_field IDLE3_SC_Retraining_State; 
      uvm_reg_field IDLE3_SC_Training_State; 
      uvm_reg_field IDLE3_DME_Training_State; 
      uvm_reg_field IDLE3_Training_Type; 
      uvm_reg_field IDLE3_Loss_of_Signals; 
      uvm_reg_field IDLE2_Connected_port_scrambling_descrambling_enabled; 
      uvm_reg_field IDLE2_Connected_port_transmit_emphasis_Tap_plus1_status; 
      uvm_reg_field IDLE2_Connected_port_transmit_emphasis_Tap_minus1_status; 
      uvm_reg_field IDLE2_Lane_number_in_connected_port; 
      uvm_reg_field IDLE2_Received_port_width; 
      uvm_reg_field IDLE2_Connected_port_lane_receiver_trained; 
      uvm_reg_field Implementation_defined; 
      uvm_reg_field Values_changed; 
      uvm_reg_field IDLE_information_current; 
      rand uvm_reg_field IDLE_received; 


      // Function: new
      // 
      function new(string name = "Lane_5_Status_1_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         IDLE3_SC_Retraining_State = uvm_reg_field::type_id::create("IDLE3_SC_Retraining_State");
         IDLE3_SC_Training_State = uvm_reg_field::type_id::create("IDLE3_SC_Training_State");
         IDLE3_DME_Training_State = uvm_reg_field::type_id::create("IDLE3_DME_Training_State");
         IDLE3_Training_Type = uvm_reg_field::type_id::create("IDLE3_Training_Type");
         IDLE3_Loss_of_Signals = uvm_reg_field::type_id::create("IDLE3_Loss_of_Signals");
         IDLE2_Connected_port_scrambling_descrambling_enabled = uvm_reg_field::type_id::create("IDLE2_Connected_port_scrambling_descrambling_enabled");
         IDLE2_Connected_port_transmit_emphasis_Tap_plus1_status = uvm_reg_field::type_id::create("IDLE2_Connected_port_transmit_emphasis_Tap_plus1_status");
         IDLE2_Connected_port_transmit_emphasis_Tap_minus1_status = uvm_reg_field::type_id::create("IDLE2_Connected_port_transmit_emphasis_Tap_minus1_status");
         IDLE2_Lane_number_in_connected_port = uvm_reg_field::type_id::create("IDLE2_Lane_number_in_connected_port");
         IDLE2_Received_port_width = uvm_reg_field::type_id::create("IDLE2_Received_port_width");
         IDLE2_Connected_port_lane_receiver_trained = uvm_reg_field::type_id::create("IDLE2_Connected_port_lane_receiver_trained");
         Implementation_defined = uvm_reg_field::type_id::create("Implementation_defined");
         Values_changed = uvm_reg_field::type_id::create("Values_changed");
         IDLE_information_current = uvm_reg_field::type_id::create("IDLE_information_current");
         IDLE_received = uvm_reg_field::type_id::create("IDLE_received");

         Reserved.configure(this, 6, 26, "RO", 0, 6'b000000, 1, 0, 0);
         IDLE3_SC_Retraining_State.configure(this, 2, 24, "RO", 0, 2'b00, 1, 0, 0);
         IDLE3_SC_Training_State.configure(this, 2, 22, "RO", 0, 2'b00, 1, 0, 0);
         IDLE3_DME_Training_State.configure(this, 2, 20, "RO", 0, 2'b00, 1, 0, 0);
         IDLE3_Training_Type.configure(this, 2, 18, "RO", 0, 2'b00, 1, 0, 0);
         IDLE3_Loss_of_Signals.configure(this, 1, 17, "RO", 0, 1'b0, 1, 0, 0);
         IDLE2_Connected_port_scrambling_descrambling_enabled.configure(this, 1, 16, "RO", 0, 1'b0, 1, 0, 0);
         IDLE2_Connected_port_transmit_emphasis_Tap_plus1_status.configure(this, 2, 14, "RO", 0, 2'b00, 1, 0, 0);
         IDLE2_Connected_port_transmit_emphasis_Tap_minus1_status.configure(this, 2, 12, "RO", 0, 2'b00, 1, 0, 0);
         IDLE2_Lane_number_in_connected_port.configure(this, 4, 8, "RO", 0, 4'h0, 1, 0, 0);
         IDLE2_Received_port_width.configure(this, 3, 5, "RO", 0, 3'b000, 1, 0, 0);
         IDLE2_Connected_port_lane_receiver_trained.configure(this, 1, 4, "RO", 0, 1'b0, 1, 0, 0);
         Implementation_defined.configure(this, 1, 3, "RO", 0, 1'b0, 1, 0, 0);
         Values_changed.configure(this, 1, 2, "RO", 0, 1'b1, 1, 0, 0);
         IDLE_information_current.configure(this, 1, 1, "RO", 0, 1'b0, 1, 0, 0);
         IDLE_received.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_4_Link_Maintenance_Response_CSR_reg
   // 
   // Link Maintenance Response Register
   //--------------------------------------------------------------------

   class Port_4_Link_Maintenance_Response_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_4_Link_Maintenance_Response_CSR_reg)

      uvm_reg_field port_status; 
      uvm_reg_field ackID_status; 
      uvm_reg_field Port_status_cs64; 
      uvm_reg_field Reserved; 
      uvm_reg_field response_valid; 


      // Function: new
      // 
      function new(string name = "Port_4_Link_Maintenance_Response_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         port_status = uvm_reg_field::type_id::create("port_status");
         ackID_status = uvm_reg_field::type_id::create("ackID_status");
         Port_status_cs64 = uvm_reg_field::type_id::create("Port_status_cs64");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         response_valid = uvm_reg_field::type_id::create("response_valid");

         port_status.configure(this, 5, 27, "RO", 0, 5'b00000, 1, 0, 0);
         ackID_status.configure(this, 12, 15, "RO", 0, 12'h000, 1, 0, 0);
         Port_status_cs64.configure(this, 12, 3, "RO", 0, 12'h000, 1, 0, 0);
         Reserved.configure(this, 2, 1, "RO", 0, 2'b00, 1, 0, 0);
         response_valid.configure(this, 1, 0, "RO", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass


   //--------------------------------------------------------------------
   // Class: Port_4_Packet_Capture_4_CSR_reg
   // 
   // Packet Capture 4 Register
   //--------------------------------------------------------------------

   class Port_4_Packet_Capture_4_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_4_Packet_Capture_4_CSR_reg)

      rand uvm_reg_field Capture4; 


      // Function: new
      // 
      function new(string name = "Port_4_Packet_Capture_4_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture4 = uvm_reg_field::type_id::create("Capture4");

         Capture4.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_7_Timestamp_Synchronization_Status_CSR_reg
   // 
   // Timestamp_Synchronization_Status_CSR_Register
   //--------------------------------------------------------------------

   class Port_7_Timestamp_Synchronization_Status_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_7_Timestamp_Synchronization_Status_CSR_reg)

      uvm_reg_field Delay; 
      uvm_reg_field Reserved; 
      uvm_reg_field Response_Valid; 


      // Function: new
      // 
      function new(string name = "Port_7_Timestamp_Synchronization_Status_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Delay = uvm_reg_field::type_id::create("Delay");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Response_Valid = uvm_reg_field::type_id::create("Response_Valid");

         Delay.configure(this, 10, 22, "RO", 0, 10'b0000000000, 1, 0, 0);
         Reserved.configure(this, 21, 1, "RO", 0, 21'b000000000000000000000, 1, 0, 0);
         Response_Valid.configure(this, 1, 0, "RO", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Assembly_Information_CAR_reg
   // 
   // Assy Information Register
   //--------------------------------------------------------------------

   class Assembly_Information_CAR_reg extends uvm_reg;
      `uvm_object_utils(Assembly_Information_CAR_reg)

      uvm_reg_field ExtendedFeaturesPtr; 
      uvm_reg_field AssyRev; 


      // Function: new
      // 
      function new(string name = "Assembly_Information_CAR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         ExtendedFeaturesPtr = uvm_reg_field::type_id::create("ExtendedFeaturesPtr");
         AssyRev = uvm_reg_field::type_id::create("AssyRev");

         ExtendedFeaturesPtr.configure(this, 16, 16, "RO", 0, 16'h0000, 1, 0, 1);
         AssyRev.configure(this, 16, 0, "RO", 0, 16'h0000, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_14_Control_CSR_reg
   // 
   // Control Register
   //--------------------------------------------------------------------

   class Port_14_Control_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_14_Control_CSR_reg)

      uvm_reg_field Port_Type; 
      rand uvm_reg_field Port_Lockout; 
      rand uvm_reg_field Drop_Packet_Enable; 
      rand uvm_reg_field Stop_on_Port_Failed_encountered_Enable; 
      rand uvm_reg_field Implementation_defined; 
      uvm_reg_field Extended_Port_Width_Support; 
      rand uvm_reg_field Extended_Port_Width_Override; 
      rand uvm_reg_field Flow_Arbitration_Participant; 
      rand uvm_reg_field Enumeration_Boundary; 
      rand uvm_reg_field Flow_Control_Participant; 
      rand uvm_reg_field Multicast_event_Participant; 
      rand uvm_reg_field Error_Checking_Disable; 
      rand uvm_reg_field Input_Port_Enable; 
      rand uvm_reg_field Output_Port_Enable; 
      rand uvm_reg_field Port_Disable; 
      uvm_reg_field Port_Width_Override; 
      rand uvm_reg_field Initialized_Port_Width; 
      uvm_reg_field Port_Width_Support; 


      // Function: new
      // 
      function new(string name = "Port_14_Control_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Port_Type = uvm_reg_field::type_id::create("Port_Type");
         Port_Lockout = uvm_reg_field::type_id::create("Port_Lockout");
         Drop_Packet_Enable = uvm_reg_field::type_id::create("Drop_Packet_Enable");
         Stop_on_Port_Failed_encountered_Enable = uvm_reg_field::type_id::create("Stop_on_Port_Failed_encountered_Enable");
         Implementation_defined = uvm_reg_field::type_id::create("Implementation_defined");
         Extended_Port_Width_Support = uvm_reg_field::type_id::create("Extended_Port_Width_Support");
         Extended_Port_Width_Override = uvm_reg_field::type_id::create("Extended_Port_Width_Override");
         Flow_Arbitration_Participant = uvm_reg_field::type_id::create("Flow_Arbitration_Participant");
         Enumeration_Boundary = uvm_reg_field::type_id::create("Enumeration_Boundary");
         Flow_Control_Participant = uvm_reg_field::type_id::create("Flow_Control_Participant");
         Multicast_event_Participant = uvm_reg_field::type_id::create("Multicast_event_Participant");
         Error_Checking_Disable = uvm_reg_field::type_id::create("Error_Checking_Disable");
         Input_Port_Enable = uvm_reg_field::type_id::create("Input_Port_Enable");
         Output_Port_Enable = uvm_reg_field::type_id::create("Output_Port_Enable");
         Port_Disable = uvm_reg_field::type_id::create("Port_Disable");
         Port_Width_Override = uvm_reg_field::type_id::create("Port_Width_Override");
         Initialized_Port_Width = uvm_reg_field::type_id::create("Initialized_Port_Width");
         Port_Width_Support = uvm_reg_field::type_id::create("Port_Width_Support");

         Port_Type.configure(this, 1, 31, "RO", 0, 1'b0, 1, 0, 0);
         Port_Lockout.configure(this, 1, 30, "RW", 0, 1'b0, 1, 1, 0);
         Drop_Packet_Enable.configure(this, 1, 29, "RW", 0, 1'b0, 1, 1, 0);
         Stop_on_Port_Failed_encountered_Enable.configure(this, 1, 28, "RW", 0, 1'b0, 1, 1, 0);
         Implementation_defined.configure(this, 8, 20, "RW", 0, 8'h00, 1, 1, 0);
         Extended_Port_Width_Support.configure(this, 2, 18, "RO", 0, 2'b00, 1, 0, 0);
         Extended_Port_Width_Override.configure(this, 2, 16, "RW", 0, 2'b00, 1, 1, 0);
         Flow_Arbitration_Participant.configure(this, 1, 15, "RW", 0, 1'b0, 1, 1, 0);
         Enumeration_Boundary.configure(this, 1, 14, "RW", 0, 1'b0, 1, 1, 0);
         Flow_Control_Participant.configure(this, 1, 13, "RW", 0, 1'b0, 1, 1, 0);
         Multicast_event_Participant.configure(this, 1, 12, "RW", 0, 1'b0, 1, 1, 0);
         Error_Checking_Disable.configure(this, 1, 11, "RW", 0, 1'b0, 1, 1, 0);
         Input_Port_Enable.configure(this, 1, 10, "RW", 0, 1'b0, 1, 1, 0);
         Output_Port_Enable.configure(this, 1, 9, "RW", 0, 1'b0, 1, 1, 0);
         Port_Disable.configure(this, 1, 8, "RW", 0, 1'b0, 1, 1, 0);
         Port_Width_Override.configure(this, 3, 5, "RO", 0, 3'b000, 1, 0, 0);
         Initialized_Port_Width.configure(this, 3, 2, "RW", 0, 3'b000, 1, 1, 0);
         Port_Width_Support.configure(this, 2, 0, "RO", 0, 2'b00, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Lane_11_Status_0_CSR_reg
   // 
   // Status 0 Register
   //--------------------------------------------------------------------

   class Lane_11_Status_0_CSR_reg extends uvm_reg;
      `uvm_object_utils(Lane_11_Status_0_CSR_reg)

      uvm_reg_field Status2_7_CSRs_implemented; 
      uvm_reg_field Status1_CSR_implemented; 
      uvm_reg_field Reserved; 
      uvm_reg_field Rcvr_trained_state_change; 
      uvm_reg_field Lane_sync_state_change; 
      uvm_reg_field lane_8B_10B_decoding_errors; 
      uvm_reg_field Receiver_lane_ready; 
      uvm_reg_field Receiver_lane_sync; 
      uvm_reg_field Receiver_trained; 
      uvm_reg_field Receiver_input_inverted; 
      uvm_reg_field Receiver_type; 
      uvm_reg_field Transmitter_mode; 
      uvm_reg_field Transmitter_type; 
      uvm_reg_field Lane_Number; 
      uvm_reg_field Port_Number; 


      // Function: new
      // 
      function new(string name = "Lane_11_Status_0_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Status2_7_CSRs_implemented = uvm_reg_field::type_id::create("Status2_7_CSRs_implemented");
         Status1_CSR_implemented = uvm_reg_field::type_id::create("Status1_CSR_implemented");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Rcvr_trained_state_change = uvm_reg_field::type_id::create("Rcvr_trained_state_change");
         Lane_sync_state_change = uvm_reg_field::type_id::create("Lane_sync_state_change");
         lane_8B_10B_decoding_errors = uvm_reg_field::type_id::create("lane_8B_10B_decoding_errors");
         Receiver_lane_ready = uvm_reg_field::type_id::create("Receiver_lane_ready");
         Receiver_lane_sync = uvm_reg_field::type_id::create("Receiver_lane_sync");
         Receiver_trained = uvm_reg_field::type_id::create("Receiver_trained");
         Receiver_input_inverted = uvm_reg_field::type_id::create("Receiver_input_inverted");
         Receiver_type = uvm_reg_field::type_id::create("Receiver_type");
         Transmitter_mode = uvm_reg_field::type_id::create("Transmitter_mode");
         Transmitter_type = uvm_reg_field::type_id::create("Transmitter_type");
         Lane_Number = uvm_reg_field::type_id::create("Lane_Number");
         Port_Number = uvm_reg_field::type_id::create("Port_Number");

         Status2_7_CSRs_implemented.configure(this, 3, 29, "RO", 0, 3'b000, 1, 0, 0);
         Status1_CSR_implemented.configure(this, 1, 28, "RO", 0, 1'b0, 1, 0, 0);
         Reserved.configure(this, 2, 26, "RO", 0, 2'b00, 1, 0, 0);
         Rcvr_trained_state_change.configure(this, 1, 25, "RO", 0, 1'b0, 1, 0, 0);
         Lane_sync_state_change.configure(this, 1, 24, "RO", 0, 1'b0, 1, 0, 0);
         lane_8B_10B_decoding_errors.configure(this, 4, 20, "RO", 0, 4'h0, 1, 0, 0);
         Receiver_lane_ready.configure(this, 1, 19, "RO", 0, 1'b0, 1, 0, 0);
         Receiver_lane_sync.configure(this, 1, 18, "RO", 0, 1'b0, 1, 0, 0);
         Receiver_trained.configure(this, 1, 17, "RO", 0, 1'b0, 1, 0, 0);
         Receiver_input_inverted.configure(this, 1, 16, "RO", 0, 1'b0, 1, 0, 0);
         Receiver_type.configure(this, 2, 14, "RO", 0, 2'b00, 1, 0, 0);
         Transmitter_mode.configure(this, 1, 13, "RO", 0, 1'b0, 1, 0, 0);
         Transmitter_type.configure(this, 1, 12, "RO", 0, 1'b0, 1, 0, 0);
         Lane_Number.configure(this, 4, 8, "RO", 0, 4'h0, 1, 0, 0);
         Port_Number.configure(this, 8, 0, "RO", 0, 8'h00, 1, 0, 1);
      endfunction
   endclass


   //--------------------------------------------------------------------
   // Class: Logical_Transport_Layer_Device_ID_Capture_CSR_reg
   // 
   // Device ID Register
   //--------------------------------------------------------------------

   class Logical_Transport_Layer_Device_ID_Capture_CSR_reg extends uvm_reg;
      `uvm_object_utils(Logical_Transport_Layer_Device_ID_Capture_CSR_reg)

      rand uvm_reg_field sourceID; 
      rand uvm_reg_field MSB_sourceID; 
      rand uvm_reg_field destinationID; 
      rand uvm_reg_field MSB_destinationID; 


      // Function: new
      // 
      function new(string name = "Logical_Transport_Layer_Device_ID_Capture_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         sourceID = uvm_reg_field::type_id::create("sourceID");
         MSB_sourceID = uvm_reg_field::type_id::create("MSB_sourceID");
         destinationID = uvm_reg_field::type_id::create("destinationID");
         MSB_destinationID = uvm_reg_field::type_id::create("MSB_destinationID");

         sourceID.configure(this, 8, 24, "RW", 0, 8'h00, 1, 1, 1);
         MSB_sourceID.configure(this, 8, 16, "RW", 0, 8'h00, 1, 1, 1);
         destinationID.configure(this, 8, 8, "RW", 0, 8'h00, 1, 1, 1);
         MSB_destinationID.configure(this, 8, 0, "RW", 0, 8'h00, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_6_Timestamp_Synchronization_Command_CSR_reg
   // 
   // Timestamp_Synchronization_Command_CSR_Register
   //--------------------------------------------------------------------

   class Port_6_Timestamp_Synchronization_Command_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_6_Timestamp_Synchronization_Command_CSR_reg)

      rand uvm_reg_field Command; 
      uvm_reg_field Reserved_2; 
      rand uvm_reg_field Send_Timestamp; 
      uvm_reg_field Reserved_1; 
      rand uvm_reg_field Send_Zero_Timestamp; 
      uvm_reg_field Reserved; 


      // Function: new
      // 
      function new(string name = "Port_6_Timestamp_Synchronization_Command_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Command = uvm_reg_field::type_id::create("Command");
         Reserved_2 = uvm_reg_field::type_id::create("Reserved_2");
         Send_Timestamp = uvm_reg_field::type_id::create("Send_Timestamp");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         Send_Zero_Timestamp = uvm_reg_field::type_id::create("Send_Zero_Timestamp");
         Reserved = uvm_reg_field::type_id::create("Reserved");

         Command.configure(this, 3, 29, "RW", 0, 3'b000, 1, 1, 0);
         Reserved_2.configure(this, 1, 28, "RO", 0, 1'b0, 1, 0, 0);
         Send_Timestamp.configure(this, 1, 27, "RW", 0, 1'b0, 1, 1, 0);
         Reserved_1.configure(this, 3, 24, "RO", 0, 3'b000, 1, 0, 0);
         Send_Zero_Timestamp.configure(this, 1, 23, "RW", 0, 1'b0, 1, 1, 0);
         Reserved.configure(this, 23, 0, "RO", 0, 23'b00000000000000000000000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_0_Link_Timers_Control_3_CSR_reg
   // 
   // Link_Timers_Control_3_Register
   //--------------------------------------------------------------------

   class Port_0_Link_Timers_Control_3_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_0_Link_Timers_Control_3_CSR_reg)

      rand uvm_reg_field Keep_alive_Transmission_Interval; 
      rand uvm_reg_field Keep_alive_Transmission_Period; 
      rand uvm_reg_field Receive_Width_Command_Timeout; 
      rand uvm_reg_field Transmit_Width_Command_Timeout; 


      // Function: new
      // 
      function new(string name = "Port_0_Link_Timers_Control_3_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Keep_alive_Transmission_Interval = uvm_reg_field::type_id::create("Keep_alive_Transmission_Interval");
         Keep_alive_Transmission_Period = uvm_reg_field::type_id::create("Keep_alive_Transmission_Period");
         Receive_Width_Command_Timeout = uvm_reg_field::type_id::create("Receive_Width_Command_Timeout");
         Transmit_Width_Command_Timeout = uvm_reg_field::type_id::create("Transmit_Width_Command_Timeout");

         Keep_alive_Transmission_Interval.configure(this, 10, 22, "RW", 0, 10'b1111111111, 1, 1, 0);
         Keep_alive_Transmission_Period.configure(this, 6, 16, "RW", 0, 6'b000001, 1, 1, 0);
         Receive_Width_Command_Timeout.configure(this, 8, 8, "RW", 0, 8'h40, 1, 1, 1);
         Transmit_Width_Command_Timeout.configure(this, 8, 0, "RW", 0, 8'hff, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_2_Link_Uninit_Discard_Timer_CSR_reg
   // 
   // Link_Uninit_Discard_Timer_CSR_Register
   //--------------------------------------------------------------------

   class Port_2_Link_Uninit_Discard_Timer_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_2_Link_Uninit_Discard_Timer_CSR_reg)

      uvm_reg_field Reserved; 
      rand uvm_reg_field Link_Uninit_Timeout; 


      // Function: new
      // 
      function new(string name = "Port_2_Link_Uninit_Discard_Timer_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Link_Uninit_Timeout = uvm_reg_field::type_id::create("Link_Uninit_Timeout");

         Reserved.configure(this, 8, 24, "RO", 0, 8'h00, 1, 0, 1);
         Link_Uninit_Timeout.configure(this, 24, 0, "RW", 0, 24'h000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_9_Error_Rate_CSR_reg
   // 
   // Error Rate Register
   //--------------------------------------------------------------------

   class Port_9_Error_Rate_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_9_Error_Rate_CSR_reg)

      rand uvm_reg_field Error_Rate_Counter; 
      rand uvm_reg_field Peak_Error_Rate; 
      rand uvm_reg_field Error_Rate_Recovery; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Error_Rate_Bias; 


      // Function: new
      // 
      function new(string name = "Port_9_Error_Rate_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Error_Rate_Counter = uvm_reg_field::type_id::create("Error_Rate_Counter");
         Peak_Error_Rate = uvm_reg_field::type_id::create("Peak_Error_Rate");
         Error_Rate_Recovery = uvm_reg_field::type_id::create("Error_Rate_Recovery");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Error_Rate_Bias = uvm_reg_field::type_id::create("Error_Rate_Bias");

         Error_Rate_Counter.configure(this, 8, 24, "RW", 0, 8'h00, 1, 1, 1);
         Peak_Error_Rate.configure(this, 8, 16, "RW", 0, 8'h00, 1, 1, 1);
         Error_Rate_Recovery.configure(this, 2, 14, "RW", 0, 2'b00, 1, 1, 0);
         Reserved.configure(this, 6, 8, "RO", 0, 6'b000000, 1, 0, 0);
         Error_Rate_Bias.configure(this, 8, 0, "RW", 0, 8'h80, 1, 1, 1);
      endfunction
   endclass


   //--------------------------------------------------------------------
   // Class: Port_0_Inbound_ackID_CSR_reg
   // 
   // Inbound_Register
   //--------------------------------------------------------------------

   class Port_0_Inbound_ackID_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_0_Inbound_ackID_CSR_reg)

      rand uvm_reg_field Inbound_ackID;  
      uvm_reg_field Reserved; 


      // Function: new
      // 
      function new(string name = "Port_0_Inbound_ackID_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Inbound_ackID = uvm_reg_field::type_id::create("Inbound_ackID");
         Reserved = uvm_reg_field::type_id::create("Reserved");

       Inbound_ackID.configure(this, 12, 20, "RW", 0, 12'h000, 1, 1, 0);
         Reserved.configure(this, 20, 0, "RO", 0, 20'h00000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Logical_Transport_Layer_Error_Enable_CSR_reg
   // 
   // Error Enable Register
   //--------------------------------------------------------------------

   class Logical_Transport_Layer_Error_Enable_CSR_reg extends uvm_reg;
      `uvm_object_utils(Logical_Transport_Layer_Error_Enable_CSR_reg)

      uvm_reg_field Implementation_Specific_error_enable_1;
      rand uvm_reg_field tse;
      rand uvm_reg_field rete; 
      uvm_reg_field Implementation_Specific_error_enable_0; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Data_streaming_PDU_length_error_enable; 
      rand uvm_reg_field Short_data_streaming_segment_error_enable; 
      rand uvm_reg_field Long_data_streaming_segment_error_enable; 
      rand uvm_reg_field Open_existing_data_streaming_context_error_enable; 
      rand uvm_reg_field Missing_data_streaming_context_error_enable; 
      rand uvm_reg_field Unsupported_Transaction_error_enable; 
      rand uvm_reg_field Unsolicited_Response_error_enable; 
      rand uvm_reg_field Packet_Response_Timeout_error_enable; 
      rand uvm_reg_field Message_Request_timeout_error_enable; 
      rand uvm_reg_field Illegal_transaction_target_error_enable; 
      rand uvm_reg_field Illegal_transaction_decode_enable; 
      rand uvm_reg_field Message_Format_Error_enable; 
      rand uvm_reg_field GSM_error_response_enable; 
      rand uvm_reg_field Message_error_response_enable; 
      rand uvm_reg_field IO_error_response_enable; 


      // Function: new
      // 
      function new(string name = "Logical_Transport_Layer_Error_Enable_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Implementation_Specific_error_enable_1 = uvm_reg_field::type_id::create("Implementation_Specific_error_enable_1");
         tse =  uvm_reg_field::type_id::create("tse");
         rete =  uvm_reg_field::type_id::create("rete");
         Implementation_Specific_error_enable_0 = uvm_reg_field::type_id::create("Implementation_Specific_error_enable_0");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Data_streaming_PDU_length_error_enable = uvm_reg_field::type_id::create("Data_streaming_PDU_length_error_enable");
         Short_data_streaming_segment_error_enable = uvm_reg_field::type_id::create("Short_data_streaming_segment_error_enable");
         Long_data_streaming_segment_error_enable = uvm_reg_field::type_id::create("Long_data_streaming_segment_error_enable");
         Open_existing_data_streaming_context_error_enable = uvm_reg_field::type_id::create("Open_existing_data_streaming_context_error_enable");
         Missing_data_streaming_context_error_enable = uvm_reg_field::type_id::create("Missing_data_streaming_context_error_enable");
         Unsupported_Transaction_error_enable = uvm_reg_field::type_id::create("Unsupported_Transaction_error_enable");
         Unsolicited_Response_error_enable = uvm_reg_field::type_id::create("Unsolicited_Response_error_enable");
         Packet_Response_Timeout_error_enable = uvm_reg_field::type_id::create("Packet_Response_Timeout_error_enable");
         Message_Request_timeout_error_enable = uvm_reg_field::type_id::create("Message_Request_timeout_error_enable");
         Illegal_transaction_target_error_enable = uvm_reg_field::type_id::create("Illegal_transaction_target_error_enable");
         Illegal_transaction_decode_enable = uvm_reg_field::type_id::create("Illegal_transaction_decode_enable");
         Message_Format_Error_enable = uvm_reg_field::type_id::create("Message_Format_Error_enable");
         GSM_error_response_enable = uvm_reg_field::type_id::create("GSM_error_response_enable");
         Message_error_response_enable = uvm_reg_field::type_id::create("Message_error_response_enable");
         IO_error_response_enable = uvm_reg_field::type_id::create("IO_error_response_enable");

         Implementation_Specific_error_enable_1.configure(this, 3, 29, "RO", 0, 3'h0, 1, 0, 1);
         tse.configure(this, 1, 28, "RW", 0, 1'h0, 1, 1, 1);
         rete.configure(this, 1, 27, "RW", 0, 1'h0, 1, 1, 1);
         Implementation_Specific_error_enable_0.configure(this, 3, 24, "RO", 0, 3'h0, 1, 0, 1);
         Reserved.configure(this, 9, 15, "RO", 0, 9'b000000000, 1, 0, 0);
         Data_streaming_PDU_length_error_enable.configure(this, 1, 14, "RW", 0, 1'b0, 1, 1, 0);
         Short_data_streaming_segment_error_enable.configure(this, 1, 13, "RW", 0, 1'b0, 1, 1, 0);
         Long_data_streaming_segment_error_enable.configure(this, 1, 12, "RW", 0, 1'b0, 1, 1, 0);
         Open_existing_data_streaming_context_error_enable.configure(this, 1, 11, "RW", 0, 1'b0, 1, 1, 0);
         Missing_data_streaming_context_error_enable.configure(this, 1, 10, "RW", 0, 1'b0, 1, 1, 0);
         Unsupported_Transaction_error_enable.configure(this, 1, 9, "RW", 0, 1'b0, 1, 1, 0);
         Unsolicited_Response_error_enable.configure(this, 1, 8, "RW", 0, 1'b0, 1, 1, 0);
         Packet_Response_Timeout_error_enable.configure(this, 1, 7, "RW", 0, 1'b0, 1, 1, 0);
         Message_Request_timeout_error_enable.configure(this, 1, 6, "RW", 0, 1'b0, 1, 1, 0);
         Illegal_transaction_target_error_enable.configure(this, 1, 5, "RW", 0, 1'b0, 1, 1, 0);
         Illegal_transaction_decode_enable.configure(this, 1, 4, "RW", 0, 1'b0, 1, 1, 0);
         Message_Format_Error_enable.configure(this, 1, 3, "RW", 0, 1'b0, 1, 1, 0);
         GSM_error_response_enable.configure(this, 1, 2, "RW", 0, 1'b0, 1, 1, 0);
         Message_error_response_enable.configure(this, 1, 1, "RW", 0, 1'b0, 1, 1, 0);
         IO_error_response_enable.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_13_Packet_Capture_4_CSR_reg
   // 
   // Packet Capture 4 Register
   //--------------------------------------------------------------------

   class Port_13_Packet_Capture_4_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_13_Packet_Capture_4_CSR_reg)

      rand uvm_reg_field Capture4; 


      // Function: new
      // 
      function new(string name = "Port_13_Packet_Capture_4_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture4 = uvm_reg_field::type_id::create("Capture4");

         Capture4.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_15_Auto_Update_Counter_CSR_reg
   // 
   // Auto_Update_Counter_CSR_Register
   //--------------------------------------------------------------------

   class Port_15_Auto_Update_Counter_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_15_Auto_Update_Counter_CSR_reg)

      rand uvm_reg_field Update_Period; 


      // Function: new
      // 
      function new(string name = "Port_15_Auto_Update_Counter_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Update_Period = uvm_reg_field::type_id::create("Update_Period");

         Update_Period.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_4_Packet_Control_Symbol_Capture_0_CSR_reg
   // 
   // Symbol Capture Register
   //--------------------------------------------------------------------

   class Port_4_Packet_Control_Symbol_Capture_0_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_4_Packet_Control_Symbol_Capture_0_CSR_reg)

      rand uvm_reg_field Capture0; 


      // Function: new
      // 
      function new(string name = "Port_4_Packet_Control_Symbol_Capture_0_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture0 = uvm_reg_field::type_id::create("Capture0");

         Capture0.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass


   //--------------------------------------------------------------------
   // Class: Port_9_VC8_VC4_BW_Allocation_Register_reg
   // 
   // BW Allocation Register
   //--------------------------------------------------------------------

   class Port_9_VC8_VC4_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_9_VC8_VC4_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 


      // Function: new
      // 
      function new(string name = "Port_9_VC8_VC4_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");

         Bandwidth_Allocation.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_12_Link_Timers_Control_2_CSR_reg
   // 
   // Link_Timers_Control_2_Register
   //--------------------------------------------------------------------

   class Port_12_Link_Timers_Control_2_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_12_Link_Timers_Control_2_CSR_reg)

      uvm_reg_field Reserved; 
      rand uvm_reg_field Recovery_Timer; 
      rand uvm_reg_field Discovery_Completion_Timer; 
      rand uvm_reg_field Retraining_Completion_Timer; 


      // Function: new
      // 
      function new(string name = "Port_12_Link_Timers_Control_2_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Recovery_Timer = uvm_reg_field::type_id::create("Recovery_Timer");
         Discovery_Completion_Timer = uvm_reg_field::type_id::create("Discovery_Completion_Timer");
         Retraining_Completion_Timer = uvm_reg_field::type_id::create("Retraining_Completion_Timer");

         Reserved.configure(this, 8, 24, "RO", 0, 8'h00, 1, 0, 1);
         Recovery_Timer.configure(this, 8, 16, "RW", 0, 8'hff, 1, 1, 1);
         Discovery_Completion_Timer.configure(this, 8, 8, "RW", 0, 8'h00, 1, 1, 1);
         Retraining_Completion_Timer.configure(this, 8, 0, "RW", 0, 8'hfe, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Packet_Time_to_live_CSR_reg
   // 
   // Time to Live Register
   //--------------------------------------------------------------------

   class Packet_Time_to_live_CSR_reg extends uvm_reg;
      `uvm_object_utils(Packet_Time_to_live_CSR_reg)

      uvm_reg_field Reserved; 
      rand uvm_reg_field Time_to_live_value; 


      // Function: new
      // 
      function new(string name = "Packet_Time_to_live_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Time_to_live_value = uvm_reg_field::type_id::create("Time_to_live_value");

         Reserved.configure(this, 16, 16, "RO", 0, 16'h0000, 1, 0, 1);
         Time_to_live_value.configure(this, 16, 0, "RW", 0, 16'h0000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Lane_6_Status_3_CSR_reg
   // 
   // Status 3 Register
   //--------------------------------------------------------------------

   class Lane_6_Status_3_CSR_reg extends uvm_reg;
      `uvm_object_utils(Lane_6_Status_3_CSR_reg)

      uvm_reg_field Reserved; 
      uvm_reg_field LP_State_Control_Reserved; 
      uvm_reg_field LP_Lane_Entering_Silence; 
      uvm_reg_field LP_Port_Entering_Silence; 
      uvm_reg_field LP_Retraining; 
      uvm_reg_field LP_Retrain_Ready; 
      uvm_reg_field LP_Retrain_Grant; 
      uvm_reg_field LP_Transmit_Equalizer_Status; 
      uvm_reg_field LP_Transmit_Equalizer_Command; 
      uvm_reg_field LP_Transmit_Equalizer_Tap; 
      uvm_reg_field LP_Transmit_SC_Sequences; 
      uvm_reg_field LP_Transmit_Width_Request_Pending; 
      uvm_reg_field LP_Transmit_Width_Request; 


      // Function: new
      // 
      function new(string name = "Lane_6_Status_3_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         LP_State_Control_Reserved = uvm_reg_field::type_id::create("LP_State_Control_Reserved");
         LP_Lane_Entering_Silence = uvm_reg_field::type_id::create("LP_Lane_Entering_Silence");
         LP_Port_Entering_Silence = uvm_reg_field::type_id::create("LP_Port_Entering_Silence");
         LP_Retraining = uvm_reg_field::type_id::create("LP_Retraining");
         LP_Retrain_Ready = uvm_reg_field::type_id::create("LP_Retrain_Ready");
         LP_Retrain_Grant = uvm_reg_field::type_id::create("LP_Retrain_Grant");
         LP_Transmit_Equalizer_Status = uvm_reg_field::type_id::create("LP_Transmit_Equalizer_Status");
         LP_Transmit_Equalizer_Command = uvm_reg_field::type_id::create("LP_Transmit_Equalizer_Command");
         LP_Transmit_Equalizer_Tap = uvm_reg_field::type_id::create("LP_Transmit_Equalizer_Tap");
         LP_Transmit_SC_Sequences = uvm_reg_field::type_id::create("LP_Transmit_SC_Sequences");
         LP_Transmit_Width_Request_Pending = uvm_reg_field::type_id::create("LP_Transmit_Width_Request_Pending");
         LP_Transmit_Width_Request = uvm_reg_field::type_id::create("LP_Transmit_Width_Request");

         Reserved.configure(this, 4, 28, "RO", 0, 4'h0, 1, 0, 0);
         LP_State_Control_Reserved.configure(this, 8, 20, "RO", 0, 8'h00, 1, 0, 0);
         LP_Lane_Entering_Silence.configure(this, 1, 19, "RO", 0, 1'b0, 1, 0, 0);
         LP_Port_Entering_Silence.configure(this, 1, 18, "RO", 0, 1'b0, 1, 0, 0);
         LP_Retraining.configure(this, 1, 17, "RO", 0, 1'b0, 1, 0, 0);
         LP_Retrain_Ready.configure(this, 1, 16, "RO", 0, 1'b0, 1, 0, 0);
         LP_Retrain_Grant.configure(this, 1, 15, "RO", 0, 1'b0, 1, 0, 0);
         LP_Transmit_Equalizer_Status.configure(this, 3, 12, "RO", 0, 3'b000, 1, 0, 0);
         LP_Transmit_Equalizer_Command.configure(this, 3, 9, "RO", 0, 3'b000, 1, 0, 0);
         LP_Transmit_Equalizer_Tap.configure(this, 4, 5, "RO", 0, 4'h0, 1, 0, 0);
         LP_Transmit_SC_Sequences.configure(this, 1, 4, "RO", 0, 1'b0, 1, 0, 0);
         LP_Transmit_Width_Request_Pending.configure(this, 1, 3, "RO", 0, 1'b0, 1, 0, 0);
         LP_Transmit_Width_Request.configure(this, 3, 0, "RO", 0, 3'b000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_3_VC8_VC4_BW_Allocation_Register_reg
   // 
   // BW Allocation Register
   //--------------------------------------------------------------------

   class Port_3_VC8_VC4_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_3_VC8_VC4_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 


      // Function: new
      // 
      function new(string name = "Port_3_VC8_VC4_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");

         Bandwidth_Allocation.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_7_VC0_BW_Allocation_Register_reg
   // 
   // BW Register
   //--------------------------------------------------------------------

   class Port_7_VC0_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_7_VC0_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 
      rand uvm_reg_field Bandwidth_Reservation_Precision; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field VC0_BW_Res_Enable; 
      uvm_reg_field VC0_Bandwidth_Reservation_Capable; 


      // Function: new
      // 
      function new(string name = "Port_7_VC0_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");
         Bandwidth_Reservation_Precision = uvm_reg_field::type_id::create("Bandwidth_Reservation_Precision");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         VC0_BW_Res_Enable = uvm_reg_field::type_id::create("VC0_BW_Res_Enable");
         VC0_Bandwidth_Reservation_Capable = uvm_reg_field::type_id::create("VC0_Bandwidth_Reservation_Capable");

         Bandwidth_Allocation.configure(this, 16, 16, "RW", 0, 16'h0000, 1, 1, 1);
         Bandwidth_Reservation_Precision.configure(this, 8, 8, "RW", 0, 8'h00, 1, 1, 1);
         Reserved.configure(this, 6, 2, "RO", 0, 6'b000000, 1, 0, 0);
         VC0_BW_Res_Enable.configure(this, 1, 1, "RW", 0, 1'b0, 1, 1, 0);
         VC0_Bandwidth_Reservation_Capable.configure(this, 1, 0, "RO", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_15_Error_Rate_Threshold_CSR_reg
   // 
   // Error Threshold Register
   //--------------------------------------------------------------------

   class Port_15_Error_Rate_Threshold_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_15_Error_Rate_Threshold_CSR_reg)

      uvm_reg_field Reserved; 
      rand uvm_reg_field Error_Rate_Degraded_Threshold_Trigger; 
      rand uvm_reg_field Error_Rate_Failed_Threshold_Trigger; 


      // Function: new
      // 
      function new(string name = "Port_15_Error_Rate_Threshold_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Error_Rate_Degraded_Threshold_Trigger = uvm_reg_field::type_id::create("Error_Rate_Degraded_Threshold_Trigger");
         Error_Rate_Failed_Threshold_Trigger = uvm_reg_field::type_id::create("Error_Rate_Failed_Threshold_Trigger");

         Reserved.configure(this, 16, 16, "RO", 0, 16'h0000, 1, 0, 1);
         Error_Rate_Degraded_Threshold_Trigger.configure(this, 8, 8, "RW", 0, 8'hff, 1, 1, 1);
         Error_Rate_Failed_Threshold_Trigger.configure(this, 8, 0, "RW", 0, 8'hff, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_10_Timestamp_Generator_Synchronization_CSR_reg
   // 
   // Timestamp_Generator_Synchronization_Register
   //--------------------------------------------------------------------

   class Port_10_Timestamp_Generator_Synchronization_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_10_Timestamp_Generator_Synchronization_CSR_reg)

      rand uvm_reg_field Asymmetry; 
      rand uvm_reg_field TX_Has_Lowwer_Latency; 
      uvm_reg_field Reserved_1; 
      rand uvm_reg_field Port_Opening_Mode; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Auto_Update_Link_Partner_Timestamp_Generators; 
      rand uvm_reg_field Disable_Clock_Compensation_Sequence; 
      rand uvm_reg_field Accept_Timestamps; 


      // Function: new
      // 
      function new(string name = "Port_10_Timestamp_Generator_Synchronization_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Asymmetry = uvm_reg_field::type_id::create("Asymmetry");
         TX_Has_Lowwer_Latency = uvm_reg_field::type_id::create("TX_Has_Lowwer_Latency");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         Port_Opening_Mode = uvm_reg_field::type_id::create("Port_Opening_Mode");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Auto_Update_Link_Partner_Timestamp_Generators = uvm_reg_field::type_id::create("Auto_Update_Link_Partner_Timestamp_Generators");
         Disable_Clock_Compensation_Sequence = uvm_reg_field::type_id::create("Disable_Clock_Compensation_Sequence");
         Accept_Timestamps = uvm_reg_field::type_id::create("Accept_Timestamps");

         Asymmetry.configure(this, 12, 20, "RW", 0, 12'h000, 1, 1, 0);
         TX_Has_Lowwer_Latency.configure(this, 1, 19, "RW", 0, 1'b0, 1, 1, 0);
         Reserved_1.configure(this, 11, 8, "RO", 0, 11'b00000000000, 1, 0, 0);
         Port_Opening_Mode.configure(this, 2, 6, "RW", 0, 2'b00, 1, 1, 0);
         Reserved.configure(this, 3, 3, "RO", 0, 3'b000, 1, 0, 0);
         Auto_Update_Link_Partner_Timestamp_Generators.configure(this, 1, 2, "RW", 0, 1'b0, 1, 1, 0);
         Disable_Clock_Compensation_Sequence.configure(this, 1, 1, "RW", 0, 1'b0, 1, 1, 0);
         Accept_Timestamps.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Switch_Port_Information_CAR_reg
   // 
   // Switch Port Register
   //--------------------------------------------------------------------

   class Switch_Port_Information_CAR_reg extends uvm_reg;
      `uvm_object_utils(Switch_Port_Information_CAR_reg)

      uvm_reg_field PortNumber; 
      uvm_reg_field PortTotal; 
      uvm_reg_field Reserved; 


      // Function: new
      // 
      function new(string name = "Switch_Port_Information_CAR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         PortNumber = uvm_reg_field::type_id::create("PortNumber");
         PortTotal = uvm_reg_field::type_id::create("PortTotal");
         Reserved = uvm_reg_field::type_id::create("Reserved");

         PortNumber.configure(this, 8, 24, "RO", 0, 8'h00, 1, 0, 1);
         PortTotal.configure(this, 8, 16, "RO", 0, 8'h00, 1, 0, 1);
         Reserved.configure(this, 16, 0, "RO", 0, 16'h0000, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_10_Link_Maintenance_Response_CSR_reg
   // 
   // Link Maintenance Response Register
   //--------------------------------------------------------------------

   class Port_10_Link_Maintenance_Response_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_10_Link_Maintenance_Response_CSR_reg)

      uvm_reg_field port_status; 
      uvm_reg_field ackID_status; 
      uvm_reg_field Port_status_cs64; 
      uvm_reg_field Reserved; 
      uvm_reg_field response_valid; 


      // Function: new
      // 
      function new(string name = "Port_10_Link_Maintenance_Response_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         port_status = uvm_reg_field::type_id::create("port_status");
         ackID_status = uvm_reg_field::type_id::create("ackID_status");
         Port_status_cs64 = uvm_reg_field::type_id::create("Port_status_cs64");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         response_valid = uvm_reg_field::type_id::create("response_valid");

         port_status.configure(this, 5, 27, "RO", 0, 5'b00000, 1, 0, 0);
         ackID_status.configure(this, 12, 15, "RO", 0, 12'h000, 1, 0, 0);
         Port_status_cs64.configure(this, 12, 3, "RO", 0, 12'h000, 1, 0, 0);
         Reserved.configure(this, 2, 1, "RO", 0, 2'b00, 1, 0, 0);
         response_valid.configure(this, 1, 0, "RO", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_8_Timestamp_Synchronization_Command_CSR_reg
   // 
   // Timestamp_Synchronization_Command_CSR_Register
   //--------------------------------------------------------------------

   class Port_8_Timestamp_Synchronization_Command_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_8_Timestamp_Synchronization_Command_CSR_reg)

      rand uvm_reg_field Command; 
      uvm_reg_field Reserved_2; 
      rand uvm_reg_field Send_Timestamp; 
      uvm_reg_field Reserved_1; 
      rand uvm_reg_field Send_Zero_Timestamp; 
      uvm_reg_field Reserved; 


      // Function: new
      // 
      function new(string name = "Port_8_Timestamp_Synchronization_Command_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Command = uvm_reg_field::type_id::create("Command");
         Reserved_2 = uvm_reg_field::type_id::create("Reserved_2");
         Send_Timestamp = uvm_reg_field::type_id::create("Send_Timestamp");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         Send_Zero_Timestamp = uvm_reg_field::type_id::create("Send_Zero_Timestamp");
         Reserved = uvm_reg_field::type_id::create("Reserved");

         Command.configure(this, 3, 29, "RW", 0, 3'b000, 1, 1, 0);
         Reserved_2.configure(this, 1, 28, "RO", 0, 1'b0, 1, 0, 0);
         Send_Timestamp.configure(this, 1, 27, "RW", 0, 1'b0, 1, 1, 0);
         Reserved_1.configure(this, 3, 24, "RO", 0, 3'b000, 1, 0, 0);
         Send_Zero_Timestamp.configure(this, 1, 23, "RW", 0, 1'b0, 1, 1, 0);
         Reserved.configure(this, 23, 0, "RO", 0, 23'b00000000000000000000000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_12_Timestamp_1_MSW_CSR_reg
   // 
   // Timestamp_1_MSW_Register
   //--------------------------------------------------------------------

   class Port_12_Timestamp_1_MSW_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_12_Timestamp_1_MSW_CSR_reg)

      uvm_reg_field MSW_Bits; 


      // Function: new
      // 
      function new(string name = "Port_12_Timestamp_1_MSW_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         MSW_Bits = uvm_reg_field::type_id::create("MSW_Bits");

         MSW_Bits.configure(this, 32, 0, "RO", 0, 32'h00000000, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_14_Timestamp_0_MSW_CSR_reg
   // 
   // Timestamp_0_MSW_Register
   //--------------------------------------------------------------------

   class Port_14_Timestamp_0_MSW_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_14_Timestamp_0_MSW_CSR_reg)

      uvm_reg_field MSW_Bits; 


      // Function: new
      // 
      function new(string name = "Port_14_Timestamp_0_MSW_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         MSW_Bits = uvm_reg_field::type_id::create("MSW_Bits");

         MSW_Bits.configure(this, 32, 0, "RO", 0, 32'h00000000, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_8_Link_Maintenance_Request_CSR_reg
   // 
   // Link  Maintenance Request Register
   //--------------------------------------------------------------------

   class Port_8_Link_Maintenance_Request_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_8_Link_Maintenance_Request_CSR_reg)

      uvm_reg_field Command; 
      uvm_reg_field Reserved; 


      // Function: new
      // 
      function new(string name = "Port_8_Link_Maintenance_Request_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Command = uvm_reg_field::type_id::create("Command");
         Reserved = uvm_reg_field::type_id::create("Reserved");

         Command.configure(this, 3, 29, "RW", 0, 3'b000, 1, 1, 1);
         Reserved.configure(this, 29, 0, "RO", 0, 29'b00000000000000000000000000000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_12_VC0_BW_Allocation_Register_reg
   // 
   // BW Register
   //--------------------------------------------------------------------

   class Port_12_VC0_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_12_VC0_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 
      rand uvm_reg_field Bandwidth_Reservation_Precision; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field VC0_BW_Res_Enable; 
      uvm_reg_field VC0_Bandwidth_Reservation_Capable; 


      // Function: new
      // 
      function new(string name = "Port_12_VC0_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");
         Bandwidth_Reservation_Precision = uvm_reg_field::type_id::create("Bandwidth_Reservation_Precision");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         VC0_BW_Res_Enable = uvm_reg_field::type_id::create("VC0_BW_Res_Enable");
         VC0_Bandwidth_Reservation_Capable = uvm_reg_field::type_id::create("VC0_Bandwidth_Reservation_Capable");

         Bandwidth_Allocation.configure(this, 16, 16, "RW", 0, 16'h0000, 1, 1, 1);
         Bandwidth_Reservation_Precision.configure(this, 8, 8, "RW", 0, 8'h00, 1, 1, 1);
         Reserved.configure(this, 6, 2, "RO", 0, 6'b000000, 1, 0, 0);
         VC0_BW_Res_Enable.configure(this, 1, 1, "RW", 0, 1'b0, 1, 1, 0);
         VC0_Bandwidth_Reservation_Capable.configure(this, 1, 0, "RO", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_3_Timestamp_Synchronization_Status_CSR_reg
   // 
   // Timestamp_Synchronization_Status_CSR_Register
   //--------------------------------------------------------------------

   class Port_3_Timestamp_Synchronization_Status_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_3_Timestamp_Synchronization_Status_CSR_reg)

      uvm_reg_field Delay; 
      uvm_reg_field Reserved; 
      uvm_reg_field Response_Valid; 


      // Function: new
      // 
      function new(string name = "Port_3_Timestamp_Synchronization_Status_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Delay = uvm_reg_field::type_id::create("Delay");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Response_Valid = uvm_reg_field::type_id::create("Response_Valid");

         Delay.configure(this, 10, 22, "RO", 0, 10'b0000000000, 1, 0, 0);
         Reserved.configure(this, 21, 1, "RO", 0, 21'b000000000000000000000, 1, 0, 0);
         Response_Valid.configure(this, 1, 0, "RO", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_9_Auto_Update_Counter_CSR_reg
   // 
   // Auto_Update_Counter_CSR_Register
   //--------------------------------------------------------------------

   class Port_9_Auto_Update_Counter_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_9_Auto_Update_Counter_CSR_reg)

      rand uvm_reg_field Update_Period; 


      // Function: new
      // 
      function new(string name = "Port_9_Auto_Update_Counter_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Update_Period = uvm_reg_field::type_id::create("Update_Period");

         Update_Period.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_0_Timestamp_0_LSW_CSR_reg
   // 
   // Timestamp_0_LSW_Register
   //--------------------------------------------------------------------

   class Port_0_Timestamp_0_LSW_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_0_Timestamp_0_LSW_CSR_reg)

      uvm_reg_field LSW_Bits; 


      // Function: new
      // 
      function new(string name = "Port_0_Timestamp_0_LSW_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         LSW_Bits = uvm_reg_field::type_id::create("LSW_Bits");

         LSW_Bits.configure(this, 32, 0, "RO", 0, 32'h00000000, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_5_Link_Uninit_Discard_Timer_CSR_reg
   // 
   // Link_Uninit_Discard_Timer_CSR_Register
   //--------------------------------------------------------------------

   class Port_5_Link_Uninit_Discard_Timer_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_5_Link_Uninit_Discard_Timer_CSR_reg)

      uvm_reg_field Reserved; 
      rand uvm_reg_field Link_Uninit_Timeout; 


      // Function: new
      // 
      function new(string name = "Port_5_Link_Uninit_Discard_Timer_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Link_Uninit_Timeout = uvm_reg_field::type_id::create("Link_Uninit_Timeout");

         Reserved.configure(this, 8, 24, "RO", 0, 8'h00, 1, 0, 1);
         Link_Uninit_Timeout.configure(this, 24, 0, "RW", 0, 24'h000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_7_Packet_Capture_2_CSR_reg
   // 
   // Packet Capture 2 Register
   //--------------------------------------------------------------------

   class Port_7_Packet_Capture_2_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_7_Packet_Capture_2_CSR_reg)

      rand uvm_reg_field Capture2; 


      // Function: new
      // 
      function new(string name = "Port_7_Packet_Capture_2_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture2 = uvm_reg_field::type_id::create("Capture2");

         Capture2.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_8_VC_Control_and_Status_Register_reg
   // 
   // CSR Register
   //--------------------------------------------------------------------

   class Port_8_VC_Control_and_Status_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_8_VC_Control_and_Status_Register_reg)

      rand uvm_reg_field VCs_Enable; 
      uvm_reg_field VCs_Support; 
      rand uvm_reg_field CT_Mode; 
      rand uvm_reg_field VC_Refresh_Interval; 


      // Function: new
      // 
      function new(string name = "Port_8_VC_Control_and_Status_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         VCs_Enable = uvm_reg_field::type_id::create("VCs_Enable");
         VCs_Support = uvm_reg_field::type_id::create("VCs_Support");
         CT_Mode = uvm_reg_field::type_id::create("CT_Mode");
         VC_Refresh_Interval = uvm_reg_field::type_id::create("VC_Refresh_Interval");

         VCs_Enable.configure(this, 8, 24, "RW", 0, 8'h00, 1, 1, 1);
         VCs_Support.configure(this, 8, 16, "RO", 0, 8'h00, 1, 0, 1);
         CT_Mode.configure(this, 8, 8, "RW", 0, 8'h00, 1, 1, 1);
         VC_Refresh_Interval.configure(this, 8, 0, "RW", 0, 8'h00, 1, 1, 1);
      endfunction
   endclass

   //--------------------------------------------------------------------
   // Class: Port_10_Link_Timers_Control_CSR_reg
   // 
   // Link_Timers_Control_Register
   //--------------------------------------------------------------------

   class Port_10_Link_Timers_Control_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_10_Link_Timers_Control_CSR_reg)

      rand uvm_reg_field Emphasis_Command_Timeout; 
      rand uvm_reg_field CW_Training_Completion_Timer; 
      rand uvm_reg_field DME_Wait_Timer; 
      rand uvm_reg_field DME_Training_Completion_Timer; 


      // Function: new
      // 
      function new(string name = "Port_10_Link_Timers_Control_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Emphasis_Command_Timeout = uvm_reg_field::type_id::create("Emphasis_Command_Timeout");
         CW_Training_Completion_Timer = uvm_reg_field::type_id::create("CW_Training_Completion_Timer");
         DME_Wait_Timer = uvm_reg_field::type_id::create("DME_Wait_Timer");
         DME_Training_Completion_Timer = uvm_reg_field::type_id::create("DME_Training_Completion_Timer");

         Emphasis_Command_Timeout.configure(this, 8, 24, "RW", 0, 8'hff, 1, 1, 1);
         CW_Training_Completion_Timer.configure(this, 8, 16, "RW", 0, 8'h00, 1, 1, 1);
         DME_Wait_Timer.configure(this, 8, 8, "RW", 0, 8'h3f, 1, 1, 1);
         DME_Training_Completion_Timer.configure(this, 8, 0, "RW", 0, 8'h00, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Lane_5_Status_3_CSR_reg
   // 
   // Status 3 Register
   //--------------------------------------------------------------------

   class Lane_5_Status_3_CSR_reg extends uvm_reg;
      `uvm_object_utils(Lane_5_Status_3_CSR_reg)

      uvm_reg_field Reserved; 
      uvm_reg_field LP_State_Control_Reserved; 
      uvm_reg_field LP_Lane_Entering_Silence; 
      uvm_reg_field LP_Port_Entering_Silence; 
      uvm_reg_field LP_Retraining; 
      uvm_reg_field LP_Retrain_Ready; 
      uvm_reg_field LP_Retrain_Grant; 
      uvm_reg_field LP_Transmit_Equalizer_Status; 
      uvm_reg_field LP_Transmit_Equalizer_Command; 
      uvm_reg_field LP_Transmit_Equalizer_Tap; 
      uvm_reg_field LP_Transmit_SC_Sequences; 
      uvm_reg_field LP_Transmit_Width_Request_Pending; 
      uvm_reg_field LP_Transmit_Width_Request; 


      // Function: new
      // 
      function new(string name = "Lane_5_Status_3_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         LP_State_Control_Reserved = uvm_reg_field::type_id::create("LP_State_Control_Reserved");
         LP_Lane_Entering_Silence = uvm_reg_field::type_id::create("LP_Lane_Entering_Silence");
         LP_Port_Entering_Silence = uvm_reg_field::type_id::create("LP_Port_Entering_Silence");
         LP_Retraining = uvm_reg_field::type_id::create("LP_Retraining");
         LP_Retrain_Ready = uvm_reg_field::type_id::create("LP_Retrain_Ready");
         LP_Retrain_Grant = uvm_reg_field::type_id::create("LP_Retrain_Grant");
         LP_Transmit_Equalizer_Status = uvm_reg_field::type_id::create("LP_Transmit_Equalizer_Status");
         LP_Transmit_Equalizer_Command = uvm_reg_field::type_id::create("LP_Transmit_Equalizer_Command");
         LP_Transmit_Equalizer_Tap = uvm_reg_field::type_id::create("LP_Transmit_Equalizer_Tap");
         LP_Transmit_SC_Sequences = uvm_reg_field::type_id::create("LP_Transmit_SC_Sequences");
         LP_Transmit_Width_Request_Pending = uvm_reg_field::type_id::create("LP_Transmit_Width_Request_Pending");
         LP_Transmit_Width_Request = uvm_reg_field::type_id::create("LP_Transmit_Width_Request");

         Reserved.configure(this, 4, 28, "RO", 0, 4'h0, 1, 0, 0);
         LP_State_Control_Reserved.configure(this, 8, 20, "RO", 0, 8'h00, 1, 0, 0);
         LP_Lane_Entering_Silence.configure(this, 1, 19, "RO", 0, 1'b0, 1, 0, 0);
         LP_Port_Entering_Silence.configure(this, 1, 18, "RO", 0, 1'b0, 1, 0, 0);
         LP_Retraining.configure(this, 1, 17, "RO", 0, 1'b0, 1, 0, 0);
         LP_Retrain_Ready.configure(this, 1, 16, "RO", 0, 1'b0, 1, 0, 0);
         LP_Retrain_Grant.configure(this, 1, 15, "RO", 0, 1'b0, 1, 0, 0);
         LP_Transmit_Equalizer_Status.configure(this, 3, 12, "RO", 0, 3'b000, 1, 0, 0);
         LP_Transmit_Equalizer_Command.configure(this, 3, 9, "RO", 0, 3'b000, 1, 0, 0);
         LP_Transmit_Equalizer_Tap.configure(this, 4, 5, "RO", 0, 4'h0, 1, 0, 0);
         LP_Transmit_SC_Sequences.configure(this, 1, 4, "RO", 0, 1'b0, 1, 0, 0);
         LP_Transmit_Width_Request_Pending.configure(this, 1, 3, "RO", 0, 1'b0, 1, 0, 0);
         LP_Transmit_Width_Request.configure(this, 3, 0, "RO", 0, 3'b000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_0_Initialization_Status_CSR_reg
   // 
   // Initialization_Status_Register
   //--------------------------------------------------------------------

   class Port_0_Initialization_Status_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_0_Initialization_Status_CSR_reg)

      uvm_reg_field Reserved_3; 
      uvm_reg_field Transmitted_Status_Control_Symbols; 
      uvm_reg_field Reserved_2; 
      uvm_reg_field Received_Status_Control_Symbols; 
      uvm_reg_field Port_Initialization_State_Machine; 
      uvm_reg_field Reserved_1; 
      uvm_reg_field x1_x2_Mode_Detection; 
      uvm_reg_field Reserved; 
      uvm_reg_field Lane_Alignment; 


      // Function: new
      // 
      function new(string name = "Port_0_Initialization_Status_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved_3 = uvm_reg_field::type_id::create("Reserved_3");
         Transmitted_Status_Control_Symbols = uvm_reg_field::type_id::create("Transmitted_Status_Control_Symbols");
         Reserved_2 = uvm_reg_field::type_id::create("Reserved_2");
         Received_Status_Control_Symbols = uvm_reg_field::type_id::create("Received_Status_Control_Symbols");
         Port_Initialization_State_Machine = uvm_reg_field::type_id::create("Port_Initialization_State_Machine");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         x1_x2_Mode_Detection = uvm_reg_field::type_id::create("x1_x2_Mode_Detection");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Lane_Alignment = uvm_reg_field::type_id::create("Lane_Alignment");

         Reserved_3.configure(this, 4, 28, "RO", 0, 4'h0, 1, 0, 0);
         Transmitted_Status_Control_Symbols.configure(this, 7, 21, "RO", 0, 7'b0000000, 1, 0, 0);
         Reserved_2.configure(this, 1, 20, "RO", 0, 1'b0, 1, 0, 0);
         Received_Status_Control_Symbols.configure(this, 4, 16, "RO", 0, 4'h0, 1, 0, 0);
         Port_Initialization_State_Machine.configure(this, 5, 11, "RO", 0, 5'b00000, 1, 0, 0);
         Reserved_1.configure(this, 1, 10, "RO", 0, 1'b0, 1, 0, 0);
         x1_x2_Mode_Detection.configure(this, 4, 6, "RO", 0, 4'h0, 1, 0, 0);
         Reserved.configure(this, 1, 5, "RO", 0, 1'b0, 1, 0, 0);
         Lane_Alignment.configure(this, 5, 0, "RO", 0, 5'b00000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_6_Error_Rate_CSR_reg
   // 
   // Error Rate Register
   //--------------------------------------------------------------------

   class Port_6_Error_Rate_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_6_Error_Rate_CSR_reg)

      rand uvm_reg_field Error_Rate_Counter; 
      rand uvm_reg_field Peak_Error_Rate; 
      rand uvm_reg_field Error_Rate_Recovery; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Error_Rate_Bias; 


      // Function: new
      // 
      function new(string name = "Port_6_Error_Rate_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Error_Rate_Counter = uvm_reg_field::type_id::create("Error_Rate_Counter");
         Peak_Error_Rate = uvm_reg_field::type_id::create("Peak_Error_Rate");
         Error_Rate_Recovery = uvm_reg_field::type_id::create("Error_Rate_Recovery");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Error_Rate_Bias = uvm_reg_field::type_id::create("Error_Rate_Bias");

         Error_Rate_Counter.configure(this, 8, 24, "RW", 0, 8'h00, 1, 1, 1);
         Peak_Error_Rate.configure(this, 8, 16, "RW", 0, 8'h00, 1, 1, 1);
         Error_Rate_Recovery.configure(this, 2, 14, "RW", 0, 2'b00, 1, 1, 0);
         Reserved.configure(this, 6, 8, "RO", 0, 6'b000000, 1, 0, 0);
         Error_Rate_Bias.configure(this, 8, 0, "RW", 0, 8'h80, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_2_Control_CSR_reg
   // 
   // Control Register
   //--------------------------------------------------------------------

   class Port_2_Control_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_2_Control_CSR_reg)

      uvm_reg_field Port_Type; 
      rand uvm_reg_field Port_Lockout; 
      rand uvm_reg_field Drop_Packet_Enable; 
      rand uvm_reg_field Stop_on_Port_Failed_encountered_Enable; 
      rand uvm_reg_field Implementation_defined; 
      uvm_reg_field Extended_Port_Width_Support; 
      rand uvm_reg_field Extended_Port_Width_Override; 
      rand uvm_reg_field Flow_Arbitration_Participant; 
      rand uvm_reg_field Enumeration_Boundary; 
      rand uvm_reg_field Flow_Control_Participant; 
      rand uvm_reg_field Multicast_event_Participant; 
      rand uvm_reg_field Error_Checking_Disable; 
      rand uvm_reg_field Input_Port_Enable; 
      rand uvm_reg_field Output_Port_Enable; 
      rand uvm_reg_field Port_Disable; 
      uvm_reg_field Port_Width_Override; 
      rand uvm_reg_field Initialized_Port_Width; 
      uvm_reg_field Port_Width_Support; 


      // Function: new
      // 
      function new(string name = "Port_2_Control_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Port_Type = uvm_reg_field::type_id::create("Port_Type");
         Port_Lockout = uvm_reg_field::type_id::create("Port_Lockout");
         Drop_Packet_Enable = uvm_reg_field::type_id::create("Drop_Packet_Enable");
         Stop_on_Port_Failed_encountered_Enable = uvm_reg_field::type_id::create("Stop_on_Port_Failed_encountered_Enable");
         Implementation_defined = uvm_reg_field::type_id::create("Implementation_defined");
         Extended_Port_Width_Support = uvm_reg_field::type_id::create("Extended_Port_Width_Support");
         Extended_Port_Width_Override = uvm_reg_field::type_id::create("Extended_Port_Width_Override");
         Flow_Arbitration_Participant = uvm_reg_field::type_id::create("Flow_Arbitration_Participant");
         Enumeration_Boundary = uvm_reg_field::type_id::create("Enumeration_Boundary");
         Flow_Control_Participant = uvm_reg_field::type_id::create("Flow_Control_Participant");
         Multicast_event_Participant = uvm_reg_field::type_id::create("Multicast_event_Participant");
         Error_Checking_Disable = uvm_reg_field::type_id::create("Error_Checking_Disable");
         Input_Port_Enable = uvm_reg_field::type_id::create("Input_Port_Enable");
         Output_Port_Enable = uvm_reg_field::type_id::create("Output_Port_Enable");
         Port_Disable = uvm_reg_field::type_id::create("Port_Disable");
         Port_Width_Override = uvm_reg_field::type_id::create("Port_Width_Override");
         Initialized_Port_Width = uvm_reg_field::type_id::create("Initialized_Port_Width");
         Port_Width_Support = uvm_reg_field::type_id::create("Port_Width_Support");

         Port_Type.configure(this, 1, 31, "RO", 0, 1'b0, 1, 0, 0);
         Port_Lockout.configure(this, 1, 30, "RW", 0, 1'b0, 1, 1, 0);
         Drop_Packet_Enable.configure(this, 1, 29, "RW", 0, 1'b0, 1, 1, 0);
         Stop_on_Port_Failed_encountered_Enable.configure(this, 1, 28, "RW", 0, 1'b0, 1, 1, 0);
         Implementation_defined.configure(this, 8, 20, "RW", 0, 8'h00, 1, 1, 0);
         Extended_Port_Width_Support.configure(this, 2, 18, "RO", 0, 2'b00, 1, 0, 0);
         Extended_Port_Width_Override.configure(this, 2, 16, "RW", 0, 2'b00, 1, 1, 0);
         Flow_Arbitration_Participant.configure(this, 1, 15, "RW", 0, 1'b0, 1, 1, 0);
         Enumeration_Boundary.configure(this, 1, 14, "RW", 0, 1'b0, 1, 1, 0);
         Flow_Control_Participant.configure(this, 1, 13, "RW", 0, 1'b0, 1, 1, 0);
         Multicast_event_Participant.configure(this, 1, 12, "RW", 0, 1'b0, 1, 1, 0);
         Error_Checking_Disable.configure(this, 1, 11, "RW", 0, 1'b0, 1, 1, 0);
         Input_Port_Enable.configure(this, 1, 10, "RW", 0, 1'b0, 1, 1, 0);
         Output_Port_Enable.configure(this, 1, 9, "RW", 0, 1'b0, 1, 1, 0);
         Port_Disable.configure(this, 1, 8, "RW", 0, 1'b0, 1, 1, 0);
         Port_Width_Override.configure(this, 3, 5, "RO", 0, 3'b000, 1, 0, 0);
         Initialized_Port_Width.configure(this, 3, 2, "RW", 0, 3'b000, 1, 1, 0);
         Port_Width_Support.configure(this, 2, 0, "RO", 0, 2'b00, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Lane_8_Status_3_CSR_reg
   // 
   // Status 3 Register
   //--------------------------------------------------------------------

   class Lane_8_Status_3_CSR_reg extends uvm_reg;
      `uvm_object_utils(Lane_8_Status_3_CSR_reg)

      uvm_reg_field Reserved; 
      uvm_reg_field LP_State_Control_Reserved; 
      uvm_reg_field LP_Lane_Entering_Silence; 
      uvm_reg_field LP_Port_Entering_Silence; 
      uvm_reg_field LP_Retraining; 
      uvm_reg_field LP_Retrain_Ready; 
      uvm_reg_field LP_Retrain_Grant; 
      uvm_reg_field LP_Transmit_Equalizer_Status; 
      uvm_reg_field LP_Transmit_Equalizer_Command; 
      uvm_reg_field LP_Transmit_Equalizer_Tap; 
      uvm_reg_field LP_Transmit_SC_Sequences; 
      uvm_reg_field LP_Transmit_Width_Request_Pending; 
      uvm_reg_field LP_Transmit_Width_Request; 


      // Function: new
      // 
      function new(string name = "Lane_8_Status_3_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         LP_State_Control_Reserved = uvm_reg_field::type_id::create("LP_State_Control_Reserved");
         LP_Lane_Entering_Silence = uvm_reg_field::type_id::create("LP_Lane_Entering_Silence");
         LP_Port_Entering_Silence = uvm_reg_field::type_id::create("LP_Port_Entering_Silence");
         LP_Retraining = uvm_reg_field::type_id::create("LP_Retraining");
         LP_Retrain_Ready = uvm_reg_field::type_id::create("LP_Retrain_Ready");
         LP_Retrain_Grant = uvm_reg_field::type_id::create("LP_Retrain_Grant");
         LP_Transmit_Equalizer_Status = uvm_reg_field::type_id::create("LP_Transmit_Equalizer_Status");
         LP_Transmit_Equalizer_Command = uvm_reg_field::type_id::create("LP_Transmit_Equalizer_Command");
         LP_Transmit_Equalizer_Tap = uvm_reg_field::type_id::create("LP_Transmit_Equalizer_Tap");
         LP_Transmit_SC_Sequences = uvm_reg_field::type_id::create("LP_Transmit_SC_Sequences");
         LP_Transmit_Width_Request_Pending = uvm_reg_field::type_id::create("LP_Transmit_Width_Request_Pending");
         LP_Transmit_Width_Request = uvm_reg_field::type_id::create("LP_Transmit_Width_Request");

         Reserved.configure(this, 4, 28, "RO", 0, 4'h0, 1, 0, 0);
         LP_State_Control_Reserved.configure(this, 8, 20, "RO", 0, 8'h00, 1, 0, 0);
         LP_Lane_Entering_Silence.configure(this, 1, 19, "RO", 0, 1'b0, 1, 0, 0);
         LP_Port_Entering_Silence.configure(this, 1, 18, "RO", 0, 1'b0, 1, 0, 0);
         LP_Retraining.configure(this, 1, 17, "RO", 0, 1'b0, 1, 0, 0);
         LP_Retrain_Ready.configure(this, 1, 16, "RO", 0, 1'b0, 1, 0, 0);
         LP_Retrain_Grant.configure(this, 1, 15, "RO", 0, 1'b0, 1, 0, 0);
         LP_Transmit_Equalizer_Status.configure(this, 3, 12, "RO", 0, 3'b000, 1, 0, 0);
         LP_Transmit_Equalizer_Command.configure(this, 3, 9, "RO", 0, 3'b000, 1, 0, 0);
         LP_Transmit_Equalizer_Tap.configure(this, 4, 5, "RO", 0, 4'h0, 1, 0, 0);
         LP_Transmit_SC_Sequences.configure(this, 1, 4, "RO", 0, 1'b0, 1, 0, 0);
         LP_Transmit_Width_Request_Pending.configure(this, 1, 3, "RO", 0, 1'b0, 1, 0, 0);
         LP_Transmit_Width_Request.configure(this, 3, 0, "RO", 0, 3'b000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_11_Timestamp_0_MSW_CSR_reg
   // 
   // Timestamp_0_MSW_Register
   //--------------------------------------------------------------------

   class Port_11_Timestamp_0_MSW_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_11_Timestamp_0_MSW_CSR_reg)

      uvm_reg_field MSW_Bits; 


      // Function: new
      // 
      function new(string name = "Port_11_Timestamp_0_MSW_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         MSW_Bits = uvm_reg_field::type_id::create("MSW_Bits");

         MSW_Bits.configure(this, 32, 0, "RO", 0, 32'h00000000, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_10_Timestamp_Synchronization_Command_CSR_reg
   // 
   // Timestamp_Synchronization_Command_CSR_Register
   //--------------------------------------------------------------------

   class Port_10_Timestamp_Synchronization_Command_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_10_Timestamp_Synchronization_Command_CSR_reg)

      rand uvm_reg_field Command; 
      uvm_reg_field Reserved_2; 
      rand uvm_reg_field Send_Timestamp; 
      uvm_reg_field Reserved_1; 
      rand uvm_reg_field Send_Zero_Timestamp; 
      uvm_reg_field Reserved; 


      // Function: new
      // 
      function new(string name = "Port_10_Timestamp_Synchronization_Command_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Command = uvm_reg_field::type_id::create("Command");
         Reserved_2 = uvm_reg_field::type_id::create("Reserved_2");
         Send_Timestamp = uvm_reg_field::type_id::create("Send_Timestamp");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         Send_Zero_Timestamp = uvm_reg_field::type_id::create("Send_Zero_Timestamp");
         Reserved = uvm_reg_field::type_id::create("Reserved");

         Command.configure(this, 3, 29, "RW", 0, 3'b000, 1, 1, 0);
         Reserved_2.configure(this, 1, 28, "RO", 0, 1'b0, 1, 0, 0);
         Send_Timestamp.configure(this, 1, 27, "RW", 0, 1'b0, 1, 1, 0);
         Reserved_1.configure(this, 3, 24, "RO", 0, 3'b000, 1, 0, 0);
         Send_Zero_Timestamp.configure(this, 1, 23, "RW", 0, 1'b0, 1, 1, 0);
         Reserved.configure(this, 23, 0, "RO", 0, 23'b00000000000000000000000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Data_Streaming_Information_CAR_reg
   // 
   // Data Stream Register
   //--------------------------------------------------------------------

   class Data_Streaming_Information_CAR_reg extends uvm_reg;
      `uvm_object_utils(Data_Streaming_Information_CAR_reg)

      uvm_reg_field SegSupport; 
      uvm_reg_field MaxPDU; 


      // Function: new
      // 
      function new(string name = "Data_Streaming_Information_CAR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         SegSupport = uvm_reg_field::type_id::create("SegSupport");
         MaxPDU = uvm_reg_field::type_id::create("MaxPDU");

         SegSupport.configure(this, 16, 16, "RO", 0, 16'h0000, 1, 0, 1);
         MaxPDU.configure(this, 16, 0, "RO", 0, 16'h0000, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_3_Timestamp_0_MSW_CSR_reg
   // 
   // Timestamp_0_MSW_Register
   //--------------------------------------------------------------------

   class Port_3_Timestamp_0_MSW_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_3_Timestamp_0_MSW_CSR_reg)

      uvm_reg_field MSW_Bits; 


      // Function: new
      // 
      function new(string name = "Port_3_Timestamp_0_MSW_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         MSW_Bits = uvm_reg_field::type_id::create("MSW_Bits");

         MSW_Bits.configure(this, 32, 0, "RO", 0, 32'h00000000, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Lane_10_Status_3_CSR_reg
   // 
   // Status 3 Register
   //--------------------------------------------------------------------

   class Lane_10_Status_3_CSR_reg extends uvm_reg;
      `uvm_object_utils(Lane_10_Status_3_CSR_reg)

      uvm_reg_field Reserved; 
      uvm_reg_field LP_State_Control_Reserved; 
      uvm_reg_field LP_Lane_Entering_Silence; 
      uvm_reg_field LP_Port_Entering_Silence; 
      uvm_reg_field LP_Retraining; 
      uvm_reg_field LP_Retrain_Ready; 
      uvm_reg_field LP_Retrain_Grant; 
      uvm_reg_field LP_Transmit_Equalizer_Status; 
      uvm_reg_field LP_Transmit_Equalizer_Command; 
      uvm_reg_field LP_Transmit_Equalizer_Tap; 
      uvm_reg_field LP_Transmit_SC_Sequences; 
      uvm_reg_field LP_Transmit_Width_Request_Pending; 
      uvm_reg_field LP_Transmit_Width_Request; 


      // Function: new
      // 
      function new(string name = "Lane_10_Status_3_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         LP_State_Control_Reserved = uvm_reg_field::type_id::create("LP_State_Control_Reserved");
         LP_Lane_Entering_Silence = uvm_reg_field::type_id::create("LP_Lane_Entering_Silence");
         LP_Port_Entering_Silence = uvm_reg_field::type_id::create("LP_Port_Entering_Silence");
         LP_Retraining = uvm_reg_field::type_id::create("LP_Retraining");
         LP_Retrain_Ready = uvm_reg_field::type_id::create("LP_Retrain_Ready");
         LP_Retrain_Grant = uvm_reg_field::type_id::create("LP_Retrain_Grant");
         LP_Transmit_Equalizer_Status = uvm_reg_field::type_id::create("LP_Transmit_Equalizer_Status");
         LP_Transmit_Equalizer_Command = uvm_reg_field::type_id::create("LP_Transmit_Equalizer_Command");
         LP_Transmit_Equalizer_Tap = uvm_reg_field::type_id::create("LP_Transmit_Equalizer_Tap");
         LP_Transmit_SC_Sequences = uvm_reg_field::type_id::create("LP_Transmit_SC_Sequences");
         LP_Transmit_Width_Request_Pending = uvm_reg_field::type_id::create("LP_Transmit_Width_Request_Pending");
         LP_Transmit_Width_Request = uvm_reg_field::type_id::create("LP_Transmit_Width_Request");

         Reserved.configure(this, 4, 28, "RO", 0, 4'h0, 1, 0, 0);
         LP_State_Control_Reserved.configure(this, 8, 20, "RO", 0, 8'h00, 1, 0, 0);
         LP_Lane_Entering_Silence.configure(this, 1, 19, "RO", 0, 1'b0, 1, 0, 0);
         LP_Port_Entering_Silence.configure(this, 1, 18, "RO", 0, 1'b0, 1, 0, 0);
         LP_Retraining.configure(this, 1, 17, "RO", 0, 1'b0, 1, 0, 0);
         LP_Retrain_Ready.configure(this, 1, 16, "RO", 0, 1'b0, 1, 0, 0);
         LP_Retrain_Grant.configure(this, 1, 15, "RO", 0, 1'b0, 1, 0, 0);
         LP_Transmit_Equalizer_Status.configure(this, 3, 12, "RO", 0, 3'b000, 1, 0, 0);
         LP_Transmit_Equalizer_Command.configure(this, 3, 9, "RO", 0, 3'b000, 1, 0, 0);
         LP_Transmit_Equalizer_Tap.configure(this, 4, 5, "RO", 0, 4'h0, 1, 0, 0);
         LP_Transmit_SC_Sequences.configure(this, 1, 4, "RO", 0, 1'b0, 1, 0, 0);
         LP_Transmit_Width_Request_Pending.configure(this, 1, 3, "RO", 0, 1'b0, 1, 0, 0);
         LP_Transmit_Width_Request.configure(this, 3, 0, "RO", 0, 3'b000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_6_VC8_VC4_BW_Allocation_Register_reg
   // 
   // BW Allocation Register
   //--------------------------------------------------------------------

   class Port_6_VC8_VC4_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_6_VC8_VC4_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 


      // Function: new
      // 
      function new(string name = "Port_6_VC8_VC4_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");

         Bandwidth_Allocation.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_1_Link_Maintenance_Request_CSR_reg
   // 
   // Link  Maintenance Request Register
   //--------------------------------------------------------------------

   class Port_1_Link_Maintenance_Request_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_1_Link_Maintenance_Request_CSR_reg)

      uvm_reg_field Command; 
      uvm_reg_field Reserved; 


      // Function: new
      // 
      function new(string name = "Port_1_Link_Maintenance_Request_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Command = uvm_reg_field::type_id::create("Command");
         Reserved = uvm_reg_field::type_id::create("Reserved");

         Command.configure(this, 3, 29, "RW", 0, 3'b000, 1, 1, 1);
         Reserved.configure(this, 29, 0, "RO", 0, 29'b00000000000000000000000000000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_11_Local_ackID_CSR_reg
   // 
   // ackID Register
   //--------------------------------------------------------------------

   class Port_11_Local_ackID_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_11_Local_ackID_CSR_reg)

      rand uvm_reg_field Outbound_ackID; 
      uvm_reg_field Reserved_2; 
      uvm_reg_field Outstanding_ackID; 
      uvm_reg_field Reserved_1; 
      rand uvm_reg_field Inbound_ackID; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Clr_outstanding_ackID; 


      // Function: new
      // 
      function new(string name = "Port_11_Local_ackID_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Outbound_ackID = uvm_reg_field::type_id::create("Outbound_ackID");
         Reserved_2 = uvm_reg_field::type_id::create("Reserved_2");
         Outstanding_ackID = uvm_reg_field::type_id::create("Outstanding_ackID");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         Inbound_ackID = uvm_reg_field::type_id::create("Inbound_ackID");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Clr_outstanding_ackID = uvm_reg_field::type_id::create("Clr_outstanding_ackID");

         Outbound_ackID.configure(this, 6, 26, "RW", 0, 6'b000000, 1, 1, 0);
         Reserved_2.configure(this, 2, 24, "RO", 0, 2'b00, 1, 0, 0);
         Outstanding_ackID.configure(this, 6, 18, "RW", 0, 6'b000000, 1, 1, 0);
         Reserved_1.configure(this, 10, 8, "RO", 0, 10'b0000000000, 1, 0, 0);
         Inbound_ackID.configure(this, 6, 2, "RW", 0, 6'b000000, 1, 1, 0);
         Reserved.configure(this, 1, 1, "RO", 0, 1'b0, 1, 0, 0);
         Clr_outstanding_ackID.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_10_Packet_Capture_3_CSR_reg
   // 
   // Packet Capture 3 Register
   //--------------------------------------------------------------------

   class Port_10_Packet_Capture_3_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_10_Packet_Capture_3_CSR_reg)

      rand uvm_reg_field Capture3; 


      // Function: new
      // 
      function new(string name = "Port_10_Packet_Capture_3_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture3 = uvm_reg_field::type_id::create("Capture3");

         Capture3.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_13_VC5_VC1_BW_Allocation_Register_reg
   // 
   // BW Allocation Register
   //--------------------------------------------------------------------

   class Port_13_VC5_VC1_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_13_VC5_VC1_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 


      // Function: new
      // 
      function new(string name = "Port_13_VC5_VC1_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");

         Bandwidth_Allocation.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_15_VC8_VC4_BW_Allocation_Register_reg
   // 
   // BW Allocation Register
   //--------------------------------------------------------------------

   class Port_15_VC8_VC4_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_15_VC8_VC4_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 


      // Function: new
      // 
      function new(string name = "Port_15_VC8_VC4_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");

         Bandwidth_Allocation.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_1_Local_ackID_CSR_reg
   // 
   // ackID Register
   //--------------------------------------------------------------------

   class Port_1_Local_ackID_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_1_Local_ackID_CSR_reg)

      rand uvm_reg_field Outbound_ackID; 
      uvm_reg_field Reserved_2; 
      uvm_reg_field Outstanding_ackID; 
      uvm_reg_field Reserved_1; 
      rand uvm_reg_field Inbound_ackID; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Clr_outstanding_ackID; 


      // Function: new
      // 
      function new(string name = "Port_1_Local_ackID_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Outbound_ackID = uvm_reg_field::type_id::create("Outbound_ackID");
         Reserved_2 = uvm_reg_field::type_id::create("Reserved_2");
         Outstanding_ackID = uvm_reg_field::type_id::create("Outstanding_ackID");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         Inbound_ackID = uvm_reg_field::type_id::create("Inbound_ackID");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Clr_outstanding_ackID = uvm_reg_field::type_id::create("Clr_outstanding_ackID");

         Outbound_ackID.configure(this, 6, 26, "RW", 0, 6'b000000, 1, 1, 0);
         Reserved_2.configure(this, 2, 24, "RO", 0, 2'b00, 1, 0, 0);
         Outstanding_ackID.configure(this, 6, 18, "RW", 0, 6'b000000, 1, 1, 0);
         Reserved_1.configure(this, 10, 8, "RO", 0, 10'b0000000000, 1, 0, 0);
         Inbound_ackID.configure(this, 6, 2, "RW", 0, 6'b000000, 1, 1, 0);
         Reserved.configure(this, 1, 1, "RO", 0, 1'b0, 1, 0, 0);
         Clr_outstanding_ackID.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Switch_Route_Table_Destination_ID_Limit_CAR_reg
   // 
   // Destination ID Register
   //--------------------------------------------------------------------

   class Switch_Route_Table_Destination_ID_Limit_CAR_reg extends uvm_reg;
      `uvm_object_utils(Switch_Route_Table_Destination_ID_Limit_CAR_reg)

      uvm_reg_field Max_destID; 
      uvm_reg_field Reserved; 


      // Function: new
      // 
      function new(string name = "Switch_Route_Table_Destination_ID_Limit_CAR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Max_destID = uvm_reg_field::type_id::create("Max_destID");
         Reserved = uvm_reg_field::type_id::create("Reserved");

         Max_destID.configure(this, 16, 16, "RO", 0, 16'h0000, 1, 0, 1);
         Reserved.configure(this, 16, 0, "RO", 0, 16'h0000, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_8_Link_Timers_Control_CSR_reg
   // 
   // Link_Timers_Control_Register
   //--------------------------------------------------------------------

   class Port_8_Link_Timers_Control_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_8_Link_Timers_Control_CSR_reg)

      rand uvm_reg_field Emphasis_Command_Timeout; 
      rand uvm_reg_field CW_Training_Completion_Timer; 
      rand uvm_reg_field DME_Wait_Timer; 
      rand uvm_reg_field DME_Training_Completion_Timer; 


      // Function: new
      // 
      function new(string name = "Port_8_Link_Timers_Control_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Emphasis_Command_Timeout = uvm_reg_field::type_id::create("Emphasis_Command_Timeout");
         CW_Training_Completion_Timer = uvm_reg_field::type_id::create("CW_Training_Completion_Timer");
         DME_Wait_Timer = uvm_reg_field::type_id::create("DME_Wait_Timer");
         DME_Training_Completion_Timer = uvm_reg_field::type_id::create("DME_Training_Completion_Timer");

         Emphasis_Command_Timeout.configure(this, 8, 24, "RW", 0, 8'hff, 1, 1, 1);
         CW_Training_Completion_Timer.configure(this, 8, 16, "RW", 0, 8'h00, 1, 1, 1);
         DME_Wait_Timer.configure(this, 8, 8, "RW", 0, 8'h3f, 1, 1, 1);
         DME_Training_Completion_Timer.configure(this, 8, 0, "RW", 0, 8'h00, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Local_Configuration_Space_Base_Address_1_CSR_reg
   // 
   // Base address 1 Register
   //--------------------------------------------------------------------

   class Local_Configuration_Space_Base_Address_1_CSR_reg extends uvm_reg;
      `uvm_object_utils(Local_Configuration_Space_Base_Address_1_CSR_reg)
      rand uvm_reg_field LCSBA_50; 
      rand uvm_reg_field LCSBA;
      `ifdef ADDR_MODE
      typedef enum {SRIO_ADDR_34,SRIO_ADDR_50,SRIO_ADDR_66} address_mode; 
      address_mode addr_mode = `ADDR_MODE;
      `endif
      uvm_reg_field Reserved;

      // Function: new
      // 
      function new(string name = "Local_Configuration_Space_Base_Address_1_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         LCSBA_50 = uvm_reg_field::type_id::create("LCSBA_50");
         LCSBA = uvm_reg_field::type_id::create("LCSBA");
         Reserved = uvm_reg_field::type_id::create("Reserved");

         `ifdef ADDR_MODE
         Reserved.configure(this, 17, 15, "RO", 0, 17'h00000, 1, 0, 0);
         if (addr_mode == SRIO_ADDR_50 ||addr_mode == SRIO_ADDR_34 )
         LCSBA.configure(this, 14, 1, "RW", 0, 14'h0000, 1, 1, 1);
         else
         LCSBA.configure(this, 14, 1, "RO", 0, 14'h0000, 1, 0, 0);
         if (addr_mode == SRIO_ADDR_50)
         LCSBA_50.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 1);
         else
         LCSBA_50.configure(this, 1, 0, "RO", 0, 1'b0, 1, 0, 0);
        `else
         LCSBA.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
        `endif
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_7_Packet_Capture_3_CSR_reg
   // 
   // Packet Capture 3 Register
   //--------------------------------------------------------------------

   class Port_7_Packet_Capture_3_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_7_Packet_Capture_3_CSR_reg)

      rand uvm_reg_field Capture3; 


      // Function: new
      // 
      function new(string name = "Port_7_Packet_Capture_3_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture3 = uvm_reg_field::type_id::create("Capture3");

         Capture3.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_9_Link_Maintenance_Request_CSR_reg
   // 
   // Link  Maintenance Request Register
   //--------------------------------------------------------------------

   class Port_9_Link_Maintenance_Request_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_9_Link_Maintenance_Request_CSR_reg)

      uvm_reg_field Command; 
      uvm_reg_field Reserved; 


      // Function: new
      // 
      function new(string name = "Port_9_Link_Maintenance_Request_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Command = uvm_reg_field::type_id::create("Command");
         Reserved = uvm_reg_field::type_id::create("Reserved");

         Command.configure(this, 3, 29, "RW", 0, 3'b000, 1, 1, 1);
         Reserved.configure(this, 29, 0, "RO", 0, 29'b00000000000000000000000000000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_11_Inbound_ackID_CSR_reg
   // 
   // Inbound_Register
   //--------------------------------------------------------------------

   class Port_11_Inbound_ackID_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_11_Inbound_ackID_CSR_reg)

      rand uvm_reg_field Inbound_ackID; 
      uvm_reg_field Reserved; 


      // Function: new
      // 
      function new(string name = "Port_11_Inbound_ackID_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Inbound_ackID = uvm_reg_field::type_id::create("Inbound_ackID");
         Reserved = uvm_reg_field::type_id::create("Reserved");

       Inbound_ackID.configure(this, 12, 20, "RW", 0, 12'h000, 1, 1, 0);
         Reserved.configure(this, 20, 0, "RO", 0, 20'h00000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_2_Timestamp_1_LSW_CSR_reg
   // 
   // Timestamp_1_LSW_Register
   //--------------------------------------------------------------------

   class Port_2_Timestamp_1_LSW_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_2_Timestamp_1_LSW_CSR_reg)

      uvm_reg_field LSW_Bits; 


      // Function: new
      // 
      function new(string name = "Port_2_Timestamp_1_LSW_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         LSW_Bits = uvm_reg_field::type_id::create("LSW_Bits");

         LSW_Bits.configure(this, 32, 0, "RO", 0, 32'h00000000, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_11_Outbound_ackID_CSR_reg
   // 
   // Outbound_Register
   //--------------------------------------------------------------------

   class Port_11_Outbound_ackID_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_11_Outbound_ackID_CSR_reg)

      rand uvm_reg_field Outbound_ackID; 
      uvm_reg_field Outstanding_ackID; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Clr_outstanding_ackID; 


      // Function: new
      // 
      function new(string name = "Port_11_Outbound_ackID_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Outbound_ackID = uvm_reg_field::type_id::create("Outbound_ackID");
         Outstanding_ackID = uvm_reg_field::type_id::create("Outstanding_ackID");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Clr_outstanding_ackID = uvm_reg_field::type_id::create("Clr_outstanding_ackID");

         Outbound_ackID.configure(this, 12, 20, "RW", 0, 12'h000, 1, 1, 0);
         Outstanding_ackID.configure(this, 12, 8, "RW", 0, 12'h000, 1, 1, 0);
         Reserved.configure(this, 7, 1, "RO", 0, 7'b0000000, 1, 0, 0);
         Clr_outstanding_ackID.configure(this, 1, 0, "W1C", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_12_Timestamp_1_LSW_CSR_reg
   // 
   // Timestamp_1_LSW_Register
   //--------------------------------------------------------------------

   class Port_12_Timestamp_1_LSW_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_12_Timestamp_1_LSW_CSR_reg)

      uvm_reg_field LSW_Bits; 


      // Function: new
      // 
      function new(string name = "Port_12_Timestamp_1_LSW_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         LSW_Bits = uvm_reg_field::type_id::create("LSW_Bits");

         LSW_Bits.configure(this, 32, 0, "RO", 0, 32'h00000000, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Lane_5_Status_0_CSR_reg
   // 
   // Status 0 Register
   //--------------------------------------------------------------------

   class Lane_5_Status_0_CSR_reg extends uvm_reg;
      `uvm_object_utils(Lane_5_Status_0_CSR_reg)

      uvm_reg_field Status2_7_CSRs_implemented; 
      uvm_reg_field Status1_CSR_implemented; 
      uvm_reg_field Reserved; 
      uvm_reg_field Rcvr_trained_state_change; 
      uvm_reg_field Lane_sync_state_change; 
      uvm_reg_field lane_8B_10B_decoding_errors; 
      uvm_reg_field Receiver_lane_ready; 
      uvm_reg_field Receiver_lane_sync; 
      uvm_reg_field Receiver_trained; 
      uvm_reg_field Receiver_input_inverted; 
      uvm_reg_field Receiver_type; 
      uvm_reg_field Transmitter_mode; 
      uvm_reg_field Transmitter_type; 
      uvm_reg_field Lane_Number; 
      uvm_reg_field Port_Number; 


      // Function: new
      // 
      function new(string name = "Lane_5_Status_0_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Status2_7_CSRs_implemented = uvm_reg_field::type_id::create("Status2_7_CSRs_implemented");
         Status1_CSR_implemented = uvm_reg_field::type_id::create("Status1_CSR_implemented");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Rcvr_trained_state_change = uvm_reg_field::type_id::create("Rcvr_trained_state_change");
         Lane_sync_state_change = uvm_reg_field::type_id::create("Lane_sync_state_change");
         lane_8B_10B_decoding_errors = uvm_reg_field::type_id::create("lane_8B_10B_decoding_errors");
         Receiver_lane_ready = uvm_reg_field::type_id::create("Receiver_lane_ready");
         Receiver_lane_sync = uvm_reg_field::type_id::create("Receiver_lane_sync");
         Receiver_trained = uvm_reg_field::type_id::create("Receiver_trained");
         Receiver_input_inverted = uvm_reg_field::type_id::create("Receiver_input_inverted");
         Receiver_type = uvm_reg_field::type_id::create("Receiver_type");
         Transmitter_mode = uvm_reg_field::type_id::create("Transmitter_mode");
         Transmitter_type = uvm_reg_field::type_id::create("Transmitter_type");
         Lane_Number = uvm_reg_field::type_id::create("Lane_Number");
         Port_Number = uvm_reg_field::type_id::create("Port_Number");

         Status2_7_CSRs_implemented.configure(this, 3, 29, "RO", 0, 3'b000, 1, 0, 0);
         Status1_CSR_implemented.configure(this, 1, 28, "RO", 0, 1'b0, 1, 0, 0);
         Reserved.configure(this, 2, 26, "RO", 0, 2'b00, 1, 0, 0);
         Rcvr_trained_state_change.configure(this, 1, 25, "RO", 0, 1'b0, 1, 0, 0);
         Lane_sync_state_change.configure(this, 1, 24, "RO", 0, 1'b0, 1, 0, 0);
         lane_8B_10B_decoding_errors.configure(this, 4, 20, "RO", 0, 4'h0, 1, 0, 0);
         Receiver_lane_ready.configure(this, 1, 19, "RO", 0, 1'b0, 1, 0, 0);
         Receiver_lane_sync.configure(this, 1, 18, "RO", 0, 1'b0, 1, 0, 0);
         Receiver_trained.configure(this, 1, 17, "RO", 0, 1'b0, 1, 0, 0);
         Receiver_input_inverted.configure(this, 1, 16, "RO", 0, 1'b0, 1, 0, 0);
         Receiver_type.configure(this, 2, 14, "RO", 0, 2'b00, 1, 0, 0);
         Transmitter_mode.configure(this, 1, 13, "RO", 0, 1'b0, 1, 0, 0);
         Transmitter_type.configure(this, 1, 12, "RO", 0, 1'b0, 1, 0, 0);
         Lane_Number.configure(this, 4, 8, "RO", 0, 4'h0, 1, 0, 0);
         Port_Number.configure(this, 8, 0, "RO", 0, 8'h00, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_8_VC6_VC2_BW_Allocation_Register_reg
   // 
   // BW Allocation Register
   //--------------------------------------------------------------------

   class Port_8_VC6_VC2_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_8_VC6_VC2_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 


      // Function: new
      // 
      function new(string name = "Port_8_VC6_VC2_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");

         Bandwidth_Allocation.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass


   //--------------------------------------------------------------------
   // Class: Port_1_Link_Timers_Control_CSR_reg
   // 
   // Link_Timers_Control_Register
   //--------------------------------------------------------------------

   class Port_1_Link_Timers_Control_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_1_Link_Timers_Control_CSR_reg)

      rand uvm_reg_field Emphasis_Command_Timeout; 
      rand uvm_reg_field CW_Training_Completion_Timer; 
      rand uvm_reg_field DME_Wait_Timer; 
      rand uvm_reg_field DME_Training_Completion_Timer; 


      // Function: new
      // 
      function new(string name = "Port_1_Link_Timers_Control_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Emphasis_Command_Timeout = uvm_reg_field::type_id::create("Emphasis_Command_Timeout");
         CW_Training_Completion_Timer = uvm_reg_field::type_id::create("CW_Training_Completion_Timer");
         DME_Wait_Timer = uvm_reg_field::type_id::create("DME_Wait_Timer");
         DME_Training_Completion_Timer = uvm_reg_field::type_id::create("DME_Training_Completion_Timer");

         Emphasis_Command_Timeout.configure(this, 8, 24, "RW", 0, 8'hff, 1, 1, 1);
         CW_Training_Completion_Timer.configure(this, 8, 16, "RW", 0, 8'h00, 1, 1, 1);
         DME_Wait_Timer.configure(this, 8, 8, "RW", 0, 8'h3f, 1, 1, 1);
         DME_Training_Completion_Timer.configure(this, 8, 0, "RW", 0, 8'h00, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_15_Timestamp_Synchronization_Status_CSR_reg
   // 
   // Timestamp_Synchronization_Status_CSR_Register
   //--------------------------------------------------------------------

   class Port_15_Timestamp_Synchronization_Status_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_15_Timestamp_Synchronization_Status_CSR_reg)

      uvm_reg_field Delay; 
      uvm_reg_field Reserved; 
      uvm_reg_field Response_Valid; 


      // Function: new
      // 
      function new(string name = "Port_15_Timestamp_Synchronization_Status_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Delay = uvm_reg_field::type_id::create("Delay");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Response_Valid = uvm_reg_field::type_id::create("Response_Valid");

         Delay.configure(this, 10, 22, "RO", 0, 10'b0000000000, 1, 0, 0);
         Reserved.configure(this, 21, 1, "RO", 0, 21'b000000000000000000000, 1, 0, 0);
         Response_Valid.configure(this, 1, 0, "RO", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_0_Power_Management_CSR_reg
   // 
   // Power_Management_Register
   //--------------------------------------------------------------------

   class Port_0_Power_Management_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_0_Power_Management_CSR_reg)

      uvm_reg_field Reserved; 
      uvm_reg_field Status_of_Link_Partner_Transmit_Width_Change; 
      rand uvm_reg_field Change_Link_Partner_Transmit_width; 
      uvm_reg_field Status_of_My_Transmit_Width_Change; 
      rand uvm_reg_field Change_My_Transmit_Width; 
      uvm_reg_field Reciever_Width_Status; 
      uvm_reg_field Transmit_Width_Status; 
      rand uvm_reg_field Asymmetric_Modes_Enabled; 
      uvm_reg_field Asymmetric_Modes_Supported; 


      // Function: new
      // 
      function new(string name = "Port_0_Power_Management_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Status_of_Link_Partner_Transmit_Width_Change = uvm_reg_field::type_id::create("Status_of_Link_Partner_Transmit_Width_Change");
         Change_Link_Partner_Transmit_width = uvm_reg_field::type_id::create("Change_Link_Partner_Transmit_width");
         Status_of_My_Transmit_Width_Change = uvm_reg_field::type_id::create("Status_of_My_Transmit_Width_Change");
         Change_My_Transmit_Width = uvm_reg_field::type_id::create("Change_My_Transmit_Width");
         Reciever_Width_Status = uvm_reg_field::type_id::create("Reciever_Width_Status");
         Transmit_Width_Status = uvm_reg_field::type_id::create("Transmit_Width_Status");
         Asymmetric_Modes_Enabled = uvm_reg_field::type_id::create("Asymmetric_Modes_Enabled");
         Asymmetric_Modes_Supported = uvm_reg_field::type_id::create("Asymmetric_Modes_Supported");

         Reserved.configure(this, 6, 26, "RO", 0, 6'b000000, 1, 0, 0);
         Status_of_Link_Partner_Transmit_Width_Change.configure(this, 2, 24, "RO", 0, 2'b00, 1, 0, 0);
         Change_Link_Partner_Transmit_width.configure(this, 3, 21, "WRC", 0, 3'b000, 1, 1, 0);
         Status_of_My_Transmit_Width_Change.configure(this, 2, 19, "RO", 0, 2'b00, 1, 0, 0);
         Change_My_Transmit_Width.configure(this, 3, 16, "WRC", 0, 3'b000, 1, 1, 0);
         Reciever_Width_Status.configure(this, 3, 13, "RO", 0, 3'b000, 1, 0, 0);
         Transmit_Width_Status.configure(this, 3, 10, "RO", 0, 3'b000, 1, 0, 0);
         Asymmetric_Modes_Enabled.configure(this, 5, 5, "RW", 0, 5'b00000, 1, 1, 0);
         Asymmetric_Modes_Supported.configure(this, 5, 0, "RO", 0, 5'b00000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_1_Attributes_Capture_CSR_reg
   // 
   // Attributes Register
   //--------------------------------------------------------------------

   class Port_1_Attributes_Capture_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_1_Attributes_Capture_CSR_reg)

      rand uvm_reg_field Capture_valid_info; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Implementation_Dependent; 
      rand uvm_reg_field Error_type; 
      rand uvm_reg_field Info_type; 


      // Function: new
      // 
      function new(string name = "Port_1_Attributes_Capture_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture_valid_info = uvm_reg_field::type_id::create("Capture_valid_info");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Implementation_Dependent = uvm_reg_field::type_id::create("Implementation_Dependent");
         Error_type = uvm_reg_field::type_id::create("Error_type");
         Info_type = uvm_reg_field::type_id::create("Info_type");

         Capture_valid_info.configure(this, 1, 31, "RW", 0, 1'b0, 1, 1, 0);
         Reserved.configure(this, 3, 28, "RO", 0, 3'b000, 1, 0, 0);
         Implementation_Dependent.configure(this, 20, 8, "RW", 0, 20'h00000, 1, 1, 0);
         Error_type.configure(this, 5, 3, "RW", 0, 5'b00000, 1, 1, 0);
         Info_type.configure(this, 3, 0, "RW", 0, 3'b000, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_7_Timestamp_Offset_CSR_reg
   // 
   // Timestamp_Offset_CSR_Register
   //--------------------------------------------------------------------

   class Port_7_Timestamp_Offset_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_7_Timestamp_Offset_CSR_reg)

      uvm_reg_field Reserved; 
      rand uvm_reg_field Offset; 


      // Function: new
      // 
      function new(string name = "Port_7_Timestamp_Offset_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Offset = uvm_reg_field::type_id::create("Offset");

         Reserved.configure(this, 16, 16, "RO", 0, 16'h0000, 1, 0, 1);
         Offset.configure(this, 16, 0, "RW", 0, 16'h0000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Lane_9_Status_0_CSR_reg
   // 
   // Status 0 Register
   //--------------------------------------------------------------------

   class Lane_9_Status_0_CSR_reg extends uvm_reg;
      `uvm_object_utils(Lane_9_Status_0_CSR_reg)

      uvm_reg_field Status2_7_CSRs_implemented; 
      uvm_reg_field Status1_CSR_implemented; 
      uvm_reg_field Reserved; 
      uvm_reg_field Rcvr_trained_state_change; 
      uvm_reg_field Lane_sync_state_change; 
      uvm_reg_field lane_8B_10B_decoding_errors; 
      uvm_reg_field Receiver_lane_ready; 
      uvm_reg_field Receiver_lane_sync; 
      uvm_reg_field Receiver_trained; 
      uvm_reg_field Receiver_input_inverted; 
      uvm_reg_field Receiver_type; 
      uvm_reg_field Transmitter_mode; 
      uvm_reg_field Transmitter_type; 
      uvm_reg_field Lane_Number; 
      uvm_reg_field Port_Number; 


      // Function: new
      // 
      function new(string name = "Lane_9_Status_0_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Status2_7_CSRs_implemented = uvm_reg_field::type_id::create("Status2_7_CSRs_implemented");
         Status1_CSR_implemented = uvm_reg_field::type_id::create("Status1_CSR_implemented");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Rcvr_trained_state_change = uvm_reg_field::type_id::create("Rcvr_trained_state_change");
         Lane_sync_state_change = uvm_reg_field::type_id::create("Lane_sync_state_change");
         lane_8B_10B_decoding_errors = uvm_reg_field::type_id::create("lane_8B_10B_decoding_errors");
         Receiver_lane_ready = uvm_reg_field::type_id::create("Receiver_lane_ready");
         Receiver_lane_sync = uvm_reg_field::type_id::create("Receiver_lane_sync");
         Receiver_trained = uvm_reg_field::type_id::create("Receiver_trained");
         Receiver_input_inverted = uvm_reg_field::type_id::create("Receiver_input_inverted");
         Receiver_type = uvm_reg_field::type_id::create("Receiver_type");
         Transmitter_mode = uvm_reg_field::type_id::create("Transmitter_mode");
         Transmitter_type = uvm_reg_field::type_id::create("Transmitter_type");
         Lane_Number = uvm_reg_field::type_id::create("Lane_Number");
         Port_Number = uvm_reg_field::type_id::create("Port_Number");

         Status2_7_CSRs_implemented.configure(this, 3, 29, "RO", 0, 3'b000, 1, 0, 0);
         Status1_CSR_implemented.configure(this, 1, 28, "RO", 0, 1'b0, 1, 0, 0);
         Reserved.configure(this, 2, 26, "RO", 0, 2'b00, 1, 0, 0);
         Rcvr_trained_state_change.configure(this, 1, 25, "RO", 0, 1'b0, 1, 0, 0);
         Lane_sync_state_change.configure(this, 1, 24, "RO", 0, 1'b0, 1, 0, 0);
         lane_8B_10B_decoding_errors.configure(this, 4, 20, "RO", 0, 4'h0, 1, 0, 0);
         Receiver_lane_ready.configure(this, 1, 19, "RO", 0, 1'b0, 1, 0, 0);
         Receiver_lane_sync.configure(this, 1, 18, "RO", 0, 1'b0, 1, 0, 0);
         Receiver_trained.configure(this, 1, 17, "RO", 0, 1'b0, 1, 0, 0);
         Receiver_input_inverted.configure(this, 1, 16, "RO", 0, 1'b0, 1, 0, 0);
         Receiver_type.configure(this, 2, 14, "RO", 0, 2'b00, 1, 0, 0);
         Transmitter_mode.configure(this, 1, 13, "RO", 0, 1'b0, 1, 0, 0);
         Transmitter_type.configure(this, 1, 12, "RO", 0, 1'b0, 1, 0, 0);
         Lane_Number.configure(this, 4, 8, "RO", 0, 4'h0, 1, 0, 0);
         Port_Number.configure(this, 8, 0, "RO", 0, 8'h00, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_10_Packet_Capture_1_CSR_reg
   // 
   // Packet Capture 1 Register
   //--------------------------------------------------------------------

   class Port_10_Packet_Capture_1_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_10_Packet_Capture_1_CSR_reg)

      rand uvm_reg_field Capture1; 


      // Function: new
      // 
      function new(string name = "Port_10_Packet_Capture_1_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture1 = uvm_reg_field::type_id::create("Capture1");

         Capture1.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_N_Latency_Optimization_CSR_reg
   // 
   // Latency_Optimization_Register
   //--------------------------------------------------------------------

   class Port_N_Latency_Optimization_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_N_Latency_Optimization_CSR_reg)

      uvm_reg_field Reserved_1; 
      rand uvm_reg_field Error_Recovery_with_AckID_in_PNA_Enabled; 
      rand uvm_reg_field Multiple_Acknowledges_Enabled; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field TX_AckID_Status_in_PNA_Supported; 
      rand uvm_reg_field Error_Recovery_with_AckID_in_PNA_Supported; 
      rand uvm_reg_field Multiple_Acknowledges_Supported; 


      // Function: new
      // 
      function new(string name = "Port_N_Latency_Optimization_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         Error_Recovery_with_AckID_in_PNA_Enabled = uvm_reg_field::type_id::create("Error_Recovery_with_AckID_in_PNA_Enabled");
         Multiple_Acknowledges_Enabled = uvm_reg_field::type_id::create("Multiple_Acknowledges_Enabled");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         TX_AckID_Status_in_PNA_Supported = uvm_reg_field::type_id::create("TX_AckID_Status_in_PNA_Supported");
         Error_Recovery_with_AckID_in_PNA_Supported = uvm_reg_field::type_id::create("Error_Recovery_with_AckID_in_PNA_Supported");
         Multiple_Acknowledges_Supported = uvm_reg_field::type_id::create("Multiple_Acknowledges_Supported");

         Reserved_1.configure(this, 22, 10, "RO", 0, 22'b0000000000000000000000, 1, 0, 0);
         Error_Recovery_with_AckID_in_PNA_Enabled.configure(this, 1, 9, "RW", 0, 1'b0, 1, 1, 0);
         Multiple_Acknowledges_Enabled.configure(this, 1, 8, "RW", 0, 1'b0, 1, 1, 0);
         Reserved.configure(this, 5, 3, "RO", 0, 5'b00000, 1, 0, 0);
         TX_AckID_Status_in_PNA_Supported.configure(this, 1, 2, "RW", 0, 1'b0, 1, 1, 0);
         Error_Recovery_with_AckID_in_PNA_Supported.configure(this, 1, 1, "RW", 0, 1'b0, 1, 1, 0);
         Multiple_Acknowledges_Supported.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Lane_15_Status_1_CSR_reg
   // 
   // Status 1 Register
   //--------------------------------------------------------------------

   class Lane_15_Status_1_CSR_reg extends uvm_reg;
      `uvm_object_utils(Lane_15_Status_1_CSR_reg)

      uvm_reg_field Reserved; 
      uvm_reg_field IDLE3_SC_Retraining_State; 
      uvm_reg_field IDLE3_SC_Training_State; 
      uvm_reg_field IDLE3_DME_Training_State; 
      uvm_reg_field IDLE3_Training_Type; 
      uvm_reg_field IDLE3_Loss_of_Signals; 
      uvm_reg_field IDLE2_Connected_port_scrambling_descrambling_enabled; 
      uvm_reg_field IDLE2_Connected_port_transmit_emphasis_Tap_plus1_status; 
      uvm_reg_field IDLE2_Connected_port_transmit_emphasis_Tap_minus1_status; 
      uvm_reg_field IDLE2_Lane_number_in_connected_port; 
      uvm_reg_field IDLE2_Received_port_width; 
      uvm_reg_field IDLE2_Connected_port_lane_receiver_trained; 
      uvm_reg_field Implementation_defined; 
      uvm_reg_field Values_changed; 
      uvm_reg_field IDLE_information_current; 
      rand uvm_reg_field IDLE_received; 


      // Function: new
      // 
      function new(string name = "Lane_15_Status_1_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         IDLE3_SC_Retraining_State = uvm_reg_field::type_id::create("IDLE3_SC_Retraining_State");
         IDLE3_SC_Training_State = uvm_reg_field::type_id::create("IDLE3_SC_Training_State");
         IDLE3_DME_Training_State = uvm_reg_field::type_id::create("IDLE3_DME_Training_State");
         IDLE3_Training_Type = uvm_reg_field::type_id::create("IDLE3_Training_Type");
         IDLE3_Loss_of_Signals = uvm_reg_field::type_id::create("IDLE3_Loss_of_Signals");
         IDLE2_Connected_port_scrambling_descrambling_enabled = uvm_reg_field::type_id::create("IDLE2_Connected_port_scrambling_descrambling_enabled");
         IDLE2_Connected_port_transmit_emphasis_Tap_plus1_status = uvm_reg_field::type_id::create("IDLE2_Connected_port_transmit_emphasis_Tap_plus1_status");
         IDLE2_Connected_port_transmit_emphasis_Tap_minus1_status = uvm_reg_field::type_id::create("IDLE2_Connected_port_transmit_emphasis_Tap_minus1_status");
         IDLE2_Lane_number_in_connected_port = uvm_reg_field::type_id::create("IDLE2_Lane_number_in_connected_port");
         IDLE2_Received_port_width = uvm_reg_field::type_id::create("IDLE2_Received_port_width");
         IDLE2_Connected_port_lane_receiver_trained = uvm_reg_field::type_id::create("IDLE2_Connected_port_lane_receiver_trained");
         Implementation_defined = uvm_reg_field::type_id::create("Implementation_defined");
         Values_changed = uvm_reg_field::type_id::create("Values_changed");
         IDLE_information_current = uvm_reg_field::type_id::create("IDLE_information_current");
         IDLE_received = uvm_reg_field::type_id::create("IDLE_received");

         Reserved.configure(this, 6, 26, "RO", 0, 6'b000000, 1, 0, 0);
         IDLE3_SC_Retraining_State.configure(this, 2, 24, "RO", 0, 2'b00, 1, 0, 0);
         IDLE3_SC_Training_State.configure(this, 2, 22, "RO", 0, 2'b00, 1, 0, 0);
         IDLE3_DME_Training_State.configure(this, 2, 20, "RO", 0, 2'b00, 1, 0, 0);
         IDLE3_Training_Type.configure(this, 2, 18, "RO", 0, 2'b00, 1, 0, 0);
         IDLE3_Loss_of_Signals.configure(this, 1, 17, "RO", 0, 1'b0, 1, 0, 0);
         IDLE2_Connected_port_scrambling_descrambling_enabled.configure(this, 1, 16, "RO", 0, 1'b0, 1, 0, 0);
         IDLE2_Connected_port_transmit_emphasis_Tap_plus1_status.configure(this, 2, 14, "RO", 0, 2'b00, 1, 0, 0);
         IDLE2_Connected_port_transmit_emphasis_Tap_minus1_status.configure(this, 2, 12, "RO", 0, 2'b00, 1, 0, 0);
         IDLE2_Lane_number_in_connected_port.configure(this, 4, 8, "RO", 0, 4'h0, 1, 0, 0);
         IDLE2_Received_port_width.configure(this, 3, 5, "RO", 0, 3'b000, 1, 0, 0);
         IDLE2_Connected_port_lane_receiver_trained.configure(this, 1, 4, "RO", 0, 1'b0, 1, 0, 0);
         Implementation_defined.configure(this, 1, 3, "RO", 0, 1'b0, 1, 0, 0);
         Values_changed.configure(this, 1, 2, "RO", 0, 1'b1, 1, 0, 0);
         IDLE_information_current.configure(this, 1, 1, "RO", 0, 1'b0, 1, 0, 0);
         IDLE_received.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_10_Power_Management_CSR_reg
   // 
   // Power_Management_Register
   //--------------------------------------------------------------------

   class Port_10_Power_Management_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_10_Power_Management_CSR_reg)

      uvm_reg_field Reserved; 
      uvm_reg_field Status_of_Link_Partner_Transmit_Width_Change; 
      rand uvm_reg_field Change_Link_Partner_Transmit_width; 
      uvm_reg_field Status_of_My_Transmit_Width_Change; 
      rand uvm_reg_field Change_My_Transmit_Width; 
      uvm_reg_field Reciever_Width_Status; 
      uvm_reg_field Transmit_Width_Status; 
      rand uvm_reg_field Asymmetric_Modes_Enabled; 
      uvm_reg_field Asymmetric_Modes_Supported; 


      // Function: new
      // 
      function new(string name = "Port_10_Power_Management_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Status_of_Link_Partner_Transmit_Width_Change = uvm_reg_field::type_id::create("Status_of_Link_Partner_Transmit_Width_Change");
         Change_Link_Partner_Transmit_width = uvm_reg_field::type_id::create("Change_Link_Partner_Transmit_width");
         Status_of_My_Transmit_Width_Change = uvm_reg_field::type_id::create("Status_of_My_Transmit_Width_Change");
         Change_My_Transmit_Width = uvm_reg_field::type_id::create("Change_My_Transmit_Width");
         Reciever_Width_Status = uvm_reg_field::type_id::create("Reciever_Width_Status");
         Transmit_Width_Status = uvm_reg_field::type_id::create("Transmit_Width_Status");
         Asymmetric_Modes_Enabled = uvm_reg_field::type_id::create("Asymmetric_Modes_Enabled");
         Asymmetric_Modes_Supported = uvm_reg_field::type_id::create("Asymmetric_Modes_Supported");

         Reserved.configure(this, 6, 26, "RO", 0, 6'b000000, 1, 0, 0);
         Status_of_Link_Partner_Transmit_Width_Change.configure(this, 2, 24, "RO", 0, 2'b00, 1, 0, 0);
         Change_Link_Partner_Transmit_width.configure(this, 3, 21, "WRC", 0, 3'b000, 1, 1, 0);
         Status_of_My_Transmit_Width_Change.configure(this, 2, 19, "RO", 0, 2'b00, 1, 0, 0);
         Change_My_Transmit_Width.configure(this, 3, 16, "WRC", 0, 3'b000, 1, 1, 0);
         Reciever_Width_Status.configure(this, 3, 13, "RO", 0, 3'b000, 1, 0, 0);
         Transmit_Width_Status.configure(this, 3, 10, "RO", 0, 3'b000, 1, 0, 0);
         Asymmetric_Modes_Enabled.configure(this, 5, 5, "RW", 0, 5'b00000, 1, 1, 0);
         Asymmetric_Modes_Supported.configure(this, 5, 0, "RO", 0, 5'b00000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_9_Power_Management_CSR_reg
   // 
   // Power_Management_Register
   //--------------------------------------------------------------------

   class Port_9_Power_Management_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_9_Power_Management_CSR_reg)

      uvm_reg_field Reserved; 
      uvm_reg_field Status_of_Link_Partner_Transmit_Width_Change; 
      rand uvm_reg_field Change_Link_Partner_Transmit_width; 
      uvm_reg_field Status_of_My_Transmit_Width_Change; 
      rand uvm_reg_field Change_My_Transmit_Width; 
      uvm_reg_field Reciever_Width_Status; 
      uvm_reg_field Transmit_Width_Status; 
      rand uvm_reg_field Asymmetric_Modes_Enabled; 
      uvm_reg_field Asymmetric_Modes_Supported; 


      // Function: new
      // 
      function new(string name = "Port_9_Power_Management_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Status_of_Link_Partner_Transmit_Width_Change = uvm_reg_field::type_id::create("Status_of_Link_Partner_Transmit_Width_Change");
         Change_Link_Partner_Transmit_width = uvm_reg_field::type_id::create("Change_Link_Partner_Transmit_width");
         Status_of_My_Transmit_Width_Change = uvm_reg_field::type_id::create("Status_of_My_Transmit_Width_Change");
         Change_My_Transmit_Width = uvm_reg_field::type_id::create("Change_My_Transmit_Width");
         Reciever_Width_Status = uvm_reg_field::type_id::create("Reciever_Width_Status");
         Transmit_Width_Status = uvm_reg_field::type_id::create("Transmit_Width_Status");
         Asymmetric_Modes_Enabled = uvm_reg_field::type_id::create("Asymmetric_Modes_Enabled");
         Asymmetric_Modes_Supported = uvm_reg_field::type_id::create("Asymmetric_Modes_Supported");

         Reserved.configure(this, 6, 26, "RO", 0, 6'b000000, 1, 0, 0);
         Status_of_Link_Partner_Transmit_Width_Change.configure(this, 2, 24, "RO", 0, 2'b00, 1, 0, 0);
         Change_Link_Partner_Transmit_width.configure(this, 3, 21, "WRC", 0, 3'b000, 1, 1, 0);
         Status_of_My_Transmit_Width_Change.configure(this, 2, 19, "RO", 0, 2'b00, 1, 0, 0);
         Change_My_Transmit_Width.configure(this, 3, 16, "WRC", 0, 3'b000, 1, 1, 0);
         Reciever_Width_Status.configure(this, 3, 13, "RO", 0, 3'b000, 1, 0, 0);
         Transmit_Width_Status.configure(this, 3, 10, "RO", 0, 3'b000, 1, 0, 0);
         Asymmetric_Modes_Enabled.configure(this, 5, 5, "RW", 0, 5'b00000, 1, 1, 0);
         Asymmetric_Modes_Supported.configure(this, 5, 0, "RO", 0, 5'b00000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_11_Link_Timers_Control_2_CSR_reg
   // 
   // Link_Timers_Control_2_Register
   //--------------------------------------------------------------------

   class Port_11_Link_Timers_Control_2_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_11_Link_Timers_Control_2_CSR_reg)

      uvm_reg_field Reserved; 
      rand uvm_reg_field Recovery_Timer; 
      rand uvm_reg_field Discovery_Completion_Timer; 
      rand uvm_reg_field Retraining_Completion_Timer; 


      // Function: new
      // 
      function new(string name = "Port_11_Link_Timers_Control_2_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Recovery_Timer = uvm_reg_field::type_id::create("Recovery_Timer");
         Discovery_Completion_Timer = uvm_reg_field::type_id::create("Discovery_Completion_Timer");
         Retraining_Completion_Timer = uvm_reg_field::type_id::create("Retraining_Completion_Timer");

         Reserved.configure(this, 8, 24, "RO", 0, 8'h00, 1, 0, 1);
         Recovery_Timer.configure(this, 8, 16, "RW", 0, 8'hff, 1, 1, 1);
         Discovery_Completion_Timer.configure(this, 8, 8, "RW", 0, 8'h00, 1, 1, 1);
         Retraining_Completion_Timer.configure(this, 8, 0, "RW", 0, 8'hfe, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Timestamp_Generator_Status_CSR_reg
   // 
   // Timestamp_Generator_Status_Register
   //--------------------------------------------------------------------

   class Timestamp_Generator_Status_CSR_reg extends uvm_reg;
      `uvm_object_utils(Timestamp_Generator_Status_CSR_reg)

      uvm_reg_field Reserved; 
      uvm_reg_field Timestamp_Generator_Was_Stopped; 
      uvm_reg_field Timestamp_Generator_Stopped; 
      uvm_reg_field Timestamp_Generator_Common_Clock; 
      uvm_reg_field Timestamp_Generator_Clock_Locked; 


      // Function: new
      // 
      function new(string name = "Timestamp_Generator_Status_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Timestamp_Generator_Was_Stopped = uvm_reg_field::type_id::create("Timestamp_Generator_Was_Stopped");
         Timestamp_Generator_Stopped = uvm_reg_field::type_id::create("Timestamp_Generator_Stopped");
         Timestamp_Generator_Common_Clock = uvm_reg_field::type_id::create("Timestamp_Generator_Common_Clock");
         Timestamp_Generator_Clock_Locked = uvm_reg_field::type_id::create("Timestamp_Generator_Clock_Locked");

         Reserved.configure(this, 28, 4, "RO", 0, 28'h0000000, 1, 0, 0);
         Timestamp_Generator_Was_Stopped.configure(this, 1, 3, "RO", 0, 1'b0, 1, 0, 0);
         Timestamp_Generator_Stopped.configure(this, 1, 2, "RO", 0, 1'b0, 1, 0, 0);
         Timestamp_Generator_Common_Clock.configure(this, 1, 1, "RO", 0, 1'b0, 1, 0, 0);
         Timestamp_Generator_Clock_Locked.configure(this, 1, 0, "RO", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_N_Error_Rate_Enable_CSR_reg
   // 
   // Error Rate Enable Register
   //--------------------------------------------------------------------

   class Port_N_Error_Rate_Enable_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_N_Error_Rate_Enable_CSR_reg)
      bit brc3 ;
      rand uvm_reg_field Link_timeout_enable; 
      rand uvm_reg_field Unsolicited_acknowledgement_control_symbol_enable; 
      rand uvm_reg_field Delineation_error_enable; 
      uvm_reg_field Frame_toggle_edge_error_enable; 
      rand uvm_reg_field Protocol_error_enable; 
      rand uvm_reg_field Non_outstanding_ackID_enable; 
      uvm_reg_field Reserved_1; 
      rand uvm_reg_field Ivalid_Ordered_Sequence_Enable; 
      rand uvm_reg_field Loss_of_descrambler_synchronization_enable; 
      rand uvm_reg_field Received_data_character_in_an_IDLE1_sequence_enable; 
      rand uvm_reg_field Received_illegal_or_invalid_character_enable; 
      rand uvm_reg_field Received_packet_exceeds_maximum_allowed_size_enable; 
      rand uvm_reg_field Received_packet_with_bad_CRC_enable; 
      rand uvm_reg_field Received_packet_with_unexpected_ackID_enable; 
      rand uvm_reg_field Received_packet_not_accepted_control_symbol_enable; 
      rand uvm_reg_field Received_acknowledge_control_symbol_with_unexpected_ackID_enable; 
      rand uvm_reg_field Received_corrupt_control_symbol_enable; 
      uvm_reg_field Received_S_bit_error_enable; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Link_Uninit_To_Ok_Transition_Enable; 
      rand uvm_reg_field Link_Uninit_Packet_Discard_Active_Enable; 
      rand uvm_reg_field Link_Ok_To_Uninit_Transition_Enable; 
      uvm_reg_field Implementation_specific_error_enable; 


      // Function: new
      // 
      function new(string name = "Port_N_Error_Rate_Enable_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Link_timeout_enable = uvm_reg_field::type_id::create("Link_timeout_enable");
         Unsolicited_acknowledgement_control_symbol_enable = uvm_reg_field::type_id::create("Unsolicited_acknowledgement_control_symbol_enable");
         Delineation_error_enable = uvm_reg_field::type_id::create("Delineation_error_enable");
         Frame_toggle_edge_error_enable = uvm_reg_field::type_id::create("Frame_toggle_edge_error_enable");
         Protocol_error_enable = uvm_reg_field::type_id::create("Protocol_error_enable");
         Non_outstanding_ackID_enable = uvm_reg_field::type_id::create("Non_outstanding_ackID_enable");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         Ivalid_Ordered_Sequence_Enable = uvm_reg_field::type_id::create("Ivalid_Ordered_Sequence_Enable");
         Loss_of_descrambler_synchronization_enable = uvm_reg_field::type_id::create("Loss_of_descrambler_synchronization_enable");
         Received_data_character_in_an_IDLE1_sequence_enable = uvm_reg_field::type_id::create("Received_data_character_in_an_IDLE1_sequence_enable");
         Received_illegal_or_invalid_character_enable = uvm_reg_field::type_id::create("Received_illegal_or_invalid_character_enable");
         Received_packet_exceeds_maximum_allowed_size_enable = uvm_reg_field::type_id::create("Received_packet_exceeds_maximum_allowed_size_enable");
         Received_packet_with_bad_CRC_enable = uvm_reg_field::type_id::create("Received_packet_with_bad_CRC_enable");
         Received_packet_with_unexpected_ackID_enable = uvm_reg_field::type_id::create("Received_packet_with_unexpected_ackID_enable");
         Received_packet_not_accepted_control_symbol_enable = uvm_reg_field::type_id::create("Received_packet_not_accepted_control_symbol_enable");
         Received_acknowledge_control_symbol_with_unexpected_ackID_enable = uvm_reg_field::type_id::create("Received_acknowledge_control_symbol_with_unexpected_ackID_enable");
         Received_corrupt_control_symbol_enable = uvm_reg_field::type_id::create("Received_corrupt_control_symbol_enable");
         Received_S_bit_error_enable = uvm_reg_field::type_id::create("Received_S_bit_error_enable");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Link_Uninit_To_Ok_Transition_Enable = uvm_reg_field::type_id::create("Link_Uninit_To_Ok_Transition_Enable");
         Link_Uninit_Packet_Discard_Active_Enable = uvm_reg_field::type_id::create("Link_Uninit_Packet_Discard_Active_Enable");
         Link_Ok_To_Uninit_Transition_Enable = uvm_reg_field::type_id::create("Link_Ok_To_Uninit_Transition_Enable");
         Implementation_specific_error_enable = uvm_reg_field::type_id::create("Implementation_specific_error_enable");

         Link_timeout_enable.configure(this, 1, 31, "RW", 0, 1'b0, 1, 1, 0);
         Unsolicited_acknowledgement_control_symbol_enable.configure(this, 1, 30, "RW", 0, 1'b0, 1, 1, 0);
         Delineation_error_enable.configure(this, 1, 29, "RW", 0, 1'b0, 1, 1, 0);
         Frame_toggle_edge_error_enable.configure(this, 1, 28, "RO", 0, 1'b0, 1, 0, 0);
         Protocol_error_enable.configure(this, 1, 27, "RW", 0, 1'b0, 1, 1, 0);
         Non_outstanding_ackID_enable.configure(this, 1, 26, "RW", 0, 1'b0, 1, 1, 0);
         Reserved_1.configure(this, 7, 19, "RO", 0, 7'b0000000, 1, 0, 0);
         Ivalid_Ordered_Sequence_Enable.configure(this, 1, 18, "RW", 0, 1'b0, 1, 1, 1);
         Loss_of_descrambler_synchronization_enable.configure(this, 1, 17, "RW", 0, 1'b0, 1, 1, 0);
         Received_data_character_in_an_IDLE1_sequence_enable.configure(this, 1, 16, "RW", 0, 1'b0, 1, 1, 0);
         Received_illegal_or_invalid_character_enable.configure(this, 1, 15, "RW", 0, 1'b0, 1, 1, 0);
         Received_packet_exceeds_maximum_allowed_size_enable.configure(this, 1, 14, "RW", 0, 1'b0, 1, 1, 0);
         Received_packet_with_bad_CRC_enable.configure(this, 1, 13, "RW", 0, 1'b0, 1, 1, 0);
         Received_packet_with_unexpected_ackID_enable.configure(this, 1, 12, "RW", 0, 1'b0, 1, 1, 0);
         Received_packet_not_accepted_control_symbol_enable.configure(this, 1, 11, "RW", 0, 1'b0, 1, 1, 0);
         Received_acknowledge_control_symbol_with_unexpected_ackID_enable.configure(this, 1, 10, "RW", 0, 1'b0, 1, 1, 0);
         Received_corrupt_control_symbol_enable.configure(this, 1, 9, "RW", 0, 1'b0, 1, 1, 0);
         Received_S_bit_error_enable.configure(this, 1, 8, "RO", 0, 1'b0, 1, 0, 0);
         Reserved.configure(this, 4, 4, "RO", 0, 4'h0, 1, 0, 0);
         Link_Uninit_To_Ok_Transition_Enable.configure(this, 1, 3, "RW", 0, 1'b0, 1, 1, 0);
         Link_Uninit_Packet_Discard_Active_Enable.configure(this, 1, 2, "RW", 0, 1'b0, 1, 1, 0);
         Link_Ok_To_Uninit_Transition_Enable.configure(this, 1, 1, "RW", 0, 1'b0, 1, 1, 0);
         Implementation_specific_error_enable.configure(this, 1, 0, "RO", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_2_Outbound_ackID_CSR_reg
   // 
   // Outbound_Register
   //--------------------------------------------------------------------

   class Port_2_Outbound_ackID_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_2_Outbound_ackID_CSR_reg)

      rand uvm_reg_field Outbound_ackID; 
      uvm_reg_field Outstanding_ackID; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Clr_outstanding_ackID; 


      // Function: new
      // 
      function new(string name = "Port_2_Outbound_ackID_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Outbound_ackID = uvm_reg_field::type_id::create("Outbound_ackID");
         Outstanding_ackID = uvm_reg_field::type_id::create("Outstanding_ackID");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Clr_outstanding_ackID = uvm_reg_field::type_id::create("Clr_outstanding_ackID");

         Outbound_ackID.configure(this, 12, 20, "RW", 0, 12'h000, 1, 1, 0);
         Outstanding_ackID.configure(this, 12, 8, "RW", 0, 12'h000, 1, 1, 0);
         Reserved.configure(this, 7, 1, "RO", 0, 7'b0000000, 1, 0, 0);
         Clr_outstanding_ackID.configure(this, 1, 0, "W1C", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_14_Link_Maintenance_Response_CSR_reg
   // 
   // Link Maintenance Response Register
   //--------------------------------------------------------------------

   class Port_14_Link_Maintenance_Response_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_14_Link_Maintenance_Response_CSR_reg)

      uvm_reg_field port_status; 
      uvm_reg_field ackID_status; 
      uvm_reg_field Port_status_cs64; 
      uvm_reg_field Reserved; 
      uvm_reg_field response_valid; 


      // Function: new
      // 
      function new(string name = "Port_14_Link_Maintenance_Response_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         port_status = uvm_reg_field::type_id::create("port_status");
         ackID_status = uvm_reg_field::type_id::create("ackID_status");
         Port_status_cs64 = uvm_reg_field::type_id::create("Port_status_cs64");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         response_valid = uvm_reg_field::type_id::create("response_valid");

         port_status.configure(this, 5, 27, "RO", 0, 5'b00000, 1, 0, 0);
         ackID_status.configure(this, 12, 15, "RO", 0, 12'h000, 1, 0, 0);
         Port_status_cs64.configure(this, 12, 3, "RO", 0, 12'h000, 1, 0, 0);
         Reserved.configure(this, 2, 1, "RO", 0, 2'b00, 1, 0, 0);
         response_valid.configure(this, 1, 0, "RO", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_3_Link_Timers_Control_CSR_reg
   // 
   // Link_Timers_Control_Register
   //--------------------------------------------------------------------

   class Port_3_Link_Timers_Control_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_3_Link_Timers_Control_CSR_reg)

      rand uvm_reg_field Emphasis_Command_Timeout; 
      rand uvm_reg_field CW_Training_Completion_Timer; 
      rand uvm_reg_field DME_Wait_Timer; 
      rand uvm_reg_field DME_Training_Completion_Timer; 


      // Function: new
      // 
      function new(string name = "Port_3_Link_Timers_Control_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Emphasis_Command_Timeout = uvm_reg_field::type_id::create("Emphasis_Command_Timeout");
         CW_Training_Completion_Timer = uvm_reg_field::type_id::create("CW_Training_Completion_Timer");
         DME_Wait_Timer = uvm_reg_field::type_id::create("DME_Wait_Timer");
         DME_Training_Completion_Timer = uvm_reg_field::type_id::create("DME_Training_Completion_Timer");

         Emphasis_Command_Timeout.configure(this, 8, 24, "RW", 0, 8'hff, 1, 1, 1);
         CW_Training_Completion_Timer.configure(this, 8, 16, "RW", 0, 8'h00, 1, 1, 1);
         DME_Wait_Timer.configure(this, 8, 8, "RW", 0, 8'h3f, 1, 1, 1);
         DME_Training_Completion_Timer.configure(this, 8, 0, "RW", 0, 8'h00, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_11_Timestamp_Synchronization_Status_CSR_reg
   // 
   // Timestamp_Synchronization_Status_CSR_Register
   //--------------------------------------------------------------------

   class Port_11_Timestamp_Synchronization_Status_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_11_Timestamp_Synchronization_Status_CSR_reg)

      uvm_reg_field Delay; 
      uvm_reg_field Reserved; 
      uvm_reg_field Response_Valid; 


      // Function: new
      // 
      function new(string name = "Port_11_Timestamp_Synchronization_Status_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Delay = uvm_reg_field::type_id::create("Delay");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Response_Valid = uvm_reg_field::type_id::create("Response_Valid");

         Delay.configure(this, 10, 22, "RO", 0, 10'b0000000000, 1, 0, 0);
         Reserved.configure(this, 21, 1, "RO", 0, 21'b000000000000000000000, 1, 0, 0);
         Response_Valid.configure(this, 1, 0, "RO", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_3_Timestamp_0_LSW_CSR_reg
   // 
   // Timestamp_0_LSW_Register
   //--------------------------------------------------------------------

   class Port_3_Timestamp_0_LSW_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_3_Timestamp_0_LSW_CSR_reg)

      uvm_reg_field LSW_Bits; 


      // Function: new
      // 
      function new(string name = "Port_3_Timestamp_0_LSW_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         LSW_Bits = uvm_reg_field::type_id::create("LSW_Bits");

         LSW_Bits.configure(this, 32, 0, "RO", 0, 32'h00000000, 1, 0, 1);
      endfunction
   endclass

   //--------------------------------------------------------------------
   // Class: Port_12_Packet_Capture_3_CSR_reg
   // 
   // Packet Capture 3 Register
   //--------------------------------------------------------------------

   class Port_12_Packet_Capture_3_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_12_Packet_Capture_3_CSR_reg)

      rand uvm_reg_field Capture3; 


      // Function: new
      // 
      function new(string name = "Port_12_Packet_Capture_3_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture3 = uvm_reg_field::type_id::create("Capture3");

         Capture3.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_0_Link_Timers_Control_CSR_reg
   // 
   // Link_Timers_Control_Register
   //--------------------------------------------------------------------

   class Port_0_Link_Timers_Control_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_0_Link_Timers_Control_CSR_reg)

      rand uvm_reg_field Emphasis_Command_Timeout; 
      rand uvm_reg_field CW_Training_Completion_Timer; 
      rand uvm_reg_field DME_Wait_Timer; 
      rand uvm_reg_field DME_Training_Completion_Timer; 


      // Function: new
      // 
      function new(string name = "Port_0_Link_Timers_Control_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Emphasis_Command_Timeout = uvm_reg_field::type_id::create("Emphasis_Command_Timeout");
         CW_Training_Completion_Timer = uvm_reg_field::type_id::create("CW_Training_Completion_Timer");
         DME_Wait_Timer = uvm_reg_field::type_id::create("DME_Wait_Timer");
         DME_Training_Completion_Timer = uvm_reg_field::type_id::create("DME_Training_Completion_Timer");

         Emphasis_Command_Timeout.configure(this, 8, 24, "RW", 0, 8'hff, 1, 1, 1);
         CW_Training_Completion_Timer.configure(this, 8, 16, "RW", 0, 8'h00, 1, 1, 1);
         DME_Wait_Timer.configure(this, 8, 8, "RW", 0, 8'h3f, 1, 1, 1);
         DME_Training_Completion_Timer.configure(this, 8, 0, "RW", 0, 8'h00, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_14_Timestamp_Generator_Synchronization_CSR_reg
   // 
   // Timestamp_Generator_Synchronization_Register
   //--------------------------------------------------------------------

   class Port_14_Timestamp_Generator_Synchronization_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_14_Timestamp_Generator_Synchronization_CSR_reg)

      rand uvm_reg_field Asymmetry; 
      rand uvm_reg_field TX_Has_Lowwer_Latency; 
      uvm_reg_field Reserved_1; 
      rand uvm_reg_field Port_Opening_Mode; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Auto_Update_Link_Partner_Timestamp_Generators; 
      rand uvm_reg_field Disable_Clock_Compensation_Sequence; 
      rand uvm_reg_field Accept_Timestamps; 


      // Function: new
      // 
      function new(string name = "Port_14_Timestamp_Generator_Synchronization_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Asymmetry = uvm_reg_field::type_id::create("Asymmetry");
         TX_Has_Lowwer_Latency = uvm_reg_field::type_id::create("TX_Has_Lowwer_Latency");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         Port_Opening_Mode = uvm_reg_field::type_id::create("Port_Opening_Mode");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Auto_Update_Link_Partner_Timestamp_Generators = uvm_reg_field::type_id::create("Auto_Update_Link_Partner_Timestamp_Generators");
         Disable_Clock_Compensation_Sequence = uvm_reg_field::type_id::create("Disable_Clock_Compensation_Sequence");
         Accept_Timestamps = uvm_reg_field::type_id::create("Accept_Timestamps");

         Asymmetry.configure(this, 12, 20, "RW", 0, 12'h000, 1, 1, 0);
         TX_Has_Lowwer_Latency.configure(this, 1, 19, "RW", 0, 1'b0, 1, 1, 0);
         Reserved_1.configure(this, 11, 8, "RO", 0, 11'b00000000000, 1, 0, 0);
         Port_Opening_Mode.configure(this, 2, 6, "RW", 0, 2'b00, 1, 1, 0);
         Reserved.configure(this, 3, 3, "RO", 0, 3'b000, 1, 0, 0);
         Auto_Update_Link_Partner_Timestamp_Generators.configure(this, 1, 2, "RW", 0, 1'b0, 1, 1, 0);
         Disable_Clock_Compensation_Sequence.configure(this, 1, 1, "RW", 0, 1'b0, 1, 1, 0);
         Accept_Timestamps.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_13_VC8_VC4_BW_Allocation_Register_reg
   // 
   // BW Allocation Register
   //--------------------------------------------------------------------

   class Port_13_VC8_VC4_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_13_VC8_VC4_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 


      // Function: new
      // 
      function new(string name = "Port_13_VC8_VC4_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");

         Bandwidth_Allocation.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Timestamp_Generation_Extension_Block_Header_reg
   // 
   // Timestamp_Generation_Extension_Register
   //--------------------------------------------------------------------

   class Timestamp_Generation_Extension_Block_Header_reg extends uvm_reg;
      `uvm_object_utils(Timestamp_Generation_Extension_Block_Header_reg)

      uvm_reg_field EF_ID; 
      uvm_reg_field EF_PTR; 


      // Function: new
      // 
      function new(string name = "Timestamp_Generation_Extension_Block_Header_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         EF_ID = uvm_reg_field::type_id::create("EF_ID");
         EF_PTR = uvm_reg_field::type_id::create("EF_PTR");

         EF_ID.configure(this, 16, 16, "RO", 0, 16'h0000, 1, 0, 1);
         EF_PTR.configure(this, 16, 0, "RO", 0, 16'h1100, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Lane_13_Status_1_CSR_reg
   // 
   // Status 1 Register
   //--------------------------------------------------------------------

   class Lane_13_Status_1_CSR_reg extends uvm_reg;
      `uvm_object_utils(Lane_13_Status_1_CSR_reg)

      uvm_reg_field Reserved; 
      uvm_reg_field IDLE3_SC_Retraining_State; 
      uvm_reg_field IDLE3_SC_Training_State; 
      uvm_reg_field IDLE3_DME_Training_State; 
      uvm_reg_field IDLE3_Training_Type; 
      uvm_reg_field IDLE3_Loss_of_Signals; 
      uvm_reg_field IDLE2_Connected_port_scrambling_descrambling_enabled; 
      uvm_reg_field IDLE2_Connected_port_transmit_emphasis_Tap_plus1_status; 
      uvm_reg_field IDLE2_Connected_port_transmit_emphasis_Tap_minus1_status; 
      uvm_reg_field IDLE2_Lane_number_in_connected_port; 
      uvm_reg_field IDLE2_Received_port_width; 
      uvm_reg_field IDLE2_Connected_port_lane_receiver_trained; 
      uvm_reg_field Implementation_defined; 
      uvm_reg_field Values_changed; 
      uvm_reg_field IDLE_information_current; 
      rand uvm_reg_field IDLE_received; 


      // Function: new
      // 
      function new(string name = "Lane_13_Status_1_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         IDLE3_SC_Retraining_State = uvm_reg_field::type_id::create("IDLE3_SC_Retraining_State");
         IDLE3_SC_Training_State = uvm_reg_field::type_id::create("IDLE3_SC_Training_State");
         IDLE3_DME_Training_State = uvm_reg_field::type_id::create("IDLE3_DME_Training_State");
         IDLE3_Training_Type = uvm_reg_field::type_id::create("IDLE3_Training_Type");
         IDLE3_Loss_of_Signals = uvm_reg_field::type_id::create("IDLE3_Loss_of_Signals");
         IDLE2_Connected_port_scrambling_descrambling_enabled = uvm_reg_field::type_id::create("IDLE2_Connected_port_scrambling_descrambling_enabled");
         IDLE2_Connected_port_transmit_emphasis_Tap_plus1_status = uvm_reg_field::type_id::create("IDLE2_Connected_port_transmit_emphasis_Tap_plus1_status");
         IDLE2_Connected_port_transmit_emphasis_Tap_minus1_status = uvm_reg_field::type_id::create("IDLE2_Connected_port_transmit_emphasis_Tap_minus1_status");
         IDLE2_Lane_number_in_connected_port = uvm_reg_field::type_id::create("IDLE2_Lane_number_in_connected_port");
         IDLE2_Received_port_width = uvm_reg_field::type_id::create("IDLE2_Received_port_width");
         IDLE2_Connected_port_lane_receiver_trained = uvm_reg_field::type_id::create("IDLE2_Connected_port_lane_receiver_trained");
         Implementation_defined = uvm_reg_field::type_id::create("Implementation_defined");
         Values_changed = uvm_reg_field::type_id::create("Values_changed");
         IDLE_information_current = uvm_reg_field::type_id::create("IDLE_information_current");
         IDLE_received = uvm_reg_field::type_id::create("IDLE_received");

         Reserved.configure(this, 6, 26, "RO", 0, 6'b000000, 1, 0, 0);
         IDLE3_SC_Retraining_State.configure(this, 2, 24, "RO", 0, 2'b00, 1, 0, 0);
         IDLE3_SC_Training_State.configure(this, 2, 22, "RO", 0, 2'b00, 1, 0, 0);
         IDLE3_DME_Training_State.configure(this, 2, 20, "RO", 0, 2'b00, 1, 0, 0);
         IDLE3_Training_Type.configure(this, 2, 18, "RO", 0, 2'b00, 1, 0, 0);
         IDLE3_Loss_of_Signals.configure(this, 1, 17, "RO", 0, 1'b0, 1, 0, 0);
         IDLE2_Connected_port_scrambling_descrambling_enabled.configure(this, 1, 16, "RO", 0, 1'b0, 1, 0, 0);
         IDLE2_Connected_port_transmit_emphasis_Tap_plus1_status.configure(this, 2, 14, "RO", 0, 2'b00, 1, 0, 0);
         IDLE2_Connected_port_transmit_emphasis_Tap_minus1_status.configure(this, 2, 12, "RO", 0, 2'b00, 1, 0, 0);
         IDLE2_Lane_number_in_connected_port.configure(this, 4, 8, "RO", 0, 4'h0, 1, 0, 0);
         IDLE2_Received_port_width.configure(this, 3, 5, "RO", 0, 3'b000, 1, 0, 0);
         IDLE2_Connected_port_lane_receiver_trained.configure(this, 1, 4, "RO", 0, 1'b0, 1, 0, 0);
         Implementation_defined.configure(this, 1, 3, "RO", 0, 1'b0, 1, 0, 0);
         Values_changed.configure(this, 1, 2, "RO", 0, 1'b1, 1, 0, 0);
         IDLE_information_current.configure(this, 1, 1, "RO", 0, 1'b0, 1, 0, 0);
         IDLE_received.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_14_Packet_Capture_4_CSR_reg
   // 
   // Packet Capture 4 Register
   //--------------------------------------------------------------------

   class Port_14_Packet_Capture_4_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_14_Packet_Capture_4_CSR_reg)

      rand uvm_reg_field Capture4; 


      // Function: new
      // 
      function new(string name = "Port_14_Packet_Capture_4_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture4 = uvm_reg_field::type_id::create("Capture4");

         Capture4.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Lane_15_Status_2_CSR_reg
   // 
   // Status 2 Register
   //--------------------------------------------------------------------

   class Lane_15_Status_2_CSR_reg extends uvm_reg;
      `uvm_object_utils(Lane_15_Status_2_CSR_reg)

      uvm_reg_field Reserved; 
      uvm_reg_field LP_Change_Receiver_Width_Command_Negative_Acknowlege; 
      uvm_reg_field LP_Change_Receiver_Width_Command_Acknowlege; 
      uvm_reg_field LP_Change_Receiver_Width_Command; 
      uvm_reg_field LP_Lane_Trained; 
      uvm_reg_field LP_Receive_Lane_Ready; 
      uvm_reg_field LP_Receive_Lanes_Ready; 
      uvm_reg_field LP_Receive_Width; 
      uvm_reg_field LP_Transmit_1x_Mode; 
      uvm_reg_field LP_Port_Intialized; 
      uvm_reg_field LP_Asymmetric_mode_Enabled; 
      uvm_reg_field LP_Retraining_Enabled; 
      uvm_reg_field LP_Remort_Training_Support; 
      uvm_reg_field LP_Lane_Number; 
      uvm_reg_field LP_Port_Number; 


      // Function: new
      // 
      function new(string name = "Lane_15_Status_2_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         LP_Change_Receiver_Width_Command_Negative_Acknowlege = uvm_reg_field::type_id::create("LP_Change_Receiver_Width_Command_Negative_Acknowlege");
         LP_Change_Receiver_Width_Command_Acknowlege = uvm_reg_field::type_id::create("LP_Change_Receiver_Width_Command_Acknowlege");
         LP_Change_Receiver_Width_Command = uvm_reg_field::type_id::create("LP_Change_Receiver_Width_Command");
         LP_Lane_Trained = uvm_reg_field::type_id::create("LP_Lane_Trained");
         LP_Receive_Lane_Ready = uvm_reg_field::type_id::create("LP_Receive_Lane_Ready");
         LP_Receive_Lanes_Ready = uvm_reg_field::type_id::create("LP_Receive_Lanes_Ready");
         LP_Receive_Width = uvm_reg_field::type_id::create("LP_Receive_Width");
         LP_Transmit_1x_Mode = uvm_reg_field::type_id::create("LP_Transmit_1x_Mode");
         LP_Port_Intialized = uvm_reg_field::type_id::create("LP_Port_Intialized");
         LP_Asymmetric_mode_Enabled = uvm_reg_field::type_id::create("LP_Asymmetric_mode_Enabled");
         LP_Retraining_Enabled = uvm_reg_field::type_id::create("LP_Retraining_Enabled");
         LP_Remort_Training_Support = uvm_reg_field::type_id::create("LP_Remort_Training_Support");
         LP_Lane_Number = uvm_reg_field::type_id::create("LP_Lane_Number");
         LP_Port_Number = uvm_reg_field::type_id::create("LP_Port_Number");

         Reserved.configure(this, 2, 30, "RO", 0, 2'b00, 1, 0, 0);
         LP_Change_Receiver_Width_Command_Negative_Acknowlege.configure(this, 1, 29, "RO", 0, 1'b0, 1, 0, 0);
         LP_Change_Receiver_Width_Command_Acknowlege.configure(this, 1, 28, "RO", 0, 1'b0, 1, 0, 0);
         LP_Change_Receiver_Width_Command.configure(this, 3, 25, "RO", 0, 3'b000, 1, 0, 0);
         LP_Lane_Trained.configure(this, 1, 24, "RO", 0, 1'b0, 1, 0, 0);
         LP_Receive_Lane_Ready.configure(this, 1, 23, "RO", 0, 1'b0, 1, 0, 0);
         LP_Receive_Lanes_Ready.configure(this, 3, 20, "RO", 0, 3'b000, 1, 0, 0);
         LP_Receive_Width.configure(this, 3, 17, "RO", 0, 3'b000, 1, 0, 0);
         LP_Transmit_1x_Mode.configure(this, 1, 16, "RO", 0, 1'b0, 1, 0, 0);
         LP_Port_Intialized.configure(this, 1, 15, "RO", 0, 1'b0, 1, 0, 0);
         LP_Asymmetric_mode_Enabled.configure(this, 1, 14, "RO", 0, 1'b0, 1, 0, 0);
         LP_Retraining_Enabled.configure(this, 1, 13, "RO", 0, 1'b0, 1, 0, 0);
         LP_Remort_Training_Support.configure(this, 1, 12, "RO", 0, 1'b0, 1, 0, 0);
         LP_Lane_Number.configure(this, 4, 8, "RO", 0, 4'h0, 1, 0, 0);
         LP_Port_Number.configure(this, 8, 0, "RO", 0, 8'h00, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_2_Attributes_Capture_CSR_reg
   // 
   // Attributes Register
   //--------------------------------------------------------------------

   class Port_2_Attributes_Capture_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_2_Attributes_Capture_CSR_reg)

      rand uvm_reg_field Capture_valid_info; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Implementation_Dependent; 
      rand uvm_reg_field Error_type; 
      rand uvm_reg_field Info_type; 


      // Function: new
      // 
      function new(string name = "Port_2_Attributes_Capture_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture_valid_info = uvm_reg_field::type_id::create("Capture_valid_info");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Implementation_Dependent = uvm_reg_field::type_id::create("Implementation_Dependent");
         Error_type = uvm_reg_field::type_id::create("Error_type");
         Info_type = uvm_reg_field::type_id::create("Info_type");

         Capture_valid_info.configure(this, 1, 31, "RW", 0, 1'b0, 1, 1, 0);
         Reserved.configure(this, 3, 28, "RO", 0, 3'b000, 1, 0, 0);
         Implementation_Dependent.configure(this, 20, 8, "RW", 0, 20'h00000, 1, 1, 0);
         Error_type.configure(this, 5, 3, "RW", 0, 5'b00000, 1, 1, 0);
         Info_type.configure(this, 3, 0, "RW", 0, 3'b000, 1, 1, 0);
      endfunction
   endclass

   //--------------------------------------------------------------------
   // Class: Port_9_Timestamp_Synchronization_Status_CSR_reg
   // 
   // Timestamp_Synchronization_Status_CSR_Register
   //--------------------------------------------------------------------

   class Port_9_Timestamp_Synchronization_Status_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_9_Timestamp_Synchronization_Status_CSR_reg)

      uvm_reg_field Delay; 
      uvm_reg_field Reserved; 
      uvm_reg_field Response_Valid; 


      // Function: new
      // 
      function new(string name = "Port_9_Timestamp_Synchronization_Status_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Delay = uvm_reg_field::type_id::create("Delay");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Response_Valid = uvm_reg_field::type_id::create("Response_Valid");

         Delay.configure(this, 10, 22, "RO", 0, 10'b0000000000, 1, 0, 0);
         Reserved.configure(this, 21, 1, "RO", 0, 21'b000000000000000000000, 1, 0, 0);
         Response_Valid.configure(this, 1, 0, "RO", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_14_Error_Rate_Threshold_CSR_reg
   // 
   // Error Threshold Register
   //--------------------------------------------------------------------

   class Port_14_Error_Rate_Threshold_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_14_Error_Rate_Threshold_CSR_reg)

      uvm_reg_field Reserved; 
      rand uvm_reg_field Error_Rate_Degraded_Threshold_Trigger; 
      rand uvm_reg_field Error_Rate_Failed_Threshold_Trigger; 


      // Function: new
      // 
      function new(string name = "Port_14_Error_Rate_Threshold_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Error_Rate_Degraded_Threshold_Trigger = uvm_reg_field::type_id::create("Error_Rate_Degraded_Threshold_Trigger");
         Error_Rate_Failed_Threshold_Trigger = uvm_reg_field::type_id::create("Error_Rate_Failed_Threshold_Trigger");

         Reserved.configure(this, 16, 16, "RO", 0, 16'h0000, 1, 0, 1);
         Error_Rate_Degraded_Threshold_Trigger.configure(this, 8, 8, "RW", 0, 8'hff, 1, 1, 1);
         Error_Rate_Failed_Threshold_Trigger.configure(this, 8, 0, "RW", 0, 8'hff, 1, 1, 1);
      endfunction
   endclass

   //--------------------------------------------------------------------
   // Class: Port_11_Link_Timers_Control_CSR_reg
   // 
   // Link_Timers_Control_Register
   //--------------------------------------------------------------------

   class Port_11_Link_Timers_Control_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_11_Link_Timers_Control_CSR_reg)

      rand uvm_reg_field Emphasis_Command_Timeout; 
      rand uvm_reg_field CW_Training_Completion_Timer; 
      rand uvm_reg_field DME_Wait_Timer; 
      rand uvm_reg_field DME_Training_Completion_Timer; 


      // Function: new
      // 
      function new(string name = "Port_11_Link_Timers_Control_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Emphasis_Command_Timeout = uvm_reg_field::type_id::create("Emphasis_Command_Timeout");
         CW_Training_Completion_Timer = uvm_reg_field::type_id::create("CW_Training_Completion_Timer");
         DME_Wait_Timer = uvm_reg_field::type_id::create("DME_Wait_Timer");
         DME_Training_Completion_Timer = uvm_reg_field::type_id::create("DME_Training_Completion_Timer");

         Emphasis_Command_Timeout.configure(this, 8, 24, "RW", 0, 8'hff, 1, 1, 1);
         CW_Training_Completion_Timer.configure(this, 8, 16, "RW", 0, 8'h00, 1, 1, 1);
         DME_Wait_Timer.configure(this, 8, 8, "RW", 0, 8'h3f, 1, 1, 1);
         DME_Training_Completion_Timer.configure(this, 8, 0, "RW", 0, 8'h00, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_2_VC_Control_and_Status_Register_reg
   // 
   // CSR Register
   //--------------------------------------------------------------------

   class Port_2_VC_Control_and_Status_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_2_VC_Control_and_Status_Register_reg)

      rand uvm_reg_field VCs_Enable; 
      uvm_reg_field VCs_Support; 
      rand uvm_reg_field CT_Mode; 
      rand uvm_reg_field VC_Refresh_Interval; 


      // Function: new
      // 
      function new(string name = "Port_2_VC_Control_and_Status_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         VCs_Enable = uvm_reg_field::type_id::create("VCs_Enable");
         VCs_Support = uvm_reg_field::type_id::create("VCs_Support");
         CT_Mode = uvm_reg_field::type_id::create("CT_Mode");
         VC_Refresh_Interval = uvm_reg_field::type_id::create("VC_Refresh_Interval");

         VCs_Enable.configure(this, 8, 24, "RW", 0, 8'h00, 1, 1, 1);
         VCs_Support.configure(this, 8, 16, "RO", 0, 8'h00, 1, 0, 1);
         CT_Mode.configure(this, 8, 8, "RW", 0, 8'h00, 1, 1, 1);
         VC_Refresh_Interval.configure(this, 8, 0, "RW", 0, 8'h00, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_0_Attributes_Capture_CSR_reg
   // 
   // Attributes Register
   //--------------------------------------------------------------------

   class Port_0_Attributes_Capture_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_0_Attributes_Capture_CSR_reg)

      rand uvm_reg_field Capture_valid_info; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Implementation_Dependent; 
      rand uvm_reg_field Error_type; 
      rand uvm_reg_field Info_type; 


      // Function: new
      // 
      function new(string name = "Port_0_Attributes_Capture_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture_valid_info = uvm_reg_field::type_id::create("Capture_valid_info");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Implementation_Dependent = uvm_reg_field::type_id::create("Implementation_Dependent");
         Error_type = uvm_reg_field::type_id::create("Error_type");
         Info_type = uvm_reg_field::type_id::create("Info_type");

         Capture_valid_info.configure(this, 1, 31, "RW", 0, 1'b0, 1, 1, 0);
         Reserved.configure(this, 7, 24, "RO", 0, 7'h00, 1, 0, 0);
         Implementation_Dependent.configure(this, 16, 8, "RW", 0, 16'h0000, 1, 1, 0);
         Error_type.configure(this, 5, 3, "RW", 0, 5'b00000, 1, 1, 0);
         Info_type.configure(this, 3, 0, "RW", 0, 3'b000, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_11_VC_Control_and_Status_Register_reg
   // 
   // CSR Register
   //--------------------------------------------------------------------

   class Port_11_VC_Control_and_Status_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_11_VC_Control_and_Status_Register_reg)

      rand uvm_reg_field VCs_Enable; 
      uvm_reg_field VCs_Support; 
      rand uvm_reg_field CT_Mode; 
      rand uvm_reg_field VC_Refresh_Interval; 


      // Function: new
      // 
      function new(string name = "Port_11_VC_Control_and_Status_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         VCs_Enable = uvm_reg_field::type_id::create("VCs_Enable");
         VCs_Support = uvm_reg_field::type_id::create("VCs_Support");
         CT_Mode = uvm_reg_field::type_id::create("CT_Mode");
         VC_Refresh_Interval = uvm_reg_field::type_id::create("VC_Refresh_Interval");

         VCs_Enable.configure(this, 8, 24, "RW", 0, 8'h00, 1, 1, 1);
         VCs_Support.configure(this, 8, 16, "RO", 0, 8'h00, 1, 0, 1);
         CT_Mode.configure(this, 8, 8, "RW", 0, 8'h00, 1, 1, 1);
         VC_Refresh_Interval.configure(this, 8, 0, "RW", 0, 8'h00, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_2_Timestamp_1_MSW_CSR_reg
   // 
   // Timestamp_1_MSW_Register
   //--------------------------------------------------------------------

   class Port_2_Timestamp_1_MSW_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_2_Timestamp_1_MSW_CSR_reg)

      uvm_reg_field MSW_Bits; 


      // Function: new
      // 
      function new(string name = "Port_2_Timestamp_1_MSW_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         MSW_Bits = uvm_reg_field::type_id::create("MSW_Bits");

         MSW_Bits.configure(this, 32, 0, "RO", 0, 32'h00000000, 1, 0, 1);
      endfunction
   endclass

   //--------------------------------------------------------------------
   // Class: Port_11_Attributes_Capture_CSR_reg
   // 
   // Attributes Register
   //--------------------------------------------------------------------

   class Port_11_Attributes_Capture_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_11_Attributes_Capture_CSR_reg)

      rand uvm_reg_field Capture_valid_info; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Implementation_Dependent; 
      rand uvm_reg_field Error_type; 
      rand uvm_reg_field Info_type; 


      // Function: new
      // 
      function new(string name = "Port_11_Attributes_Capture_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture_valid_info = uvm_reg_field::type_id::create("Capture_valid_info");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Implementation_Dependent = uvm_reg_field::type_id::create("Implementation_Dependent");
         Error_type = uvm_reg_field::type_id::create("Error_type");
         Info_type = uvm_reg_field::type_id::create("Info_type");

         Capture_valid_info.configure(this, 1, 31, "RW", 0, 1'b0, 1, 1, 0);
         Reserved.configure(this, 3, 28, "RO", 0, 3'b000, 1, 0, 0);
         Implementation_Dependent.configure(this, 20, 8, "RW", 0, 20'h00000, 1, 1, 0);
         Error_type.configure(this, 5, 3, "RW", 0, 5'b00000, 1, 1, 0);
         Info_type.configure(this, 3, 0, "RW", 0, 3'b000, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_10_Timestamp_0_LSW_CSR_reg
   // 
   // Timestamp_0_LSW_Register
   //--------------------------------------------------------------------

   class Port_10_Timestamp_0_LSW_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_10_Timestamp_0_LSW_CSR_reg)

      uvm_reg_field LSW_Bits; 


      // Function: new
      // 
      function new(string name = "Port_10_Timestamp_0_LSW_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         LSW_Bits = uvm_reg_field::type_id::create("LSW_Bits");

         LSW_Bits.configure(this, 32, 0, "RO", 0, 32'h00000000, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_5_Attributes_Capture_CSR_reg
   // 
   // Attributes Register
   //--------------------------------------------------------------------

   class Port_5_Attributes_Capture_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_5_Attributes_Capture_CSR_reg)

      rand uvm_reg_field Capture_valid_info; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Implementation_Dependent; 
      rand uvm_reg_field Error_type; 
      rand uvm_reg_field Info_type; 


      // Function: new
      // 
      function new(string name = "Port_5_Attributes_Capture_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture_valid_info = uvm_reg_field::type_id::create("Capture_valid_info");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Implementation_Dependent = uvm_reg_field::type_id::create("Implementation_Dependent");
         Error_type = uvm_reg_field::type_id::create("Error_type");
         Info_type = uvm_reg_field::type_id::create("Info_type");

         Capture_valid_info.configure(this, 1, 31, "RW", 0, 1'b0, 1, 1, 0);
         Reserved.configure(this, 3, 28, "RO", 0, 3'b000, 1, 0, 0);
         Implementation_Dependent.configure(this, 20, 8, "RW", 0, 20'h00000, 1, 1, 0);
         Error_type.configure(this, 5, 3, "RW", 0, 5'b00000, 1, 1, 0);
         Info_type.configure(this, 3, 0, "RW", 0, 3'b000, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_4_Outbound_ackID_CSR_reg
   // 
   // Outbound_Register
   //--------------------------------------------------------------------

   class Port_4_Outbound_ackID_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_4_Outbound_ackID_CSR_reg)

      rand uvm_reg_field Outbound_ackID; 
      uvm_reg_field Outstanding_ackID; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Clr_outstanding_ackID; 


      // Function: new
      // 
      function new(string name = "Port_4_Outbound_ackID_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Outbound_ackID = uvm_reg_field::type_id::create("Outbound_ackID");
         Outstanding_ackID = uvm_reg_field::type_id::create("Outstanding_ackID");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Clr_outstanding_ackID = uvm_reg_field::type_id::create("Clr_outstanding_ackID");

         Outbound_ackID.configure(this, 12, 20, "RW", 0, 12'h000, 1, 1, 0);
         Outstanding_ackID.configure(this, 12, 8, "RW", 0, 12'h000, 1, 1, 0);
         Reserved.configure(this, 7, 1, "RO", 0, 7'b0000000, 1, 0, 0);
         Clr_outstanding_ackID.configure(this, 1, 0, "W1C", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_4_Link_Maintenance_Request_CSR_reg
   // 
   // Link  Maintenance Request Register
   //--------------------------------------------------------------------

   class Port_4_Link_Maintenance_Request_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_4_Link_Maintenance_Request_CSR_reg)

      uvm_reg_field Command; 
      uvm_reg_field Reserved; 


      // Function: new
      // 
      function new(string name = "Port_4_Link_Maintenance_Request_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Command = uvm_reg_field::type_id::create("Command");
         Reserved = uvm_reg_field::type_id::create("Reserved");

         Command.configure(this, 3, 29, "RW", 0, 3'b000, 1, 1, 1);
         Reserved.configure(this, 29, 0, "RO", 0, 29'b00000000000000000000000000000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_3_Link_Uninit_Discard_Timer_CSR_reg
   // 
   // Link_Uninit_Discard_Timer_CSR_Register
   //--------------------------------------------------------------------

   class Port_3_Link_Uninit_Discard_Timer_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_3_Link_Uninit_Discard_Timer_CSR_reg)

      uvm_reg_field Reserved; 
      rand uvm_reg_field Link_Uninit_Timeout; 


      // Function: new
      // 
      function new(string name = "Port_3_Link_Uninit_Discard_Timer_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Link_Uninit_Timeout = uvm_reg_field::type_id::create("Link_Uninit_Timeout");

         Reserved.configure(this, 8, 24, "RO", 0, 8'h00, 1, 0, 1);
         Link_Uninit_Timeout.configure(this, 24, 0, "RW", 0, 24'h000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_8_Timestamp_0_LSW_CSR_reg
   // 
   // Timestamp_0_LSW_Register
   //--------------------------------------------------------------------

   class Port_8_Timestamp_0_LSW_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_8_Timestamp_0_LSW_CSR_reg)

      uvm_reg_field LSW_Bits; 


      // Function: new
      // 
      function new(string name = "Port_8_Timestamp_0_LSW_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         LSW_Bits = uvm_reg_field::type_id::create("LSW_Bits");

         LSW_Bits.configure(this, 32, 0, "RO", 0, 32'h00000000, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_7_Link_Maintenance_Response_CSR_reg
   // 
   // Link Maintenance Response Register
   //--------------------------------------------------------------------

   class Port_7_Link_Maintenance_Response_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_7_Link_Maintenance_Response_CSR_reg)

      uvm_reg_field port_status; 
      uvm_reg_field ackID_status; 
      uvm_reg_field Port_status_cs64; 
      uvm_reg_field Reserved; 
      uvm_reg_field response_valid; 


      // Function: new
      // 
      function new(string name = "Port_7_Link_Maintenance_Response_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         port_status = uvm_reg_field::type_id::create("port_status");
         ackID_status = uvm_reg_field::type_id::create("ackID_status");
         Port_status_cs64 = uvm_reg_field::type_id::create("Port_status_cs64");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         response_valid = uvm_reg_field::type_id::create("response_valid");

         port_status.configure(this, 5, 27, "RO", 0, 5'b00000, 1, 0, 0);
         ackID_status.configure(this, 12, 15, "RO", 0, 12'h000, 1, 0, 0);
         Port_status_cs64.configure(this, 12, 3, "RO", 0, 12'h000, 1, 0, 0);
         Reserved.configure(this, 2, 1, "RO", 0, 2'b00, 1, 0, 0);
         response_valid.configure(this, 1, 0, "RO", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_13_VC7_VC3_BW_Allocation_Register_reg
   // 
   // BW Allocation Register
   //--------------------------------------------------------------------

   class Port_13_VC7_VC3_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_13_VC7_VC3_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 


      // Function: new
      // 
      function new(string name = "Port_13_VC7_VC3_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");

         Bandwidth_Allocation.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Lane_1_Status_2_CSR_reg
   // 
   // Status 2 Register
   //--------------------------------------------------------------------

   class Lane_1_Status_2_CSR_reg extends uvm_reg;
      `uvm_object_utils(Lane_1_Status_2_CSR_reg)

      uvm_reg_field Reserved; 
      uvm_reg_field LP_Change_Receiver_Width_Command_Negative_Acknowlege; 
      uvm_reg_field LP_Change_Receiver_Width_Command_Acknowlege; 
      uvm_reg_field LP_Change_Receiver_Width_Command; 
      uvm_reg_field LP_Lane_Trained; 
      uvm_reg_field LP_Receive_Lane_Ready; 
      uvm_reg_field LP_Receive_Lanes_Ready; 
      uvm_reg_field LP_Receive_Width; 
      uvm_reg_field LP_Transmit_1x_Mode; 
      uvm_reg_field LP_Port_Intialized; 
      uvm_reg_field LP_Asymmetric_mode_Enabled; 
      uvm_reg_field LP_Retraining_Enabled; 
      uvm_reg_field LP_Remort_Training_Support; 
      uvm_reg_field LP_Lane_Number; 
      uvm_reg_field LP_Port_Number; 


      // Function: new
      // 
      function new(string name = "Lane_1_Status_2_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         LP_Change_Receiver_Width_Command_Negative_Acknowlege = uvm_reg_field::type_id::create("LP_Change_Receiver_Width_Command_Negative_Acknowlege");
         LP_Change_Receiver_Width_Command_Acknowlege = uvm_reg_field::type_id::create("LP_Change_Receiver_Width_Command_Acknowlege");
         LP_Change_Receiver_Width_Command = uvm_reg_field::type_id::create("LP_Change_Receiver_Width_Command");
         LP_Lane_Trained = uvm_reg_field::type_id::create("LP_Lane_Trained");
         LP_Receive_Lane_Ready = uvm_reg_field::type_id::create("LP_Receive_Lane_Ready");
         LP_Receive_Lanes_Ready = uvm_reg_field::type_id::create("LP_Receive_Lanes_Ready");
         LP_Receive_Width = uvm_reg_field::type_id::create("LP_Receive_Width");
         LP_Transmit_1x_Mode = uvm_reg_field::type_id::create("LP_Transmit_1x_Mode");
         LP_Port_Intialized = uvm_reg_field::type_id::create("LP_Port_Intialized");
         LP_Asymmetric_mode_Enabled = uvm_reg_field::type_id::create("LP_Asymmetric_mode_Enabled");
         LP_Retraining_Enabled = uvm_reg_field::type_id::create("LP_Retraining_Enabled");
         LP_Remort_Training_Support = uvm_reg_field::type_id::create("LP_Remort_Training_Support");
         LP_Lane_Number = uvm_reg_field::type_id::create("LP_Lane_Number");
         LP_Port_Number = uvm_reg_field::type_id::create("LP_Port_Number");

         Reserved.configure(this, 2, 30, "RO", 0, 2'b00, 1, 0, 0);
         LP_Change_Receiver_Width_Command_Negative_Acknowlege.configure(this, 1, 29, "RO", 0, 1'b0, 1, 0, 0);
         LP_Change_Receiver_Width_Command_Acknowlege.configure(this, 1, 28, "RO", 0, 1'b0, 1, 0, 0);
         LP_Change_Receiver_Width_Command.configure(this, 3, 25, "RO", 0, 3'b000, 1, 0, 0);
         LP_Lane_Trained.configure(this, 1, 24, "RO", 0, 1'b0, 1, 0, 0);
         LP_Receive_Lane_Ready.configure(this, 1, 23, "RO", 0, 1'b0, 1, 0, 0);
         LP_Receive_Lanes_Ready.configure(this, 3, 20, "RO", 0, 3'b000, 1, 0, 0);
         LP_Receive_Width.configure(this, 3, 17, "RO", 0, 3'b000, 1, 0, 0);
         LP_Transmit_1x_Mode.configure(this, 1, 16, "RO", 0, 1'b0, 1, 0, 0);
         LP_Port_Intialized.configure(this, 1, 15, "RO", 0, 1'b0, 1, 0, 0);
         LP_Asymmetric_mode_Enabled.configure(this, 1, 14, "RO", 0, 1'b0, 1, 0, 0);
         LP_Retraining_Enabled.configure(this, 1, 13, "RO", 0, 1'b0, 1, 0, 0);
         LP_Remort_Training_Support.configure(this, 1, 12, "RO", 0, 1'b0, 1, 0, 0);
         LP_Lane_Number.configure(this, 4, 8, "RO", 0, 4'h0, 1, 0, 0);
         LP_Port_Number.configure(this, 8, 0, "RO", 0, 8'h00, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_2_VoQ_Control_Status_Register_reg
   // 
   // VoQ_Control_Status_Register
   //--------------------------------------------------------------------

   class Port_2_VoQ_Control_Status_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_2_VoQ_Control_Status_Register_reg)

      rand uvm_reg_field RX_Port_Group_Size; 
      rand uvm_reg_field TX_Port_Group_Size; 
      uvm_reg_field Reserved_1; 
      rand uvm_reg_field Port_Group_Size_6_Supported; 
      rand uvm_reg_field Port_Group_Size_5_Supported; 
      rand uvm_reg_field Port_Group_Size_4_Supported; 
      rand uvm_reg_field Port_Group_Size_3_Supported; 
      rand uvm_reg_field Port_Group_Size_2_Supported; 
      rand uvm_reg_field Port_Group_Size_1_Supported; 
      rand uvm_reg_field Port_Group_Size_0_Supported; 
      rand uvm_reg_field Enable_VoQ_Backpressure_Per_VC_Transmission; 
      rand uvm_reg_field Port_XOFF; 
      rand uvm_reg_field Enable_VoQ_Symbol_Participation; 
      rand uvm_reg_field Enable_VoQ_Symbol_Genreation; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field VoQ_Backpressure_Per_VC_Supported; 
      rand uvm_reg_field VoQ_Backpressure_Symbol_Reception_Supported; 
      rand uvm_reg_field VoQ_Backpressure_Symbol_Generation_Supported; 


      // Function: new
      // 
      function new(string name = "Port_2_VoQ_Control_Status_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         RX_Port_Group_Size = uvm_reg_field::type_id::create("RX_Port_Group_Size");
         TX_Port_Group_Size = uvm_reg_field::type_id::create("TX_Port_Group_Size");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         Port_Group_Size_6_Supported = uvm_reg_field::type_id::create("Port_Group_Size_6_Supported");
         Port_Group_Size_5_Supported = uvm_reg_field::type_id::create("Port_Group_Size_5_Supported");
         Port_Group_Size_4_Supported = uvm_reg_field::type_id::create("Port_Group_Size_4_Supported");
         Port_Group_Size_3_Supported = uvm_reg_field::type_id::create("Port_Group_Size_3_Supported");
         Port_Group_Size_2_Supported = uvm_reg_field::type_id::create("Port_Group_Size_2_Supported");
         Port_Group_Size_1_Supported = uvm_reg_field::type_id::create("Port_Group_Size_1_Supported");
         Port_Group_Size_0_Supported = uvm_reg_field::type_id::create("Port_Group_Size_0_Supported");
         Enable_VoQ_Backpressure_Per_VC_Transmission = uvm_reg_field::type_id::create("Enable_VoQ_Backpressure_Per_VC_Transmission");
         Port_XOFF = uvm_reg_field::type_id::create("Port_XOFF");
         Enable_VoQ_Symbol_Participation = uvm_reg_field::type_id::create("Enable_VoQ_Symbol_Participation");
         Enable_VoQ_Symbol_Genreation = uvm_reg_field::type_id::create("Enable_VoQ_Symbol_Genreation");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         VoQ_Backpressure_Per_VC_Supported = uvm_reg_field::type_id::create("VoQ_Backpressure_Per_VC_Supported");
         VoQ_Backpressure_Symbol_Reception_Supported = uvm_reg_field::type_id::create("VoQ_Backpressure_Symbol_Reception_Supported");
         VoQ_Backpressure_Symbol_Generation_Supported = uvm_reg_field::type_id::create("VoQ_Backpressure_Symbol_Generation_Supported");

         RX_Port_Group_Size.configure(this, 3, 29, "RW", 0, 3'b000, 1, 1, 0);
         TX_Port_Group_Size.configure(this, 3, 26, "RW", 0, 3'b000, 1, 1, 0);
         Reserved_1.configure(this, 7, 19, "RO", 0, 7'b0000000, 1, 0, 0);
         Port_Group_Size_6_Supported.configure(this, 1, 18, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_5_Supported.configure(this, 1, 17, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_4_Supported.configure(this, 1, 16, "RW", 0, 1'b1, 1, 1, 0);
         Port_Group_Size_3_Supported.configure(this, 1, 15, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_2_Supported.configure(this, 1, 14, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_1_Supported.configure(this, 1, 13, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_0_Supported.configure(this, 1, 12, "RW", 0, 1'b1, 1, 1, 0);
         Enable_VoQ_Backpressure_Per_VC_Transmission.configure(this, 1, 11, "RW", 0, 1'b0, 1, 1, 0);
         Port_XOFF.configure(this, 1, 10, "RW", 0, 1'b0, 1, 1, 0);
         Enable_VoQ_Symbol_Participation.configure(this, 1, 9, "RW", 0, 1'b0, 1, 1, 0);
         Enable_VoQ_Symbol_Genreation.configure(this, 1, 8, "RW", 0, 1'b0, 1, 1, 0);
         Reserved.configure(this, 5, 3, "RO", 0, 5'b00000, 1, 0, 0);
         VoQ_Backpressure_Per_VC_Supported.configure(this, 1, 2, "RW", 0, 1'b0, 1, 1, 0);
         VoQ_Backpressure_Symbol_Reception_Supported.configure(this, 1, 1, "RW", 0, 1'b0, 1, 1, 0);
         VoQ_Backpressure_Symbol_Generation_Supported.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_5_Error_Rate_Threshold_CSR_reg
   // 
   // Error Threshold Register
   //--------------------------------------------------------------------

   class Port_5_Error_Rate_Threshold_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_5_Error_Rate_Threshold_CSR_reg)

      uvm_reg_field Reserved; 
      rand uvm_reg_field Error_Rate_Degraded_Threshold_Trigger; 
      rand uvm_reg_field Error_Rate_Failed_Threshold_Trigger; 


      // Function: new
      // 
      function new(string name = "Port_5_Error_Rate_Threshold_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Error_Rate_Degraded_Threshold_Trigger = uvm_reg_field::type_id::create("Error_Rate_Degraded_Threshold_Trigger");
         Error_Rate_Failed_Threshold_Trigger = uvm_reg_field::type_id::create("Error_Rate_Failed_Threshold_Trigger");

         Reserved.configure(this, 16, 16, "RO", 0, 16'h0000, 1, 0, 1);
         Error_Rate_Degraded_Threshold_Trigger.configure(this, 8, 8, "RW", 0, 8'hff, 1, 1, 1);
         Error_Rate_Failed_Threshold_Trigger.configure(this, 8, 0, "RW", 0, 8'hff, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_8_Local_ackID_CSR_reg
   // 
   // ackID Register
   //--------------------------------------------------------------------

   class Port_8_Local_ackID_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_8_Local_ackID_CSR_reg)

      rand uvm_reg_field Outbound_ackID; 
      uvm_reg_field Reserved_2; 
      uvm_reg_field Outstanding_ackID; 
      uvm_reg_field Reserved_1; 
      rand uvm_reg_field Inbound_ackID; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Clr_outstanding_ackID; 


      // Function: new
      // 
      function new(string name = "Port_8_Local_ackID_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Outbound_ackID = uvm_reg_field::type_id::create("Outbound_ackID");
         Reserved_2 = uvm_reg_field::type_id::create("Reserved_2");
         Outstanding_ackID = uvm_reg_field::type_id::create("Outstanding_ackID");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         Inbound_ackID = uvm_reg_field::type_id::create("Inbound_ackID");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Clr_outstanding_ackID = uvm_reg_field::type_id::create("Clr_outstanding_ackID");

         Outbound_ackID.configure(this, 6, 26, "RW", 0, 6'b000000, 1, 1, 0);
         Reserved_2.configure(this, 2, 24, "RO", 0, 2'b00, 1, 0, 0);
         Outstanding_ackID.configure(this, 6, 18, "RW", 0, 6'b000000, 1, 1, 0);
         Reserved_1.configure(this, 10, 8, "RO", 0, 10'b0000000000, 1, 0, 0);
         Inbound_ackID.configure(this, 6, 2, "RW", 0, 6'b000000, 1, 1, 0);
         Reserved.configure(this, 1, 1, "RO", 0, 1'b0, 1, 0, 0);
         Clr_outstanding_ackID.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_2_Power_Management_CSR_reg
   // 
   // Power_Management_Register
   //--------------------------------------------------------------------

   class Port_2_Power_Management_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_2_Power_Management_CSR_reg)

      uvm_reg_field Reserved; 
      uvm_reg_field Status_of_Link_Partner_Transmit_Width_Change; 
      rand uvm_reg_field Change_Link_Partner_Transmit_width; 
      uvm_reg_field Status_of_My_Transmit_Width_Change; 
      rand uvm_reg_field Change_My_Transmit_Width; 
      uvm_reg_field Reciever_Width_Status; 
      uvm_reg_field Transmit_Width_Status; 
      rand uvm_reg_field Asymmetric_Modes_Enabled; 
      uvm_reg_field Asymmetric_Modes_Supported; 


      // Function: new
      // 
      function new(string name = "Port_2_Power_Management_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Status_of_Link_Partner_Transmit_Width_Change = uvm_reg_field::type_id::create("Status_of_Link_Partner_Transmit_Width_Change");
         Change_Link_Partner_Transmit_width = uvm_reg_field::type_id::create("Change_Link_Partner_Transmit_width");
         Status_of_My_Transmit_Width_Change = uvm_reg_field::type_id::create("Status_of_My_Transmit_Width_Change");
         Change_My_Transmit_Width = uvm_reg_field::type_id::create("Change_My_Transmit_Width");
         Reciever_Width_Status = uvm_reg_field::type_id::create("Reciever_Width_Status");
         Transmit_Width_Status = uvm_reg_field::type_id::create("Transmit_Width_Status");
         Asymmetric_Modes_Enabled = uvm_reg_field::type_id::create("Asymmetric_Modes_Enabled");
         Asymmetric_Modes_Supported = uvm_reg_field::type_id::create("Asymmetric_Modes_Supported");

         Reserved.configure(this, 6, 26, "RO", 0, 6'b000000, 1, 0, 0);
         Status_of_Link_Partner_Transmit_Width_Change.configure(this, 2, 24, "RO", 0, 2'b00, 1, 0, 0);
         Change_Link_Partner_Transmit_width.configure(this, 3, 21, "WRC", 0, 3'b000, 1, 1, 0);
         Status_of_My_Transmit_Width_Change.configure(this, 2, 19, "RO", 0, 2'b00, 1, 0, 0);
         Change_My_Transmit_Width.configure(this, 3, 16, "WRC", 0, 3'b000, 1, 1, 0);
         Reciever_Width_Status.configure(this, 3, 13, "RO", 0, 3'b000, 1, 0, 0);
         Transmit_Width_Status.configure(this, 3, 10, "RO", 0, 3'b000, 1, 0, 0);
         Asymmetric_Modes_Enabled.configure(this, 5, 5, "RW", 0, 5'b00000, 1, 1, 0);
         Asymmetric_Modes_Supported.configure(this, 5, 0, "RO", 0, 5'b00000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Lane_3_Status_1_CSR_reg
   // 
   // Status 1 Register
   //--------------------------------------------------------------------

   class Lane_3_Status_1_CSR_reg extends uvm_reg;
      `uvm_object_utils(Lane_3_Status_1_CSR_reg)

      uvm_reg_field Reserved; 
      uvm_reg_field IDLE3_SC_Retraining_State; 
      uvm_reg_field IDLE3_SC_Training_State; 
      uvm_reg_field IDLE3_DME_Training_State; 
      uvm_reg_field IDLE3_Training_Type; 
      uvm_reg_field IDLE3_Loss_of_Signals; 
      uvm_reg_field IDLE2_Connected_port_scrambling_descrambling_enabled; 
      uvm_reg_field IDLE2_Connected_port_transmit_emphasis_Tap_plus1_status; 
      uvm_reg_field IDLE2_Connected_port_transmit_emphasis_Tap_minus1_status; 
      uvm_reg_field IDLE2_Lane_number_in_connected_port; 
      uvm_reg_field IDLE2_Received_port_width; 
      uvm_reg_field IDLE2_Connected_port_lane_receiver_trained; 
      uvm_reg_field Implementation_defined; 
      uvm_reg_field Values_changed; 
      uvm_reg_field IDLE_information_current; 
      rand uvm_reg_field IDLE_received; 


      // Function: new
      // 
      function new(string name = "Lane_3_Status_1_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         IDLE3_SC_Retraining_State = uvm_reg_field::type_id::create("IDLE3_SC_Retraining_State");
         IDLE3_SC_Training_State = uvm_reg_field::type_id::create("IDLE3_SC_Training_State");
         IDLE3_DME_Training_State = uvm_reg_field::type_id::create("IDLE3_DME_Training_State");
         IDLE3_Training_Type = uvm_reg_field::type_id::create("IDLE3_Training_Type");
         IDLE3_Loss_of_Signals = uvm_reg_field::type_id::create("IDLE3_Loss_of_Signals");
         IDLE2_Connected_port_scrambling_descrambling_enabled = uvm_reg_field::type_id::create("IDLE2_Connected_port_scrambling_descrambling_enabled");
         IDLE2_Connected_port_transmit_emphasis_Tap_plus1_status = uvm_reg_field::type_id::create("IDLE2_Connected_port_transmit_emphasis_Tap_plus1_status");
         IDLE2_Connected_port_transmit_emphasis_Tap_minus1_status = uvm_reg_field::type_id::create("IDLE2_Connected_port_transmit_emphasis_Tap_minus1_status");
         IDLE2_Lane_number_in_connected_port = uvm_reg_field::type_id::create("IDLE2_Lane_number_in_connected_port");
         IDLE2_Received_port_width = uvm_reg_field::type_id::create("IDLE2_Received_port_width");
         IDLE2_Connected_port_lane_receiver_trained = uvm_reg_field::type_id::create("IDLE2_Connected_port_lane_receiver_trained");
         Implementation_defined = uvm_reg_field::type_id::create("Implementation_defined");
         Values_changed = uvm_reg_field::type_id::create("Values_changed");
         IDLE_information_current = uvm_reg_field::type_id::create("IDLE_information_current");
         IDLE_received = uvm_reg_field::type_id::create("IDLE_received");

         Reserved.configure(this, 6, 26, "RO", 0, 6'b000000, 1, 0, 0);
         IDLE3_SC_Retraining_State.configure(this, 2, 24, "RO", 0, 2'b00, 1, 0, 0);
         IDLE3_SC_Training_State.configure(this, 2, 22, "RO", 0, 2'b00, 1, 0, 0);
         IDLE3_DME_Training_State.configure(this, 2, 20, "RO", 0, 2'b00, 1, 0, 0);
         IDLE3_Training_Type.configure(this, 2, 18, "RO", 0, 2'b00, 1, 0, 0);
         IDLE3_Loss_of_Signals.configure(this, 1, 17, "RO", 0, 1'b0, 1, 0, 0);
         IDLE2_Connected_port_scrambling_descrambling_enabled.configure(this, 1, 16, "RO", 0, 1'b0, 1, 0, 0);
         IDLE2_Connected_port_transmit_emphasis_Tap_plus1_status.configure(this, 2, 14, "RO", 0, 2'b00, 1, 0, 0);
         IDLE2_Connected_port_transmit_emphasis_Tap_minus1_status.configure(this, 2, 12, "RO", 0, 2'b00, 1, 0, 0);
         IDLE2_Lane_number_in_connected_port.configure(this, 4, 8, "RO", 0, 4'h0, 1, 0, 0);
         IDLE2_Received_port_width.configure(this, 3, 5, "RO", 0, 3'b000, 1, 0, 0);
         IDLE2_Connected_port_lane_receiver_trained.configure(this, 1, 4, "RO", 0, 1'b0, 1, 0, 0);
         Implementation_defined.configure(this, 1, 3, "RO", 0, 1'b0, 1, 0, 0);
         Values_changed.configure(this, 1, 2, "RO", 0, 1'b1, 1, 0, 0);
         IDLE_information_current.configure(this, 1, 1, "RO", 0, 1'b0, 1, 0, 0);
         IDLE_received.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_1_Error_Rate_CSR_reg
   // 
   // Error Rate Register
   //--------------------------------------------------------------------

   class Port_1_Error_Rate_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_1_Error_Rate_CSR_reg)

      rand uvm_reg_field Error_Rate_Counter; 
      rand uvm_reg_field Peak_Error_Rate; 
      rand uvm_reg_field Error_Rate_Recovery; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Error_Rate_Bias; 


      // Function: new
      // 
      function new(string name = "Port_1_Error_Rate_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Error_Rate_Counter = uvm_reg_field::type_id::create("Error_Rate_Counter");
         Peak_Error_Rate = uvm_reg_field::type_id::create("Peak_Error_Rate");
         Error_Rate_Recovery = uvm_reg_field::type_id::create("Error_Rate_Recovery");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Error_Rate_Bias = uvm_reg_field::type_id::create("Error_Rate_Bias");

         Error_Rate_Counter.configure(this, 8, 24, "RW", 0, 8'h00, 1, 1, 1);
         Peak_Error_Rate.configure(this, 8, 16, "RW", 0, 8'h00, 1, 1, 1);
         Error_Rate_Recovery.configure(this, 2, 14, "RW", 0, 2'b00, 1, 1, 0);
         Reserved.configure(this, 6, 8, "RO", 0, 6'b000000, 1, 0, 0);
         Error_Rate_Bias.configure(this, 8, 0, "RW", 0, 8'h80, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_10_Packet_Capture_2_CSR_reg
   // 
   // Packet Capture 2 Register
   //--------------------------------------------------------------------

   class Port_10_Packet_Capture_2_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_10_Packet_Capture_2_CSR_reg)

      rand uvm_reg_field Capture2; 


      // Function: new
      // 
      function new(string name = "Port_10_Packet_Capture_2_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture2 = uvm_reg_field::type_id::create("Capture2");

         Capture2.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_14_VC0_BW_Allocation_Register_reg
   // 
   // BW Register
   //--------------------------------------------------------------------

   class Port_14_VC0_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_14_VC0_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 
      rand uvm_reg_field Bandwidth_Reservation_Precision; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field VC0_BW_Res_Enable; 
      uvm_reg_field VC0_Bandwidth_Reservation_Capable; 


      // Function: new
      // 
      function new(string name = "Port_14_VC0_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");
         Bandwidth_Reservation_Precision = uvm_reg_field::type_id::create("Bandwidth_Reservation_Precision");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         VC0_BW_Res_Enable = uvm_reg_field::type_id::create("VC0_BW_Res_Enable");
         VC0_Bandwidth_Reservation_Capable = uvm_reg_field::type_id::create("VC0_Bandwidth_Reservation_Capable");

         Bandwidth_Allocation.configure(this, 16, 16, "RW", 0, 16'h0000, 1, 1, 1);
         Bandwidth_Reservation_Precision.configure(this, 8, 8, "RW", 0, 8'h00, 1, 1, 1);
         Reserved.configure(this, 6, 2, "RO", 0, 6'b000000, 1, 0, 0);
         VC0_BW_Res_Enable.configure(this, 1, 1, "RW", 0, 1'b0, 1, 1, 0);
         VC0_Bandwidth_Reservation_Capable.configure(this, 1, 0, "RO", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_2_VC7_VC3_BW_Allocation_Register_reg
   // 
   // BW Allocation Register
   //--------------------------------------------------------------------

   class Port_2_VC7_VC3_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_2_VC7_VC3_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 


      // Function: new
      // 
      function new(string name = "Port_2_VC7_VC3_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");

         Bandwidth_Allocation.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_1_Link_Uninit_Discard_Timer_CSR_reg
   // 
   // Link_Uninit_Discard_Timer_CSR_Register
   //--------------------------------------------------------------------

   class Port_1_Link_Uninit_Discard_Timer_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_1_Link_Uninit_Discard_Timer_CSR_reg)

      uvm_reg_field Reserved; 
      rand uvm_reg_field Link_Uninit_Timeout; 


      // Function: new
      // 
      function new(string name = "Port_1_Link_Uninit_Discard_Timer_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Link_Uninit_Timeout = uvm_reg_field::type_id::create("Link_Uninit_Timeout");

         Reserved.configure(this, 8, 24, "RO", 0, 8'h00, 1, 0, 1);
         Link_Uninit_Timeout.configure(this, 24, 0, "RW", 0, 24'h000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_Write_Transmission_Control_CSR_reg
   // 
   // Port_Write_Transmission_Control_CSR_Register
   //--------------------------------------------------------------------

   class Port_Write_Transmission_Control_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_Write_Transmission_Control_CSR_reg)

      rand uvm_reg_field Port_Write_Transmission_Disable; 
      uvm_reg_field Reserved; 


      // Function: new
      // 
      function new(string name = "Port_Write_Transmission_Control_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Port_Write_Transmission_Disable = uvm_reg_field::type_id::create("Port_Write_Transmission_Disable");
         Reserved = uvm_reg_field::type_id::create("Reserved");

         Port_Write_Transmission_Disable.configure(this, 1, 31, "RW", 0, 1'b0, 1, 1, 0);
         Reserved.configure(this, 31, 0, "RO", 0, 31'b0000000000000000000000000000000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_13_Auto_Update_Counter_CSR_reg
   // 
   // Auto_Update_Counter_CSR_Register
   //--------------------------------------------------------------------

   class Port_13_Auto_Update_Counter_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_13_Auto_Update_Counter_CSR_reg)

      rand uvm_reg_field Update_Period; 


      // Function: new
      // 
      function new(string name = "Port_13_Auto_Update_Counter_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Update_Period = uvm_reg_field::type_id::create("Update_Period");

         Update_Period.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_10_VC5_VC1_BW_Allocation_Register_reg
   // 
   // BW Allocation Register
   //--------------------------------------------------------------------

   class Port_10_VC5_VC1_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_10_VC5_VC1_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 


      // Function: new
      // 
      function new(string name = "Port_10_VC5_VC1_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");

         Bandwidth_Allocation.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Standard_Route_Default_Port_CSR_reg
   // 
   // Default port Register
   //--------------------------------------------------------------------

   class Standard_Route_Default_Port_CSR_reg extends uvm_reg;
      `uvm_object_utils(Standard_Route_Default_Port_CSR_reg)

      rand uvm_reg_field Default_output_port; 
      rand uvm_reg_field Route_Type; 
      uvm_reg_field Reserved; 


      // Function: new
      // 
      function new(string name = "Standard_Route_Default_Port_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Default_output_port = uvm_reg_field::type_id::create("Default_output_port");
         Route_Type = uvm_reg_field::type_id::create("Route_Type");
         Reserved = uvm_reg_field::type_id::create("Reserved");

         Default_output_port.configure(this, 8, 24, "RW", 0, 8'h00, 1, 1, 1);
         Route_Type.configure(this, 2, 22, "RW", 0, 2'b00, 1, 1, 0);
         Reserved.configure(this, 22, 0, "RO", 0, 22'b0000000000000000000000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_8_Timestamp_1_LSW_CSR_reg
   // 
   // Timestamp_1_LSW_Register
   //--------------------------------------------------------------------

   class Port_8_Timestamp_1_LSW_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_8_Timestamp_1_LSW_CSR_reg)

      uvm_reg_field LSW_Bits; 


      // Function: new
      // 
      function new(string name = "Port_8_Timestamp_1_LSW_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         LSW_Bits = uvm_reg_field::type_id::create("LSW_Bits");

         LSW_Bits.configure(this, 32, 0, "RO", 0, 32'h00000000, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_11_Packet_Capture_1_CSR_reg
   // 
   // Packet Capture 1 Register
   //--------------------------------------------------------------------

   class Port_11_Packet_Capture_1_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_11_Packet_Capture_1_CSR_reg)

      rand uvm_reg_field Capture1; 


      // Function: new
      // 
      function new(string name = "Port_11_Packet_Capture_1_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture1 = uvm_reg_field::type_id::create("Capture1");

         Capture1.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_0_VC8_VC4_BW_Allocation_Register_reg
   // 
   // BW Allocation Register
   //--------------------------------------------------------------------

   class Port_0_VC8_VC4_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_0_VC8_VC4_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 


      // Function: new
      // 
      function new(string name = "Port_0_VC8_VC4_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");

         Bandwidth_Allocation.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Lane_14_Status_2_CSR_reg
   // 
   // Status 2 Register
   //--------------------------------------------------------------------

   class Lane_14_Status_2_CSR_reg extends uvm_reg;
      `uvm_object_utils(Lane_14_Status_2_CSR_reg)

      uvm_reg_field Reserved; 
      uvm_reg_field LP_Change_Receiver_Width_Command_Negative_Acknowlege; 
      uvm_reg_field LP_Change_Receiver_Width_Command_Acknowlege; 
      uvm_reg_field LP_Change_Receiver_Width_Command; 
      uvm_reg_field LP_Lane_Trained; 
      uvm_reg_field LP_Receive_Lane_Ready; 
      uvm_reg_field LP_Receive_Lanes_Ready; 
      uvm_reg_field LP_Receive_Width; 
      uvm_reg_field LP_Transmit_1x_Mode; 
      uvm_reg_field LP_Port_Intialized; 
      uvm_reg_field LP_Asymmetric_mode_Enabled; 
      uvm_reg_field LP_Retraining_Enabled; 
      uvm_reg_field LP_Remort_Training_Support; 
      uvm_reg_field LP_Lane_Number; 
      uvm_reg_field LP_Port_Number; 


      // Function: new
      // 
      function new(string name = "Lane_14_Status_2_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         LP_Change_Receiver_Width_Command_Negative_Acknowlege = uvm_reg_field::type_id::create("LP_Change_Receiver_Width_Command_Negative_Acknowlege");
         LP_Change_Receiver_Width_Command_Acknowlege = uvm_reg_field::type_id::create("LP_Change_Receiver_Width_Command_Acknowlege");
         LP_Change_Receiver_Width_Command = uvm_reg_field::type_id::create("LP_Change_Receiver_Width_Command");
         LP_Lane_Trained = uvm_reg_field::type_id::create("LP_Lane_Trained");
         LP_Receive_Lane_Ready = uvm_reg_field::type_id::create("LP_Receive_Lane_Ready");
         LP_Receive_Lanes_Ready = uvm_reg_field::type_id::create("LP_Receive_Lanes_Ready");
         LP_Receive_Width = uvm_reg_field::type_id::create("LP_Receive_Width");
         LP_Transmit_1x_Mode = uvm_reg_field::type_id::create("LP_Transmit_1x_Mode");
         LP_Port_Intialized = uvm_reg_field::type_id::create("LP_Port_Intialized");
         LP_Asymmetric_mode_Enabled = uvm_reg_field::type_id::create("LP_Asymmetric_mode_Enabled");
         LP_Retraining_Enabled = uvm_reg_field::type_id::create("LP_Retraining_Enabled");
         LP_Remort_Training_Support = uvm_reg_field::type_id::create("LP_Remort_Training_Support");
         LP_Lane_Number = uvm_reg_field::type_id::create("LP_Lane_Number");
         LP_Port_Number = uvm_reg_field::type_id::create("LP_Port_Number");

         Reserved.configure(this, 2, 30, "RO", 0, 2'b00, 1, 0, 0);
         LP_Change_Receiver_Width_Command_Negative_Acknowlege.configure(this, 1, 29, "RO", 0, 1'b0, 1, 0, 0);
         LP_Change_Receiver_Width_Command_Acknowlege.configure(this, 1, 28, "RO", 0, 1'b0, 1, 0, 0);
         LP_Change_Receiver_Width_Command.configure(this, 3, 25, "RO", 0, 3'b000, 1, 0, 0);
         LP_Lane_Trained.configure(this, 1, 24, "RO", 0, 1'b0, 1, 0, 0);
         LP_Receive_Lane_Ready.configure(this, 1, 23, "RO", 0, 1'b0, 1, 0, 0);
         LP_Receive_Lanes_Ready.configure(this, 3, 20, "RO", 0, 3'b000, 1, 0, 0);
         LP_Receive_Width.configure(this, 3, 17, "RO", 0, 3'b000, 1, 0, 0);
         LP_Transmit_1x_Mode.configure(this, 1, 16, "RO", 0, 1'b0, 1, 0, 0);
         LP_Port_Intialized.configure(this, 1, 15, "RO", 0, 1'b0, 1, 0, 0);
         LP_Asymmetric_mode_Enabled.configure(this, 1, 14, "RO", 0, 1'b0, 1, 0, 0);
         LP_Retraining_Enabled.configure(this, 1, 13, "RO", 0, 1'b0, 1, 0, 0);
         LP_Remort_Training_Support.configure(this, 1, 12, "RO", 0, 1'b0, 1, 0, 0);
         LP_Lane_Number.configure(this, 4, 8, "RO", 0, 4'h0, 1, 0, 0);
         LP_Port_Number.configure(this, 8, 0, "RO", 0, 8'h00, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Logical_Transport_Layer_Dev32_Source_ID_Capture_CSR_reg
   // 
   // Logical_Transport_Layer_Dev32_Source_ID_Capture_CSR_Register
   //--------------------------------------------------------------------

   class Logical_Transport_Layer_Dev32_Source_ID_Capture_CSR_reg extends uvm_reg;
      `uvm_object_utils(Logical_Transport_Layer_Dev32_Source_ID_Capture_CSR_reg)

      uvm_reg_field Dev32_SrcID; 


      // Function: new
      // 
      function new(string name = "Logical_Transport_Layer_Dev32_Source_ID_Capture_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Dev32_SrcID = uvm_reg_field::type_id::create("Dev32_SrcID");

         Dev32_SrcID.configure(this, 32, 0, "RO", 0, 32'h00000000, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_6_Link_Uninit_Discard_Timer_CSR_reg
   // 
   // Link_Uninit_Discard_Timer_CSR_Register
   //--------------------------------------------------------------------

   class Port_6_Link_Uninit_Discard_Timer_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_6_Link_Uninit_Discard_Timer_CSR_reg)

      uvm_reg_field Reserved; 
      rand uvm_reg_field Link_Uninit_Timeout; 


      // Function: new
      // 
      function new(string name = "Port_6_Link_Uninit_Discard_Timer_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Link_Uninit_Timeout = uvm_reg_field::type_id::create("Link_Uninit_Timeout");

         Reserved.configure(this, 8, 24, "RO", 0, 8'h00, 1, 0, 1);
         Link_Uninit_Timeout.configure(this, 24, 0, "RW", 0, 24'h000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_1_Packet_Capture_4_CSR_reg
   // 
   // Packet Capture 4 Register
   //--------------------------------------------------------------------

   class Port_1_Packet_Capture_4_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_1_Packet_Capture_4_CSR_reg)

      rand uvm_reg_field Capture4; 


      // Function: new
      // 
      function new(string name = "Port_1_Packet_Capture_4_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture4 = uvm_reg_field::type_id::create("Capture4");

         Capture4.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_1_VoQ_Control_Status_Register_reg
   // 
   // VoQ_Control_Status_Register
   //--------------------------------------------------------------------

   class Port_1_VoQ_Control_Status_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_1_VoQ_Control_Status_Register_reg)

      rand uvm_reg_field RX_Port_Group_Size; 
      rand uvm_reg_field TX_Port_Group_Size; 
      uvm_reg_field Reserved_1; 
      rand uvm_reg_field Port_Group_Size_6_Supported; 
      rand uvm_reg_field Port_Group_Size_5_Supported; 
      rand uvm_reg_field Port_Group_Size_4_Supported; 
      rand uvm_reg_field Port_Group_Size_3_Supported; 
      rand uvm_reg_field Port_Group_Size_2_Supported; 
      rand uvm_reg_field Port_Group_Size_1_Supported; 
      rand uvm_reg_field Port_Group_Size_0_Supported; 
      rand uvm_reg_field Enable_VoQ_Backpressure_Per_VC_Transmission; 
      rand uvm_reg_field Port_XOFF; 
      rand uvm_reg_field Enable_VoQ_Symbol_Participation; 
      rand uvm_reg_field Enable_VoQ_Symbol_Genreation; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field VoQ_Backpressure_Per_VC_Supported; 
      rand uvm_reg_field VoQ_Backpressure_Symbol_Reception_Supported; 
      rand uvm_reg_field VoQ_Backpressure_Symbol_Generation_Supported; 


      // Function: new
      // 
      function new(string name = "Port_1_VoQ_Control_Status_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         RX_Port_Group_Size = uvm_reg_field::type_id::create("RX_Port_Group_Size");
         TX_Port_Group_Size = uvm_reg_field::type_id::create("TX_Port_Group_Size");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         Port_Group_Size_6_Supported = uvm_reg_field::type_id::create("Port_Group_Size_6_Supported");
         Port_Group_Size_5_Supported = uvm_reg_field::type_id::create("Port_Group_Size_5_Supported");
         Port_Group_Size_4_Supported = uvm_reg_field::type_id::create("Port_Group_Size_4_Supported");
         Port_Group_Size_3_Supported = uvm_reg_field::type_id::create("Port_Group_Size_3_Supported");
         Port_Group_Size_2_Supported = uvm_reg_field::type_id::create("Port_Group_Size_2_Supported");
         Port_Group_Size_1_Supported = uvm_reg_field::type_id::create("Port_Group_Size_1_Supported");
         Port_Group_Size_0_Supported = uvm_reg_field::type_id::create("Port_Group_Size_0_Supported");
         Enable_VoQ_Backpressure_Per_VC_Transmission = uvm_reg_field::type_id::create("Enable_VoQ_Backpressure_Per_VC_Transmission");
         Port_XOFF = uvm_reg_field::type_id::create("Port_XOFF");
         Enable_VoQ_Symbol_Participation = uvm_reg_field::type_id::create("Enable_VoQ_Symbol_Participation");
         Enable_VoQ_Symbol_Genreation = uvm_reg_field::type_id::create("Enable_VoQ_Symbol_Genreation");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         VoQ_Backpressure_Per_VC_Supported = uvm_reg_field::type_id::create("VoQ_Backpressure_Per_VC_Supported");
         VoQ_Backpressure_Symbol_Reception_Supported = uvm_reg_field::type_id::create("VoQ_Backpressure_Symbol_Reception_Supported");
         VoQ_Backpressure_Symbol_Generation_Supported = uvm_reg_field::type_id::create("VoQ_Backpressure_Symbol_Generation_Supported");

         RX_Port_Group_Size.configure(this, 3, 29, "RW", 0, 3'b000, 1, 1, 0);
         TX_Port_Group_Size.configure(this, 3, 26, "RW", 0, 3'b000, 1, 1, 0);
         Reserved_1.configure(this, 7, 19, "RO", 0, 7'b0000000, 1, 0, 0);
         Port_Group_Size_6_Supported.configure(this, 1, 18, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_5_Supported.configure(this, 1, 17, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_4_Supported.configure(this, 1, 16, "RW", 0, 1'b1, 1, 1, 0);
         Port_Group_Size_3_Supported.configure(this, 1, 15, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_2_Supported.configure(this, 1, 14, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_1_Supported.configure(this, 1, 13, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_0_Supported.configure(this, 1, 12, "RW", 0, 1'b1, 1, 1, 0);
         Enable_VoQ_Backpressure_Per_VC_Transmission.configure(this, 1, 11, "RW", 0, 1'b0, 1, 1, 0);
         Port_XOFF.configure(this, 1, 10, "RW", 0, 1'b0, 1, 1, 0);
         Enable_VoQ_Symbol_Participation.configure(this, 1, 9, "RW", 0, 1'b0, 1, 1, 0);
         Enable_VoQ_Symbol_Genreation.configure(this, 1, 8, "RW", 0, 1'b0, 1, 1, 0);
         Reserved.configure(this, 5, 3, "RO", 0, 5'b00000, 1, 0, 0);
         VoQ_Backpressure_Per_VC_Supported.configure(this, 1, 2, "RW", 0, 1'b0, 1, 1, 0);
         VoQ_Backpressure_Symbol_Reception_Supported.configure(this, 1, 1, "RW", 0, 1'b0, 1, 1, 0);
         VoQ_Backpressure_Symbol_Generation_Supported.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_1_VC6_VC2_BW_Allocation_Register_reg
   // 
   // BW Allocation Register
   //--------------------------------------------------------------------

   class Port_1_VC6_VC2_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_1_VC6_VC2_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 


      // Function: new
      // 
      function new(string name = "Port_1_VC6_VC2_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");

         Bandwidth_Allocation.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_13_Timestamp_Synchronization_Status_CSR_reg
   // 
   // Timestamp_Synchronization_Status_CSR_Register
   //--------------------------------------------------------------------

   class Port_13_Timestamp_Synchronization_Status_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_13_Timestamp_Synchronization_Status_CSR_reg)

      uvm_reg_field Delay; 
      uvm_reg_field Reserved; 
      uvm_reg_field Response_Valid; 


      // Function: new
      // 
      function new(string name = "Port_13_Timestamp_Synchronization_Status_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Delay = uvm_reg_field::type_id::create("Delay");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Response_Valid = uvm_reg_field::type_id::create("Response_Valid");

         Delay.configure(this, 10, 22, "RO", 0, 10'b0000000000, 1, 0, 0);
         Reserved.configure(this, 21, 1, "RO", 0, 21'b000000000000000000000, 1, 0, 0);
         Response_Valid.configure(this, 1, 0, "RO", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_5_Auto_Update_Counter_CSR_reg
   // 
   // Auto_Update_Counter_CSR_Register
   //--------------------------------------------------------------------

   class Port_5_Auto_Update_Counter_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_5_Auto_Update_Counter_CSR_reg)

      rand uvm_reg_field Update_Period; 


      // Function: new
      // 
      function new(string name = "Port_5_Auto_Update_Counter_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Update_Period = uvm_reg_field::type_id::create("Update_Period");

         Update_Period.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_12_Control_CSR_reg
   // 
   // Control Register
   //--------------------------------------------------------------------

   class Port_12_Control_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_12_Control_CSR_reg)

      uvm_reg_field Port_Type; 
      rand uvm_reg_field Port_Lockout; 
      rand uvm_reg_field Drop_Packet_Enable; 
      rand uvm_reg_field Stop_on_Port_Failed_encountered_Enable; 
      rand uvm_reg_field Implementation_defined; 
      uvm_reg_field Extended_Port_Width_Support; 
      rand uvm_reg_field Extended_Port_Width_Override; 
      rand uvm_reg_field Flow_Arbitration_Participant; 
      rand uvm_reg_field Enumeration_Boundary; 
      rand uvm_reg_field Flow_Control_Participant; 
      rand uvm_reg_field Multicast_event_Participant; 
      rand uvm_reg_field Error_Checking_Disable; 
      rand uvm_reg_field Input_Port_Enable; 
      rand uvm_reg_field Output_Port_Enable; 
      rand uvm_reg_field Port_Disable; 
      uvm_reg_field Port_Width_Override; 
      rand uvm_reg_field Initialized_Port_Width; 
      uvm_reg_field Port_Width_Support; 


      // Function: new
      // 
      function new(string name = "Port_12_Control_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Port_Type = uvm_reg_field::type_id::create("Port_Type");
         Port_Lockout = uvm_reg_field::type_id::create("Port_Lockout");
         Drop_Packet_Enable = uvm_reg_field::type_id::create("Drop_Packet_Enable");
         Stop_on_Port_Failed_encountered_Enable = uvm_reg_field::type_id::create("Stop_on_Port_Failed_encountered_Enable");
         Implementation_defined = uvm_reg_field::type_id::create("Implementation_defined");
         Extended_Port_Width_Support = uvm_reg_field::type_id::create("Extended_Port_Width_Support");
         Extended_Port_Width_Override = uvm_reg_field::type_id::create("Extended_Port_Width_Override");
         Flow_Arbitration_Participant = uvm_reg_field::type_id::create("Flow_Arbitration_Participant");
         Enumeration_Boundary = uvm_reg_field::type_id::create("Enumeration_Boundary");
         Flow_Control_Participant = uvm_reg_field::type_id::create("Flow_Control_Participant");
         Multicast_event_Participant = uvm_reg_field::type_id::create("Multicast_event_Participant");
         Error_Checking_Disable = uvm_reg_field::type_id::create("Error_Checking_Disable");
         Input_Port_Enable = uvm_reg_field::type_id::create("Input_Port_Enable");
         Output_Port_Enable = uvm_reg_field::type_id::create("Output_Port_Enable");
         Port_Disable = uvm_reg_field::type_id::create("Port_Disable");
         Port_Width_Override = uvm_reg_field::type_id::create("Port_Width_Override");
         Initialized_Port_Width = uvm_reg_field::type_id::create("Initialized_Port_Width");
         Port_Width_Support = uvm_reg_field::type_id::create("Port_Width_Support");

         Port_Type.configure(this, 1, 31, "RO", 0, 1'b0, 1, 0, 0);
         Port_Lockout.configure(this, 1, 30, "RW", 0, 1'b0, 1, 1, 0);
         Drop_Packet_Enable.configure(this, 1, 29, "RW", 0, 1'b0, 1, 1, 0);
         Stop_on_Port_Failed_encountered_Enable.configure(this, 1, 28, "RW", 0, 1'b0, 1, 1, 0);
         Implementation_defined.configure(this, 8, 20, "RW", 0, 8'h00, 1, 1, 0);
         Extended_Port_Width_Support.configure(this, 2, 18, "RO", 0, 2'b00, 1, 0, 0);
         Extended_Port_Width_Override.configure(this, 2, 16, "RW", 0, 2'b00, 1, 1, 0);
         Flow_Arbitration_Participant.configure(this, 1, 15, "RW", 0, 1'b0, 1, 1, 0);
         Enumeration_Boundary.configure(this, 1, 14, "RW", 0, 1'b0, 1, 1, 0);
         Flow_Control_Participant.configure(this, 1, 13, "RW", 0, 1'b0, 1, 1, 0);
         Multicast_event_Participant.configure(this, 1, 12, "RW", 0, 1'b0, 1, 1, 0);
         Error_Checking_Disable.configure(this, 1, 11, "RW", 0, 1'b0, 1, 1, 0);
         Input_Port_Enable.configure(this, 1, 10, "RW", 0, 1'b0, 1, 1, 0);
         Output_Port_Enable.configure(this, 1, 9, "RW", 0, 1'b0, 1, 1, 0);
         Port_Disable.configure(this, 1, 8, "RW", 0, 1'b0, 1, 1, 0);
         Port_Width_Override.configure(this, 3, 5, "RO", 0, 3'b000, 1, 0, 0);
         Initialized_Port_Width.configure(this, 3, 2, "RW", 0, 3'b000, 1, 1, 0);
         Port_Width_Support.configure(this, 2, 0, "RO", 0, 2'b00, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Lane_11_Status_3_CSR_reg
   // 
   // Status 3 Register
   //--------------------------------------------------------------------

   class Lane_11_Status_3_CSR_reg extends uvm_reg;
      `uvm_object_utils(Lane_11_Status_3_CSR_reg)

      uvm_reg_field Reserved; 
      uvm_reg_field LP_State_Control_Reserved; 
      uvm_reg_field LP_Lane_Entering_Silence; 
      uvm_reg_field LP_Port_Entering_Silence; 
      uvm_reg_field LP_Retraining; 
      uvm_reg_field LP_Retrain_Ready; 
      uvm_reg_field LP_Retrain_Grant; 
      uvm_reg_field LP_Transmit_Equalizer_Status; 
      uvm_reg_field LP_Transmit_Equalizer_Command; 
      uvm_reg_field LP_Transmit_Equalizer_Tap; 
      uvm_reg_field LP_Transmit_SC_Sequences; 
      uvm_reg_field LP_Transmit_Width_Request_Pending; 
      uvm_reg_field LP_Transmit_Width_Request; 


      // Function: new
      // 
      function new(string name = "Lane_11_Status_3_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         LP_State_Control_Reserved = uvm_reg_field::type_id::create("LP_State_Control_Reserved");
         LP_Lane_Entering_Silence = uvm_reg_field::type_id::create("LP_Lane_Entering_Silence");
         LP_Port_Entering_Silence = uvm_reg_field::type_id::create("LP_Port_Entering_Silence");
         LP_Retraining = uvm_reg_field::type_id::create("LP_Retraining");
         LP_Retrain_Ready = uvm_reg_field::type_id::create("LP_Retrain_Ready");
         LP_Retrain_Grant = uvm_reg_field::type_id::create("LP_Retrain_Grant");
         LP_Transmit_Equalizer_Status = uvm_reg_field::type_id::create("LP_Transmit_Equalizer_Status");
         LP_Transmit_Equalizer_Command = uvm_reg_field::type_id::create("LP_Transmit_Equalizer_Command");
         LP_Transmit_Equalizer_Tap = uvm_reg_field::type_id::create("LP_Transmit_Equalizer_Tap");
         LP_Transmit_SC_Sequences = uvm_reg_field::type_id::create("LP_Transmit_SC_Sequences");
         LP_Transmit_Width_Request_Pending = uvm_reg_field::type_id::create("LP_Transmit_Width_Request_Pending");
         LP_Transmit_Width_Request = uvm_reg_field::type_id::create("LP_Transmit_Width_Request");

         Reserved.configure(this, 4, 28, "RO", 0, 4'h0, 1, 0, 0);
         LP_State_Control_Reserved.configure(this, 8, 20, "RO", 0, 8'h00, 1, 0, 0);
         LP_Lane_Entering_Silence.configure(this, 1, 19, "RO", 0, 1'b0, 1, 0, 0);
         LP_Port_Entering_Silence.configure(this, 1, 18, "RO", 0, 1'b0, 1, 0, 0);
         LP_Retraining.configure(this, 1, 17, "RO", 0, 1'b0, 1, 0, 0);
         LP_Retrain_Ready.configure(this, 1, 16, "RO", 0, 1'b0, 1, 0, 0);
         LP_Retrain_Grant.configure(this, 1, 15, "RO", 0, 1'b0, 1, 0, 0);
         LP_Transmit_Equalizer_Status.configure(this, 3, 12, "RO", 0, 3'b000, 1, 0, 0);
         LP_Transmit_Equalizer_Command.configure(this, 3, 9, "RO", 0, 3'b000, 1, 0, 0);
         LP_Transmit_Equalizer_Tap.configure(this, 4, 5, "RO", 0, 4'h0, 1, 0, 0);
         LP_Transmit_SC_Sequences.configure(this, 1, 4, "RO", 0, 1'b0, 1, 0, 0);
         LP_Transmit_Width_Request_Pending.configure(this, 1, 3, "RO", 0, 1'b0, 1, 0, 0);
         LP_Transmit_Width_Request.configure(this, 3, 0, "RO", 0, 3'b000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_12_VoQ_Control_Status_Register_reg
   // 
   // VoQ_Control_Status_Register
   //--------------------------------------------------------------------

   class Port_12_VoQ_Control_Status_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_12_VoQ_Control_Status_Register_reg)

      rand uvm_reg_field RX_Port_Group_Size; 
      rand uvm_reg_field TX_Port_Group_Size; 
      uvm_reg_field Reserved_1; 
      rand uvm_reg_field Port_Group_Size_6_Supported; 
      rand uvm_reg_field Port_Group_Size_5_Supported; 
      rand uvm_reg_field Port_Group_Size_4_Supported; 
      rand uvm_reg_field Port_Group_Size_3_Supported; 
      rand uvm_reg_field Port_Group_Size_2_Supported; 
      rand uvm_reg_field Port_Group_Size_1_Supported; 
      rand uvm_reg_field Port_Group_Size_0_Supported; 
      rand uvm_reg_field Enable_VoQ_Backpressure_Per_VC_Transmission; 
      rand uvm_reg_field Port_XOFF; 
      rand uvm_reg_field Enable_VoQ_Symbol_Participation; 
      rand uvm_reg_field Enable_VoQ_Symbol_Genreation; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field VoQ_Backpressure_Per_VC_Supported; 
      rand uvm_reg_field VoQ_Backpressure_Symbol_Reception_Supported; 
      rand uvm_reg_field VoQ_Backpressure_Symbol_Generation_Supported; 


      // Function: new
      // 
      function new(string name = "Port_12_VoQ_Control_Status_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         RX_Port_Group_Size = uvm_reg_field::type_id::create("RX_Port_Group_Size");
         TX_Port_Group_Size = uvm_reg_field::type_id::create("TX_Port_Group_Size");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         Port_Group_Size_6_Supported = uvm_reg_field::type_id::create("Port_Group_Size_6_Supported");
         Port_Group_Size_5_Supported = uvm_reg_field::type_id::create("Port_Group_Size_5_Supported");
         Port_Group_Size_4_Supported = uvm_reg_field::type_id::create("Port_Group_Size_4_Supported");
         Port_Group_Size_3_Supported = uvm_reg_field::type_id::create("Port_Group_Size_3_Supported");
         Port_Group_Size_2_Supported = uvm_reg_field::type_id::create("Port_Group_Size_2_Supported");
         Port_Group_Size_1_Supported = uvm_reg_field::type_id::create("Port_Group_Size_1_Supported");
         Port_Group_Size_0_Supported = uvm_reg_field::type_id::create("Port_Group_Size_0_Supported");
         Enable_VoQ_Backpressure_Per_VC_Transmission = uvm_reg_field::type_id::create("Enable_VoQ_Backpressure_Per_VC_Transmission");
         Port_XOFF = uvm_reg_field::type_id::create("Port_XOFF");
         Enable_VoQ_Symbol_Participation = uvm_reg_field::type_id::create("Enable_VoQ_Symbol_Participation");
         Enable_VoQ_Symbol_Genreation = uvm_reg_field::type_id::create("Enable_VoQ_Symbol_Genreation");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         VoQ_Backpressure_Per_VC_Supported = uvm_reg_field::type_id::create("VoQ_Backpressure_Per_VC_Supported");
         VoQ_Backpressure_Symbol_Reception_Supported = uvm_reg_field::type_id::create("VoQ_Backpressure_Symbol_Reception_Supported");
         VoQ_Backpressure_Symbol_Generation_Supported = uvm_reg_field::type_id::create("VoQ_Backpressure_Symbol_Generation_Supported");

         RX_Port_Group_Size.configure(this, 3, 29, "RW", 0, 3'b000, 1, 1, 0);
         TX_Port_Group_Size.configure(this, 3, 26, "RW", 0, 3'b000, 1, 1, 0);
         Reserved_1.configure(this, 7, 19, "RO", 0, 7'b0000000, 1, 0, 0);
         Port_Group_Size_6_Supported.configure(this, 1, 18, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_5_Supported.configure(this, 1, 17, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_4_Supported.configure(this, 1, 16, "RW", 0, 1'b1, 1, 1, 0);
         Port_Group_Size_3_Supported.configure(this, 1, 15, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_2_Supported.configure(this, 1, 14, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_1_Supported.configure(this, 1, 13, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_0_Supported.configure(this, 1, 12, "RW", 0, 1'b1, 1, 1, 0);
         Enable_VoQ_Backpressure_Per_VC_Transmission.configure(this, 1, 11, "RW", 0, 1'b0, 1, 1, 0);
         Port_XOFF.configure(this, 1, 10, "RW", 0, 1'b0, 1, 1, 0);
         Enable_VoQ_Symbol_Participation.configure(this, 1, 9, "RW", 0, 1'b0, 1, 1, 0);
         Enable_VoQ_Symbol_Genreation.configure(this, 1, 8, "RW", 0, 1'b0, 1, 1, 0);
         Reserved.configure(this, 5, 3, "RO", 0, 5'b00000, 1, 0, 0);
         VoQ_Backpressure_Per_VC_Supported.configure(this, 1, 2, "RW", 0, 1'b0, 1, 1, 0);
         VoQ_Backpressure_Symbol_Reception_Supported.configure(this, 1, 1, "RW", 0, 1'b0, 1, 1, 0);
         VoQ_Backpressure_Symbol_Generation_Supported.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_0_Link_Maintenance_Request_CSR_reg
   // 
   // Link  Maintenance Request Register
   //--------------------------------------------------------------------

   class Port_0_Link_Maintenance_Request_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_0_Link_Maintenance_Request_CSR_reg)

      uvm_reg_field Command; 
      uvm_reg_field Reserved; 


      // Function: new
      // 
      function new(string name = "Port_0_Link_Maintenance_Request_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Command = uvm_reg_field::type_id::create("Command");
         Reserved = uvm_reg_field::type_id::create("Reserved");

         Command.configure(this, 3, 29, "RW", 0, 3'b000, 1, 1, 1);
         Reserved.configure(this, 29, 0, "RO", 0, 29'b00000000000000000000000000000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_11_Packet_Capture_4_CSR_reg
   // 
   // Packet Capture 4 Register
   //--------------------------------------------------------------------

   class Port_11_Packet_Capture_4_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_11_Packet_Capture_4_CSR_reg)

      rand uvm_reg_field Capture4; 


      // Function: new
      // 
      function new(string name = "Port_11_Packet_Capture_4_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture4 = uvm_reg_field::type_id::create("Capture4");

         Capture4.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_9_Timestamp_1_MSW_CSR_reg
   // 
   // Timestamp_1_MSW_Register
   //--------------------------------------------------------------------

   class Port_9_Timestamp_1_MSW_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_9_Timestamp_1_MSW_CSR_reg)

      uvm_reg_field MSW_Bits; 


      // Function: new
      // 
      function new(string name = "Port_9_Timestamp_1_MSW_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         MSW_Bits = uvm_reg_field::type_id::create("MSW_Bits");

         MSW_Bits.configure(this, 32, 0, "RO", 0, 32'h00000000, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_8_Packet_Control_Symbol_Capture_0_CSR_reg
   // 
   // Symbol Capture Register
   //--------------------------------------------------------------------

   class Port_8_Packet_Control_Symbol_Capture_0_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_8_Packet_Control_Symbol_Capture_0_CSR_reg)

      rand uvm_reg_field Capture0; 


      // Function: new
      // 
      function new(string name = "Port_8_Packet_Control_Symbol_Capture_0_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture0 = uvm_reg_field::type_id::create("Capture0");

         Capture0.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass


   //--------------------------------------------------------------------
   // Class: Lane_13_Status_3_CSR_reg
   // 
   // Status 3 Register
   //--------------------------------------------------------------------

   class Lane_13_Status_3_CSR_reg extends uvm_reg;
      `uvm_object_utils(Lane_13_Status_3_CSR_reg)

      uvm_reg_field Reserved; 
      uvm_reg_field LP_State_Control_Reserved; 
      uvm_reg_field LP_Lane_Entering_Silence; 
      uvm_reg_field LP_Port_Entering_Silence; 
      uvm_reg_field LP_Retraining; 
      uvm_reg_field LP_Retrain_Ready; 
      uvm_reg_field LP_Retrain_Grant; 
      uvm_reg_field LP_Transmit_Equalizer_Status; 
      uvm_reg_field LP_Transmit_Equalizer_Command; 
      uvm_reg_field LP_Transmit_Equalizer_Tap; 
      uvm_reg_field LP_Transmit_SC_Sequences; 
      uvm_reg_field LP_Transmit_Width_Request_Pending; 
      uvm_reg_field LP_Transmit_Width_Request; 


      // Function: new
      // 
      function new(string name = "Lane_13_Status_3_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         LP_State_Control_Reserved = uvm_reg_field::type_id::create("LP_State_Control_Reserved");
         LP_Lane_Entering_Silence = uvm_reg_field::type_id::create("LP_Lane_Entering_Silence");
         LP_Port_Entering_Silence = uvm_reg_field::type_id::create("LP_Port_Entering_Silence");
         LP_Retraining = uvm_reg_field::type_id::create("LP_Retraining");
         LP_Retrain_Ready = uvm_reg_field::type_id::create("LP_Retrain_Ready");
         LP_Retrain_Grant = uvm_reg_field::type_id::create("LP_Retrain_Grant");
         LP_Transmit_Equalizer_Status = uvm_reg_field::type_id::create("LP_Transmit_Equalizer_Status");
         LP_Transmit_Equalizer_Command = uvm_reg_field::type_id::create("LP_Transmit_Equalizer_Command");
         LP_Transmit_Equalizer_Tap = uvm_reg_field::type_id::create("LP_Transmit_Equalizer_Tap");
         LP_Transmit_SC_Sequences = uvm_reg_field::type_id::create("LP_Transmit_SC_Sequences");
         LP_Transmit_Width_Request_Pending = uvm_reg_field::type_id::create("LP_Transmit_Width_Request_Pending");
         LP_Transmit_Width_Request = uvm_reg_field::type_id::create("LP_Transmit_Width_Request");

         Reserved.configure(this, 4, 28, "RO", 0, 4'h0, 1, 0, 0);
         LP_State_Control_Reserved.configure(this, 8, 20, "RO", 0, 8'h00, 1, 0, 0);
         LP_Lane_Entering_Silence.configure(this, 1, 19, "RO", 0, 1'b0, 1, 0, 0);
         LP_Port_Entering_Silence.configure(this, 1, 18, "RO", 0, 1'b0, 1, 0, 0);
         LP_Retraining.configure(this, 1, 17, "RO", 0, 1'b0, 1, 0, 0);
         LP_Retrain_Ready.configure(this, 1, 16, "RO", 0, 1'b0, 1, 0, 0);
         LP_Retrain_Grant.configure(this, 1, 15, "RO", 0, 1'b0, 1, 0, 0);
         LP_Transmit_Equalizer_Status.configure(this, 3, 12, "RO", 0, 3'b000, 1, 0, 0);
         LP_Transmit_Equalizer_Command.configure(this, 3, 9, "RO", 0, 3'b000, 1, 0, 0);
         LP_Transmit_Equalizer_Tap.configure(this, 4, 5, "RO", 0, 4'h0, 1, 0, 0);
         LP_Transmit_SC_Sequences.configure(this, 1, 4, "RO", 0, 1'b0, 1, 0, 0);
         LP_Transmit_Width_Request_Pending.configure(this, 1, 3, "RO", 0, 1'b0, 1, 0, 0);
         LP_Transmit_Width_Request.configure(this, 3, 0, "RO", 0, 3'b000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_14_Inbound_ackID_CSR_reg
   // 
   // Inbound_Register
   //--------------------------------------------------------------------

   class Port_14_Inbound_ackID_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_14_Inbound_ackID_CSR_reg)

       rand uvm_reg_field Inbound_ackID; 
      uvm_reg_field Reserved; 


      // Function: new
      // 
      function new(string name = "Port_14_Inbound_ackID_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Inbound_ackID = uvm_reg_field::type_id::create("Inbound_ackID");
         Reserved = uvm_reg_field::type_id::create("Reserved");

       Inbound_ackID.configure(this, 12, 20, "RW", 0, 12'h000, 1, 1, 0);
         Reserved.configure(this, 20, 0, "RO", 0, 20'h00000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Lane_4_Status_0_CSR_reg
   // 
   // Status 0 Register
   //--------------------------------------------------------------------

   class Lane_4_Status_0_CSR_reg extends uvm_reg;
      `uvm_object_utils(Lane_4_Status_0_CSR_reg)

      uvm_reg_field Status2_7_CSRs_implemented; 
      uvm_reg_field Status1_CSR_implemented; 
      uvm_reg_field Reserved; 
      uvm_reg_field Rcvr_trained_state_change; 
      uvm_reg_field Lane_sync_state_change; 
      uvm_reg_field lane_8B_10B_decoding_errors; 
      uvm_reg_field Receiver_lane_ready; 
      uvm_reg_field Receiver_lane_sync; 
      uvm_reg_field Receiver_trained; 
      uvm_reg_field Receiver_input_inverted; 
      uvm_reg_field Receiver_type; 
      uvm_reg_field Transmitter_mode; 
      uvm_reg_field Transmitter_type; 
      uvm_reg_field Lane_Number; 
      uvm_reg_field Port_Number; 


      // Function: new
      // 
      function new(string name = "Lane_4_Status_0_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Status2_7_CSRs_implemented = uvm_reg_field::type_id::create("Status2_7_CSRs_implemented");
         Status1_CSR_implemented = uvm_reg_field::type_id::create("Status1_CSR_implemented");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Rcvr_trained_state_change = uvm_reg_field::type_id::create("Rcvr_trained_state_change");
         Lane_sync_state_change = uvm_reg_field::type_id::create("Lane_sync_state_change");
         lane_8B_10B_decoding_errors = uvm_reg_field::type_id::create("lane_8B_10B_decoding_errors");
         Receiver_lane_ready = uvm_reg_field::type_id::create("Receiver_lane_ready");
         Receiver_lane_sync = uvm_reg_field::type_id::create("Receiver_lane_sync");
         Receiver_trained = uvm_reg_field::type_id::create("Receiver_trained");
         Receiver_input_inverted = uvm_reg_field::type_id::create("Receiver_input_inverted");
         Receiver_type = uvm_reg_field::type_id::create("Receiver_type");
         Transmitter_mode = uvm_reg_field::type_id::create("Transmitter_mode");
         Transmitter_type = uvm_reg_field::type_id::create("Transmitter_type");
         Lane_Number = uvm_reg_field::type_id::create("Lane_Number");
         Port_Number = uvm_reg_field::type_id::create("Port_Number");

         Status2_7_CSRs_implemented.configure(this, 3, 29, "RO", 0, 3'b000, 1, 0, 0);
         Status1_CSR_implemented.configure(this, 1, 28, "RO", 0, 1'b0, 1, 0, 0);
         Reserved.configure(this, 2, 26, "RO", 0, 2'b00, 1, 0, 0);
         Rcvr_trained_state_change.configure(this, 1, 25, "RO", 0, 1'b0, 1, 0, 0);
         Lane_sync_state_change.configure(this, 1, 24, "RO", 0, 1'b0, 1, 0, 0);
         lane_8B_10B_decoding_errors.configure(this, 4, 20, "RO", 0, 4'h0, 1, 0, 0);
         Receiver_lane_ready.configure(this, 1, 19, "RO", 0, 1'b0, 1, 0, 0);
         Receiver_lane_sync.configure(this, 1, 18, "RO", 0, 1'b0, 1, 0, 0);
         Receiver_trained.configure(this, 1, 17, "RO", 0, 1'b0, 1, 0, 0);
         Receiver_input_inverted.configure(this, 1, 16, "RO", 0, 1'b0, 1, 0, 0);
         Receiver_type.configure(this, 2, 14, "RO", 0, 2'b00, 1, 0, 0);
         Transmitter_mode.configure(this, 1, 13, "RO", 0, 1'b0, 1, 0, 0);
         Transmitter_type.configure(this, 1, 12, "RO", 0, 1'b0, 1, 0, 0);
         Lane_Number.configure(this, 4, 8, "RO", 0, 4'h0, 1, 0, 0);
         Port_Number.configure(this, 8, 0, "RO", 0, 8'h00, 1, 0, 1);
      endfunction
   endclass

   //--------------------------------------------------------------------
   // Class: Port_13_Local_ackID_CSR_reg
   // 
   // ackID Register
   //--------------------------------------------------------------------

   class Port_13_Local_ackID_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_13_Local_ackID_CSR_reg)

      rand uvm_reg_field Outbound_ackID; 
      uvm_reg_field Reserved_2; 
      uvm_reg_field Outstanding_ackID; 
      uvm_reg_field Reserved_1; 
      rand uvm_reg_field Inbound_ackID; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Clr_outstanding_ackID; 


      // Function: new
      // 
      function new(string name = "Port_13_Local_ackID_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Outbound_ackID = uvm_reg_field::type_id::create("Outbound_ackID");
         Reserved_2 = uvm_reg_field::type_id::create("Reserved_2");
         Outstanding_ackID = uvm_reg_field::type_id::create("Outstanding_ackID");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         Inbound_ackID = uvm_reg_field::type_id::create("Inbound_ackID");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Clr_outstanding_ackID = uvm_reg_field::type_id::create("Clr_outstanding_ackID");

         Outbound_ackID.configure(this, 6, 26, "RW", 0, 6'b000000, 1, 1, 0);
         Reserved_2.configure(this, 2, 24, "RO", 0, 2'b00, 1, 0, 0);
         Outstanding_ackID.configure(this, 6, 18, "RW", 0, 6'b000000, 1, 1, 0);
         Reserved_1.configure(this, 10, 8, "RO", 0, 10'b0000000000, 1, 0, 0);
         Inbound_ackID.configure(this, 6, 2, "RW", 0, 6'b000000, 1, 1, 0);
         Reserved.configure(this, 1, 1, "RO", 0, 1'b0, 1, 0, 0);
         Clr_outstanding_ackID.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_12_Timestamp_0_LSW_CSR_reg
   // 
   // Timestamp_0_LSW_Register
   //--------------------------------------------------------------------

   class Port_12_Timestamp_0_LSW_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_12_Timestamp_0_LSW_CSR_reg)

      uvm_reg_field LSW_Bits; 


      // Function: new
      // 
      function new(string name = "Port_12_Timestamp_0_LSW_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         LSW_Bits = uvm_reg_field::type_id::create("LSW_Bits");

         LSW_Bits.configure(this, 32, 0, "RO", 0, 32'h00000000, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Local_Configuration_Space_Base_Address_0_CSR_reg
   // 
   // Base address 0 Register
   //--------------------------------------------------------------------

   class Local_Configuration_Space_Base_Address_0_CSR_reg extends uvm_reg;
      `uvm_object_utils(Local_Configuration_Space_Base_Address_0_CSR_reg)

      rand uvm_reg_field LCSBA; 
      uvm_reg_field Reserved; 
      `ifdef ADDR_MODE
      typedef enum {SRIO_ADDR_34,SRIO_ADDR_50,SRIO_ADDR_66} address_mode; 
      address_mode addr_mode = `ADDR_MODE;
      `endif

      // Function: new
      // 
      function new(string name = "Local_Configuration_Space_Base_Address_0_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         LCSBA = uvm_reg_field::type_id::create("LCSBA");
         Reserved = uvm_reg_field::type_id::create("Reserved");
       `ifdef ADDR_MODE
       if(addr_mode == SRIO_ADDR_50)
         LCSBA.configure(this, 15, 17, "RW", 0, 15'b0000000000000, 1, 1, 0);
       else 
         LCSBA.configure(this, 15, 17, "RO", 0, 15'b0000000000000, 1, 1, 0);
         Reserved.configure(this, 17, 0, "RO", 0, 17'b00000000000000000, 1, 1, 0);
       `else
         LCSBA.configure(this, 31, 1, "RW", 0, 31'b0000000000000000000000000000000, 1, 1, 0);
         Reserved.configure(this, 1, 0, "RO", 0, 1'b0, 1, 0, 0);
       `endif
       
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_7_Timestamp_0_MSW_CSR_reg
   // 
   // Timestamp_0_MSW_Register
   //--------------------------------------------------------------------

   class Port_7_Timestamp_0_MSW_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_7_Timestamp_0_MSW_CSR_reg)

      uvm_reg_field MSW_Bits; 


      // Function: new
      // 
      function new(string name = "Port_7_Timestamp_0_MSW_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         MSW_Bits = uvm_reg_field::type_id::create("MSW_Bits");

         MSW_Bits.configure(this, 32, 0, "RO", 0, 32'h00000000, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_13_Timestamp_Generator_Synchronization_CSR_reg
   // 
   // Timestamp_Generator_Synchronization_Register
   //--------------------------------------------------------------------

   class Port_13_Timestamp_Generator_Synchronization_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_13_Timestamp_Generator_Synchronization_CSR_reg)

      rand uvm_reg_field Asymmetry; 
      rand uvm_reg_field TX_Has_Lowwer_Latency; 
      uvm_reg_field Reserved_1; 
      rand uvm_reg_field Port_Opening_Mode; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Auto_Update_Link_Partner_Timestamp_Generators; 
      rand uvm_reg_field Disable_Clock_Compensation_Sequence; 
      rand uvm_reg_field Accept_Timestamps; 


      // Function: new
      // 
      function new(string name = "Port_13_Timestamp_Generator_Synchronization_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Asymmetry = uvm_reg_field::type_id::create("Asymmetry");
         TX_Has_Lowwer_Latency = uvm_reg_field::type_id::create("TX_Has_Lowwer_Latency");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         Port_Opening_Mode = uvm_reg_field::type_id::create("Port_Opening_Mode");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Auto_Update_Link_Partner_Timestamp_Generators = uvm_reg_field::type_id::create("Auto_Update_Link_Partner_Timestamp_Generators");
         Disable_Clock_Compensation_Sequence = uvm_reg_field::type_id::create("Disable_Clock_Compensation_Sequence");
         Accept_Timestamps = uvm_reg_field::type_id::create("Accept_Timestamps");

         Asymmetry.configure(this, 12, 20, "RW", 0, 12'h000, 1, 1, 0);
         TX_Has_Lowwer_Latency.configure(this, 1, 19, "RW", 0, 1'b0, 1, 1, 0);
         Reserved_1.configure(this, 11, 8, "RO", 0, 11'b00000000000, 1, 0, 0);
         Port_Opening_Mode.configure(this, 2, 6, "RW", 0, 2'b00, 1, 1, 0);
         Reserved.configure(this, 3, 3, "RO", 0, 3'b000, 1, 0, 0);
         Auto_Update_Link_Partner_Timestamp_Generators.configure(this, 1, 2, "RW", 0, 1'b0, 1, 1, 0);
         Disable_Clock_Compensation_Sequence.configure(this, 1, 1, "RW", 0, 1'b0, 1, 1, 0);
         Accept_Timestamps.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_1_Inbound_ackID_CSR_reg
   // 
   // Inbound_Register
   //--------------------------------------------------------------------

   class Port_1_Inbound_ackID_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_1_Inbound_ackID_CSR_reg)

      rand uvm_reg_field Inbound_ackID;  
      uvm_reg_field Reserved; 


      // Function: new
      // 
      function new(string name = "Port_1_Inbound_ackID_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Inbound_ackID = uvm_reg_field::type_id::create("Inbound_ackID");
         Reserved = uvm_reg_field::type_id::create("Reserved");

       Inbound_ackID.configure(this, 12, 20, "RW", 0, 12'h000, 1, 1, 0);
         Reserved.configure(this, 20, 0, "RO", 0, 20'h00000, 1, 0, 0);
      endfunction
   endclass


   //--------------------------------------------------------------------
   // Class: Port_6_VC_Control_and_Status_Register_reg
   // 
   // CSR Register
   //--------------------------------------------------------------------

   class Port_6_VC_Control_and_Status_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_6_VC_Control_and_Status_Register_reg)

      rand uvm_reg_field VCs_Enable; 
      uvm_reg_field VCs_Support; 
      rand uvm_reg_field CT_Mode; 
      rand uvm_reg_field VC_Refresh_Interval; 


      // Function: new
      // 
      function new(string name = "Port_6_VC_Control_and_Status_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         VCs_Enable = uvm_reg_field::type_id::create("VCs_Enable");
         VCs_Support = uvm_reg_field::type_id::create("VCs_Support");
         CT_Mode = uvm_reg_field::type_id::create("CT_Mode");
         VC_Refresh_Interval = uvm_reg_field::type_id::create("VC_Refresh_Interval");

         VCs_Enable.configure(this, 8, 24, "RW", 0, 8'h00, 1, 1, 1);
         VCs_Support.configure(this, 8, 16, "RO", 0, 8'h00, 1, 0, 1);
         CT_Mode.configure(this, 8, 8, "RW", 0, 8'h00, 1, 1, 1);
         VC_Refresh_Interval.configure(this, 8, 0, "RW", 0, 8'h00, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_0_Local_ackID_CSR_reg
   // 
   // ackID Register
   //--------------------------------------------------------------------

   class Port_0_Local_ackID_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_0_Local_ackID_CSR_reg)

      rand uvm_reg_field Outbound_ackID; 
      uvm_reg_field Reserved_2; 
      uvm_reg_field Outstanding_ackID; 
      uvm_reg_field Reserved_1; 
      rand uvm_reg_field Inbound_ackID; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Clr_outstanding_ackID; 


      // Function: new
      // 
      function new(string name = "Port_0_Local_ackID_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Outbound_ackID = uvm_reg_field::type_id::create("Outbound_ackID");
         Reserved_2 = uvm_reg_field::type_id::create("Reserved_2");
         Outstanding_ackID = uvm_reg_field::type_id::create("Outstanding_ackID");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         Inbound_ackID = uvm_reg_field::type_id::create("Inbound_ackID");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Clr_outstanding_ackID = uvm_reg_field::type_id::create("Clr_outstanding_ackID");

         Outbound_ackID.configure(this, 6, 26, "RW", 0, 6'b000000, 1, 1, 0);
         Reserved_2.configure(this, 2, 24, "RO", 0, 2'b00, 1, 0, 0);
         Outstanding_ackID.configure(this, 6, 18, "RW", 0, 6'b000000, 1, 1, 0);
         Reserved_1.configure(this, 10, 8, "RO", 0, 10'b0000000000, 1, 0, 0);
         Inbound_ackID.configure(this, 6, 2, "RW", 0, 6'b000000, 1, 1, 0);
         Reserved.configure(this, 1, 1, "RO", 0, 1'b0, 1, 0, 0);
         Clr_outstanding_ackID.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_7_Timestamp_Generator_Synchronization_CSR_reg
   // 
   // Timestamp_Generator_Synchronization_Register
   //--------------------------------------------------------------------

   class Port_7_Timestamp_Generator_Synchronization_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_7_Timestamp_Generator_Synchronization_CSR_reg)

      rand uvm_reg_field Asymmetry; 
      rand uvm_reg_field TX_Has_Lowwer_Latency; 
      uvm_reg_field Reserved_1; 
      rand uvm_reg_field Port_Opening_Mode; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Auto_Update_Link_Partner_Timestamp_Generators; 
      rand uvm_reg_field Disable_Clock_Compensation_Sequence; 
      rand uvm_reg_field Accept_Timestamps; 


      // Function: new
      // 
      function new(string name = "Port_7_Timestamp_Generator_Synchronization_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Asymmetry = uvm_reg_field::type_id::create("Asymmetry");
         TX_Has_Lowwer_Latency = uvm_reg_field::type_id::create("TX_Has_Lowwer_Latency");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         Port_Opening_Mode = uvm_reg_field::type_id::create("Port_Opening_Mode");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Auto_Update_Link_Partner_Timestamp_Generators = uvm_reg_field::type_id::create("Auto_Update_Link_Partner_Timestamp_Generators");
         Disable_Clock_Compensation_Sequence = uvm_reg_field::type_id::create("Disable_Clock_Compensation_Sequence");
         Accept_Timestamps = uvm_reg_field::type_id::create("Accept_Timestamps");

         Asymmetry.configure(this, 12, 20, "RW", 0, 12'h000, 1, 1, 0);
         TX_Has_Lowwer_Latency.configure(this, 1, 19, "RW", 0, 1'b0, 1, 1, 0);
         Reserved_1.configure(this, 11, 8, "RO", 0, 11'b00000000000, 1, 0, 0);
         Port_Opening_Mode.configure(this, 2, 6, "RW", 0, 2'b00, 1, 1, 0);
         Reserved.configure(this, 3, 3, "RO", 0, 3'b000, 1, 0, 0);
         Auto_Update_Link_Partner_Timestamp_Generators.configure(this, 1, 2, "RW", 0, 1'b0, 1, 1, 0);
         Disable_Clock_Compensation_Sequence.configure(this, 1, 1, "RW", 0, 1'b0, 1, 1, 0);
         Accept_Timestamps.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_2_Link_Maintenance_Request_CSR_reg
   // 
   // Link  Maintenance Request Register
   //--------------------------------------------------------------------

   class Port_2_Link_Maintenance_Request_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_2_Link_Maintenance_Request_CSR_reg)

      uvm_reg_field Command; 
      uvm_reg_field Reserved; 


      // Function: new
      // 
      function new(string name = "Port_2_Link_Maintenance_Request_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Command = uvm_reg_field::type_id::create("Command");
         Reserved = uvm_reg_field::type_id::create("Reserved");

         Command.configure(this, 3, 29, "RW", 0, 3'b000, 1, 1, 1);
         Reserved.configure(this, 29, 0, "RO", 0, 29'b00000000000000000000000000000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_8_Packet_Capture_3_CSR_reg
   // 
   // Packet Capture 3 Register
   //--------------------------------------------------------------------

   class Port_8_Packet_Capture_3_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_8_Packet_Capture_3_CSR_reg)

      rand uvm_reg_field Capture3; 


      // Function: new
      // 
      function new(string name = "Port_8_Packet_Capture_3_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture3 = uvm_reg_field::type_id::create("Capture3");

         Capture3.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_13_Timestamp_Synchronization_Command_CSR_reg
   // 
   // Timestamp_Synchronization_Command_CSR_Register
   //--------------------------------------------------------------------

   class Port_13_Timestamp_Synchronization_Command_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_13_Timestamp_Synchronization_Command_CSR_reg)

      rand uvm_reg_field Command; 
      uvm_reg_field Reserved_2; 
      rand uvm_reg_field Send_Timestamp; 
      uvm_reg_field Reserved_1; 
      rand uvm_reg_field Send_Zero_Timestamp; 
      uvm_reg_field Reserved; 


      // Function: new
      // 
      function new(string name = "Port_13_Timestamp_Synchronization_Command_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Command = uvm_reg_field::type_id::create("Command");
         Reserved_2 = uvm_reg_field::type_id::create("Reserved_2");
         Send_Timestamp = uvm_reg_field::type_id::create("Send_Timestamp");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         Send_Zero_Timestamp = uvm_reg_field::type_id::create("Send_Zero_Timestamp");
         Reserved = uvm_reg_field::type_id::create("Reserved");

         Command.configure(this, 3, 29, "RW", 0, 3'b000, 1, 1, 0);
         Reserved_2.configure(this, 1, 28, "RO", 0, 1'b0, 1, 0, 0);
         Send_Timestamp.configure(this, 1, 27, "RW", 0, 1'b0, 1, 1, 0);
         Reserved_1.configure(this, 3, 24, "RO", 0, 3'b000, 1, 0, 0);
         Send_Zero_Timestamp.configure(this, 1, 23, "RW", 0, 1'b0, 1, 1, 0);
         Reserved.configure(this, 23, 0, "RO", 0, 23'b00000000000000000000000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_3_VoQ_Control_Status_Register_reg
   // 
   // VoQ_Control_Status_Register
   //--------------------------------------------------------------------

   class Port_3_VoQ_Control_Status_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_3_VoQ_Control_Status_Register_reg)

      rand uvm_reg_field RX_Port_Group_Size; 
      rand uvm_reg_field TX_Port_Group_Size; 
      uvm_reg_field Reserved_1; 
      rand uvm_reg_field Port_Group_Size_6_Supported; 
      rand uvm_reg_field Port_Group_Size_5_Supported; 
      rand uvm_reg_field Port_Group_Size_4_Supported; 
      rand uvm_reg_field Port_Group_Size_3_Supported; 
      rand uvm_reg_field Port_Group_Size_2_Supported; 
      rand uvm_reg_field Port_Group_Size_1_Supported; 
      rand uvm_reg_field Port_Group_Size_0_Supported; 
      rand uvm_reg_field Enable_VoQ_Backpressure_Per_VC_Transmission; 
      rand uvm_reg_field Port_XOFF; 
      rand uvm_reg_field Enable_VoQ_Symbol_Participation; 
      rand uvm_reg_field Enable_VoQ_Symbol_Genreation; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field VoQ_Backpressure_Per_VC_Supported; 
      rand uvm_reg_field VoQ_Backpressure_Symbol_Reception_Supported; 
      rand uvm_reg_field VoQ_Backpressure_Symbol_Generation_Supported; 


      // Function: new
      // 
      function new(string name = "Port_3_VoQ_Control_Status_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         RX_Port_Group_Size = uvm_reg_field::type_id::create("RX_Port_Group_Size");
         TX_Port_Group_Size = uvm_reg_field::type_id::create("TX_Port_Group_Size");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         Port_Group_Size_6_Supported = uvm_reg_field::type_id::create("Port_Group_Size_6_Supported");
         Port_Group_Size_5_Supported = uvm_reg_field::type_id::create("Port_Group_Size_5_Supported");
         Port_Group_Size_4_Supported = uvm_reg_field::type_id::create("Port_Group_Size_4_Supported");
         Port_Group_Size_3_Supported = uvm_reg_field::type_id::create("Port_Group_Size_3_Supported");
         Port_Group_Size_2_Supported = uvm_reg_field::type_id::create("Port_Group_Size_2_Supported");
         Port_Group_Size_1_Supported = uvm_reg_field::type_id::create("Port_Group_Size_1_Supported");
         Port_Group_Size_0_Supported = uvm_reg_field::type_id::create("Port_Group_Size_0_Supported");
         Enable_VoQ_Backpressure_Per_VC_Transmission = uvm_reg_field::type_id::create("Enable_VoQ_Backpressure_Per_VC_Transmission");
         Port_XOFF = uvm_reg_field::type_id::create("Port_XOFF");
         Enable_VoQ_Symbol_Participation = uvm_reg_field::type_id::create("Enable_VoQ_Symbol_Participation");
         Enable_VoQ_Symbol_Genreation = uvm_reg_field::type_id::create("Enable_VoQ_Symbol_Genreation");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         VoQ_Backpressure_Per_VC_Supported = uvm_reg_field::type_id::create("VoQ_Backpressure_Per_VC_Supported");
         VoQ_Backpressure_Symbol_Reception_Supported = uvm_reg_field::type_id::create("VoQ_Backpressure_Symbol_Reception_Supported");
         VoQ_Backpressure_Symbol_Generation_Supported = uvm_reg_field::type_id::create("VoQ_Backpressure_Symbol_Generation_Supported");

         RX_Port_Group_Size.configure(this, 3, 29, "RW", 0, 3'b000, 1, 1, 0);
         TX_Port_Group_Size.configure(this, 3, 26, "RW", 0, 3'b000, 1, 1, 0);
         Reserved_1.configure(this, 7, 19, "RO", 0, 7'b0000000, 1, 0, 0);
         Port_Group_Size_6_Supported.configure(this, 1, 18, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_5_Supported.configure(this, 1, 17, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_4_Supported.configure(this, 1, 16, "RW", 0, 1'b1, 1, 1, 0);
         Port_Group_Size_3_Supported.configure(this, 1, 15, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_2_Supported.configure(this, 1, 14, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_1_Supported.configure(this, 1, 13, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_0_Supported.configure(this, 1, 12, "RW", 0, 1'b1, 1, 1, 0);
         Enable_VoQ_Backpressure_Per_VC_Transmission.configure(this, 1, 11, "RW", 0, 1'b0, 1, 1, 0);
         Port_XOFF.configure(this, 1, 10, "RW", 0, 1'b0, 1, 1, 0);
         Enable_VoQ_Symbol_Participation.configure(this, 1, 9, "RW", 0, 1'b0, 1, 1, 0);
         Enable_VoQ_Symbol_Genreation.configure(this, 1, 8, "RW", 0, 1'b0, 1, 1, 0);
         Reserved.configure(this, 5, 3, "RO", 0, 5'b00000, 1, 0, 0);
         VoQ_Backpressure_Per_VC_Supported.configure(this, 1, 2, "RW", 0, 1'b0, 1, 1, 0);
         VoQ_Backpressure_Symbol_Reception_Supported.configure(this, 1, 1, "RW", 0, 1'b0, 1, 1, 0);
         VoQ_Backpressure_Symbol_Generation_Supported.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_14_VC_Control_and_Status_Register_reg
   // 
   // CSR Register
   //--------------------------------------------------------------------

   class Port_14_VC_Control_and_Status_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_14_VC_Control_and_Status_Register_reg)

      rand uvm_reg_field VCs_Enable; 
      uvm_reg_field VCs_Support; 
      rand uvm_reg_field CT_Mode; 
      rand uvm_reg_field VC_Refresh_Interval; 


      // Function: new
      // 
      function new(string name = "Port_14_VC_Control_and_Status_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         VCs_Enable = uvm_reg_field::type_id::create("VCs_Enable");
         VCs_Support = uvm_reg_field::type_id::create("VCs_Support");
         CT_Mode = uvm_reg_field::type_id::create("CT_Mode");
         VC_Refresh_Interval = uvm_reg_field::type_id::create("VC_Refresh_Interval");

         VCs_Enable.configure(this, 8, 24, "RW", 0, 8'h00, 1, 1, 1);
         VCs_Support.configure(this, 8, 16, "RO", 0, 8'h00, 1, 0, 1);
         CT_Mode.configure(this, 8, 8, "RW", 0, 8'h00, 1, 1, 1);
         VC_Refresh_Interval.configure(this, 8, 0, "RW", 0, 8'h00, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_5_Timestamp_Synchronization_Command_CSR_reg
   // 
   // Timestamp_Synchronization_Command_CSR_Register
   //--------------------------------------------------------------------

   class Port_5_Timestamp_Synchronization_Command_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_5_Timestamp_Synchronization_Command_CSR_reg)

      rand uvm_reg_field Command; 
      uvm_reg_field Reserved_2; 
      rand uvm_reg_field Send_Timestamp; 
      uvm_reg_field Reserved_1; 
      rand uvm_reg_field Send_Zero_Timestamp; 
      uvm_reg_field Reserved; 


      // Function: new
      // 
      function new(string name = "Port_5_Timestamp_Synchronization_Command_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Command = uvm_reg_field::type_id::create("Command");
         Reserved_2 = uvm_reg_field::type_id::create("Reserved_2");
         Send_Timestamp = uvm_reg_field::type_id::create("Send_Timestamp");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         Send_Zero_Timestamp = uvm_reg_field::type_id::create("Send_Zero_Timestamp");
         Reserved = uvm_reg_field::type_id::create("Reserved");

         Command.configure(this, 3, 29, "RW", 0, 3'b000, 1, 1, 0);
         Reserved_2.configure(this, 1, 28, "RO", 0, 1'b0, 1, 0, 0);
         Send_Timestamp.configure(this, 1, 27, "RW", 0, 1'b0, 1, 1, 0);
         Reserved_1.configure(this, 3, 24, "RO", 0, 3'b000, 1, 0, 0);
         Send_Zero_Timestamp.configure(this, 1, 23, "RW", 0, 1'b0, 1, 1, 0);
         Reserved.configure(this, 23, 0, "RO", 0, 23'b00000000000000000000000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_15_Link_Maintenance_Request_CSR_reg
   // 
   // Link  Maintenance Request Register
   //--------------------------------------------------------------------

   class Port_15_Link_Maintenance_Request_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_15_Link_Maintenance_Request_CSR_reg)

      uvm_reg_field Command; 
      uvm_reg_field Reserved; 


      // Function: new
      // 
      function new(string name = "Port_15_Link_Maintenance_Request_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Command = uvm_reg_field::type_id::create("Command");
         Reserved = uvm_reg_field::type_id::create("Reserved");

         Command.configure(this, 3, 29, "RW", 0, 3'b000, 1, 1, 1);
         Reserved.configure(this, 29, 0, "RO", 0, 29'b00000000000000000000000000000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_7_Link_Timers_Control_CSR_reg
   // 
   // Link_Timers_Control_Register
   //--------------------------------------------------------------------

   class Port_7_Link_Timers_Control_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_7_Link_Timers_Control_CSR_reg)

      rand uvm_reg_field Emphasis_Command_Timeout; 
      rand uvm_reg_field CW_Training_Completion_Timer; 
      rand uvm_reg_field DME_Wait_Timer; 
      rand uvm_reg_field DME_Training_Completion_Timer; 


      // Function: new
      // 
      function new(string name = "Port_7_Link_Timers_Control_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Emphasis_Command_Timeout = uvm_reg_field::type_id::create("Emphasis_Command_Timeout");
         CW_Training_Completion_Timer = uvm_reg_field::type_id::create("CW_Training_Completion_Timer");
         DME_Wait_Timer = uvm_reg_field::type_id::create("DME_Wait_Timer");
         DME_Training_Completion_Timer = uvm_reg_field::type_id::create("DME_Training_Completion_Timer");

         Emphasis_Command_Timeout.configure(this, 8, 24, "RW", 0, 8'hff, 1, 1, 1);
         CW_Training_Completion_Timer.configure(this, 8, 16, "RW", 0, 8'h00, 1, 1, 1);
         DME_Wait_Timer.configure(this, 8, 8, "RW", 0, 8'h3f, 1, 1, 1);
         DME_Training_Completion_Timer.configure(this, 8, 0, "RW", 0, 8'h00, 1, 1, 1);
      endfunction
   endclass


   //--------------------------------------------------------------------
   // Class: Port_13_VC_Control_and_Status_Register_reg
   // 
   // CSR Register
   //--------------------------------------------------------------------

   class Port_13_VC_Control_and_Status_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_13_VC_Control_and_Status_Register_reg)

      rand uvm_reg_field VCs_Enable; 
      uvm_reg_field VCs_Support; 
      rand uvm_reg_field CT_Mode; 
      rand uvm_reg_field VC_Refresh_Interval; 


      // Function: new
      // 
      function new(string name = "Port_13_VC_Control_and_Status_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         VCs_Enable = uvm_reg_field::type_id::create("VCs_Enable");
         VCs_Support = uvm_reg_field::type_id::create("VCs_Support");
         CT_Mode = uvm_reg_field::type_id::create("CT_Mode");
         VC_Refresh_Interval = uvm_reg_field::type_id::create("VC_Refresh_Interval");

         VCs_Enable.configure(this, 8, 24, "RW", 0, 8'h00, 1, 1, 1);
         VCs_Support.configure(this, 8, 16, "RO", 0, 8'h00, 1, 0, 1);
         CT_Mode.configure(this, 8, 8, "RW", 0, 8'h00, 1, 1, 1);
         VC_Refresh_Interval.configure(this, 8, 0, "RW", 0, 8'h00, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_14_Initialization_Status_CSR_reg
   // 
   // Initialization_Status_Register
   //--------------------------------------------------------------------

   class Port_14_Initialization_Status_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_14_Initialization_Status_CSR_reg)

      uvm_reg_field Reserved_3; 
      uvm_reg_field Transmitted_Status_Control_Symbols; 
      uvm_reg_field Reserved_2; 
      uvm_reg_field Received_Status_Control_Symbols; 
      uvm_reg_field Port_Initialization_State_Machine; 
      uvm_reg_field Reserved_1; 
      uvm_reg_field x1_x2_Mode_Detection; 
      uvm_reg_field Reserved; 
      uvm_reg_field Lane_Alignment; 


      // Function: new
      // 
      function new(string name = "Port_14_Initialization_Status_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved_3 = uvm_reg_field::type_id::create("Reserved_3");
         Transmitted_Status_Control_Symbols = uvm_reg_field::type_id::create("Transmitted_Status_Control_Symbols");
         Reserved_2 = uvm_reg_field::type_id::create("Reserved_2");
         Received_Status_Control_Symbols = uvm_reg_field::type_id::create("Received_Status_Control_Symbols");
         Port_Initialization_State_Machine = uvm_reg_field::type_id::create("Port_Initialization_State_Machine");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         x1_x2_Mode_Detection = uvm_reg_field::type_id::create("x1_x2_Mode_Detection");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Lane_Alignment = uvm_reg_field::type_id::create("Lane_Alignment");

         Reserved_3.configure(this, 4, 28, "RO", 0, 4'h0, 1, 0, 0);
         Transmitted_Status_Control_Symbols.configure(this, 7, 21, "RO", 0, 7'b0000000, 1, 0, 0);
         Reserved_2.configure(this, 1, 20, "RO", 0, 1'b0, 1, 0, 0);
         Received_Status_Control_Symbols.configure(this, 4, 16, "RO", 0, 4'h0, 1, 0, 0);
         Port_Initialization_State_Machine.configure(this, 5, 11, "RO", 0, 5'b00000, 1, 0, 0);
         Reserved_1.configure(this, 1, 10, "RO", 0, 1'b0, 1, 0, 0);
         x1_x2_Mode_Detection.configure(this, 4, 6, "RO", 0, 4'h0, 1, 0, 0);
         Reserved.configure(this, 1, 5, "RO", 0, 1'b0, 1, 0, 0);
         Lane_Alignment.configure(this, 5, 0, "RO", 0, 5'b00000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_1_Timestamp_Generator_Synchronization_CSR_reg
   // 
   // Timestamp_Generator_Synchronization_Register
   //--------------------------------------------------------------------

   class Port_1_Timestamp_Generator_Synchronization_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_1_Timestamp_Generator_Synchronization_CSR_reg)

      rand uvm_reg_field Asymmetry; 
      rand uvm_reg_field TX_Has_Lowwer_Latency; 
      uvm_reg_field Reserved_1; 
      rand uvm_reg_field Port_Opening_Mode; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Auto_Update_Link_Partner_Timestamp_Generators; 
      rand uvm_reg_field Disable_Clock_Compensation_Sequence; 
      rand uvm_reg_field Accept_Timestamps; 


      // Function: new
      // 
      function new(string name = "Port_1_Timestamp_Generator_Synchronization_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Asymmetry = uvm_reg_field::type_id::create("Asymmetry");
         TX_Has_Lowwer_Latency = uvm_reg_field::type_id::create("TX_Has_Lowwer_Latency");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         Port_Opening_Mode = uvm_reg_field::type_id::create("Port_Opening_Mode");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Auto_Update_Link_Partner_Timestamp_Generators = uvm_reg_field::type_id::create("Auto_Update_Link_Partner_Timestamp_Generators");
         Disable_Clock_Compensation_Sequence = uvm_reg_field::type_id::create("Disable_Clock_Compensation_Sequence");
         Accept_Timestamps = uvm_reg_field::type_id::create("Accept_Timestamps");

         Asymmetry.configure(this, 12, 20, "RW", 0, 12'h000, 1, 1, 0);
         TX_Has_Lowwer_Latency.configure(this, 1, 19, "RW", 0, 1'b0, 1, 1, 0);
         Reserved_1.configure(this, 11, 8, "RO", 0, 11'b00000000000, 1, 0, 0);
         Port_Opening_Mode.configure(this, 2, 6, "RW", 0, 2'b00, 1, 1, 0);
         Reserved.configure(this, 3, 3, "RO", 0, 3'b000, 1, 0, 0);
         Auto_Update_Link_Partner_Timestamp_Generators.configure(this, 1, 2, "RW", 0, 1'b0, 1, 1, 0);
         Disable_Clock_Compensation_Sequence.configure(this, 1, 1, "RW", 0, 1'b0, 1, 1, 0);
         Accept_Timestamps.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_0_Outbound_ackID_CSR_reg
   // 
   // Outbound_Register
   //--------------------------------------------------------------------

   class Port_0_Outbound_ackID_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_0_Outbound_ackID_CSR_reg)

      rand uvm_reg_field Outbound_ackID; 
      uvm_reg_field Outstanding_ackID; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Clr_outstanding_ackID; 


      // Function: new
      // 
      function new(string name = "Port_0_Outbound_ackID_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Outbound_ackID = uvm_reg_field::type_id::create("Outbound_ackID");
         Outstanding_ackID = uvm_reg_field::type_id::create("Outstanding_ackID");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Clr_outstanding_ackID = uvm_reg_field::type_id::create("Clr_outstanding_ackID");

         Outbound_ackID.configure(this, 12, 20, "RW", 0, 12'h000, 1, 1, 0);
         Outstanding_ackID.configure(this, 12, 8, "RW", 0, 12'h000, 1, 1, 0);
         Reserved.configure(this, 7, 1, "RO", 0, 7'b0000000, 1, 0, 0);
         Clr_outstanding_ackID.configure(this, 1, 0, "W1C", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_14_Link_Timers_Control_3_CSR_reg
   // 
   // Link_Timers_Control_3_Register
   //--------------------------------------------------------------------

   class Port_14_Link_Timers_Control_3_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_14_Link_Timers_Control_3_CSR_reg)

      rand uvm_reg_field Keep_alive_Transmission_Interval; 
      rand uvm_reg_field Keep_alive_Transmission_Period; 
      rand uvm_reg_field Receive_Width_Command_Timeout; 
      rand uvm_reg_field Transmit_Width_Command_Timeout; 


      // Function: new
      // 
      function new(string name = "Port_14_Link_Timers_Control_3_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Keep_alive_Transmission_Interval = uvm_reg_field::type_id::create("Keep_alive_Transmission_Interval");
         Keep_alive_Transmission_Period = uvm_reg_field::type_id::create("Keep_alive_Transmission_Period");
         Receive_Width_Command_Timeout = uvm_reg_field::type_id::create("Receive_Width_Command_Timeout");
         Transmit_Width_Command_Timeout = uvm_reg_field::type_id::create("Transmit_Width_Command_Timeout");

         Keep_alive_Transmission_Interval.configure(this, 10, 22, "RW", 0, 10'b1111111111, 1, 1, 0);
         Keep_alive_Transmission_Period.configure(this, 6, 16, "RW", 0, 6'b000001, 1, 1, 0);
         Receive_Width_Command_Timeout.configure(this, 8, 8, "RW", 0, 8'h40, 1, 1, 1);
         Transmit_Width_Command_Timeout.configure(this, 8, 0, "RW", 0, 8'hff, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_5_Timestamp_Offset_CSR_reg
   // 
   // Timestamp_Offset_CSR_Register
   //--------------------------------------------------------------------

   class Port_5_Timestamp_Offset_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_5_Timestamp_Offset_CSR_reg)

      uvm_reg_field Reserved; 
      rand uvm_reg_field Offset; 


      // Function: new
      // 
      function new(string name = "Port_5_Timestamp_Offset_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Offset = uvm_reg_field::type_id::create("Offset");

         Reserved.configure(this, 16, 16, "RO", 0, 16'h0000, 1, 0, 1);
         Offset.configure(this, 16, 0, "RW", 0, 16'h0000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_12_Packet_Capture_2_CSR_reg
   // 
   // Packet Capture 2 Register
   //--------------------------------------------------------------------

   class Port_12_Packet_Capture_2_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_12_Packet_Capture_2_CSR_reg)

      rand uvm_reg_field Capture2; 


      // Function: new
      // 
      function new(string name = "Port_12_Packet_Capture_2_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture2 = uvm_reg_field::type_id::create("Capture2");

         Capture2.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_5_Initialization_Status_CSR_reg
   // 
   // Initialization_Status_Register
   //--------------------------------------------------------------------

   class Port_5_Initialization_Status_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_5_Initialization_Status_CSR_reg)

      uvm_reg_field Reserved_3; 
      uvm_reg_field Transmitted_Status_Control_Symbols; 
      uvm_reg_field Reserved_2; 
      uvm_reg_field Received_Status_Control_Symbols; 
      uvm_reg_field Port_Initialization_State_Machine; 
      uvm_reg_field Reserved_1; 
      uvm_reg_field x1_x2_Mode_Detection; 
      uvm_reg_field Reserved; 
      uvm_reg_field Lane_Alignment; 


      // Function: new
      // 
      function new(string name = "Port_5_Initialization_Status_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved_3 = uvm_reg_field::type_id::create("Reserved_3");
         Transmitted_Status_Control_Symbols = uvm_reg_field::type_id::create("Transmitted_Status_Control_Symbols");
         Reserved_2 = uvm_reg_field::type_id::create("Reserved_2");
         Received_Status_Control_Symbols = uvm_reg_field::type_id::create("Received_Status_Control_Symbols");
         Port_Initialization_State_Machine = uvm_reg_field::type_id::create("Port_Initialization_State_Machine");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         x1_x2_Mode_Detection = uvm_reg_field::type_id::create("x1_x2_Mode_Detection");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Lane_Alignment = uvm_reg_field::type_id::create("Lane_Alignment");

         Reserved_3.configure(this, 4, 28, "RO", 0, 4'h0, 1, 0, 0);
         Transmitted_Status_Control_Symbols.configure(this, 7, 21, "RO", 0, 7'b0000000, 1, 0, 0);
         Reserved_2.configure(this, 1, 20, "RO", 0, 1'b0, 1, 0, 0);
         Received_Status_Control_Symbols.configure(this, 4, 16, "RO", 0, 4'h0, 1, 0, 0);
         Port_Initialization_State_Machine.configure(this, 5, 11, "RO", 0, 5'b00000, 1, 0, 0);
         Reserved_1.configure(this, 1, 10, "RO", 0, 1'b0, 1, 0, 0);
         x1_x2_Mode_Detection.configure(this, 4, 6, "RO", 0, 4'h0, 1, 0, 0);
         Reserved.configure(this, 1, 5, "RO", 0, 1'b0, 1, 0, 0);
         Lane_Alignment.configure(this, 5, 0, "RO", 0, 5'b00000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_3_Timestamp_Generator_Synchronization_CSR_reg
   // 
   // Timestamp_Generator_Synchronization_Register
   //--------------------------------------------------------------------

   class Port_3_Timestamp_Generator_Synchronization_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_3_Timestamp_Generator_Synchronization_CSR_reg)

      rand uvm_reg_field Asymmetry; 
      rand uvm_reg_field TX_Has_Lowwer_Latency; 
      uvm_reg_field Reserved_1; 
      rand uvm_reg_field Port_Opening_Mode; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Auto_Update_Link_Partner_Timestamp_Generators; 
      rand uvm_reg_field Disable_Clock_Compensation_Sequence; 
      rand uvm_reg_field Accept_Timestamps; 


      // Function: new
      // 
      function new(string name = "Port_3_Timestamp_Generator_Synchronization_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Asymmetry = uvm_reg_field::type_id::create("Asymmetry");
         TX_Has_Lowwer_Latency = uvm_reg_field::type_id::create("TX_Has_Lowwer_Latency");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         Port_Opening_Mode = uvm_reg_field::type_id::create("Port_Opening_Mode");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Auto_Update_Link_Partner_Timestamp_Generators = uvm_reg_field::type_id::create("Auto_Update_Link_Partner_Timestamp_Generators");
         Disable_Clock_Compensation_Sequence = uvm_reg_field::type_id::create("Disable_Clock_Compensation_Sequence");
         Accept_Timestamps = uvm_reg_field::type_id::create("Accept_Timestamps");

         Asymmetry.configure(this, 12, 20, "RW", 0, 12'h000, 1, 1, 0);
         TX_Has_Lowwer_Latency.configure(this, 1, 19, "RW", 0, 1'b0, 1, 1, 0);
         Reserved_1.configure(this, 11, 8, "RO", 0, 11'b00000000000, 1, 0, 0);
         Port_Opening_Mode.configure(this, 2, 6, "RW", 0, 2'b00, 1, 1, 0);
         Reserved.configure(this, 3, 3, "RO", 0, 3'b000, 1, 0, 0);
         Auto_Update_Link_Partner_Timestamp_Generators.configure(this, 1, 2, "RW", 0, 1'b0, 1, 1, 0);
         Disable_Clock_Compensation_Sequence.configure(this, 1, 1, "RW", 0, 1'b0, 1, 1, 0);
         Accept_Timestamps.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_11_Timestamp_0_LSW_CSR_reg
   // 
   // Timestamp_0_LSW_Register
   //--------------------------------------------------------------------

   class Port_11_Timestamp_0_LSW_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_11_Timestamp_0_LSW_CSR_reg)

      uvm_reg_field LSW_Bits; 


      // Function: new
      // 
      function new(string name = "Port_11_Timestamp_0_LSW_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         LSW_Bits = uvm_reg_field::type_id::create("LSW_Bits");

         LSW_Bits.configure(this, 32, 0, "RO", 0, 32'h00000000, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_15_Power_Management_CSR_reg
   // 
   // Power_Management_Register
   //--------------------------------------------------------------------

   class Port_15_Power_Management_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_15_Power_Management_CSR_reg)

      uvm_reg_field Reserved; 
      uvm_reg_field Status_of_Link_Partner_Transmit_Width_Change; 
      rand uvm_reg_field Change_Link_Partner_Transmit_width; 
      uvm_reg_field Status_of_My_Transmit_Width_Change; 
      rand uvm_reg_field Change_My_Transmit_Width; 
      uvm_reg_field Reciever_Width_Status; 
      uvm_reg_field Transmit_Width_Status; 
      rand uvm_reg_field Asymmetric_Modes_Enabled; 
      uvm_reg_field Asymmetric_Modes_Supported; 


      // Function: new
      // 
      function new(string name = "Port_15_Power_Management_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Status_of_Link_Partner_Transmit_Width_Change = uvm_reg_field::type_id::create("Status_of_Link_Partner_Transmit_Width_Change");
         Change_Link_Partner_Transmit_width = uvm_reg_field::type_id::create("Change_Link_Partner_Transmit_width");
         Status_of_My_Transmit_Width_Change = uvm_reg_field::type_id::create("Status_of_My_Transmit_Width_Change");
         Change_My_Transmit_Width = uvm_reg_field::type_id::create("Change_My_Transmit_Width");
         Reciever_Width_Status = uvm_reg_field::type_id::create("Reciever_Width_Status");
         Transmit_Width_Status = uvm_reg_field::type_id::create("Transmit_Width_Status");
         Asymmetric_Modes_Enabled = uvm_reg_field::type_id::create("Asymmetric_Modes_Enabled");
         Asymmetric_Modes_Supported = uvm_reg_field::type_id::create("Asymmetric_Modes_Supported");

         Reserved.configure(this, 6, 26, "RO", 0, 6'b000000, 1, 0, 0);
         Status_of_Link_Partner_Transmit_Width_Change.configure(this, 2, 24, "RO", 0, 2'b00, 1, 0, 0);
         Change_Link_Partner_Transmit_width.configure(this, 3, 21, "WRC", 0, 3'b000, 1, 1, 0);
         Status_of_My_Transmit_Width_Change.configure(this, 2, 19, "RO", 0, 2'b00, 1, 0, 0);
         Change_My_Transmit_Width.configure(this, 3, 16, "WRC", 0, 3'b000, 1, 1, 0);
         Reciever_Width_Status.configure(this, 3, 13, "RO", 0, 3'b000, 1, 0, 0);
         Transmit_Width_Status.configure(this, 3, 10, "RO", 0, 3'b000, 1, 0, 0);
         Asymmetric_Modes_Enabled.configure(this, 5, 5, "RW", 0, 5'b00000, 1, 1, 0);
         Asymmetric_Modes_Supported.configure(this, 5, 0, "RO", 0, 5'b00000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_13_Packet_Capture_3_CSR_reg
   // 
   // Packet Capture 3 Register
   //--------------------------------------------------------------------

   class Port_13_Packet_Capture_3_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_13_Packet_Capture_3_CSR_reg)

      rand uvm_reg_field Capture3; 


      // Function: new
      // 
      function new(string name = "Port_13_Packet_Capture_3_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture3 = uvm_reg_field::type_id::create("Capture3");

         Capture3.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass


   //--------------------------------------------------------------------
   // Class: Port_11_Timestamp_1_MSW_CSR_reg
   // 
   // Timestamp_1_MSW_Register
   //--------------------------------------------------------------------

   class Port_11_Timestamp_1_MSW_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_11_Timestamp_1_MSW_CSR_reg)

      uvm_reg_field MSW_Bits; 


      // Function: new
      // 
      function new(string name = "Port_11_Timestamp_1_MSW_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         MSW_Bits = uvm_reg_field::type_id::create("MSW_Bits");

         MSW_Bits.configure(this, 32, 0, "RO", 0, 32'h00000000, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_6_Inbound_ackID_CSR_reg
   // 
   // Inbound_Register
   //--------------------------------------------------------------------

   class Port_6_Inbound_ackID_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_6_Inbound_ackID_CSR_reg)

      rand uvm_reg_field Inbound_ackID; 
      uvm_reg_field Reserved; 


      // Function: new
      // 
      function new(string name = "Port_6_Inbound_ackID_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Inbound_ackID = uvm_reg_field::type_id::create("Inbound_ackID");
         Reserved = uvm_reg_field::type_id::create("Reserved");

       Inbound_ackID.configure(this, 12, 20, "RW", 0, 12'h000, 1, 1, 0);
         Reserved.configure(this, 20, 0, "RO", 0, 20'h00000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_14_VoQ_Control_Status_Register_reg
   // 
   // VoQ_Control_Status_Register
   //--------------------------------------------------------------------

   class Port_14_VoQ_Control_Status_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_14_VoQ_Control_Status_Register_reg)

      rand uvm_reg_field RX_Port_Group_Size; 
      rand uvm_reg_field TX_Port_Group_Size; 
      uvm_reg_field Reserved_1; 
      rand uvm_reg_field Port_Group_Size_6_Supported; 
      rand uvm_reg_field Port_Group_Size_5_Supported; 
      rand uvm_reg_field Port_Group_Size_4_Supported; 
      rand uvm_reg_field Port_Group_Size_3_Supported; 
      rand uvm_reg_field Port_Group_Size_2_Supported; 
      rand uvm_reg_field Port_Group_Size_1_Supported; 
      rand uvm_reg_field Port_Group_Size_0_Supported; 
      rand uvm_reg_field Enable_VoQ_Backpressure_Per_VC_Transmission; 
      rand uvm_reg_field Port_XOFF; 
      rand uvm_reg_field Enable_VoQ_Symbol_Participation; 
      rand uvm_reg_field Enable_VoQ_Symbol_Genreation; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field VoQ_Backpressure_Per_VC_Supported; 
      rand uvm_reg_field VoQ_Backpressure_Symbol_Reception_Supported; 
      rand uvm_reg_field VoQ_Backpressure_Symbol_Generation_Supported; 


      // Function: new
      // 
      function new(string name = "Port_14_VoQ_Control_Status_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         RX_Port_Group_Size = uvm_reg_field::type_id::create("RX_Port_Group_Size");
         TX_Port_Group_Size = uvm_reg_field::type_id::create("TX_Port_Group_Size");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         Port_Group_Size_6_Supported = uvm_reg_field::type_id::create("Port_Group_Size_6_Supported");
         Port_Group_Size_5_Supported = uvm_reg_field::type_id::create("Port_Group_Size_5_Supported");
         Port_Group_Size_4_Supported = uvm_reg_field::type_id::create("Port_Group_Size_4_Supported");
         Port_Group_Size_3_Supported = uvm_reg_field::type_id::create("Port_Group_Size_3_Supported");
         Port_Group_Size_2_Supported = uvm_reg_field::type_id::create("Port_Group_Size_2_Supported");
         Port_Group_Size_1_Supported = uvm_reg_field::type_id::create("Port_Group_Size_1_Supported");
         Port_Group_Size_0_Supported = uvm_reg_field::type_id::create("Port_Group_Size_0_Supported");
         Enable_VoQ_Backpressure_Per_VC_Transmission = uvm_reg_field::type_id::create("Enable_VoQ_Backpressure_Per_VC_Transmission");
         Port_XOFF = uvm_reg_field::type_id::create("Port_XOFF");
         Enable_VoQ_Symbol_Participation = uvm_reg_field::type_id::create("Enable_VoQ_Symbol_Participation");
         Enable_VoQ_Symbol_Genreation = uvm_reg_field::type_id::create("Enable_VoQ_Symbol_Genreation");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         VoQ_Backpressure_Per_VC_Supported = uvm_reg_field::type_id::create("VoQ_Backpressure_Per_VC_Supported");
         VoQ_Backpressure_Symbol_Reception_Supported = uvm_reg_field::type_id::create("VoQ_Backpressure_Symbol_Reception_Supported");
         VoQ_Backpressure_Symbol_Generation_Supported = uvm_reg_field::type_id::create("VoQ_Backpressure_Symbol_Generation_Supported");

         RX_Port_Group_Size.configure(this, 3, 29, "RW", 0, 3'b000, 1, 1, 0);
         TX_Port_Group_Size.configure(this, 3, 26, "RW", 0, 3'b000, 1, 1, 0);
         Reserved_1.configure(this, 7, 19, "RO", 0, 7'b0000000, 1, 0, 0);
         Port_Group_Size_6_Supported.configure(this, 1, 18, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_5_Supported.configure(this, 1, 17, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_4_Supported.configure(this, 1, 16, "RW", 0, 1'b1, 1, 1, 0);
         Port_Group_Size_3_Supported.configure(this, 1, 15, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_2_Supported.configure(this, 1, 14, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_1_Supported.configure(this, 1, 13, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_0_Supported.configure(this, 1, 12, "RW", 0, 1'b1, 1, 1, 0);
         Enable_VoQ_Backpressure_Per_VC_Transmission.configure(this, 1, 11, "RW", 0, 1'b0, 1, 1, 0);
         Port_XOFF.configure(this, 1, 10, "RW", 0, 1'b0, 1, 1, 0);
         Enable_VoQ_Symbol_Participation.configure(this, 1, 9, "RW", 0, 1'b0, 1, 1, 0);
         Enable_VoQ_Symbol_Genreation.configure(this, 1, 8, "RW", 0, 1'b0, 1, 1, 0);
         Reserved.configure(this, 5, 3, "RO", 0, 5'b00000, 1, 0, 0);
         VoQ_Backpressure_Per_VC_Supported.configure(this, 1, 2, "RW", 0, 1'b0, 1, 1, 0);
         VoQ_Backpressure_Symbol_Reception_Supported.configure(this, 1, 1, "RW", 0, 1'b0, 1, 1, 0);
         VoQ_Backpressure_Symbol_Generation_Supported.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass


   //--------------------------------------------------------------------
   // Class: Port_N_Control_2_CSR_reg
   // 
   // Control 2 Register
   //--------------------------------------------------------------------

   class Port_N_Control_2_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_N_Control_2_CSR_reg)

      rand uvm_reg_field Remote_Transmit_Emphasis_Control_Enable; 
      rand uvm_reg_field Remote_Transmit_Emphasis_Control_Support; 
      rand uvm_reg_field Data_scrambling_disable; 
      rand uvm_reg_field Enable_Inactive_Lanes; 
      rand uvm_reg_field Gre10; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field port_10_3125GBaud_Enable; 
      uvm_reg_field port_10_3125GBaud_Support; 
      rand uvm_reg_field port_6_25GBaud_Enable; 
      uvm_reg_field port_6_25GBaud_Support; 
      rand uvm_reg_field port_5_0GBaud_Enable; 
      uvm_reg_field port_5_0GBaud_Support; 
      rand uvm_reg_field port_3_125GBaud_Enable; 
      uvm_reg_field port_3_125GBaud_Support; 
      rand uvm_reg_field port_2_5GBaud_Enable; 
      uvm_reg_field port_2_5GBaud_Support; 
      rand uvm_reg_field port_1_25GBaud_Enable; 
      uvm_reg_field port_1_25GBaud_Support; 
      rand uvm_reg_field Baudrate_Discovery_Enable; 
      uvm_reg_field Baudrate_Discovery_Support; 
      uvm_reg_field Selected_Baudrate; 
      bit brc3;


      // Function: new
      // 
      function new(string name = "Port_N_Control_2_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Remote_Transmit_Emphasis_Control_Enable = uvm_reg_field::type_id::create("Remote_Transmit_Emphasis_Control_Enable");
         Remote_Transmit_Emphasis_Control_Support = uvm_reg_field::type_id::create("Remote_Transmit_Emphasis_Control_Support");
         Data_scrambling_disable = uvm_reg_field::type_id::create("Data_scrambling_disable");
         Enable_Inactive_Lanes = uvm_reg_field::type_id::create("Enable_Inactive_Lanes");
         Gre10 = uvm_reg_field::type_id::create("Gre10");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         port_10_3125GBaud_Enable = uvm_reg_field::type_id::create("port_10_3125GBaud_Enable");
         port_10_3125GBaud_Support = uvm_reg_field::type_id::create("port_10_3125GBaud_Support");
         port_6_25GBaud_Enable = uvm_reg_field::type_id::create("port_6_25GBaud_Enable");
         port_6_25GBaud_Support = uvm_reg_field::type_id::create("port_6_25GBaud_Support");
         port_5_0GBaud_Enable = uvm_reg_field::type_id::create("port_5_0GBaud_Enable");
         port_5_0GBaud_Support = uvm_reg_field::type_id::create("port_5_0GBaud_Support");
         port_3_125GBaud_Enable = uvm_reg_field::type_id::create("port_3_125GBaud_Enable");
         port_3_125GBaud_Support = uvm_reg_field::type_id::create("port_3_125GBaud_Support");
         port_2_5GBaud_Enable = uvm_reg_field::type_id::create("port_2_5GBaud_Enable");
         port_2_5GBaud_Support = uvm_reg_field::type_id::create("port_2_5GBaud_Support");
         port_1_25GBaud_Enable = uvm_reg_field::type_id::create("port_1_25GBaud_Enable");
         port_1_25GBaud_Support = uvm_reg_field::type_id::create("port_1_25GBaud_Support");
         Baudrate_Discovery_Enable = uvm_reg_field::type_id::create("Baudrate_Discovery_Enable");
         Baudrate_Discovery_Support = uvm_reg_field::type_id::create("Baudrate_Discovery_Support");
         Selected_Baudrate = uvm_reg_field::type_id::create("Selected_Baudrate");

         Remote_Transmit_Emphasis_Control_Enable.configure(this, 1, 31, "RW", 0, 1'b0, 1, 1, 0);
         Remote_Transmit_Emphasis_Control_Support.configure(this, 1, 30, "RW", 0, 1'b0, 1, 1, 0);
         Data_scrambling_disable.configure(this, 1, 29, "RW", 0, 1'b0, 1, 1, 0);
         Enable_Inactive_Lanes.configure(this, 1, 28, "RW", 0, 1'b0, 1, 1, 0);
         if(brc3 == 1)
         Gre10.configure(this, 1, 27, "RW", 0, 1'b0, 1, 1, 0);
         else
         Gre10.configure(this, 1, 27, "RO", 0, 1'b0, 1, 0, 0);
         Reserved.configure(this, 9, 18, "RO", 0, 12'h000, 1, 0, 0);
         if(brc3 == 1)
         begin
         port_10_3125GBaud_Enable.configure(this, 1, 17, "RW", 0, 1'b0, 1, 1, 0);
         port_10_3125GBaud_Support.configure(this, 1, 16, "RO", 0, 1'b0, 1, 0, 0);
         end
         else
         begin
         port_10_3125GBaud_Enable.configure(this, 1, 17, "RO", 0, 1'b0, 1, 1, 0);
         port_10_3125GBaud_Support.configure(this, 1, 16, "RO", 0, 1'b0, 1, 0, 0);
         end
         port_6_25GBaud_Enable.configure(this, 1, 15, "RW", 0, 1'b0, 1, 1, 0);
         port_6_25GBaud_Support.configure(this, 1, 14, "RO", 0, 1'b0, 1, 0, 0);
         port_5_0GBaud_Enable.configure(this, 1, 13, "RW", 0, 1'b0, 1, 1, 0);
         port_5_0GBaud_Support.configure(this, 1, 12, "RO", 0, 1'b0, 1, 0, 0);
         port_3_125GBaud_Enable.configure(this, 1, 11, "RW", 0, 1'b0, 1, 1, 0);
         port_3_125GBaud_Support.configure(this, 1, 10, "RO", 0, 1'b0, 1, 0, 0);
         port_2_5GBaud_Enable.configure(this, 1, 9, "RW", 0, 1'b0, 1, 1, 0);
         port_2_5GBaud_Support.configure(this, 1, 8, "RO", 0, 1'b0, 1, 0, 0);
         port_1_25GBaud_Enable.configure(this, 1, 7, "RW", 0, 1'b0, 1, 1, 0);
         port_1_25GBaud_Support.configure(this, 1, 6, "RO", 0, 1'b0, 1, 0, 0);
         Baudrate_Discovery_Enable.configure(this, 1, 5, "RW", 0, 1'b0, 1, 1, 0);
         Baudrate_Discovery_Support.configure(this, 1, 4, "RO", 0, 1'b0, 1, 0, 0);
         Selected_Baudrate.configure(this, 4, 0, "RO", 0, 4'h0, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_15_Packet_Capture_4_CSR_reg
   // 
   // Packet Capture 4 Register
   //--------------------------------------------------------------------

   class Port_15_Packet_Capture_4_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_15_Packet_Capture_4_CSR_reg)

      rand uvm_reg_field Capture4; 


      // Function: new
      // 
      function new(string name = "Port_15_Packet_Capture_4_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture4 = uvm_reg_field::type_id::create("Capture4");

         Capture4.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Lane_15_Status_0_CSR_reg
   // 
   // Status 0 Register
   //--------------------------------------------------------------------

   class Lane_15_Status_0_CSR_reg extends uvm_reg;
      `uvm_object_utils(Lane_15_Status_0_CSR_reg)

      uvm_reg_field Status2_7_CSRs_implemented; 
      uvm_reg_field Status1_CSR_implemented; 
      uvm_reg_field Reserved; 
      uvm_reg_field Rcvr_trained_state_change; 
      uvm_reg_field Lane_sync_state_change; 
      uvm_reg_field lane_8B_10B_decoding_errors; 
      uvm_reg_field Receiver_lane_ready; 
      uvm_reg_field Receiver_lane_sync; 
      uvm_reg_field Receiver_trained; 
      uvm_reg_field Receiver_input_inverted; 
      uvm_reg_field Receiver_type; 
      uvm_reg_field Transmitter_mode; 
      uvm_reg_field Transmitter_type; 
      uvm_reg_field Lane_Number; 
      uvm_reg_field Port_Number; 


      // Function: new
      // 
      function new(string name = "Lane_15_Status_0_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Status2_7_CSRs_implemented = uvm_reg_field::type_id::create("Status2_7_CSRs_implemented");
         Status1_CSR_implemented = uvm_reg_field::type_id::create("Status1_CSR_implemented");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Rcvr_trained_state_change = uvm_reg_field::type_id::create("Rcvr_trained_state_change");
         Lane_sync_state_change = uvm_reg_field::type_id::create("Lane_sync_state_change");
         lane_8B_10B_decoding_errors = uvm_reg_field::type_id::create("lane_8B_10B_decoding_errors");
         Receiver_lane_ready = uvm_reg_field::type_id::create("Receiver_lane_ready");
         Receiver_lane_sync = uvm_reg_field::type_id::create("Receiver_lane_sync");
         Receiver_trained = uvm_reg_field::type_id::create("Receiver_trained");
         Receiver_input_inverted = uvm_reg_field::type_id::create("Receiver_input_inverted");
         Receiver_type = uvm_reg_field::type_id::create("Receiver_type");
         Transmitter_mode = uvm_reg_field::type_id::create("Transmitter_mode");
         Transmitter_type = uvm_reg_field::type_id::create("Transmitter_type");
         Lane_Number = uvm_reg_field::type_id::create("Lane_Number");
         Port_Number = uvm_reg_field::type_id::create("Port_Number");

         Status2_7_CSRs_implemented.configure(this, 3, 29, "RO", 0, 3'b000, 1, 0, 0);
         Status1_CSR_implemented.configure(this, 1, 28, "RO", 0, 1'b0, 1, 0, 0);
         Reserved.configure(this, 2, 26, "RO", 0, 2'b00, 1, 0, 0);
         Rcvr_trained_state_change.configure(this, 1, 25, "RO", 0, 1'b0, 1, 0, 0);
         Lane_sync_state_change.configure(this, 1, 24, "RO", 0, 1'b0, 1, 0, 0);
         lane_8B_10B_decoding_errors.configure(this, 4, 20, "RO", 0, 4'h0, 1, 0, 0);
         Receiver_lane_ready.configure(this, 1, 19, "RO", 0, 1'b0, 1, 0, 0);
         Receiver_lane_sync.configure(this, 1, 18, "RO", 0, 1'b0, 1, 0, 0);
         Receiver_trained.configure(this, 1, 17, "RO", 0, 1'b0, 1, 0, 0);
         Receiver_input_inverted.configure(this, 1, 16, "RO", 0, 1'b0, 1, 0, 0);
         Receiver_type.configure(this, 2, 14, "RO", 0, 2'b00, 1, 0, 0);
         Transmitter_mode.configure(this, 1, 13, "RO", 0, 1'b0, 1, 0, 0);
         Transmitter_type.configure(this, 1, 12, "RO", 0, 1'b0, 1, 0, 0);
         Lane_Number.configure(this, 4, 8, "RO", 0, 4'h0, 1, 0, 0);
         Port_Number.configure(this, 8, 0, "RO", 0, 8'h00, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_9_VC7_VC3_BW_Allocation_Register_reg
   // 
   // BW Allocation Register
   //--------------------------------------------------------------------

   class Port_9_VC7_VC3_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_9_VC7_VC3_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 


      // Function: new
      // 
      function new(string name = "Port_9_VC7_VC3_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");

         Bandwidth_Allocation.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_0_VC0_BW_Allocation_Register_reg
   // 
   // BW Register
   //--------------------------------------------------------------------

   class Port_0_VC0_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_0_VC0_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 
      rand uvm_reg_field Bandwidth_Reservation_Precision; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field VC0_BW_Res_Enable; 
      uvm_reg_field VC0_Bandwidth_Reservation_Capable; 


      // Function: new
      // 
      function new(string name = "Port_0_VC0_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");
         Bandwidth_Reservation_Precision = uvm_reg_field::type_id::create("Bandwidth_Reservation_Precision");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         VC0_BW_Res_Enable = uvm_reg_field::type_id::create("VC0_BW_Res_Enable");
         VC0_Bandwidth_Reservation_Capable = uvm_reg_field::type_id::create("VC0_Bandwidth_Reservation_Capable");

         Bandwidth_Allocation.configure(this, 16, 16, "RW", 0, 16'h0000, 1, 1, 1);
         Bandwidth_Reservation_Precision.configure(this, 8, 8, "RW", 0, 8'h00, 1, 1, 1);
         Reserved.configure(this, 6, 2, "RO", 0, 6'b000000, 1, 0, 0);
         VC0_BW_Res_Enable.configure(this, 1, 1, "RW", 0, 1'b0, 1, 1, 0);
         VC0_Bandwidth_Reservation_Capable.configure(this, 1, 0, "RO", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_0_Timestamp_Synchronization_Command_CSR_reg
   // 
   // Timestamp_Synchronization_Command_CSR_Register
   //--------------------------------------------------------------------

   class Port_0_Timestamp_Synchronization_Command_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_0_Timestamp_Synchronization_Command_CSR_reg)

      rand uvm_reg_field Command; 
      uvm_reg_field Reserved_2; 
      rand uvm_reg_field Send_Timestamp; 
      uvm_reg_field Reserved_1; 
      rand uvm_reg_field Send_Zero_Timestamp; 
      uvm_reg_field Reserved; 


      // Function: new
      // 
      function new(string name = "Port_0_Timestamp_Synchronization_Command_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Command = uvm_reg_field::type_id::create("Command");
         Reserved_2 = uvm_reg_field::type_id::create("Reserved_2");
         Send_Timestamp = uvm_reg_field::type_id::create("Send_Timestamp");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         Send_Zero_Timestamp = uvm_reg_field::type_id::create("Send_Zero_Timestamp");
         Reserved = uvm_reg_field::type_id::create("Reserved");

         Command.configure(this, 3, 29, "RW", 0, 3'b000, 1, 1, 0);
         Reserved_2.configure(this, 1, 28, "RO", 0, 1'b0, 1, 0, 0);
         Send_Timestamp.configure(this, 1, 27, "RW", 0, 1'b0, 1, 1, 0);
         Reserved_1.configure(this, 3, 24, "RO", 0, 3'b000, 1, 0, 0);
         Send_Zero_Timestamp.configure(this, 1, 23, "RW", 0, 1'b0, 1, 1, 0);
         Reserved.configure(this, 23, 0, "RO", 0, 23'b00000000000000000000000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_14_Auto_Update_Counter_CSR_reg
   // 
   // Auto_Update_Counter_CSR_Register
   //--------------------------------------------------------------------

   class Port_14_Auto_Update_Counter_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_14_Auto_Update_Counter_CSR_reg)

      rand uvm_reg_field Update_Period; 


      // Function: new
      // 
      function new(string name = "Port_14_Auto_Update_Counter_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Update_Period = uvm_reg_field::type_id::create("Update_Period");

         Update_Period.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_11_Link_Uninit_Discard_Timer_CSR_reg
   // 
   // Link_Uninit_Discard_Timer_CSR_Register
   //--------------------------------------------------------------------

   class Port_11_Link_Uninit_Discard_Timer_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_11_Link_Uninit_Discard_Timer_CSR_reg)

      uvm_reg_field Reserved; 
      rand uvm_reg_field Link_Uninit_Timeout; 


      // Function: new
      // 
      function new(string name = "Port_11_Link_Uninit_Discard_Timer_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Link_Uninit_Timeout = uvm_reg_field::type_id::create("Link_Uninit_Timeout");

         Reserved.configure(this, 8, 24, "RO", 0, 8'h00, 1, 0, 1);
         Link_Uninit_Timeout.configure(this, 24, 0, "RW", 0, 24'h000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_4_Packet_Capture_1_CSR_reg
   // 
   // Packet Capture 1 Register
   //--------------------------------------------------------------------

   class Port_4_Packet_Capture_1_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_4_Packet_Capture_1_CSR_reg)

      rand uvm_reg_field Capture1; 


      // Function: new
      // 
      function new(string name = "Port_4_Packet_Capture_1_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture1 = uvm_reg_field::type_id::create("Capture1");

         Capture1.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Lane_11_Status_2_CSR_reg
   // 
   // Status 2 Register
   //--------------------------------------------------------------------

   class Lane_11_Status_2_CSR_reg extends uvm_reg;
      `uvm_object_utils(Lane_11_Status_2_CSR_reg)

      uvm_reg_field Reserved; 
      uvm_reg_field LP_Change_Receiver_Width_Command_Negative_Acknowlege; 
      uvm_reg_field LP_Change_Receiver_Width_Command_Acknowlege; 
      uvm_reg_field LP_Change_Receiver_Width_Command; 
      uvm_reg_field LP_Lane_Trained; 
      uvm_reg_field LP_Receive_Lane_Ready; 
      uvm_reg_field LP_Receive_Lanes_Ready; 
      uvm_reg_field LP_Receive_Width; 
      uvm_reg_field LP_Transmit_1x_Mode; 
      uvm_reg_field LP_Port_Intialized; 
      uvm_reg_field LP_Asymmetric_mode_Enabled; 
      uvm_reg_field LP_Retraining_Enabled; 
      uvm_reg_field LP_Remort_Training_Support; 
      uvm_reg_field LP_Lane_Number; 
      uvm_reg_field LP_Port_Number; 


      // Function: new
      // 
      function new(string name = "Lane_11_Status_2_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         LP_Change_Receiver_Width_Command_Negative_Acknowlege = uvm_reg_field::type_id::create("LP_Change_Receiver_Width_Command_Negative_Acknowlege");
         LP_Change_Receiver_Width_Command_Acknowlege = uvm_reg_field::type_id::create("LP_Change_Receiver_Width_Command_Acknowlege");
         LP_Change_Receiver_Width_Command = uvm_reg_field::type_id::create("LP_Change_Receiver_Width_Command");
         LP_Lane_Trained = uvm_reg_field::type_id::create("LP_Lane_Trained");
         LP_Receive_Lane_Ready = uvm_reg_field::type_id::create("LP_Receive_Lane_Ready");
         LP_Receive_Lanes_Ready = uvm_reg_field::type_id::create("LP_Receive_Lanes_Ready");
         LP_Receive_Width = uvm_reg_field::type_id::create("LP_Receive_Width");
         LP_Transmit_1x_Mode = uvm_reg_field::type_id::create("LP_Transmit_1x_Mode");
         LP_Port_Intialized = uvm_reg_field::type_id::create("LP_Port_Intialized");
         LP_Asymmetric_mode_Enabled = uvm_reg_field::type_id::create("LP_Asymmetric_mode_Enabled");
         LP_Retraining_Enabled = uvm_reg_field::type_id::create("LP_Retraining_Enabled");
         LP_Remort_Training_Support = uvm_reg_field::type_id::create("LP_Remort_Training_Support");
         LP_Lane_Number = uvm_reg_field::type_id::create("LP_Lane_Number");
         LP_Port_Number = uvm_reg_field::type_id::create("LP_Port_Number");

         Reserved.configure(this, 2, 30, "RO", 0, 2'b00, 1, 0, 0);
         LP_Change_Receiver_Width_Command_Negative_Acknowlege.configure(this, 1, 29, "RO", 0, 1'b0, 1, 0, 0);
         LP_Change_Receiver_Width_Command_Acknowlege.configure(this, 1, 28, "RO", 0, 1'b0, 1, 0, 0);
         LP_Change_Receiver_Width_Command.configure(this, 3, 25, "RO", 0, 3'b000, 1, 0, 0);
         LP_Lane_Trained.configure(this, 1, 24, "RO", 0, 1'b0, 1, 0, 0);
         LP_Receive_Lane_Ready.configure(this, 1, 23, "RO", 0, 1'b0, 1, 0, 0);
         LP_Receive_Lanes_Ready.configure(this, 3, 20, "RO", 0, 3'b000, 1, 0, 0);
         LP_Receive_Width.configure(this, 3, 17, "RO", 0, 3'b000, 1, 0, 0);
         LP_Transmit_1x_Mode.configure(this, 1, 16, "RO", 0, 1'b0, 1, 0, 0);
         LP_Port_Intialized.configure(this, 1, 15, "RO", 0, 1'b0, 1, 0, 0);
         LP_Asymmetric_mode_Enabled.configure(this, 1, 14, "RO", 0, 1'b0, 1, 0, 0);
         LP_Retraining_Enabled.configure(this, 1, 13, "RO", 0, 1'b0, 1, 0, 0);
         LP_Remort_Training_Support.configure(this, 1, 12, "RO", 0, 1'b0, 1, 0, 0);
         LP_Lane_Number.configure(this, 4, 8, "RO", 0, 4'h0, 1, 0, 0);
         LP_Port_Number.configure(this, 8, 0, "RO", 0, 8'h00, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_10_Auto_Update_Counter_CSR_reg
   // 
   // Auto_Update_Counter_CSR_Register
   //--------------------------------------------------------------------

   class Port_10_Auto_Update_Counter_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_10_Auto_Update_Counter_CSR_reg)

      rand uvm_reg_field Update_Period; 


      // Function: new
      // 
      function new(string name = "Port_10_Auto_Update_Counter_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Update_Period = uvm_reg_field::type_id::create("Update_Period");

         Update_Period.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_8_Link_Timers_Control_2_CSR_reg
   // 
   // Link_Timers_Control_2_Register
   //--------------------------------------------------------------------

   class Port_8_Link_Timers_Control_2_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_8_Link_Timers_Control_2_CSR_reg)

      uvm_reg_field Reserved; 
      rand uvm_reg_field Recovery_Timer; 
      rand uvm_reg_field Discovery_Completion_Timer; 
      rand uvm_reg_field Retraining_Completion_Timer; 


      // Function: new
      // 
      function new(string name = "Port_8_Link_Timers_Control_2_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Recovery_Timer = uvm_reg_field::type_id::create("Recovery_Timer");
         Discovery_Completion_Timer = uvm_reg_field::type_id::create("Discovery_Completion_Timer");
         Retraining_Completion_Timer = uvm_reg_field::type_id::create("Retraining_Completion_Timer");

         Reserved.configure(this, 8, 24, "RO", 0, 8'h00, 1, 0, 1);
         Recovery_Timer.configure(this, 8, 16, "RW", 0, 8'hff, 1, 1, 1);
         Discovery_Completion_Timer.configure(this, 8, 8, "RW", 0, 8'h00, 1, 1, 1);
         Retraining_Completion_Timer.configure(this, 8, 0, "RW", 0, 8'hfe, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_3_Link_Timers_Control_3_CSR_reg
   // 
   // Link_Timers_Control_3_Register
   //--------------------------------------------------------------------

   class Port_3_Link_Timers_Control_3_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_3_Link_Timers_Control_3_CSR_reg)

      rand uvm_reg_field Keep_alive_Transmission_Interval; 
      rand uvm_reg_field Keep_alive_Transmission_Period; 
      rand uvm_reg_field Receive_Width_Command_Timeout; 
      rand uvm_reg_field Transmit_Width_Command_Timeout; 


      // Function: new
      // 
      function new(string name = "Port_3_Link_Timers_Control_3_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Keep_alive_Transmission_Interval = uvm_reg_field::type_id::create("Keep_alive_Transmission_Interval");
         Keep_alive_Transmission_Period = uvm_reg_field::type_id::create("Keep_alive_Transmission_Period");
         Receive_Width_Command_Timeout = uvm_reg_field::type_id::create("Receive_Width_Command_Timeout");
         Transmit_Width_Command_Timeout = uvm_reg_field::type_id::create("Transmit_Width_Command_Timeout");

         Keep_alive_Transmission_Interval.configure(this, 10, 22, "RW", 0, 10'b1111111111, 1, 1, 0);
         Keep_alive_Transmission_Period.configure(this, 6, 16, "RW", 0, 6'b000001, 1, 1, 0);
         Receive_Width_Command_Timeout.configure(this, 8, 8, "RW", 0, 8'h40, 1, 1, 1);
         Transmit_Width_Command_Timeout.configure(this, 8, 0, "RW", 0, 8'hff, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Lane_0_Status_3_CSR_reg
   // 
   // Status 3 Register
   //--------------------------------------------------------------------

   class Lane_0_Status_3_CSR_reg extends uvm_reg;
      `uvm_object_utils(Lane_0_Status_3_CSR_reg)

      uvm_reg_field Reserved; 
      uvm_reg_field LP_State_Control_Reserved; 
      uvm_reg_field LP_Lane_Entering_Silence; 
      uvm_reg_field LP_Port_Entering_Silence; 
      uvm_reg_field LP_Retraining; 
      uvm_reg_field LP_Retrain_Ready; 
      uvm_reg_field LP_Retrain_Grant; 
      uvm_reg_field LP_Transmit_Equalizer_Status; 
      uvm_reg_field LP_Transmit_Equalizer_Command; 
      uvm_reg_field LP_Transmit_Equalizer_Tap; 
      uvm_reg_field LP_Transmit_SC_Sequences; 
      uvm_reg_field LP_Transmit_Width_Request_Pending; 
      uvm_reg_field LP_Transmit_Width_Request; 


      // Function: new
      // 
      function new(string name = "Lane_0_Status_3_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         LP_State_Control_Reserved = uvm_reg_field::type_id::create("LP_State_Control_Reserved");
         LP_Lane_Entering_Silence = uvm_reg_field::type_id::create("LP_Lane_Entering_Silence");
         LP_Port_Entering_Silence = uvm_reg_field::type_id::create("LP_Port_Entering_Silence");
         LP_Retraining = uvm_reg_field::type_id::create("LP_Retraining");
         LP_Retrain_Ready = uvm_reg_field::type_id::create("LP_Retrain_Ready");
         LP_Retrain_Grant = uvm_reg_field::type_id::create("LP_Retrain_Grant");
         LP_Transmit_Equalizer_Status = uvm_reg_field::type_id::create("LP_Transmit_Equalizer_Status");
         LP_Transmit_Equalizer_Command = uvm_reg_field::type_id::create("LP_Transmit_Equalizer_Command");
         LP_Transmit_Equalizer_Tap = uvm_reg_field::type_id::create("LP_Transmit_Equalizer_Tap");
         LP_Transmit_SC_Sequences = uvm_reg_field::type_id::create("LP_Transmit_SC_Sequences");
         LP_Transmit_Width_Request_Pending = uvm_reg_field::type_id::create("LP_Transmit_Width_Request_Pending");
         LP_Transmit_Width_Request = uvm_reg_field::type_id::create("LP_Transmit_Width_Request");

         Reserved.configure(this, 4, 28, "RO", 0, 4'h0, 1, 0, 0);
         LP_State_Control_Reserved.configure(this, 8, 20, "RO", 0, 8'h00, 1, 0, 0);
         LP_Lane_Entering_Silence.configure(this, 1, 19, "RO", 0, 1'b0, 1, 0, 0);
         LP_Port_Entering_Silence.configure(this, 1, 18, "RO", 0, 1'b0, 1, 0, 0);
         LP_Retraining.configure(this, 1, 17, "RO", 0, 1'b0, 1, 0, 0);
         LP_Retrain_Ready.configure(this, 1, 16, "RO", 0, 1'b0, 1, 0, 0);
         LP_Retrain_Grant.configure(this, 1, 15, "RO", 0, 1'b0, 1, 0, 0);
         LP_Transmit_Equalizer_Status.configure(this, 3, 12, "RO", 0, 3'b000, 1, 0, 0);
         LP_Transmit_Equalizer_Command.configure(this, 3, 9, "RO", 0, 3'b000, 1, 0, 0);
         LP_Transmit_Equalizer_Tap.configure(this, 4, 5, "RO", 0, 4'h0, 1, 0, 0);
         LP_Transmit_SC_Sequences.configure(this, 1, 4, "RO", 0, 1'b0, 1, 0, 0);
         LP_Transmit_Width_Request_Pending.configure(this, 1, 3, "RO", 0, 1'b0, 1, 0, 0);
         LP_Transmit_Width_Request.configure(this, 3, 0, "RO", 0, 3'b000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_12_VC8_VC4_BW_Allocation_Register_reg
   // 
   // BW Allocation Register
   //--------------------------------------------------------------------

   class Port_12_VC8_VC4_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_12_VC8_VC4_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 


      // Function: new
      // 
      function new(string name = "Port_12_VC8_VC4_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");

         Bandwidth_Allocation.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_3_Inbound_ackID_CSR_reg
   // 
   // Inbound_Register
   //--------------------------------------------------------------------

   class Port_3_Inbound_ackID_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_3_Inbound_ackID_CSR_reg)

      rand uvm_reg_field Inbound_ackID;  
      uvm_reg_field Reserved; 


      // Function: new
      // 
      function new(string name = "Port_3_Inbound_ackID_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Inbound_ackID = uvm_reg_field::type_id::create("Inbound_ackID");
         Reserved = uvm_reg_field::type_id::create("Reserved");

       Inbound_ackID.configure(this, 12, 20, "RW", 0, 12'h000, 1, 1, 0);
         Reserved.configure(this, 20, 0, "RO", 0, 20'h00000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_3_VC5_VC1_BW_Allocation_Register_reg
   // 
   // BW Allocation Register
   //--------------------------------------------------------------------

   class Port_3_VC5_VC1_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_3_VC5_VC1_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 


      // Function: new
      // 
      function new(string name = "Port_3_VC5_VC1_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");

         Bandwidth_Allocation.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_5_Link_Maintenance_Request_CSR_reg
   // 
   // Link  Maintenance Request Register
   //--------------------------------------------------------------------

   class Port_5_Link_Maintenance_Request_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_5_Link_Maintenance_Request_CSR_reg)

      uvm_reg_field Command; 
      uvm_reg_field Reserved; 


      // Function: new
      // 
      function new(string name = "Port_5_Link_Maintenance_Request_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Command = uvm_reg_field::type_id::create("Command");
         Reserved = uvm_reg_field::type_id::create("Reserved");

         Command.configure(this, 3, 29, "RW", 0, 3'b000, 1, 1, 1);
         Reserved.configure(this, 29, 0, "RO", 0, 29'b00000000000000000000000000000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_14_Packet_Capture_2_CSR_reg
   // 
   // Packet Capture 2 Register
   //--------------------------------------------------------------------

   class Port_14_Packet_Capture_2_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_14_Packet_Capture_2_CSR_reg)

      rand uvm_reg_field Capture2; 


      // Function: new
      // 
      function new(string name = "Port_14_Packet_Capture_2_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture2 = uvm_reg_field::type_id::create("Capture2");

         Capture2.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_5_Packet_Capture_1_CSR_reg
   // 
   // Packet Capture 1 Register
   //--------------------------------------------------------------------

   class Port_5_Packet_Capture_1_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_5_Packet_Capture_1_CSR_reg)

      rand uvm_reg_field Capture1; 


      // Function: new
      // 
      function new(string name = "Port_5_Packet_Capture_1_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture1 = uvm_reg_field::type_id::create("Capture1");

         Capture1.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_3_Packet_Capture_1_CSR_reg
   // 
   // Packet Capture 1 Register
   //--------------------------------------------------------------------

   class Port_3_Packet_Capture_1_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_3_Packet_Capture_1_CSR_reg)

      rand uvm_reg_field Capture1; 


      // Function: new
      // 
      function new(string name = "Port_3_Packet_Capture_1_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture1 = uvm_reg_field::type_id::create("Capture1");

         Capture1.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_5_Control_CSR_reg
   // 
   // Control Register
   //--------------------------------------------------------------------

   class Port_5_Control_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_5_Control_CSR_reg)

      uvm_reg_field Port_Type; 
      rand uvm_reg_field Port_Lockout; 
      rand uvm_reg_field Drop_Packet_Enable; 
      rand uvm_reg_field Stop_on_Port_Failed_encountered_Enable; 
      rand uvm_reg_field Implementation_defined; 
      uvm_reg_field Extended_Port_Width_Support; 
      rand uvm_reg_field Extended_Port_Width_Override; 
      rand uvm_reg_field Flow_Arbitration_Participant; 
      rand uvm_reg_field Enumeration_Boundary; 
      rand uvm_reg_field Flow_Control_Participant; 
      rand uvm_reg_field Multicast_event_Participant; 
      rand uvm_reg_field Error_Checking_Disable; 
      rand uvm_reg_field Input_Port_Enable; 
      rand uvm_reg_field Output_Port_Enable; 
      rand uvm_reg_field Port_Disable; 
      uvm_reg_field Port_Width_Override; 
      rand uvm_reg_field Initialized_Port_Width; 
      uvm_reg_field Port_Width_Support; 


      // Function: new
      // 
      function new(string name = "Port_5_Control_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Port_Type = uvm_reg_field::type_id::create("Port_Type");
         Port_Lockout = uvm_reg_field::type_id::create("Port_Lockout");
         Drop_Packet_Enable = uvm_reg_field::type_id::create("Drop_Packet_Enable");
         Stop_on_Port_Failed_encountered_Enable = uvm_reg_field::type_id::create("Stop_on_Port_Failed_encountered_Enable");
         Implementation_defined = uvm_reg_field::type_id::create("Implementation_defined");
         Extended_Port_Width_Support = uvm_reg_field::type_id::create("Extended_Port_Width_Support");
         Extended_Port_Width_Override = uvm_reg_field::type_id::create("Extended_Port_Width_Override");
         Flow_Arbitration_Participant = uvm_reg_field::type_id::create("Flow_Arbitration_Participant");
         Enumeration_Boundary = uvm_reg_field::type_id::create("Enumeration_Boundary");
         Flow_Control_Participant = uvm_reg_field::type_id::create("Flow_Control_Participant");
         Multicast_event_Participant = uvm_reg_field::type_id::create("Multicast_event_Participant");
         Error_Checking_Disable = uvm_reg_field::type_id::create("Error_Checking_Disable");
         Input_Port_Enable = uvm_reg_field::type_id::create("Input_Port_Enable");
         Output_Port_Enable = uvm_reg_field::type_id::create("Output_Port_Enable");
         Port_Disable = uvm_reg_field::type_id::create("Port_Disable");
         Port_Width_Override = uvm_reg_field::type_id::create("Port_Width_Override");
         Initialized_Port_Width = uvm_reg_field::type_id::create("Initialized_Port_Width");
         Port_Width_Support = uvm_reg_field::type_id::create("Port_Width_Support");

         Port_Type.configure(this, 1, 31, "RO", 0, 1'b0, 1, 0, 0);
         Port_Lockout.configure(this, 1, 30, "RW", 0, 1'b0, 1, 1, 0);
         Drop_Packet_Enable.configure(this, 1, 29, "RW", 0, 1'b0, 1, 1, 0);
         Stop_on_Port_Failed_encountered_Enable.configure(this, 1, 28, "RW", 0, 1'b0, 1, 1, 0);
         Implementation_defined.configure(this, 8, 20, "RW", 0, 8'h00, 1, 1, 0);
         Extended_Port_Width_Support.configure(this, 2, 18, "RO", 0, 2'b00, 1, 0, 0);
         Extended_Port_Width_Override.configure(this, 2, 16, "RW", 0, 2'b00, 1, 1, 0);
         Flow_Arbitration_Participant.configure(this, 1, 15, "RW", 0, 1'b0, 1, 1, 0);
         Enumeration_Boundary.configure(this, 1, 14, "RW", 0, 1'b0, 1, 1, 0);
         Flow_Control_Participant.configure(this, 1, 13, "RW", 0, 1'b0, 1, 1, 0);
         Multicast_event_Participant.configure(this, 1, 12, "RW", 0, 1'b0, 1, 1, 0);
         Error_Checking_Disable.configure(this, 1, 11, "RW", 0, 1'b0, 1, 1, 0);
         Input_Port_Enable.configure(this, 1, 10, "RW", 0, 1'b0, 1, 1, 0);
         Output_Port_Enable.configure(this, 1, 9, "RW", 0, 1'b0, 1, 1, 0);
         Port_Disable.configure(this, 1, 8, "RW", 0, 1'b0, 1, 1, 0);
         Port_Width_Override.configure(this, 3, 5, "RO", 0, 3'b000, 1, 0, 0);
         Initialized_Port_Width.configure(this, 3, 2, "RW", 0, 3'b000, 1, 1, 0);
         Port_Width_Support.configure(this, 2, 0, "RO", 0, 2'b00, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_3_Link_Maintenance_Response_CSR_reg
   // 
   // Link Maintenance Response Register
   //--------------------------------------------------------------------

   class Port_3_Link_Maintenance_Response_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_3_Link_Maintenance_Response_CSR_reg)

      uvm_reg_field port_status; 
      uvm_reg_field ackID_status; 
      uvm_reg_field Port_status_cs64; 
      uvm_reg_field Reserved; 
      uvm_reg_field response_valid; 


      // Function: new
      // 
      function new(string name = "Port_3_Link_Maintenance_Response_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         port_status = uvm_reg_field::type_id::create("port_status");
         ackID_status = uvm_reg_field::type_id::create("ackID_status");
         Port_status_cs64 = uvm_reg_field::type_id::create("Port_status_cs64");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         response_valid = uvm_reg_field::type_id::create("response_valid");

         port_status.configure(this, 5, 27, "RO", 0, 5'b00000, 1, 0, 0);
         ackID_status.configure(this, 12, 15, "RO", 0, 12'h000, 1, 0, 0);
         Port_status_cs64.configure(this, 12, 3, "RO", 0, 12'h000, 1, 0, 0);
         Reserved.configure(this, 2, 1, "RO", 0, 2'b00, 1, 0, 0);
         response_valid.configure(this, 1, 0, "RO", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass

   //--------------------------------------------------------------------
   // Class: Port_2_VC6_VC2_BW_Allocation_Register_reg
   // 
   // BW Allocation Register
   //--------------------------------------------------------------------

   class Port_2_VC6_VC2_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_2_VC6_VC2_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 


      // Function: new
      // 
      function new(string name = "Port_2_VC6_VC2_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");

         Bandwidth_Allocation.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_2_Timestamp_Synchronization_Status_CSR_reg
   // 
   // Timestamp_Synchronization_Status_CSR_Register
   //--------------------------------------------------------------------

   class Port_2_Timestamp_Synchronization_Status_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_2_Timestamp_Synchronization_Status_CSR_reg)

      uvm_reg_field Delay; 
      uvm_reg_field Reserved; 
      uvm_reg_field Response_Valid; 


      // Function: new
      // 
      function new(string name = "Port_2_Timestamp_Synchronization_Status_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Delay = uvm_reg_field::type_id::create("Delay");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Response_Valid = uvm_reg_field::type_id::create("Response_Valid");

         Delay.configure(this, 10, 22, "RO", 0, 10'b0000000000, 1, 0, 0);
         Reserved.configure(this, 21, 1, "RO", 0, 21'b000000000000000000000, 1, 0, 0);
         Response_Valid.configure(this, 1, 0, "RO", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_5_Packet_Capture_2_CSR_reg
   // 
   // Packet Capture 2 Register
   //--------------------------------------------------------------------

   class Port_5_Packet_Capture_2_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_5_Packet_Capture_2_CSR_reg)

      rand uvm_reg_field Capture2; 


      // Function: new
      // 
      function new(string name = "Port_5_Packet_Capture_2_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture2 = uvm_reg_field::type_id::create("Capture2");

         Capture2.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Dev32_Base_Device_ID_CSR_reg
   // 
   // Dev32_Base_Device_ID_Register
   //--------------------------------------------------------------------

   class Dev32_Base_Device_ID_CSR_reg extends uvm_reg;
      `uvm_object_utils(Dev32_Base_Device_ID_CSR_reg)

      rand uvm_reg_field Dev32_Base_Device_ID; 


      // Function: new
      // 
      function new(string name = "Dev32_Base_Device_ID_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Dev32_Base_Device_ID = uvm_reg_field::type_id::create("Dev32_Base_Device_ID");

         Dev32_Base_Device_ID.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_2_VC0_BW_Allocation_Register_reg
   // 
   // BW Register
   //--------------------------------------------------------------------

   class Port_2_VC0_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_2_VC0_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 
      rand uvm_reg_field Bandwidth_Reservation_Precision; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field VC0_BW_Res_Enable; 
      uvm_reg_field VC0_Bandwidth_Reservation_Capable; 


      // Function: new
      // 
      function new(string name = "Port_2_VC0_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");
         Bandwidth_Reservation_Precision = uvm_reg_field::type_id::create("Bandwidth_Reservation_Precision");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         VC0_BW_Res_Enable = uvm_reg_field::type_id::create("VC0_BW_Res_Enable");
         VC0_Bandwidth_Reservation_Capable = uvm_reg_field::type_id::create("VC0_Bandwidth_Reservation_Capable");

         Bandwidth_Allocation.configure(this, 16, 16, "RW", 0, 16'h0000, 1, 1, 1);
         Bandwidth_Reservation_Precision.configure(this, 8, 8, "RW", 0, 8'h00, 1, 1, 1);
         Reserved.configure(this, 6, 2, "RO", 0, 6'b000000, 1, 0, 0);
         VC0_BW_Res_Enable.configure(this, 1, 1, "RW", 0, 1'b0, 1, 1, 0);
         VC0_Bandwidth_Reservation_Capable.configure(this, 1, 0, "RO", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_6_Power_Management_CSR_reg
   // 
   // Power_Management_Register
   //--------------------------------------------------------------------

   class Port_6_Power_Management_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_6_Power_Management_CSR_reg)

      uvm_reg_field Reserved; 
      uvm_reg_field Status_of_Link_Partner_Transmit_Width_Change; 
      rand uvm_reg_field Change_Link_Partner_Transmit_width; 
      uvm_reg_field Status_of_My_Transmit_Width_Change; 
      rand uvm_reg_field Change_My_Transmit_Width; 
      uvm_reg_field Reciever_Width_Status; 
      uvm_reg_field Transmit_Width_Status; 
      rand uvm_reg_field Asymmetric_Modes_Enabled; 
      uvm_reg_field Asymmetric_Modes_Supported; 


      // Function: new
      // 
      function new(string name = "Port_6_Power_Management_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Status_of_Link_Partner_Transmit_Width_Change = uvm_reg_field::type_id::create("Status_of_Link_Partner_Transmit_Width_Change");
         Change_Link_Partner_Transmit_width = uvm_reg_field::type_id::create("Change_Link_Partner_Transmit_width");
         Status_of_My_Transmit_Width_Change = uvm_reg_field::type_id::create("Status_of_My_Transmit_Width_Change");
         Change_My_Transmit_Width = uvm_reg_field::type_id::create("Change_My_Transmit_Width");
         Reciever_Width_Status = uvm_reg_field::type_id::create("Reciever_Width_Status");
         Transmit_Width_Status = uvm_reg_field::type_id::create("Transmit_Width_Status");
         Asymmetric_Modes_Enabled = uvm_reg_field::type_id::create("Asymmetric_Modes_Enabled");
         Asymmetric_Modes_Supported = uvm_reg_field::type_id::create("Asymmetric_Modes_Supported");

         Reserved.configure(this, 6, 26, "RO", 0, 6'b000000, 1, 0, 0);
         Status_of_Link_Partner_Transmit_Width_Change.configure(this, 2, 24, "RO", 0, 2'b00, 1, 0, 0);
         Change_Link_Partner_Transmit_width.configure(this, 3, 21, "WRC", 0, 3'b000, 1, 1, 0);
         Status_of_My_Transmit_Width_Change.configure(this, 2, 19, "RO", 0, 2'b00, 1, 0, 0);
         Change_My_Transmit_Width.configure(this, 3, 16, "WRC", 0, 3'b000, 1, 1, 0);
         Reciever_Width_Status.configure(this, 3, 13, "RO", 0, 3'b000, 1, 0, 0);
         Transmit_Width_Status.configure(this, 3, 10, "RO", 0, 3'b000, 1, 0, 0);
         Asymmetric_Modes_Enabled.configure(this, 5, 5, "RW", 0, 5'b00000, 1, 1, 0);
         Asymmetric_Modes_Supported.configure(this, 5, 0, "RO", 0, 5'b00000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_4_Initialization_Status_CSR_reg
   // 
   // Initialization_Status_Register
   //--------------------------------------------------------------------

   class Port_4_Initialization_Status_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_4_Initialization_Status_CSR_reg)

      uvm_reg_field Reserved_3; 
      uvm_reg_field Transmitted_Status_Control_Symbols; 
      uvm_reg_field Reserved_2; 
      uvm_reg_field Received_Status_Control_Symbols; 
      uvm_reg_field Port_Initialization_State_Machine; 
      uvm_reg_field Reserved_1; 
      uvm_reg_field x1_x2_Mode_Detection; 
      uvm_reg_field Reserved; 
      uvm_reg_field Lane_Alignment; 


      // Function: new
      // 
      function new(string name = "Port_4_Initialization_Status_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved_3 = uvm_reg_field::type_id::create("Reserved_3");
         Transmitted_Status_Control_Symbols = uvm_reg_field::type_id::create("Transmitted_Status_Control_Symbols");
         Reserved_2 = uvm_reg_field::type_id::create("Reserved_2");
         Received_Status_Control_Symbols = uvm_reg_field::type_id::create("Received_Status_Control_Symbols");
         Port_Initialization_State_Machine = uvm_reg_field::type_id::create("Port_Initialization_State_Machine");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         x1_x2_Mode_Detection = uvm_reg_field::type_id::create("x1_x2_Mode_Detection");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Lane_Alignment = uvm_reg_field::type_id::create("Lane_Alignment");

         Reserved_3.configure(this, 4, 28, "RO", 0, 4'h0, 1, 0, 0);
         Transmitted_Status_Control_Symbols.configure(this, 7, 21, "RO", 0, 7'b0000000, 1, 0, 0);
         Reserved_2.configure(this, 1, 20, "RO", 0, 1'b0, 1, 0, 0);
         Received_Status_Control_Symbols.configure(this, 4, 16, "RO", 0, 4'h0, 1, 0, 0);
         Port_Initialization_State_Machine.configure(this, 5, 11, "RO", 0, 5'b00000, 1, 0, 0);
         Reserved_1.configure(this, 1, 10, "RO", 0, 1'b0, 1, 0, 0);
         x1_x2_Mode_Detection.configure(this, 4, 6, "RO", 0, 4'h0, 1, 0, 0);
         Reserved.configure(this, 1, 5, "RO", 0, 1'b0, 1, 0, 0);
         Lane_Alignment.configure(this, 5, 0, "RO", 0, 5'b00000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_1_Packet_Control_Symbol_Capture_0_CSR_reg
   // 
   // Symbol Capture Register
   //--------------------------------------------------------------------

   class Port_1_Packet_Control_Symbol_Capture_0_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_1_Packet_Control_Symbol_Capture_0_CSR_reg)

      rand uvm_reg_field Capture0; 


      // Function: new
      // 
      function new(string name = "Port_1_Packet_Control_Symbol_Capture_0_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture0 = uvm_reg_field::type_id::create("Capture0");

         Capture0.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_4_Timestamp_Synchronization_Status_CSR_reg
   // 
   // Timestamp_Synchronization_Status_CSR_Register
   //--------------------------------------------------------------------

   class Port_4_Timestamp_Synchronization_Status_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_4_Timestamp_Synchronization_Status_CSR_reg)

      uvm_reg_field Delay; 
      uvm_reg_field Reserved; 
      uvm_reg_field Response_Valid; 


      // Function: new
      // 
      function new(string name = "Port_4_Timestamp_Synchronization_Status_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Delay = uvm_reg_field::type_id::create("Delay");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Response_Valid = uvm_reg_field::type_id::create("Response_Valid");

         Delay.configure(this, 10, 22, "RO", 0, 10'b0000000000, 1, 0, 0);
         Reserved.configure(this, 21, 1, "RO", 0, 21'b000000000000000000000, 1, 0, 0);
         Response_Valid.configure(this, 1, 0, "RO", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_9_Outbound_ackID_CSR_reg
   // 
   // Outbound_Register
   //--------------------------------------------------------------------

   class Port_9_Outbound_ackID_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_9_Outbound_ackID_CSR_reg)

      rand uvm_reg_field Outbound_ackID; 
      uvm_reg_field Outstanding_ackID; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Clr_outstanding_ackID; 


      // Function: new
      // 
      function new(string name = "Port_9_Outbound_ackID_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Outbound_ackID = uvm_reg_field::type_id::create("Outbound_ackID");
         Outstanding_ackID = uvm_reg_field::type_id::create("Outstanding_ackID");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Clr_outstanding_ackID = uvm_reg_field::type_id::create("Clr_outstanding_ackID");

         Outbound_ackID.configure(this, 12, 20, "RW", 0, 12'h000, 1, 1, 0);
         Outstanding_ackID.configure(this, 12, 8, "RW", 0, 12'h000, 1, 1, 0);
         Reserved.configure(this, 7, 1, "RO", 0, 7'b0000000, 1, 0, 0);
         Clr_outstanding_ackID.configure(this, 1, 0, "W1C", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_6_Auto_Update_Counter_CSR_reg
   // 
   // Auto_Update_Counter_CSR_Register
   //--------------------------------------------------------------------

   class Port_6_Auto_Update_Counter_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_6_Auto_Update_Counter_CSR_reg)

      rand uvm_reg_field Update_Period; 


      // Function: new
      // 
      function new(string name = "Port_6_Auto_Update_Counter_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Update_Period = uvm_reg_field::type_id::create("Update_Period");

         Update_Period.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_0_Timestamp_0_MSW_CSR_reg
   // 
   // Timestamp_0_MSW_Register
   //--------------------------------------------------------------------

   class Port_0_Timestamp_0_MSW_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_0_Timestamp_0_MSW_CSR_reg)

      uvm_reg_field MSW_Bits; 


      // Function: new
      // 
      function new(string name = "Port_0_Timestamp_0_MSW_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         MSW_Bits = uvm_reg_field::type_id::create("MSW_Bits");

         MSW_Bits.configure(this, 32, 0, "RO", 0, 32'h00000000, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_10_Attributes_Capture_CSR_reg
   // 
   // Attributes Register
   //--------------------------------------------------------------------

   class Port_10_Attributes_Capture_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_10_Attributes_Capture_CSR_reg)

      rand uvm_reg_field Capture_valid_info; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Implementation_Dependent; 
      rand uvm_reg_field Error_type; 
      rand uvm_reg_field Info_type; 


      // Function: new
      // 
      function new(string name = "Port_10_Attributes_Capture_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture_valid_info = uvm_reg_field::type_id::create("Capture_valid_info");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Implementation_Dependent = uvm_reg_field::type_id::create("Implementation_Dependent");
         Error_type = uvm_reg_field::type_id::create("Error_type");
         Info_type = uvm_reg_field::type_id::create("Info_type");

         Capture_valid_info.configure(this, 1, 31, "RW", 0, 1'b0, 1, 1, 0);
         Reserved.configure(this, 3, 28, "RO", 0, 3'b000, 1, 0, 0);
         Implementation_Dependent.configure(this, 20, 8, "RW", 0, 20'h00000, 1, 1, 0);
         Error_type.configure(this, 5, 3, "RW", 0, 5'b00000, 1, 1, 0);
         Info_type.configure(this, 3, 0, "RW", 0, 3'b000, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_7_Power_Management_CSR_reg
   // 
   // Power_Management_Register
   //--------------------------------------------------------------------

   class Port_7_Power_Management_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_7_Power_Management_CSR_reg)

      uvm_reg_field Reserved; 
      uvm_reg_field Status_of_Link_Partner_Transmit_Width_Change; 
      rand uvm_reg_field Change_Link_Partner_Transmit_width; 
      uvm_reg_field Status_of_My_Transmit_Width_Change; 
      rand uvm_reg_field Change_My_Transmit_Width; 
      uvm_reg_field Reciever_Width_Status; 
      uvm_reg_field Transmit_Width_Status; 
      rand uvm_reg_field Asymmetric_Modes_Enabled; 
      uvm_reg_field Asymmetric_Modes_Supported; 


      // Function: new
      // 
      function new(string name = "Port_7_Power_Management_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Status_of_Link_Partner_Transmit_Width_Change = uvm_reg_field::type_id::create("Status_of_Link_Partner_Transmit_Width_Change");
         Change_Link_Partner_Transmit_width = uvm_reg_field::type_id::create("Change_Link_Partner_Transmit_width");
         Status_of_My_Transmit_Width_Change = uvm_reg_field::type_id::create("Status_of_My_Transmit_Width_Change");
         Change_My_Transmit_Width = uvm_reg_field::type_id::create("Change_My_Transmit_Width");
         Reciever_Width_Status = uvm_reg_field::type_id::create("Reciever_Width_Status");
         Transmit_Width_Status = uvm_reg_field::type_id::create("Transmit_Width_Status");
         Asymmetric_Modes_Enabled = uvm_reg_field::type_id::create("Asymmetric_Modes_Enabled");
         Asymmetric_Modes_Supported = uvm_reg_field::type_id::create("Asymmetric_Modes_Supported");

         Reserved.configure(this, 6, 26, "RO", 0, 6'b000000, 1, 0, 0);
         Status_of_Link_Partner_Transmit_Width_Change.configure(this, 2, 24, "RO", 0, 2'b00, 1, 0, 0);
         Change_Link_Partner_Transmit_width.configure(this, 3, 21, "WRC", 0, 3'b000, 1, 1, 0);
         Status_of_My_Transmit_Width_Change.configure(this, 2, 19, "RO", 0, 2'b00, 1, 0, 0);
         Change_My_Transmit_Width.configure(this, 3, 16, "WRC", 0, 3'b000, 1, 1, 0);
         Reciever_Width_Status.configure(this, 3, 13, "RO", 0, 3'b000, 1, 0, 0);
         Transmit_Width_Status.configure(this, 3, 10, "RO", 0, 3'b000, 1, 0, 0);
         Asymmetric_Modes_Enabled.configure(this, 5, 5, "RW", 0, 5'b00000, 1, 1, 0);
         Asymmetric_Modes_Supported.configure(this, 5, 0, "RO", 0, 5'b00000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_13_Control_CSR_reg
   // 
   // Control Register
   //--------------------------------------------------------------------

   class Port_13_Control_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_13_Control_CSR_reg)

      uvm_reg_field Port_Type; 
      rand uvm_reg_field Port_Lockout; 
      rand uvm_reg_field Drop_Packet_Enable; 
      rand uvm_reg_field Stop_on_Port_Failed_encountered_Enable; 
      rand uvm_reg_field Implementation_defined; 
      uvm_reg_field Extended_Port_Width_Support; 
      rand uvm_reg_field Extended_Port_Width_Override; 
      rand uvm_reg_field Flow_Arbitration_Participant; 
      rand uvm_reg_field Enumeration_Boundary; 
      rand uvm_reg_field Flow_Control_Participant; 
      rand uvm_reg_field Multicast_event_Participant; 
      rand uvm_reg_field Error_Checking_Disable; 
      rand uvm_reg_field Input_Port_Enable; 
      rand uvm_reg_field Output_Port_Enable; 
      rand uvm_reg_field Port_Disable; 
      uvm_reg_field Port_Width_Override; 
      rand uvm_reg_field Initialized_Port_Width; 
      uvm_reg_field Port_Width_Support; 


      // Function: new
      // 
      function new(string name = "Port_13_Control_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Port_Type = uvm_reg_field::type_id::create("Port_Type");
         Port_Lockout = uvm_reg_field::type_id::create("Port_Lockout");
         Drop_Packet_Enable = uvm_reg_field::type_id::create("Drop_Packet_Enable");
         Stop_on_Port_Failed_encountered_Enable = uvm_reg_field::type_id::create("Stop_on_Port_Failed_encountered_Enable");
         Implementation_defined = uvm_reg_field::type_id::create("Implementation_defined");
         Extended_Port_Width_Support = uvm_reg_field::type_id::create("Extended_Port_Width_Support");
         Extended_Port_Width_Override = uvm_reg_field::type_id::create("Extended_Port_Width_Override");
         Flow_Arbitration_Participant = uvm_reg_field::type_id::create("Flow_Arbitration_Participant");
         Enumeration_Boundary = uvm_reg_field::type_id::create("Enumeration_Boundary");
         Flow_Control_Participant = uvm_reg_field::type_id::create("Flow_Control_Participant");
         Multicast_event_Participant = uvm_reg_field::type_id::create("Multicast_event_Participant");
         Error_Checking_Disable = uvm_reg_field::type_id::create("Error_Checking_Disable");
         Input_Port_Enable = uvm_reg_field::type_id::create("Input_Port_Enable");
         Output_Port_Enable = uvm_reg_field::type_id::create("Output_Port_Enable");
         Port_Disable = uvm_reg_field::type_id::create("Port_Disable");
         Port_Width_Override = uvm_reg_field::type_id::create("Port_Width_Override");
         Initialized_Port_Width = uvm_reg_field::type_id::create("Initialized_Port_Width");
         Port_Width_Support = uvm_reg_field::type_id::create("Port_Width_Support");

         Port_Type.configure(this, 1, 31, "RO", 0, 1'b0, 1, 0, 0);
         Port_Lockout.configure(this, 1, 30, "RW", 0, 1'b0, 1, 1, 0);
         Drop_Packet_Enable.configure(this, 1, 29, "RW", 0, 1'b0, 1, 1, 0);
         Stop_on_Port_Failed_encountered_Enable.configure(this, 1, 28, "RW", 0, 1'b0, 1, 1, 0);
         Implementation_defined.configure(this, 8, 20, "RW", 0, 8'h00, 1, 1, 0);
         Extended_Port_Width_Support.configure(this, 2, 18, "RO", 0, 2'b00, 1, 0, 0);
         Extended_Port_Width_Override.configure(this, 2, 16, "RW", 0, 2'b00, 1, 1, 0);
         Flow_Arbitration_Participant.configure(this, 1, 15, "RW", 0, 1'b0, 1, 1, 0);
         Enumeration_Boundary.configure(this, 1, 14, "RW", 0, 1'b0, 1, 1, 0);
         Flow_Control_Participant.configure(this, 1, 13, "RW", 0, 1'b0, 1, 1, 0);
         Multicast_event_Participant.configure(this, 1, 12, "RW", 0, 1'b0, 1, 1, 0);
         Error_Checking_Disable.configure(this, 1, 11, "RW", 0, 1'b0, 1, 1, 0);
         Input_Port_Enable.configure(this, 1, 10, "RW", 0, 1'b0, 1, 1, 0);
         Output_Port_Enable.configure(this, 1, 9, "RW", 0, 1'b0, 1, 1, 0);
         Port_Disable.configure(this, 1, 8, "RW", 0, 1'b0, 1, 1, 0);
         Port_Width_Override.configure(this, 3, 5, "RO", 0, 3'b000, 1, 0, 0);
         Initialized_Port_Width.configure(this, 3, 2, "RW", 0, 3'b000, 1, 1, 0);
         Port_Width_Support.configure(this, 2, 0, "RO", 0, 2'b00, 1, 0, 0);
      endfunction
   endclass

   //--------------------------------------------------------------------
   // Class: Port_2_Timestamp_Generator_Synchronization_CSR_reg
   // 
   // Timestamp_Generator_Synchronization_Register
   //--------------------------------------------------------------------

   class Port_2_Timestamp_Generator_Synchronization_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_2_Timestamp_Generator_Synchronization_CSR_reg)

      rand uvm_reg_field Asymmetry; 
      rand uvm_reg_field TX_Has_Lowwer_Latency; 
      uvm_reg_field Reserved_1; 
      rand uvm_reg_field Port_Opening_Mode; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Auto_Update_Link_Partner_Timestamp_Generators; 
      rand uvm_reg_field Disable_Clock_Compensation_Sequence; 
      rand uvm_reg_field Accept_Timestamps; 


      // Function: new
      // 
      function new(string name = "Port_2_Timestamp_Generator_Synchronization_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Asymmetry = uvm_reg_field::type_id::create("Asymmetry");
         TX_Has_Lowwer_Latency = uvm_reg_field::type_id::create("TX_Has_Lowwer_Latency");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         Port_Opening_Mode = uvm_reg_field::type_id::create("Port_Opening_Mode");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Auto_Update_Link_Partner_Timestamp_Generators = uvm_reg_field::type_id::create("Auto_Update_Link_Partner_Timestamp_Generators");
         Disable_Clock_Compensation_Sequence = uvm_reg_field::type_id::create("Disable_Clock_Compensation_Sequence");
         Accept_Timestamps = uvm_reg_field::type_id::create("Accept_Timestamps");

         Asymmetry.configure(this, 12, 20, "RW", 0, 12'h000, 1, 1, 0);
         TX_Has_Lowwer_Latency.configure(this, 1, 19, "RW", 0, 1'b0, 1, 1, 0);
         Reserved_1.configure(this, 11, 8, "RO", 0, 11'b00000000000, 1, 0, 0);
         Port_Opening_Mode.configure(this, 2, 6, "RW", 0, 2'b00, 1, 1, 0);
         Reserved.configure(this, 3, 3, "RO", 0, 3'b000, 1, 0, 0);
         Auto_Update_Link_Partner_Timestamp_Generators.configure(this, 1, 2, "RW", 0, 1'b0, 1, 1, 0);
         Disable_Clock_Compensation_Sequence.configure(this, 1, 1, "RW", 0, 1'b0, 1, 1, 0);
         Accept_Timestamps.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_15_Link_Timers_Control_CSR_reg
   // 
   // Link_Timers_Control_Register
   //--------------------------------------------------------------------

   class Port_15_Link_Timers_Control_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_15_Link_Timers_Control_CSR_reg)

      rand uvm_reg_field Emphasis_Command_Timeout; 
      rand uvm_reg_field CW_Training_Completion_Timer; 
      rand uvm_reg_field DME_Wait_Timer; 
      rand uvm_reg_field DME_Training_Completion_Timer; 


      // Function: new
      // 
      function new(string name = "Port_15_Link_Timers_Control_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Emphasis_Command_Timeout = uvm_reg_field::type_id::create("Emphasis_Command_Timeout");
         CW_Training_Completion_Timer = uvm_reg_field::type_id::create("CW_Training_Completion_Timer");
         DME_Wait_Timer = uvm_reg_field::type_id::create("DME_Wait_Timer");
         DME_Training_Completion_Timer = uvm_reg_field::type_id::create("DME_Training_Completion_Timer");

         Emphasis_Command_Timeout.configure(this, 8, 24, "RW", 0, 8'hff, 1, 1, 1);
         CW_Training_Completion_Timer.configure(this, 8, 16, "RW", 0, 8'h00, 1, 1, 1);
         DME_Wait_Timer.configure(this, 8, 8, "RW", 0, 8'h3f, 1, 1, 1);
         DME_Training_Completion_Timer.configure(this, 8, 0, "RW", 0, 8'h00, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_8_VC0_BW_Allocation_Register_reg
   // 
   // BW Register
   //--------------------------------------------------------------------

   class Port_8_VC0_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_8_VC0_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 
      rand uvm_reg_field Bandwidth_Reservation_Precision; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field VC0_BW_Res_Enable; 
      uvm_reg_field VC0_Bandwidth_Reservation_Capable; 


      // Function: new
      // 
      function new(string name = "Port_8_VC0_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");
         Bandwidth_Reservation_Precision = uvm_reg_field::type_id::create("Bandwidth_Reservation_Precision");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         VC0_BW_Res_Enable = uvm_reg_field::type_id::create("VC0_BW_Res_Enable");
         VC0_Bandwidth_Reservation_Capable = uvm_reg_field::type_id::create("VC0_Bandwidth_Reservation_Capable");

         Bandwidth_Allocation.configure(this, 16, 16, "RW", 0, 16'h0000, 1, 1, 1);
         Bandwidth_Reservation_Precision.configure(this, 8, 8, "RW", 0, 8'h00, 1, 1, 1);
         Reserved.configure(this, 6, 2, "RO", 0, 6'b000000, 1, 0, 0);
         VC0_BW_Res_Enable.configure(this, 1, 1, "RW", 0, 1'b0, 1, 1, 0);
         VC0_Bandwidth_Reservation_Capable.configure(this, 1, 0, "RO", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_5_Timestamp_0_LSW_CSR_reg
   // 
   // Timestamp_0_LSW_Register
   //--------------------------------------------------------------------

   class Port_5_Timestamp_0_LSW_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_5_Timestamp_0_LSW_CSR_reg)

      uvm_reg_field LSW_Bits; 


      // Function: new
      // 
      function new(string name = "Port_5_Timestamp_0_LSW_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         LSW_Bits = uvm_reg_field::type_id::create("LSW_Bits");

         LSW_Bits.configure(this, 32, 0, "RO", 0, 32'h00000000, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_3_Power_Management_CSR_reg
   // 
   // Power_Management_Register
   //--------------------------------------------------------------------

   class Port_3_Power_Management_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_3_Power_Management_CSR_reg)

      uvm_reg_field Reserved; 
      uvm_reg_field Status_of_Link_Partner_Transmit_Width_Change; 
      rand uvm_reg_field Change_Link_Partner_Transmit_width; 
      uvm_reg_field Status_of_My_Transmit_Width_Change; 
      rand uvm_reg_field Change_My_Transmit_Width; 
      uvm_reg_field Reciever_Width_Status; 
      uvm_reg_field Transmit_Width_Status; 
      rand uvm_reg_field Asymmetric_Modes_Enabled; 
      uvm_reg_field Asymmetric_Modes_Supported; 


      // Function: new
      // 
      function new(string name = "Port_3_Power_Management_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Status_of_Link_Partner_Transmit_Width_Change = uvm_reg_field::type_id::create("Status_of_Link_Partner_Transmit_Width_Change");
         Change_Link_Partner_Transmit_width = uvm_reg_field::type_id::create("Change_Link_Partner_Transmit_width");
         Status_of_My_Transmit_Width_Change = uvm_reg_field::type_id::create("Status_of_My_Transmit_Width_Change");
         Change_My_Transmit_Width = uvm_reg_field::type_id::create("Change_My_Transmit_Width");
         Reciever_Width_Status = uvm_reg_field::type_id::create("Reciever_Width_Status");
         Transmit_Width_Status = uvm_reg_field::type_id::create("Transmit_Width_Status");
         Asymmetric_Modes_Enabled = uvm_reg_field::type_id::create("Asymmetric_Modes_Enabled");
         Asymmetric_Modes_Supported = uvm_reg_field::type_id::create("Asymmetric_Modes_Supported");

         Reserved.configure(this, 6, 26, "RO", 0, 6'b000000, 1, 0, 0);
         Status_of_Link_Partner_Transmit_Width_Change.configure(this, 2, 24, "RO", 0, 2'b00, 1, 0, 0);
         Change_Link_Partner_Transmit_width.configure(this, 3, 21, "WRC", 0, 3'b000, 1, 1, 0);
         Status_of_My_Transmit_Width_Change.configure(this, 2, 19, "RO", 0, 2'b00, 1, 0, 0);
         Change_My_Transmit_Width.configure(this, 3, 16, "WRC", 0, 3'b000, 1, 1, 0);
         Reciever_Width_Status.configure(this, 3, 13, "RO", 0, 3'b000, 1, 0, 0);
         Transmit_Width_Status.configure(this, 3, 10, "RO", 0, 3'b000, 1, 0, 0);
         Asymmetric_Modes_Enabled.configure(this, 5, 5, "RW", 0, 5'b00000, 1, 1, 0);
         Asymmetric_Modes_Supported.configure(this, 5, 0, "RO", 0, 5'b00000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_9_Packet_Control_Symbol_Capture_0_CSR_reg
   // 
   // Symbol Capture Register
   //--------------------------------------------------------------------

   class Port_9_Packet_Control_Symbol_Capture_0_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_9_Packet_Control_Symbol_Capture_0_CSR_reg)

      rand uvm_reg_field Capture0; 


      // Function: new
      // 
      function new(string name = "Port_9_Packet_Control_Symbol_Capture_0_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture0 = uvm_reg_field::type_id::create("Capture0");

         Capture0.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_5_VC_Control_and_Status_Register_reg
   // 
   // CSR Register
   //--------------------------------------------------------------------

   class Port_5_VC_Control_and_Status_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_5_VC_Control_and_Status_Register_reg)

      rand uvm_reg_field VCs_Enable; 
      uvm_reg_field VCs_Support; 
      rand uvm_reg_field CT_Mode; 
      rand uvm_reg_field VC_Refresh_Interval; 


      // Function: new
      // 
      function new(string name = "Port_5_VC_Control_and_Status_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         VCs_Enable = uvm_reg_field::type_id::create("VCs_Enable");
         VCs_Support = uvm_reg_field::type_id::create("VCs_Support");
         CT_Mode = uvm_reg_field::type_id::create("CT_Mode");
         VC_Refresh_Interval = uvm_reg_field::type_id::create("VC_Refresh_Interval");

         VCs_Enable.configure(this, 8, 24, "RW", 0, 8'h00, 1, 1, 1);
         VCs_Support.configure(this, 8, 16, "RO", 0, 8'h00, 1, 0, 1);
         CT_Mode.configure(this, 8, 8, "RW", 0, 8'h00, 1, 1, 1);
         VC_Refresh_Interval.configure(this, 8, 0, "RW", 0, 8'h00, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_4_Timestamp_Generator_Synchronization_CSR_reg
   // 
   // Timestamp_Generator_Synchronization_Register
   //--------------------------------------------------------------------

   class Port_4_Timestamp_Generator_Synchronization_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_4_Timestamp_Generator_Synchronization_CSR_reg)

      rand uvm_reg_field Asymmetry; 
      rand uvm_reg_field TX_Has_Lowwer_Latency; 
      uvm_reg_field Reserved_1; 
      rand uvm_reg_field Port_Opening_Mode; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Auto_Update_Link_Partner_Timestamp_Generators; 
      rand uvm_reg_field Disable_Clock_Compensation_Sequence; 
      rand uvm_reg_field Accept_Timestamps; 


      // Function: new
      // 
      function new(string name = "Port_4_Timestamp_Generator_Synchronization_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Asymmetry = uvm_reg_field::type_id::create("Asymmetry");
         TX_Has_Lowwer_Latency = uvm_reg_field::type_id::create("TX_Has_Lowwer_Latency");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         Port_Opening_Mode = uvm_reg_field::type_id::create("Port_Opening_Mode");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Auto_Update_Link_Partner_Timestamp_Generators = uvm_reg_field::type_id::create("Auto_Update_Link_Partner_Timestamp_Generators");
         Disable_Clock_Compensation_Sequence = uvm_reg_field::type_id::create("Disable_Clock_Compensation_Sequence");
         Accept_Timestamps = uvm_reg_field::type_id::create("Accept_Timestamps");

         Asymmetry.configure(this, 12, 20, "RW", 0, 12'h000, 1, 1, 0);
         TX_Has_Lowwer_Latency.configure(this, 1, 19, "RW", 0, 1'b0, 1, 1, 0);
         Reserved_1.configure(this, 11, 8, "RO", 0, 11'b00000000000, 1, 0, 0);
         Port_Opening_Mode.configure(this, 2, 6, "RW", 0, 2'b00, 1, 1, 0);
         Reserved.configure(this, 3, 3, "RO", 0, 3'b000, 1, 0, 0);
         Auto_Update_Link_Partner_Timestamp_Generators.configure(this, 1, 2, "RW", 0, 1'b0, 1, 1, 0);
         Disable_Clock_Compensation_Sequence.configure(this, 1, 1, "RW", 0, 1'b0, 1, 1, 0);
         Accept_Timestamps.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_8_Timestamp_0_MSW_CSR_reg
   // 
   // Timestamp_0_MSW_Register
   //--------------------------------------------------------------------

   class Port_8_Timestamp_0_MSW_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_8_Timestamp_0_MSW_CSR_reg)

      uvm_reg_field MSW_Bits; 


      // Function: new
      // 
      function new(string name = "Port_8_Timestamp_0_MSW_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         MSW_Bits = uvm_reg_field::type_id::create("MSW_Bits");

         MSW_Bits.configure(this, 32, 0, "RO", 0, 32'h00000000, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_15_Packet_Capture_2_CSR_reg
   // 
   // Packet Capture 2 Register
   //--------------------------------------------------------------------

   class Port_15_Packet_Capture_2_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_15_Packet_Capture_2_CSR_reg)

      rand uvm_reg_field Capture2; 


      // Function: new
      // 
      function new(string name = "Port_15_Packet_Capture_2_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture2 = uvm_reg_field::type_id::create("Capture2");

         Capture2.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_4_Inbound_ackID_CSR_reg
   // 
   // Inbound_Register
   //--------------------------------------------------------------------

   class Port_4_Inbound_ackID_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_4_Inbound_ackID_CSR_reg)

      rand uvm_reg_field Inbound_ackID;  
      uvm_reg_field Reserved; 


      // Function: new
      // 
      function new(string name = "Port_4_Inbound_ackID_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Inbound_ackID = uvm_reg_field::type_id::create("Inbound_ackID");
         Reserved = uvm_reg_field::type_id::create("Reserved");

       Inbound_ackID.configure(this, 12, 20, "RW", 0, 12'h000, 1, 1, 0);
         Reserved.configure(this, 20, 0, "RO", 0, 20'h00000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_8_Packet_Capture_1_CSR_reg
   // 
   // Packet Capture 1 Register
   //--------------------------------------------------------------------

   class Port_8_Packet_Capture_1_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_8_Packet_Capture_1_CSR_reg)

      rand uvm_reg_field Capture1; 


      // Function: new
      // 
      function new(string name = "Port_8_Packet_Capture_1_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture1 = uvm_reg_field::type_id::create("Capture1");

         Capture1.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_15_Timestamp_Offset_CSR_reg
   // 
   // Timestamp_Offset_CSR_Register
   //--------------------------------------------------------------------

   class Port_15_Timestamp_Offset_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_15_Timestamp_Offset_CSR_reg)

      uvm_reg_field Reserved; 
      rand uvm_reg_field Offset; 


      // Function: new
      // 
      function new(string name = "Port_15_Timestamp_Offset_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Offset = uvm_reg_field::type_id::create("Offset");

         Reserved.configure(this, 16, 16, "RO", 0, 16'h0000, 1, 0, 1);
         Offset.configure(this, 16, 0, "RW", 0, 16'h0000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_6_Timestamp_1_LSW_CSR_reg
   // 
   // Timestamp_1_LSW_Register
   //--------------------------------------------------------------------

   class Port_6_Timestamp_1_LSW_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_6_Timestamp_1_LSW_CSR_reg)

      uvm_reg_field LSW_Bits; 


      // Function: new
      // 
      function new(string name = "Port_6_Timestamp_1_LSW_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         LSW_Bits = uvm_reg_field::type_id::create("LSW_Bits");

         LSW_Bits.configure(this, 32, 0, "RO", 0, 32'h00000000, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_5_Packet_Capture_4_CSR_reg
   // 
   // Packet Capture 4 Register
   //--------------------------------------------------------------------

   class Port_5_Packet_Capture_4_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_5_Packet_Capture_4_CSR_reg)

      rand uvm_reg_field Capture4; 


      // Function: new
      // 
      function new(string name = "Port_5_Packet_Capture_4_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture4 = uvm_reg_field::type_id::create("Capture4");

         Capture4.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_3_Control_CSR_reg
   // 
   // Control Register
   //--------------------------------------------------------------------

   class Port_3_Control_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_3_Control_CSR_reg)

      uvm_reg_field Port_Type; 
      rand uvm_reg_field Port_Lockout; 
      rand uvm_reg_field Drop_Packet_Enable; 
      rand uvm_reg_field Stop_on_Port_Failed_encountered_Enable; 
      rand uvm_reg_field Implementation_defined; 
      uvm_reg_field Extended_Port_Width_Support; 
      rand uvm_reg_field Extended_Port_Width_Override; 
      rand uvm_reg_field Flow_Arbitration_Participant; 
      rand uvm_reg_field Enumeration_Boundary; 
      rand uvm_reg_field Flow_Control_Participant; 
      rand uvm_reg_field Multicast_event_Participant; 
      rand uvm_reg_field Error_Checking_Disable; 
      rand uvm_reg_field Input_Port_Enable; 
      rand uvm_reg_field Output_Port_Enable; 
      rand uvm_reg_field Port_Disable; 
      uvm_reg_field Port_Width_Override; 
      rand uvm_reg_field Initialized_Port_Width; 
      uvm_reg_field Port_Width_Support; 


      // Function: new
      // 
      function new(string name = "Port_3_Control_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Port_Type = uvm_reg_field::type_id::create("Port_Type");
         Port_Lockout = uvm_reg_field::type_id::create("Port_Lockout");
         Drop_Packet_Enable = uvm_reg_field::type_id::create("Drop_Packet_Enable");
         Stop_on_Port_Failed_encountered_Enable = uvm_reg_field::type_id::create("Stop_on_Port_Failed_encountered_Enable");
         Implementation_defined = uvm_reg_field::type_id::create("Implementation_defined");
         Extended_Port_Width_Support = uvm_reg_field::type_id::create("Extended_Port_Width_Support");
         Extended_Port_Width_Override = uvm_reg_field::type_id::create("Extended_Port_Width_Override");
         Flow_Arbitration_Participant = uvm_reg_field::type_id::create("Flow_Arbitration_Participant");
         Enumeration_Boundary = uvm_reg_field::type_id::create("Enumeration_Boundary");
         Flow_Control_Participant = uvm_reg_field::type_id::create("Flow_Control_Participant");
         Multicast_event_Participant = uvm_reg_field::type_id::create("Multicast_event_Participant");
         Error_Checking_Disable = uvm_reg_field::type_id::create("Error_Checking_Disable");
         Input_Port_Enable = uvm_reg_field::type_id::create("Input_Port_Enable");
         Output_Port_Enable = uvm_reg_field::type_id::create("Output_Port_Enable");
         Port_Disable = uvm_reg_field::type_id::create("Port_Disable");
         Port_Width_Override = uvm_reg_field::type_id::create("Port_Width_Override");
         Initialized_Port_Width = uvm_reg_field::type_id::create("Initialized_Port_Width");
         Port_Width_Support = uvm_reg_field::type_id::create("Port_Width_Support");

         Port_Type.configure(this, 1, 31, "RO", 0, 1'b0, 1, 0, 0);
         Port_Lockout.configure(this, 1, 30, "RW", 0, 1'b0, 1, 1, 0);
         Drop_Packet_Enable.configure(this, 1, 29, "RW", 0, 1'b0, 1, 1, 0);
         Stop_on_Port_Failed_encountered_Enable.configure(this, 1, 28, "RW", 0, 1'b0, 1, 1, 0);
         Implementation_defined.configure(this, 8, 20, "RW", 0, 8'h00, 1, 1, 0);
         Extended_Port_Width_Support.configure(this, 2, 18, "RO", 0, 2'b00, 1, 0, 0);
         Extended_Port_Width_Override.configure(this, 2, 16, "RW", 0, 2'b00, 1, 1, 0);
         Flow_Arbitration_Participant.configure(this, 1, 15, "RW", 0, 1'b0, 1, 1, 0);
         Enumeration_Boundary.configure(this, 1, 14, "RW", 0, 1'b0, 1, 1, 0);
         Flow_Control_Participant.configure(this, 1, 13, "RW", 0, 1'b0, 1, 1, 0);
         Multicast_event_Participant.configure(this, 1, 12, "RW", 0, 1'b0, 1, 1, 0);
         Error_Checking_Disable.configure(this, 1, 11, "RW", 0, 1'b0, 1, 1, 0);
         Input_Port_Enable.configure(this, 1, 10, "RW", 0, 1'b0, 1, 1, 0);
         Output_Port_Enable.configure(this, 1, 9, "RW", 0, 1'b0, 1, 1, 0);
         Port_Disable.configure(this, 1, 8, "RW", 0, 1'b0, 1, 1, 0);
         Port_Width_Override.configure(this, 3, 5, "RO", 0, 3'b000, 1, 0, 0);
         Initialized_Port_Width.configure(this, 3, 2, "RW", 0, 3'b000, 1, 1, 0);
         Port_Width_Support.configure(this, 2, 0, "RO", 0, 2'b00, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_2_Error_Rate_Threshold_CSR_reg
   // 
   // Error Threshold Register
   //--------------------------------------------------------------------

   class Port_2_Error_Rate_Threshold_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_2_Error_Rate_Threshold_CSR_reg)

      uvm_reg_field Reserved; 
      rand uvm_reg_field Error_Rate_Degraded_Threshold_Trigger; 
      rand uvm_reg_field Error_Rate_Failed_Threshold_Trigger; 


      // Function: new
      // 
      function new(string name = "Port_2_Error_Rate_Threshold_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Error_Rate_Degraded_Threshold_Trigger = uvm_reg_field::type_id::create("Error_Rate_Degraded_Threshold_Trigger");
         Error_Rate_Failed_Threshold_Trigger = uvm_reg_field::type_id::create("Error_Rate_Failed_Threshold_Trigger");

         Reserved.configure(this, 16, 16, "RO", 0, 16'h0000, 1, 0, 1);
         Error_Rate_Degraded_Threshold_Trigger.configure(this, 8, 8, "RW", 0, 8'hff, 1, 1, 1);
         Error_Rate_Failed_Threshold_Trigger.configure(this, 8, 0, "RW", 0, 8'hff, 1, 1, 1);
      endfunction
   endclass


   //--------------------------------------------------------------------
   // Class: Port_0_Packet_Capture_3_CSR_reg
   // 
   // Packet Capture 3 Register
   //--------------------------------------------------------------------

   class Port_0_Packet_Capture_3_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_0_Packet_Capture_3_CSR_reg)

      rand uvm_reg_field Capture3; 


      // Function: new
      // 
      function new(string name = "Port_0_Packet_Capture_3_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture3 = uvm_reg_field::type_id::create("Capture3");

         Capture3.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_4_Packet_Capture_2_CSR_reg
   // 
   // Packet Capture 2 Register
   //--------------------------------------------------------------------

   class Port_4_Packet_Capture_2_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_4_Packet_Capture_2_CSR_reg)

      rand uvm_reg_field Capture2; 


      // Function: new
      // 
      function new(string name = "Port_4_Packet_Capture_2_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture2 = uvm_reg_field::type_id::create("Capture2");

         Capture2.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_13_VC6_VC2_BW_Allocation_Register_reg
   // 
   // BW Allocation Register
   //--------------------------------------------------------------------

   class Port_13_VC6_VC2_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_13_VC6_VC2_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 


      // Function: new
      // 
      function new(string name = "Port_13_VC6_VC2_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");

         Bandwidth_Allocation.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_6_Packet_Capture_3_CSR_reg
   // 
   // Packet Capture 3 Register
   //--------------------------------------------------------------------

   class Port_6_Packet_Capture_3_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_6_Packet_Capture_3_CSR_reg)

      rand uvm_reg_field Capture3; 


      // Function: new
      // 
      function new(string name = "Port_6_Packet_Capture_3_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture3 = uvm_reg_field::type_id::create("Capture3");

         Capture3.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_7_Timestamp_1_MSW_CSR_reg
   // 
   // Timestamp_1_MSW_Register
   //--------------------------------------------------------------------

   class Port_7_Timestamp_1_MSW_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_7_Timestamp_1_MSW_CSR_reg)

      uvm_reg_field MSW_Bits; 


      // Function: new
      // 
      function new(string name = "Port_7_Timestamp_1_MSW_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         MSW_Bits = uvm_reg_field::type_id::create("MSW_Bits");

         MSW_Bits.configure(this, 32, 0, "RO", 0, 32'h00000000, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_2_Error_Rate_CSR_reg
   // 
   // Error Rate Register
   //--------------------------------------------------------------------

   class Port_2_Error_Rate_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_2_Error_Rate_CSR_reg)

      rand uvm_reg_field Error_Rate_Counter; 
      rand uvm_reg_field Peak_Error_Rate; 
      rand uvm_reg_field Error_Rate_Recovery; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Error_Rate_Bias; 


      // Function: new
      // 
      function new(string name = "Port_2_Error_Rate_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Error_Rate_Counter = uvm_reg_field::type_id::create("Error_Rate_Counter");
         Peak_Error_Rate = uvm_reg_field::type_id::create("Peak_Error_Rate");
         Error_Rate_Recovery = uvm_reg_field::type_id::create("Error_Rate_Recovery");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Error_Rate_Bias = uvm_reg_field::type_id::create("Error_Rate_Bias");

         Error_Rate_Counter.configure(this, 8, 24, "RW", 0, 8'h00, 1, 1, 1);
         Peak_Error_Rate.configure(this, 8, 16, "RW", 0, 8'h00, 1, 1, 1);
         Error_Rate_Recovery.configure(this, 2, 14, "RW", 0, 2'b00, 1, 1, 0);
         Reserved.configure(this, 6, 8, "RO", 0, 6'b000000, 1, 0, 0);
         Error_Rate_Bias.configure(this, 8, 0, "RW", 0, 8'h80, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_14_Power_Management_CSR_reg
   // 
   // Power_Management_Register
   //--------------------------------------------------------------------

   class Port_14_Power_Management_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_14_Power_Management_CSR_reg)

      uvm_reg_field Reserved; 
      uvm_reg_field Status_of_Link_Partner_Transmit_Width_Change; 
      rand uvm_reg_field Change_Link_Partner_Transmit_width; 
      uvm_reg_field Status_of_My_Transmit_Width_Change; 
      rand uvm_reg_field Change_My_Transmit_Width; 
      uvm_reg_field Reciever_Width_Status; 
      uvm_reg_field Transmit_Width_Status; 
      rand uvm_reg_field Asymmetric_Modes_Enabled; 
      uvm_reg_field Asymmetric_Modes_Supported; 


      // Function: new
      // 
      function new(string name = "Port_14_Power_Management_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Status_of_Link_Partner_Transmit_Width_Change = uvm_reg_field::type_id::create("Status_of_Link_Partner_Transmit_Width_Change");
         Change_Link_Partner_Transmit_width = uvm_reg_field::type_id::create("Change_Link_Partner_Transmit_width");
         Status_of_My_Transmit_Width_Change = uvm_reg_field::type_id::create("Status_of_My_Transmit_Width_Change");
         Change_My_Transmit_Width = uvm_reg_field::type_id::create("Change_My_Transmit_Width");
         Reciever_Width_Status = uvm_reg_field::type_id::create("Reciever_Width_Status");
         Transmit_Width_Status = uvm_reg_field::type_id::create("Transmit_Width_Status");
         Asymmetric_Modes_Enabled = uvm_reg_field::type_id::create("Asymmetric_Modes_Enabled");
         Asymmetric_Modes_Supported = uvm_reg_field::type_id::create("Asymmetric_Modes_Supported");

         Reserved.configure(this, 6, 26, "RO", 0, 6'b000000, 1, 0, 0);
         Status_of_Link_Partner_Transmit_Width_Change.configure(this, 2, 24, "RO", 0, 2'b00, 1, 0, 0);
         Change_Link_Partner_Transmit_width.configure(this, 3, 21, "WRC", 0, 3'b000, 1, 1, 0);
         Status_of_My_Transmit_Width_Change.configure(this, 2, 19, "RO", 0, 2'b00, 1, 0, 0);
         Change_My_Transmit_Width.configure(this, 3, 16, "WRC", 0, 3'b000, 1, 1, 0);
         Reciever_Width_Status.configure(this, 3, 13, "RO", 0, 3'b000, 1, 0, 0);
         Transmit_Width_Status.configure(this, 3, 10, "RO", 0, 3'b000, 1, 0, 0);
         Asymmetric_Modes_Enabled.configure(this, 5, 5, "RW", 0, 5'b00000, 1, 1, 0);
         Asymmetric_Modes_Supported.configure(this, 5, 0, "RO", 0, 5'b00000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_2_Link_Timers_Control_CSR_reg
   // 
   // Link_Timers_Control_Register
   //--------------------------------------------------------------------

   class Port_2_Link_Timers_Control_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_2_Link_Timers_Control_CSR_reg)

      rand uvm_reg_field Emphasis_Command_Timeout; 
      rand uvm_reg_field CW_Training_Completion_Timer; 
      rand uvm_reg_field DME_Wait_Timer; 
      rand uvm_reg_field DME_Training_Completion_Timer; 


      // Function: new
      // 
      function new(string name = "Port_2_Link_Timers_Control_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Emphasis_Command_Timeout = uvm_reg_field::type_id::create("Emphasis_Command_Timeout");
         CW_Training_Completion_Timer = uvm_reg_field::type_id::create("CW_Training_Completion_Timer");
         DME_Wait_Timer = uvm_reg_field::type_id::create("DME_Wait_Timer");
         DME_Training_Completion_Timer = uvm_reg_field::type_id::create("DME_Training_Completion_Timer");

         Emphasis_Command_Timeout.configure(this, 8, 24, "RW", 0, 8'hff, 1, 1, 1);
         CW_Training_Completion_Timer.configure(this, 8, 16, "RW", 0, 8'h00, 1, 1, 1);
         DME_Wait_Timer.configure(this, 8, 8, "RW", 0, 8'h3f, 1, 1, 1);
         DME_Training_Completion_Timer.configure(this, 8, 0, "RW", 0, 8'h00, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_6_Link_Timers_Control_CSR_reg
   // 
   // Link_Timers_Control_Register
   //--------------------------------------------------------------------

   class Port_6_Link_Timers_Control_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_6_Link_Timers_Control_CSR_reg)

      rand uvm_reg_field Emphasis_Command_Timeout; 
      rand uvm_reg_field CW_Training_Completion_Timer; 
      rand uvm_reg_field DME_Wait_Timer; 
      rand uvm_reg_field DME_Training_Completion_Timer; 


      // Function: new
      // 
      function new(string name = "Port_6_Link_Timers_Control_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Emphasis_Command_Timeout = uvm_reg_field::type_id::create("Emphasis_Command_Timeout");
         CW_Training_Completion_Timer = uvm_reg_field::type_id::create("CW_Training_Completion_Timer");
         DME_Wait_Timer = uvm_reg_field::type_id::create("DME_Wait_Timer");
         DME_Training_Completion_Timer = uvm_reg_field::type_id::create("DME_Training_Completion_Timer");

         Emphasis_Command_Timeout.configure(this, 8, 24, "RW", 0, 8'hff, 1, 1, 1);
         CW_Training_Completion_Timer.configure(this, 8, 16, "RW", 0, 8'h00, 1, 1, 1);
         DME_Wait_Timer.configure(this, 8, 8, "RW", 0, 8'h3f, 1, 1, 1);
         DME_Training_Completion_Timer.configure(this, 8, 0, "RW", 0, 8'h00, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_6_VC0_BW_Allocation_Register_reg
   // 
   // BW Register
   //--------------------------------------------------------------------

   class Port_6_VC0_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_6_VC0_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 
      rand uvm_reg_field Bandwidth_Reservation_Precision; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field VC0_BW_Res_Enable; 
      uvm_reg_field VC0_Bandwidth_Reservation_Capable; 


      // Function: new
      // 
      function new(string name = "Port_6_VC0_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");
         Bandwidth_Reservation_Precision = uvm_reg_field::type_id::create("Bandwidth_Reservation_Precision");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         VC0_BW_Res_Enable = uvm_reg_field::type_id::create("VC0_BW_Res_Enable");
         VC0_Bandwidth_Reservation_Capable = uvm_reg_field::type_id::create("VC0_Bandwidth_Reservation_Capable");

         Bandwidth_Allocation.configure(this, 16, 16, "RW", 0, 16'h0000, 1, 1, 1);
         Bandwidth_Reservation_Precision.configure(this, 8, 8, "RW", 0, 8'h00, 1, 1, 1);
         Reserved.configure(this, 6, 2, "RO", 0, 6'b000000, 1, 0, 0);
         VC0_BW_Res_Enable.configure(this, 1, 1, "RW", 0, 1'b0, 1, 1, 0);
         VC0_Bandwidth_Reservation_Capable.configure(this, 1, 0, "RO", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Lane_8_Status_2_CSR_reg
   // 
   // Status 2 Register
   //--------------------------------------------------------------------

   class Lane_8_Status_2_CSR_reg extends uvm_reg;
      `uvm_object_utils(Lane_8_Status_2_CSR_reg)

      uvm_reg_field Reserved; 
      uvm_reg_field LP_Change_Receiver_Width_Command_Negative_Acknowlege; 
      uvm_reg_field LP_Change_Receiver_Width_Command_Acknowlege; 
      uvm_reg_field LP_Change_Receiver_Width_Command; 
      uvm_reg_field LP_Lane_Trained; 
      uvm_reg_field LP_Receive_Lane_Ready; 
      uvm_reg_field LP_Receive_Lanes_Ready; 
      uvm_reg_field LP_Receive_Width; 
      uvm_reg_field LP_Transmit_1x_Mode; 
      uvm_reg_field LP_Port_Intialized; 
      uvm_reg_field LP_Asymmetric_mode_Enabled; 
      uvm_reg_field LP_Retraining_Enabled; 
      uvm_reg_field LP_Remort_Training_Support; 
      uvm_reg_field LP_Lane_Number; 
      uvm_reg_field LP_Port_Number; 


      // Function: new
      // 
      function new(string name = "Lane_8_Status_2_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         LP_Change_Receiver_Width_Command_Negative_Acknowlege = uvm_reg_field::type_id::create("LP_Change_Receiver_Width_Command_Negative_Acknowlege");
         LP_Change_Receiver_Width_Command_Acknowlege = uvm_reg_field::type_id::create("LP_Change_Receiver_Width_Command_Acknowlege");
         LP_Change_Receiver_Width_Command = uvm_reg_field::type_id::create("LP_Change_Receiver_Width_Command");
         LP_Lane_Trained = uvm_reg_field::type_id::create("LP_Lane_Trained");
         LP_Receive_Lane_Ready = uvm_reg_field::type_id::create("LP_Receive_Lane_Ready");
         LP_Receive_Lanes_Ready = uvm_reg_field::type_id::create("LP_Receive_Lanes_Ready");
         LP_Receive_Width = uvm_reg_field::type_id::create("LP_Receive_Width");
         LP_Transmit_1x_Mode = uvm_reg_field::type_id::create("LP_Transmit_1x_Mode");
         LP_Port_Intialized = uvm_reg_field::type_id::create("LP_Port_Intialized");
         LP_Asymmetric_mode_Enabled = uvm_reg_field::type_id::create("LP_Asymmetric_mode_Enabled");
         LP_Retraining_Enabled = uvm_reg_field::type_id::create("LP_Retraining_Enabled");
         LP_Remort_Training_Support = uvm_reg_field::type_id::create("LP_Remort_Training_Support");
         LP_Lane_Number = uvm_reg_field::type_id::create("LP_Lane_Number");
         LP_Port_Number = uvm_reg_field::type_id::create("LP_Port_Number");

         Reserved.configure(this, 2, 30, "RO", 0, 2'b00, 1, 0, 0);
         LP_Change_Receiver_Width_Command_Negative_Acknowlege.configure(this, 1, 29, "RO", 0, 1'b0, 1, 0, 0);
         LP_Change_Receiver_Width_Command_Acknowlege.configure(this, 1, 28, "RO", 0, 1'b0, 1, 0, 0);
         LP_Change_Receiver_Width_Command.configure(this, 3, 25, "RO", 0, 3'b000, 1, 0, 0);
         LP_Lane_Trained.configure(this, 1, 24, "RO", 0, 1'b0, 1, 0, 0);
         LP_Receive_Lane_Ready.configure(this, 1, 23, "RO", 0, 1'b0, 1, 0, 0);
         LP_Receive_Lanes_Ready.configure(this, 3, 20, "RO", 0, 3'b000, 1, 0, 0);
         LP_Receive_Width.configure(this, 3, 17, "RO", 0, 3'b000, 1, 0, 0);
         LP_Transmit_1x_Mode.configure(this, 1, 16, "RO", 0, 1'b0, 1, 0, 0);
         LP_Port_Intialized.configure(this, 1, 15, "RO", 0, 1'b0, 1, 0, 0);
         LP_Asymmetric_mode_Enabled.configure(this, 1, 14, "RO", 0, 1'b0, 1, 0, 0);
         LP_Retraining_Enabled.configure(this, 1, 13, "RO", 0, 1'b0, 1, 0, 0);
         LP_Remort_Training_Support.configure(this, 1, 12, "RO", 0, 1'b0, 1, 0, 0);
         LP_Lane_Number.configure(this, 4, 8, "RO", 0, 4'h0, 1, 0, 0);
         LP_Port_Number.configure(this, 8, 0, "RO", 0, 8'h00, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_9_Packet_Capture_3_CSR_reg
   // 
   // Packet Capture 3 Register
   //--------------------------------------------------------------------

   class Port_9_Packet_Capture_3_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_9_Packet_Capture_3_CSR_reg)

      rand uvm_reg_field Capture3; 


      // Function: new
      // 
      function new(string name = "Port_9_Packet_Capture_3_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture3 = uvm_reg_field::type_id::create("Capture3");

         Capture3.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass

   //--------------------------------------------------------------------
   // Class: Lane_1_Status_0_CSR_reg
   // 
   // Status 0 Register
   //--------------------------------------------------------------------

   class Lane_1_Status_0_CSR_reg extends uvm_reg;
      `uvm_object_utils(Lane_1_Status_0_CSR_reg)

      uvm_reg_field Status2_7_CSRs_implemented; 
      uvm_reg_field Status1_CSR_implemented; 
      uvm_reg_field Reserved; 
      uvm_reg_field Rcvr_trained_state_change; 
      uvm_reg_field Lane_sync_state_change; 
      uvm_reg_field lane_8B_10B_decoding_errors; 
      uvm_reg_field Receiver_lane_ready; 
      uvm_reg_field Receiver_lane_sync; 
      uvm_reg_field Receiver_trained; 
      uvm_reg_field Receiver_input_inverted; 
      uvm_reg_field Receiver_type; 
      uvm_reg_field Transmitter_mode; 
      uvm_reg_field Transmitter_type; 
      uvm_reg_field Lane_Number; 
      uvm_reg_field Port_Number; 


      // Function: new
      // 
      function new(string name = "Lane_1_Status_0_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Status2_7_CSRs_implemented = uvm_reg_field::type_id::create("Status2_7_CSRs_implemented");
         Status1_CSR_implemented = uvm_reg_field::type_id::create("Status1_CSR_implemented");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Rcvr_trained_state_change = uvm_reg_field::type_id::create("Rcvr_trained_state_change");
         Lane_sync_state_change = uvm_reg_field::type_id::create("Lane_sync_state_change");
         lane_8B_10B_decoding_errors = uvm_reg_field::type_id::create("lane_8B_10B_decoding_errors");
         Receiver_lane_ready = uvm_reg_field::type_id::create("Receiver_lane_ready");
         Receiver_lane_sync = uvm_reg_field::type_id::create("Receiver_lane_sync");
         Receiver_trained = uvm_reg_field::type_id::create("Receiver_trained");
         Receiver_input_inverted = uvm_reg_field::type_id::create("Receiver_input_inverted");
         Receiver_type = uvm_reg_field::type_id::create("Receiver_type");
         Transmitter_mode = uvm_reg_field::type_id::create("Transmitter_mode");
         Transmitter_type = uvm_reg_field::type_id::create("Transmitter_type");
         Lane_Number = uvm_reg_field::type_id::create("Lane_Number");
         Port_Number = uvm_reg_field::type_id::create("Port_Number");

         Status2_7_CSRs_implemented.configure(this, 3, 29, "RO", 0, 3'b000, 1, 0, 0);
         Status1_CSR_implemented.configure(this, 1, 28, "RO", 0, 1'b0, 1, 0, 0);
         Reserved.configure(this, 2, 26, "RO", 0, 2'b00, 1, 0, 0);
         Rcvr_trained_state_change.configure(this, 1, 25, "RO", 0, 1'b0, 1, 0, 0);
         Lane_sync_state_change.configure(this, 1, 24, "RO", 0, 1'b0, 1, 0, 0);
         lane_8B_10B_decoding_errors.configure(this, 4, 20, "RO", 0, 4'h0, 1, 0, 0);
         Receiver_lane_ready.configure(this, 1, 19, "RO", 0, 1'b0, 1, 0, 0);
         Receiver_lane_sync.configure(this, 1, 18, "RO", 0, 1'b0, 1, 0, 0);
         Receiver_trained.configure(this, 1, 17, "RO", 0, 1'b0, 1, 0, 0);
         Receiver_input_inverted.configure(this, 1, 16, "RO", 0, 1'b0, 1, 0, 0);
         Receiver_type.configure(this, 2, 14, "RO", 0, 2'b00, 1, 0, 0);
         Transmitter_mode.configure(this, 1, 13, "RO", 0, 1'b0, 1, 0, 0);
         Transmitter_type.configure(this, 1, 12, "RO", 0, 1'b0, 1, 0, 0);
         Lane_Number.configure(this, 4, 8, "RO", 0, 4'h0, 1, 0, 0);
         Port_Number.configure(this, 8, 0, "RO", 0, 8'h00, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_6_Timestamp_Synchronization_Status_CSR_reg
   // 
   // Timestamp_Synchronization_Status_CSR_Register
   //--------------------------------------------------------------------

   class Port_6_Timestamp_Synchronization_Status_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_6_Timestamp_Synchronization_Status_CSR_reg)

      uvm_reg_field Delay; 
      uvm_reg_field Reserved; 
      uvm_reg_field Response_Valid; 


      // Function: new
      // 
      function new(string name = "Port_6_Timestamp_Synchronization_Status_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Delay = uvm_reg_field::type_id::create("Delay");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Response_Valid = uvm_reg_field::type_id::create("Response_Valid");

         Delay.configure(this, 10, 22, "RO", 0, 10'b0000000000, 1, 0, 0);
         Reserved.configure(this, 21, 1, "RO", 0, 21'b000000000000000000000, 1, 0, 0);
         Response_Valid.configure(this, 1, 0, "RO", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_12_Link_Maintenance_Request_CSR_reg
   // 
   // Link  Maintenance Request Register
   //--------------------------------------------------------------------

   class Port_12_Link_Maintenance_Request_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_12_Link_Maintenance_Request_CSR_reg)

      uvm_reg_field Command; 
      uvm_reg_field Reserved; 


      // Function: new
      // 
      function new(string name = "Port_12_Link_Maintenance_Request_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Command = uvm_reg_field::type_id::create("Command");
         Reserved = uvm_reg_field::type_id::create("Reserved");

         Command.configure(this, 3, 29, "RW", 0, 3'b000, 1, 1, 1);
         Reserved.configure(this, 29, 0, "RO", 0, 29'b00000000000000000000000000000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_9_Initialization_Status_CSR_reg
   // 
   // Initialization_Status_Register
   //--------------------------------------------------------------------

   class Port_9_Initialization_Status_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_9_Initialization_Status_CSR_reg)

      uvm_reg_field Reserved_3; 
      uvm_reg_field Transmitted_Status_Control_Symbols; 
      uvm_reg_field Reserved_2; 
      uvm_reg_field Received_Status_Control_Symbols; 
      uvm_reg_field Port_Initialization_State_Machine; 
      uvm_reg_field Reserved_1; 
      uvm_reg_field x1_x2_Mode_Detection; 
      uvm_reg_field Reserved; 
      uvm_reg_field Lane_Alignment; 


      // Function: new
      // 
      function new(string name = "Port_9_Initialization_Status_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved_3 = uvm_reg_field::type_id::create("Reserved_3");
         Transmitted_Status_Control_Symbols = uvm_reg_field::type_id::create("Transmitted_Status_Control_Symbols");
         Reserved_2 = uvm_reg_field::type_id::create("Reserved_2");
         Received_Status_Control_Symbols = uvm_reg_field::type_id::create("Received_Status_Control_Symbols");
         Port_Initialization_State_Machine = uvm_reg_field::type_id::create("Port_Initialization_State_Machine");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         x1_x2_Mode_Detection = uvm_reg_field::type_id::create("x1_x2_Mode_Detection");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Lane_Alignment = uvm_reg_field::type_id::create("Lane_Alignment");

         Reserved_3.configure(this, 4, 28, "RO", 0, 4'h0, 1, 0, 0);
         Transmitted_Status_Control_Symbols.configure(this, 7, 21, "RO", 0, 7'b0000000, 1, 0, 0);
         Reserved_2.configure(this, 1, 20, "RO", 0, 1'b0, 1, 0, 0);
         Received_Status_Control_Symbols.configure(this, 4, 16, "RO", 0, 4'h0, 1, 0, 0);
         Port_Initialization_State_Machine.configure(this, 5, 11, "RO", 0, 5'b00000, 1, 0, 0);
         Reserved_1.configure(this, 1, 10, "RO", 0, 1'b0, 1, 0, 0);
         x1_x2_Mode_Detection.configure(this, 4, 6, "RO", 0, 4'h0, 1, 0, 0);
         Reserved.configure(this, 1, 5, "RO", 0, 1'b0, 1, 0, 0);
         Lane_Alignment.configure(this, 5, 0, "RO", 0, 5'b00000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_6_Timestamp_1_MSW_CSR_reg
   // 
   // Timestamp_1_MSW_Register
   //--------------------------------------------------------------------

   class Port_6_Timestamp_1_MSW_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_6_Timestamp_1_MSW_CSR_reg)

      uvm_reg_field MSW_Bits; 


      // Function: new
      // 
      function new(string name = "Port_6_Timestamp_1_MSW_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         MSW_Bits = uvm_reg_field::type_id::create("MSW_Bits");

         MSW_Bits.configure(this, 32, 0, "RO", 0, 32'h00000000, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_13_Attributes_Capture_CSR_reg
   // 
   // Attributes Register
   //--------------------------------------------------------------------

   class Port_13_Attributes_Capture_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_13_Attributes_Capture_CSR_reg)

      rand uvm_reg_field Capture_valid_info; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Implementation_Dependent; 
      rand uvm_reg_field Error_type; 
      rand uvm_reg_field Info_type; 


      // Function: new
      // 
      function new(string name = "Port_13_Attributes_Capture_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture_valid_info = uvm_reg_field::type_id::create("Capture_valid_info");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Implementation_Dependent = uvm_reg_field::type_id::create("Implementation_Dependent");
         Error_type = uvm_reg_field::type_id::create("Error_type");
         Info_type = uvm_reg_field::type_id::create("Info_type");

         Capture_valid_info.configure(this, 1, 31, "RW", 0, 1'b0, 1, 1, 0);
         Reserved.configure(this, 3, 28, "RO", 0, 3'b000, 1, 0, 0);
         Implementation_Dependent.configure(this, 20, 8, "RW", 0, 20'h00000, 1, 1, 0);
         Error_type.configure(this, 5, 3, "RW", 0, 5'b00000, 1, 1, 0);
         Info_type.configure(this, 3, 0, "RW", 0, 3'b000, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_2_Link_Timers_Control_2_CSR_reg
   // 
   // Link_Timers_Control_2_Register
   //--------------------------------------------------------------------

   class Port_2_Link_Timers_Control_2_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_2_Link_Timers_Control_2_CSR_reg)

      uvm_reg_field Reserved; 
      rand uvm_reg_field Recovery_Timer; 
      rand uvm_reg_field Discovery_Completion_Timer; 
      rand uvm_reg_field Retraining_Completion_Timer; 


      // Function: new
      // 
      function new(string name = "Port_2_Link_Timers_Control_2_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Recovery_Timer = uvm_reg_field::type_id::create("Recovery_Timer");
         Discovery_Completion_Timer = uvm_reg_field::type_id::create("Discovery_Completion_Timer");
         Retraining_Completion_Timer = uvm_reg_field::type_id::create("Retraining_Completion_Timer");

         Reserved.configure(this, 8, 24, "RO", 0, 8'h00, 1, 0, 1);
         Recovery_Timer.configure(this, 8, 16, "RW", 0, 8'hff, 1, 1, 1);
         Discovery_Completion_Timer.configure(this, 8, 8, "RW", 0, 8'h00, 1, 1, 1);
         Retraining_Completion_Timer.configure(this, 8, 0, "RW", 0, 8'hfe, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_12_Packet_Capture_4_CSR_reg
   // 
   // Packet Capture 4 Register
   //--------------------------------------------------------------------

   class Port_12_Packet_Capture_4_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_12_Packet_Capture_4_CSR_reg)

      rand uvm_reg_field Capture4; 


      // Function: new
      // 
      function new(string name = "Port_12_Packet_Capture_4_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture4 = uvm_reg_field::type_id::create("Capture4");

         Capture4.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_15_Outbound_ackID_CSR_reg
   // 
   // Outbound_Register
   //--------------------------------------------------------------------

   class Port_15_Outbound_ackID_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_15_Outbound_ackID_CSR_reg)

      rand uvm_reg_field Outbound_ackID; 
      rand uvm_reg_field Outstanding_ackID; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Clr_outstanding_ackID; 


      // Function: new
      // 
      function new(string name = "Port_15_Outbound_ackID_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Outbound_ackID = uvm_reg_field::type_id::create("Outbound_ackID");
         Outstanding_ackID = uvm_reg_field::type_id::create("Outstanding_ackID");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Clr_outstanding_ackID = uvm_reg_field::type_id::create("Clr_outstanding_ackID");

         Outbound_ackID.configure(this, 12, 20, "RW", 0, 12'h000, 1, 1, 0);
         Outstanding_ackID.configure(this, 12, 8, "RW", 0, 12'h000, 1, 1, 0);
         Reserved.configure(this, 7, 1, "RO", 0, 7'b0000000, 1, 0, 0);
         Clr_outstanding_ackID.configure(this, 1, 0, "W1C", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_0_VC7_VC3_BW_Allocation_Register_reg
   // 
   // BW Allocation Register
   //--------------------------------------------------------------------

   class Port_0_VC7_VC3_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_0_VC7_VC3_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 


      // Function: new
      // 
      function new(string name = "Port_0_VC7_VC3_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");

         Bandwidth_Allocation.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_2_Packet_Capture_2_CSR_reg
   // 
   // Packet Capture 2 Register
   //--------------------------------------------------------------------

   class Port_2_Packet_Capture_2_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_2_Packet_Capture_2_CSR_reg)

      rand uvm_reg_field Capture2; 


      // Function: new
      // 
      function new(string name = "Port_2_Packet_Capture_2_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture2 = uvm_reg_field::type_id::create("Capture2");

         Capture2.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass

   //--------------------------------------------------------------------
   // Class: Port_9_Timestamp_0_MSW_CSR_reg
   // 
   // Timestamp_0_MSW_Register
   //--------------------------------------------------------------------

   class Port_9_Timestamp_0_MSW_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_9_Timestamp_0_MSW_CSR_reg)

      uvm_reg_field MSW_Bits; 


      // Function: new
      // 
      function new(string name = "Port_9_Timestamp_0_MSW_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         MSW_Bits = uvm_reg_field::type_id::create("MSW_Bits");

         MSW_Bits.configure(this, 32, 0, "RO", 0, 32'h00000000, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_1_Error_Rate_Threshold_CSR_reg
   // 
   // Error Threshold Register
   //--------------------------------------------------------------------

   class Port_1_Error_Rate_Threshold_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_1_Error_Rate_Threshold_CSR_reg)

      uvm_reg_field Reserved; 
      rand uvm_reg_field Error_Rate_Degraded_Threshold_Trigger; 
      rand uvm_reg_field Error_Rate_Failed_Threshold_Trigger; 


      // Function: new
      // 
      function new(string name = "Port_1_Error_Rate_Threshold_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Error_Rate_Degraded_Threshold_Trigger = uvm_reg_field::type_id::create("Error_Rate_Degraded_Threshold_Trigger");
         Error_Rate_Failed_Threshold_Trigger = uvm_reg_field::type_id::create("Error_Rate_Failed_Threshold_Trigger");

         Reserved.configure(this, 16, 16, "RO", 0, 16'h0000, 1, 0, 1);
         Error_Rate_Degraded_Threshold_Trigger.configure(this, 8, 8, "RW", 0, 8'hff, 1, 1, 1);
         Error_Rate_Failed_Threshold_Trigger.configure(this, 8, 0, "RW", 0, 8'hff, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_12_Power_Management_CSR_reg
   // 
   // Power_Management_Register
   //--------------------------------------------------------------------

   class Port_12_Power_Management_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_12_Power_Management_CSR_reg)

      uvm_reg_field Reserved; 
      uvm_reg_field Status_of_Link_Partner_Transmit_Width_Change; 
      rand uvm_reg_field Change_Link_Partner_Transmit_width; 
      uvm_reg_field Status_of_My_Transmit_Width_Change; 
      rand uvm_reg_field Change_My_Transmit_Width; 
      uvm_reg_field Reciever_Width_Status; 
      uvm_reg_field Transmit_Width_Status; 
      rand uvm_reg_field Asymmetric_Modes_Enabled; 
      uvm_reg_field Asymmetric_Modes_Supported; 


      // Function: new
      // 
      function new(string name = "Port_12_Power_Management_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Status_of_Link_Partner_Transmit_Width_Change = uvm_reg_field::type_id::create("Status_of_Link_Partner_Transmit_Width_Change");
         Change_Link_Partner_Transmit_width = uvm_reg_field::type_id::create("Change_Link_Partner_Transmit_width");
         Status_of_My_Transmit_Width_Change = uvm_reg_field::type_id::create("Status_of_My_Transmit_Width_Change");
         Change_My_Transmit_Width = uvm_reg_field::type_id::create("Change_My_Transmit_Width");
         Reciever_Width_Status = uvm_reg_field::type_id::create("Reciever_Width_Status");
         Transmit_Width_Status = uvm_reg_field::type_id::create("Transmit_Width_Status");
         Asymmetric_Modes_Enabled = uvm_reg_field::type_id::create("Asymmetric_Modes_Enabled");
         Asymmetric_Modes_Supported = uvm_reg_field::type_id::create("Asymmetric_Modes_Supported");

         Reserved.configure(this, 6, 26, "RO", 0, 6'b000000, 1, 0, 0);
         Status_of_Link_Partner_Transmit_Width_Change.configure(this, 2, 24, "RO", 0, 2'b00, 1, 0, 0);
         Change_Link_Partner_Transmit_width.configure(this, 3, 21, "WRC", 0, 3'b000, 1, 1, 0);
         Status_of_My_Transmit_Width_Change.configure(this, 2, 19, "RO", 0, 2'b00, 1, 0, 0);
         Change_My_Transmit_Width.configure(this, 3, 16, "WRC", 0, 3'b000, 1, 1, 0);
         Reciever_Width_Status.configure(this, 3, 13, "RO", 0, 3'b000, 1, 0, 0);
         Transmit_Width_Status.configure(this, 3, 10, "RO", 0, 3'b000, 1, 0, 0);
         Asymmetric_Modes_Enabled.configure(this, 5, 5, "RW", 0, 5'b00000, 1, 1, 0);
         Asymmetric_Modes_Supported.configure(this, 5, 0, "RO", 0, 5'b00000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_15_VC0_BW_Allocation_Register_reg
   // 
   // BW Register
   //--------------------------------------------------------------------

   class Port_15_VC0_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_15_VC0_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 
      rand uvm_reg_field Bandwidth_Reservation_Precision; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field VC0_BW_Res_Enable; 
      uvm_reg_field VC0_Bandwidth_Reservation_Capable; 


      // Function: new
      // 
      function new(string name = "Port_15_VC0_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");
         Bandwidth_Reservation_Precision = uvm_reg_field::type_id::create("Bandwidth_Reservation_Precision");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         VC0_BW_Res_Enable = uvm_reg_field::type_id::create("VC0_BW_Res_Enable");
         VC0_Bandwidth_Reservation_Capable = uvm_reg_field::type_id::create("VC0_Bandwidth_Reservation_Capable");

         Bandwidth_Allocation.configure(this, 16, 16, "RW", 0, 16'h0000, 1, 1, 1);
         Bandwidth_Reservation_Precision.configure(this, 8, 8, "RW", 0, 8'h00, 1, 1, 1);
         Reserved.configure(this, 6, 2, "RO", 0, 6'b000000, 1, 0, 0);
         VC0_BW_Res_Enable.configure(this, 1, 1, "RW", 0, 1'b0, 1, 1, 0);
         VC0_Bandwidth_Reservation_Capable.configure(this, 1, 0, "RO", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_6_Link_Maintenance_Response_CSR_reg
   // 
   // Link Maintenance Response Register
   //--------------------------------------------------------------------

   class Port_6_Link_Maintenance_Response_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_6_Link_Maintenance_Response_CSR_reg)

      uvm_reg_field port_status; 
      uvm_reg_field ackID_status; 
      uvm_reg_field Port_status_cs64; 
      uvm_reg_field Reserved; 
      uvm_reg_field response_valid; 


      // Function: new
      // 
      function new(string name = "Port_6_Link_Maintenance_Response_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         port_status = uvm_reg_field::type_id::create("port_status");
         ackID_status = uvm_reg_field::type_id::create("ackID_status");
         Port_status_cs64 = uvm_reg_field::type_id::create("Port_status_cs64");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         response_valid = uvm_reg_field::type_id::create("response_valid");

         port_status.configure(this, 5, 27, "RO", 0, 5'b00000, 1, 0, 0);
         ackID_status.configure(this, 12, 15, "RO", 0, 12'h000, 1, 0, 0);
         Port_status_cs64.configure(this, 12, 3, "RO", 0, 12'h000, 1, 0, 0);
         Reserved.configure(this, 2, 1, "RO", 0, 2'b00, 1, 0, 0);
         response_valid.configure(this, 1, 0, "RO", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass

   //--------------------------------------------------------------------
   // Class: Port_2_VC8_VC4_BW_Allocation_Register_reg
   // 
   // BW Allocation Register
   //--------------------------------------------------------------------

   class Port_2_VC8_VC4_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_2_VC8_VC4_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 


      // Function: new
      // 
      function new(string name = "Port_2_VC8_VC4_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");

         Bandwidth_Allocation.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_1_Packet_Capture_2_CSR_reg
   // 
   // Packet Capture 2 Register
   //--------------------------------------------------------------------

   class Port_1_Packet_Capture_2_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_1_Packet_Capture_2_CSR_reg)

      rand uvm_reg_field Capture2; 


      // Function: new
      // 
      function new(string name = "Port_1_Packet_Capture_2_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture2 = uvm_reg_field::type_id::create("Capture2");

         Capture2.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Lane_10_Status_0_CSR_reg
   // 
   // Status 0 Register
   //--------------------------------------------------------------------

   class Lane_10_Status_0_CSR_reg extends uvm_reg;
      `uvm_object_utils(Lane_10_Status_0_CSR_reg)

      uvm_reg_field Status2_7_CSRs_implemented; 
      uvm_reg_field Status1_CSR_implemented; 
      uvm_reg_field Reserved; 
      uvm_reg_field Rcvr_trained_state_change; 
      uvm_reg_field Lane_sync_state_change; 
      uvm_reg_field lane_8B_10B_decoding_errors; 
      uvm_reg_field Receiver_lane_ready; 
      uvm_reg_field Receiver_lane_sync; 
      uvm_reg_field Receiver_trained; 
      uvm_reg_field Receiver_input_inverted; 
      uvm_reg_field Receiver_type; 
      uvm_reg_field Transmitter_mode; 
      uvm_reg_field Transmitter_type; 
      uvm_reg_field Lane_Number; 
      uvm_reg_field Port_Number; 


      // Function: new
      // 
      function new(string name = "Lane_10_Status_0_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Status2_7_CSRs_implemented = uvm_reg_field::type_id::create("Status2_7_CSRs_implemented");
         Status1_CSR_implemented = uvm_reg_field::type_id::create("Status1_CSR_implemented");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Rcvr_trained_state_change = uvm_reg_field::type_id::create("Rcvr_trained_state_change");
         Lane_sync_state_change = uvm_reg_field::type_id::create("Lane_sync_state_change");
         lane_8B_10B_decoding_errors = uvm_reg_field::type_id::create("lane_8B_10B_decoding_errors");
         Receiver_lane_ready = uvm_reg_field::type_id::create("Receiver_lane_ready");
         Receiver_lane_sync = uvm_reg_field::type_id::create("Receiver_lane_sync");
         Receiver_trained = uvm_reg_field::type_id::create("Receiver_trained");
         Receiver_input_inverted = uvm_reg_field::type_id::create("Receiver_input_inverted");
         Receiver_type = uvm_reg_field::type_id::create("Receiver_type");
         Transmitter_mode = uvm_reg_field::type_id::create("Transmitter_mode");
         Transmitter_type = uvm_reg_field::type_id::create("Transmitter_type");
         Lane_Number = uvm_reg_field::type_id::create("Lane_Number");
         Port_Number = uvm_reg_field::type_id::create("Port_Number");

         Status2_7_CSRs_implemented.configure(this, 3, 29, "RO", 0, 3'b000, 1, 0, 0);
         Status1_CSR_implemented.configure(this, 1, 28, "RO", 0, 1'b0, 1, 0, 0);
         Reserved.configure(this, 2, 26, "RO", 0, 2'b00, 1, 0, 0);
         Rcvr_trained_state_change.configure(this, 1, 25, "RO", 0, 1'b0, 1, 0, 0);
         Lane_sync_state_change.configure(this, 1, 24, "RO", 0, 1'b0, 1, 0, 0);
         lane_8B_10B_decoding_errors.configure(this, 4, 20, "RO", 0, 4'h0, 1, 0, 0);
         Receiver_lane_ready.configure(this, 1, 19, "RO", 0, 1'b0, 1, 0, 0);
         Receiver_lane_sync.configure(this, 1, 18, "RO", 0, 1'b0, 1, 0, 0);
         Receiver_trained.configure(this, 1, 17, "RO", 0, 1'b0, 1, 0, 0);
         Receiver_input_inverted.configure(this, 1, 16, "RO", 0, 1'b0, 1, 0, 0);
         Receiver_type.configure(this, 2, 14, "RO", 0, 2'b00, 1, 0, 0);
         Transmitter_mode.configure(this, 1, 13, "RO", 0, 1'b0, 1, 0, 0);
         Transmitter_type.configure(this, 1, 12, "RO", 0, 1'b0, 1, 0, 0);
         Lane_Number.configure(this, 4, 8, "RO", 0, 4'h0, 1, 0, 0);
         Port_Number.configure(this, 8, 0, "RO", 0, 8'h00, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_10_Link_Uninit_Discard_Timer_CSR_reg
   // 
   // Link_Uninit_Discard_Timer_CSR_Register
   //--------------------------------------------------------------------

   class Port_10_Link_Uninit_Discard_Timer_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_10_Link_Uninit_Discard_Timer_CSR_reg)

      uvm_reg_field Reserved; 
      rand uvm_reg_field Link_Uninit_Timeout; 


      // Function: new
      // 
      function new(string name = "Port_10_Link_Uninit_Discard_Timer_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Link_Uninit_Timeout = uvm_reg_field::type_id::create("Link_Uninit_Timeout");

         Reserved.configure(this, 8, 24, "RO", 0, 8'h00, 1, 0, 1);
         Link_Uninit_Timeout.configure(this, 24, 0, "RW", 0, 24'h000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Lane_7_Status_2_CSR_reg
   // 
   // Status 2 Register
   //--------------------------------------------------------------------

   class Lane_7_Status_2_CSR_reg extends uvm_reg;
      `uvm_object_utils(Lane_7_Status_2_CSR_reg)

      uvm_reg_field Reserved; 
      uvm_reg_field LP_Change_Receiver_Width_Command_Negative_Acknowlege; 
      uvm_reg_field LP_Change_Receiver_Width_Command_Acknowlege; 
      uvm_reg_field LP_Change_Receiver_Width_Command; 
      uvm_reg_field LP_Lane_Trained; 
      uvm_reg_field LP_Receive_Lane_Ready; 
      uvm_reg_field LP_Receive_Lanes_Ready; 
      uvm_reg_field LP_Receive_Width; 
      uvm_reg_field LP_Transmit_1x_Mode; 
      uvm_reg_field LP_Port_Intialized; 
      uvm_reg_field LP_Asymmetric_mode_Enabled; 
      uvm_reg_field LP_Retraining_Enabled; 
      uvm_reg_field LP_Remort_Training_Support; 
      uvm_reg_field LP_Lane_Number; 
      uvm_reg_field LP_Port_Number; 


      // Function: new
      // 
      function new(string name = "Lane_7_Status_2_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         LP_Change_Receiver_Width_Command_Negative_Acknowlege = uvm_reg_field::type_id::create("LP_Change_Receiver_Width_Command_Negative_Acknowlege");
         LP_Change_Receiver_Width_Command_Acknowlege = uvm_reg_field::type_id::create("LP_Change_Receiver_Width_Command_Acknowlege");
         LP_Change_Receiver_Width_Command = uvm_reg_field::type_id::create("LP_Change_Receiver_Width_Command");
         LP_Lane_Trained = uvm_reg_field::type_id::create("LP_Lane_Trained");
         LP_Receive_Lane_Ready = uvm_reg_field::type_id::create("LP_Receive_Lane_Ready");
         LP_Receive_Lanes_Ready = uvm_reg_field::type_id::create("LP_Receive_Lanes_Ready");
         LP_Receive_Width = uvm_reg_field::type_id::create("LP_Receive_Width");
         LP_Transmit_1x_Mode = uvm_reg_field::type_id::create("LP_Transmit_1x_Mode");
         LP_Port_Intialized = uvm_reg_field::type_id::create("LP_Port_Intialized");
         LP_Asymmetric_mode_Enabled = uvm_reg_field::type_id::create("LP_Asymmetric_mode_Enabled");
         LP_Retraining_Enabled = uvm_reg_field::type_id::create("LP_Retraining_Enabled");
         LP_Remort_Training_Support = uvm_reg_field::type_id::create("LP_Remort_Training_Support");
         LP_Lane_Number = uvm_reg_field::type_id::create("LP_Lane_Number");
         LP_Port_Number = uvm_reg_field::type_id::create("LP_Port_Number");

         Reserved.configure(this, 2, 30, "RO", 0, 2'b00, 1, 0, 0);
         LP_Change_Receiver_Width_Command_Negative_Acknowlege.configure(this, 1, 29, "RO", 0, 1'b0, 1, 0, 0);
         LP_Change_Receiver_Width_Command_Acknowlege.configure(this, 1, 28, "RO", 0, 1'b0, 1, 0, 0);
         LP_Change_Receiver_Width_Command.configure(this, 3, 25, "RO", 0, 3'b000, 1, 0, 0);
         LP_Lane_Trained.configure(this, 1, 24, "RO", 0, 1'b0, 1, 0, 0);
         LP_Receive_Lane_Ready.configure(this, 1, 23, "RO", 0, 1'b0, 1, 0, 0);
         LP_Receive_Lanes_Ready.configure(this, 3, 20, "RO", 0, 3'b000, 1, 0, 0);
         LP_Receive_Width.configure(this, 3, 17, "RO", 0, 3'b000, 1, 0, 0);
         LP_Transmit_1x_Mode.configure(this, 1, 16, "RO", 0, 1'b0, 1, 0, 0);
         LP_Port_Intialized.configure(this, 1, 15, "RO", 0, 1'b0, 1, 0, 0);
         LP_Asymmetric_mode_Enabled.configure(this, 1, 14, "RO", 0, 1'b0, 1, 0, 0);
         LP_Retraining_Enabled.configure(this, 1, 13, "RO", 0, 1'b0, 1, 0, 0);
         LP_Remort_Training_Support.configure(this, 1, 12, "RO", 0, 1'b0, 1, 0, 0);
         LP_Lane_Number.configure(this, 4, 8, "RO", 0, 4'h0, 1, 0, 0);
         LP_Port_Number.configure(this, 8, 0, "RO", 0, 8'h00, 1, 0, 1);
      endfunction
   endclass


   //--------------------------------------------------------------------
   // Class: Port_12_VC7_VC3_BW_Allocation_Register_reg
   // 
   // BW Allocation Register
   //--------------------------------------------------------------------

   class Port_12_VC7_VC3_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_12_VC7_VC3_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 


      // Function: new
      // 
      function new(string name = "Port_12_VC7_VC3_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");

         Bandwidth_Allocation.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_10_Local_ackID_CSR_reg
   // 
   // ackID Register
   //--------------------------------------------------------------------

   class Port_10_Local_ackID_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_10_Local_ackID_CSR_reg)

      rand uvm_reg_field Outbound_ackID; 
      uvm_reg_field Reserved_2; 
      uvm_reg_field Outstanding_ackID; 
      uvm_reg_field Reserved_1; 
      rand uvm_reg_field Inbound_ackID; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Clr_outstanding_ackID; 


      // Function: new
      // 
      function new(string name = "Port_10_Local_ackID_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Outbound_ackID = uvm_reg_field::type_id::create("Outbound_ackID");
         Reserved_2 = uvm_reg_field::type_id::create("Reserved_2");
         Outstanding_ackID = uvm_reg_field::type_id::create("Outstanding_ackID");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         Inbound_ackID = uvm_reg_field::type_id::create("Inbound_ackID");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Clr_outstanding_ackID = uvm_reg_field::type_id::create("Clr_outstanding_ackID");

         Outbound_ackID.configure(this, 6, 26, "RW", 0, 6'b000000, 1, 1, 0);
         Reserved_2.configure(this, 2, 24, "RO", 0, 2'b00, 1, 0, 0);
         Outstanding_ackID.configure(this, 6, 18, "RW", 0, 6'b000000, 1, 1, 0);
         Reserved_1.configure(this, 10, 8, "RO", 0, 10'b0000000000, 1, 0, 0);
         Inbound_ackID.configure(this, 6, 2, "RW", 0, 6'b000000, 1, 1, 0);
         Reserved.configure(this, 1, 1, "RO", 0, 1'b0, 1, 0, 0);
         Clr_outstanding_ackID.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_8_Packet_Capture_2_CSR_reg
   // 
   // Packet Capture 2 Register
   //--------------------------------------------------------------------

   class Port_8_Packet_Capture_2_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_8_Packet_Capture_2_CSR_reg)

      rand uvm_reg_field Capture2; 


      // Function: new
      // 
      function new(string name = "Port_8_Packet_Capture_2_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture2 = uvm_reg_field::type_id::create("Capture2");

         Capture2.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_11_Error_Rate_Threshold_CSR_reg
   // 
   // Error Threshold Register
   //--------------------------------------------------------------------

   class Port_11_Error_Rate_Threshold_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_11_Error_Rate_Threshold_CSR_reg)

      uvm_reg_field Reserved; 
      rand uvm_reg_field Error_Rate_Degraded_Threshold_Trigger; 
      rand uvm_reg_field Error_Rate_Failed_Threshold_Trigger; 


      // Function: new
      // 
      function new(string name = "Port_11_Error_Rate_Threshold_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Error_Rate_Degraded_Threshold_Trigger = uvm_reg_field::type_id::create("Error_Rate_Degraded_Threshold_Trigger");
         Error_Rate_Failed_Threshold_Trigger = uvm_reg_field::type_id::create("Error_Rate_Failed_Threshold_Trigger");

         Reserved.configure(this, 16, 16, "RO", 0, 16'h0000, 1, 0, 1);
         Error_Rate_Degraded_Threshold_Trigger.configure(this, 8, 8, "RW", 0, 8'hff, 1, 1, 1);
         Error_Rate_Failed_Threshold_Trigger.configure(this, 8, 0, "RW", 0, 8'hff, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_9_Local_ackID_CSR_reg
   // 
   // ackID Register
   //--------------------------------------------------------------------

   class Port_9_Local_ackID_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_9_Local_ackID_CSR_reg)

      rand uvm_reg_field Outbound_ackID; 
      uvm_reg_field Reserved_2; 
      uvm_reg_field Outstanding_ackID; 
      uvm_reg_field Reserved_1; 
      rand uvm_reg_field Inbound_ackID; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Clr_outstanding_ackID; 


      // Function: new
      // 
      function new(string name = "Port_9_Local_ackID_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Outbound_ackID = uvm_reg_field::type_id::create("Outbound_ackID");
         Reserved_2 = uvm_reg_field::type_id::create("Reserved_2");
         Outstanding_ackID = uvm_reg_field::type_id::create("Outstanding_ackID");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         Inbound_ackID = uvm_reg_field::type_id::create("Inbound_ackID");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Clr_outstanding_ackID = uvm_reg_field::type_id::create("Clr_outstanding_ackID");

         Outbound_ackID.configure(this, 6, 26, "RW", 0, 6'b000000, 1, 1, 0);
         Reserved_2.configure(this, 2, 24, "RO", 0, 2'b00, 1, 0, 0);
         Outstanding_ackID.configure(this, 6, 18, "RW", 0, 6'b000000, 1, 1, 0);
         Reserved_1.configure(this, 10, 8, "RO", 0, 10'b0000000000, 1, 0, 0);
         Inbound_ackID.configure(this, 6, 2, "RW", 0, 6'b000000, 1, 1, 0);
         Reserved.configure(this, 1, 1, "RO", 0, 1'b0, 1, 0, 0);
         Clr_outstanding_ackID.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_14_VC5_VC1_BW_Allocation_Register_reg
   // 
   // BW Allocation Register
   //--------------------------------------------------------------------

   class Port_14_VC5_VC1_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_14_VC5_VC1_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 


      // Function: new
      // 
      function new(string name = "Port_14_VC5_VC1_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");

         Bandwidth_Allocation.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_0_Timestamp_Synchronization_Status_CSR_reg
   // 
   // Timestamp_Synchronization_Status_CSR_Register
   //--------------------------------------------------------------------

   class Port_0_Timestamp_Synchronization_Status_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_0_Timestamp_Synchronization_Status_CSR_reg)

      uvm_reg_field Delay; 
      uvm_reg_field Reserved; 
      uvm_reg_field Response_Valid; 


      // Function: new
      // 
      function new(string name = "Port_0_Timestamp_Synchronization_Status_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Delay = uvm_reg_field::type_id::create("Delay");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Response_Valid = uvm_reg_field::type_id::create("Response_Valid");

         Delay.configure(this, 10, 22, "RO", 0, 10'b0000000000, 1, 0, 0);
         Reserved.configure(this, 21, 1, "RO", 0, 21'b000000000000000000000, 1, 0, 0);
         Response_Valid.configure(this, 1, 0, "RO", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_11_Power_Management_CSR_reg
   // 
   // Power_Management_Register
   //--------------------------------------------------------------------

   class Port_11_Power_Management_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_11_Power_Management_CSR_reg)

      uvm_reg_field Reserved; 
      uvm_reg_field Status_of_Link_Partner_Transmit_Width_Change; 
      rand uvm_reg_field Change_Link_Partner_Transmit_width; 
      uvm_reg_field Status_of_My_Transmit_Width_Change; 
      rand uvm_reg_field Change_My_Transmit_Width; 
      uvm_reg_field Reciever_Width_Status; 
      uvm_reg_field Transmit_Width_Status; 
      rand uvm_reg_field Asymmetric_Modes_Enabled; 
      uvm_reg_field Asymmetric_Modes_Supported; 


      // Function: new
      // 
      function new(string name = "Port_11_Power_Management_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Status_of_Link_Partner_Transmit_Width_Change = uvm_reg_field::type_id::create("Status_of_Link_Partner_Transmit_Width_Change");
         Change_Link_Partner_Transmit_width = uvm_reg_field::type_id::create("Change_Link_Partner_Transmit_width");
         Status_of_My_Transmit_Width_Change = uvm_reg_field::type_id::create("Status_of_My_Transmit_Width_Change");
         Change_My_Transmit_Width = uvm_reg_field::type_id::create("Change_My_Transmit_Width");
         Reciever_Width_Status = uvm_reg_field::type_id::create("Reciever_Width_Status");
         Transmit_Width_Status = uvm_reg_field::type_id::create("Transmit_Width_Status");
         Asymmetric_Modes_Enabled = uvm_reg_field::type_id::create("Asymmetric_Modes_Enabled");
         Asymmetric_Modes_Supported = uvm_reg_field::type_id::create("Asymmetric_Modes_Supported");

         Reserved.configure(this, 6, 26, "RO", 0, 6'b000000, 1, 0, 0);
         Status_of_Link_Partner_Transmit_Width_Change.configure(this, 2, 24, "RO", 0, 2'b00, 1, 0, 0);
         Change_Link_Partner_Transmit_width.configure(this, 3, 21, "WRC", 0, 3'b000, 1, 1, 0);
         Status_of_My_Transmit_Width_Change.configure(this, 2, 19, "RO", 0, 2'b00, 1, 0, 0);
         Change_My_Transmit_Width.configure(this, 3, 16, "WRC", 0, 3'b000, 1, 1, 0);
         Reciever_Width_Status.configure(this, 3, 13, "RO", 0, 3'b000, 1, 0, 0);
         Transmit_Width_Status.configure(this, 3, 10, "RO", 0, 3'b000, 1, 0, 0);
         Asymmetric_Modes_Enabled.configure(this, 5, 5, "RW", 0, 5'b00000, 1, 1, 0);
         Asymmetric_Modes_Supported.configure(this, 5, 0, "RO", 0, 5'b00000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Lane_3_Status_3_CSR_reg
   // 
   // Status 3 Register
   //--------------------------------------------------------------------

   class Lane_3_Status_3_CSR_reg extends uvm_reg;
      `uvm_object_utils(Lane_3_Status_3_CSR_reg)

      uvm_reg_field Reserved; 
      uvm_reg_field LP_State_Control_Reserved; 
      uvm_reg_field LP_Lane_Entering_Silence; 
      uvm_reg_field LP_Port_Entering_Silence; 
      uvm_reg_field LP_Retraining; 
      uvm_reg_field LP_Retrain_Ready; 
      uvm_reg_field LP_Retrain_Grant; 
      uvm_reg_field LP_Transmit_Equalizer_Status; 
      uvm_reg_field LP_Transmit_Equalizer_Command; 
      uvm_reg_field LP_Transmit_Equalizer_Tap; 
      uvm_reg_field LP_Transmit_SC_Sequences; 
      uvm_reg_field LP_Transmit_Width_Request_Pending; 
      uvm_reg_field LP_Transmit_Width_Request; 


      // Function: new
      // 
      function new(string name = "Lane_3_Status_3_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         LP_State_Control_Reserved = uvm_reg_field::type_id::create("LP_State_Control_Reserved");
         LP_Lane_Entering_Silence = uvm_reg_field::type_id::create("LP_Lane_Entering_Silence");
         LP_Port_Entering_Silence = uvm_reg_field::type_id::create("LP_Port_Entering_Silence");
         LP_Retraining = uvm_reg_field::type_id::create("LP_Retraining");
         LP_Retrain_Ready = uvm_reg_field::type_id::create("LP_Retrain_Ready");
         LP_Retrain_Grant = uvm_reg_field::type_id::create("LP_Retrain_Grant");
         LP_Transmit_Equalizer_Status = uvm_reg_field::type_id::create("LP_Transmit_Equalizer_Status");
         LP_Transmit_Equalizer_Command = uvm_reg_field::type_id::create("LP_Transmit_Equalizer_Command");
         LP_Transmit_Equalizer_Tap = uvm_reg_field::type_id::create("LP_Transmit_Equalizer_Tap");
         LP_Transmit_SC_Sequences = uvm_reg_field::type_id::create("LP_Transmit_SC_Sequences");
         LP_Transmit_Width_Request_Pending = uvm_reg_field::type_id::create("LP_Transmit_Width_Request_Pending");
         LP_Transmit_Width_Request = uvm_reg_field::type_id::create("LP_Transmit_Width_Request");

         Reserved.configure(this, 4, 28, "RO", 0, 4'h0, 1, 0, 0);
         LP_State_Control_Reserved.configure(this, 8, 20, "RO", 0, 8'h00, 1, 0, 0);
         LP_Lane_Entering_Silence.configure(this, 1, 19, "RO", 0, 1'b0, 1, 0, 0);
         LP_Port_Entering_Silence.configure(this, 1, 18, "RO", 0, 1'b0, 1, 0, 0);
         LP_Retraining.configure(this, 1, 17, "RO", 0, 1'b0, 1, 0, 0);
         LP_Retrain_Ready.configure(this, 1, 16, "RO", 0, 1'b0, 1, 0, 0);
         LP_Retrain_Grant.configure(this, 1, 15, "RO", 0, 1'b0, 1, 0, 0);
         LP_Transmit_Equalizer_Status.configure(this, 3, 12, "RO", 0, 3'b000, 1, 0, 0);
         LP_Transmit_Equalizer_Command.configure(this, 3, 9, "RO", 0, 3'b000, 1, 0, 0);
         LP_Transmit_Equalizer_Tap.configure(this, 4, 5, "RO", 0, 4'h0, 1, 0, 0);
         LP_Transmit_SC_Sequences.configure(this, 1, 4, "RO", 0, 1'b0, 1, 0, 0);
         LP_Transmit_Width_Request_Pending.configure(this, 1, 3, "RO", 0, 1'b0, 1, 0, 0);
         LP_Transmit_Width_Request.configure(this, 3, 0, "RO", 0, 3'b000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_11_Packet_Capture_3_CSR_reg
   // 
   // Packet Capture 3 Register
   //--------------------------------------------------------------------

   class Port_11_Packet_Capture_3_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_11_Packet_Capture_3_CSR_reg)

      rand uvm_reg_field Capture3; 


      // Function: new
      // 
      function new(string name = "Port_11_Packet_Capture_3_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture3 = uvm_reg_field::type_id::create("Capture3");

         Capture3.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Logical_Transport_Layer_Error_Detect_CSR_reg
   // 
   // Error Detect Register
   //--------------------------------------------------------------------

   class Logical_Transport_Layer_Error_Detect_CSR_reg extends uvm_reg;
      `uvm_object_utils(Logical_Transport_Layer_Error_Detect_CSR_reg)

      uvm_reg_field Reserved1; 
      rand uvm_reg_field Transport_size_error; 
      rand uvm_reg_field Retry_error_threshold_exceeded; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Data_streaming_PDU_length_error; 
      rand uvm_reg_field Short_data_streaming_segment; 
      rand uvm_reg_field Long_data_streaming_segment; 
      rand uvm_reg_field Open_existing_data_streaming_context; 
      rand uvm_reg_field Missing_data_streaming_context; 
      rand uvm_reg_field Unsupported_Transaction; 
      rand uvm_reg_field Unsolicited_Response; 
      rand uvm_reg_field Packet_Response_Timeout; 
      rand uvm_reg_field Message_Request_Timeout; 
      rand uvm_reg_field Illegal_transaction_target_error; 
      rand uvm_reg_field Illegal_transaction_decode; 
      rand uvm_reg_field Message_Format_Error; 
      rand uvm_reg_field GSM_error_response; 
      rand uvm_reg_field Message_error_response; 
      rand uvm_reg_field IO_error_response; 


      // Function: new
      // 
      function new(string name = "Logical_Transport_Layer_Error_Detect_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved1 = uvm_reg_field::type_id::create("Reserved1");
         Transport_size_error = uvm_reg_field::type_id::create("Transport_size_error");
         Retry_error_threshold_exceeded = uvm_reg_field::type_id::create("Implementation_Specific_error");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Data_streaming_PDU_length_error = uvm_reg_field::type_id::create("Data_streaming_PDU_length_error");
         Short_data_streaming_segment = uvm_reg_field::type_id::create("Short_data_streaming_segment");
         Long_data_streaming_segment = uvm_reg_field::type_id::create("Long_data_streaming_segment");
         Open_existing_data_streaming_context = uvm_reg_field::type_id::create("Open_existing_data_streaming_context");
         Missing_data_streaming_context = uvm_reg_field::type_id::create("Missing_data_streaming_context");
         Unsupported_Transaction = uvm_reg_field::type_id::create("Unsupported_Transaction");
         Unsolicited_Response = uvm_reg_field::type_id::create("Unsolicited_Response");
         Packet_Response_Timeout = uvm_reg_field::type_id::create("Packet_Response_Timeout");
         Message_Request_Timeout = uvm_reg_field::type_id::create("Message_Request_Timeout");
         Illegal_transaction_target_error = uvm_reg_field::type_id::create("Illegal_transaction_target_error");
         Illegal_transaction_decode = uvm_reg_field::type_id::create("Illegal_transaction_decode");
         Message_Format_Error = uvm_reg_field::type_id::create("Message_Format_Error");
         GSM_error_response = uvm_reg_field::type_id::create("GSM_error_response");
         Message_error_response = uvm_reg_field::type_id::create("Message_error_response");
         IO_error_response = uvm_reg_field::type_id::create("IO_error_response");

         Reserved1.configure(this, 3, 29, "RO", 0, 3'b000, 1, 0, 0);
         Transport_size_error.configure(this, 1, 28, "RW", 0, 1'b0, 1, 1, 1);
         Retry_error_threshold_exceeded.configure(this, 1, 27, "RW", 0, 1'b0, 1, 1, 1);
         Reserved.configure(this, 12, 15, "RO", 0, 12'b000000000000, 1, 0, 0);
         Data_streaming_PDU_length_error.configure(this, 1, 14, "RW", 0, 1'b0, 1, 1, 0);
         Short_data_streaming_segment.configure(this, 1, 13, "RW", 0, 1'b0, 1, 1, 0);
         Long_data_streaming_segment.configure(this, 1, 12, "RW", 0, 1'b0, 1, 1, 0);
         Open_existing_data_streaming_context.configure(this, 1, 11, "RW", 0, 1'b0, 1, 1, 0);
         Missing_data_streaming_context.configure(this, 1, 10, "RW", 0, 1'b0, 1, 1, 0);
         Unsupported_Transaction.configure(this, 1, 9, "RW", 0, 1'b0, 1, 1, 0);
         Unsolicited_Response.configure(this, 1, 8, "RW", 0, 1'b0, 1, 1, 0);
         Packet_Response_Timeout.configure(this, 1, 7, "RW", 0, 1'b0, 1, 1, 0);
         Message_Request_Timeout.configure(this, 1, 6, "RW", 0, 1'b0, 1, 1, 0);
         Illegal_transaction_target_error.configure(this, 1, 5, "RW", 0, 1'b0, 1, 1, 0);
         Illegal_transaction_decode.configure(this, 1, 4, "RW", 0, 1'b0, 1, 1, 0);
         Message_Format_Error.configure(this, 1, 3, "RW", 0, 1'b0, 1, 1, 0);
         GSM_error_response.configure(this, 1, 2, "RW", 0, 1'b0, 1, 1, 0);
         Message_error_response.configure(this, 1, 1, "RW", 0, 1'b0, 1, 1, 0);
         IO_error_response.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_1_Link_Maintenance_Response_CSR_reg
   // 
   // Link Maintenance Response Register
   //--------------------------------------------------------------------

   class Port_1_Link_Maintenance_Response_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_1_Link_Maintenance_Response_CSR_reg)

      uvm_reg_field port_status; 
      uvm_reg_field ackID_status; 
      uvm_reg_field Port_status_cs64; 
      uvm_reg_field Reserved; 
      uvm_reg_field response_valid; 


      // Function: new
      // 
      function new(string name = "Port_1_Link_Maintenance_Response_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         port_status = uvm_reg_field::type_id::create("port_status");
         ackID_status = uvm_reg_field::type_id::create("ackID_status");
         Port_status_cs64 = uvm_reg_field::type_id::create("Port_status_cs64");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         response_valid = uvm_reg_field::type_id::create("response_valid");

         port_status.configure(this, 5, 27, "RO", 0, 5'b00000, 1, 0, 0);
         ackID_status.configure(this, 12, 15, "RO", 0, 12'h000, 1, 0, 0);
         Port_status_cs64.configure(this, 12, 3, "RO", 0, 12'h000, 1, 0, 0);
         Reserved.configure(this, 2, 1, "RO", 0, 2'b00, 1, 0, 0);
         response_valid.configure(this, 1, 0, "RO", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_0_Timestamp_1_LSW_CSR_reg
   // 
   // Timestamp_1_LSW_Register
   //--------------------------------------------------------------------

   class Port_0_Timestamp_1_LSW_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_0_Timestamp_1_LSW_CSR_reg)

      uvm_reg_field LSW_Bits; 


      // Function: new
      // 
      function new(string name = "Port_0_Timestamp_1_LSW_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         LSW_Bits = uvm_reg_field::type_id::create("LSW_Bits");

         LSW_Bits.configure(this, 32, 0, "RO", 0, 32'h00000000, 1, 0, 1);
      endfunction
   endclass

   //--------------------------------------------------------------------
   // Class: Port_12_Inbound_ackID_CSR_reg
   // 
   // Inbound_Register
   //--------------------------------------------------------------------

   class Port_12_Inbound_ackID_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_12_Inbound_ackID_CSR_reg)

       rand uvm_reg_field Inbound_ackID;  
      uvm_reg_field Reserved; 


      // Function: new
      // 
      function new(string name = "Port_12_Inbound_ackID_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Inbound_ackID = uvm_reg_field::type_id::create("Inbound_ackID");
         Reserved = uvm_reg_field::type_id::create("Reserved");

       Inbound_ackID.configure(this, 12, 20, "RW", 0, 12'h000, 1, 1, 0);
         Reserved.configure(this, 20, 0, "RO", 0, 20'h00000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_7_Packet_Capture_4_CSR_reg
   // 
   // Packet Capture 4 Register
   //--------------------------------------------------------------------

   class Port_7_Packet_Capture_4_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_7_Packet_Capture_4_CSR_reg)

      rand uvm_reg_field Capture4; 


      // Function: new
      // 
      function new(string name = "Port_7_Packet_Capture_4_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture4 = uvm_reg_field::type_id::create("Capture4");

         Capture4.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Lane_12_Status_0_CSR_reg
   // 
   // Status 0 Register
   //--------------------------------------------------------------------

   class Lane_12_Status_0_CSR_reg extends uvm_reg;
      `uvm_object_utils(Lane_12_Status_0_CSR_reg)

      uvm_reg_field Status2_7_CSRs_implemented; 
      uvm_reg_field Status1_CSR_implemented; 
      uvm_reg_field Reserved; 
      uvm_reg_field Rcvr_trained_state_change; 
      uvm_reg_field Lane_sync_state_change; 
      uvm_reg_field lane_8B_10B_decoding_errors; 
      uvm_reg_field Receiver_lane_ready; 
      uvm_reg_field Receiver_lane_sync; 
      uvm_reg_field Receiver_trained; 
      uvm_reg_field Receiver_input_inverted; 
      uvm_reg_field Receiver_type; 
      uvm_reg_field Transmitter_mode; 
      uvm_reg_field Transmitter_type; 
      uvm_reg_field Lane_Number; 
      uvm_reg_field Port_Number; 


      // Function: new
      // 
      function new(string name = "Lane_12_Status_0_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Status2_7_CSRs_implemented = uvm_reg_field::type_id::create("Status2_7_CSRs_implemented");
         Status1_CSR_implemented = uvm_reg_field::type_id::create("Status1_CSR_implemented");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Rcvr_trained_state_change = uvm_reg_field::type_id::create("Rcvr_trained_state_change");
         Lane_sync_state_change = uvm_reg_field::type_id::create("Lane_sync_state_change");
         lane_8B_10B_decoding_errors = uvm_reg_field::type_id::create("lane_8B_10B_decoding_errors");
         Receiver_lane_ready = uvm_reg_field::type_id::create("Receiver_lane_ready");
         Receiver_lane_sync = uvm_reg_field::type_id::create("Receiver_lane_sync");
         Receiver_trained = uvm_reg_field::type_id::create("Receiver_trained");
         Receiver_input_inverted = uvm_reg_field::type_id::create("Receiver_input_inverted");
         Receiver_type = uvm_reg_field::type_id::create("Receiver_type");
         Transmitter_mode = uvm_reg_field::type_id::create("Transmitter_mode");
         Transmitter_type = uvm_reg_field::type_id::create("Transmitter_type");
         Lane_Number = uvm_reg_field::type_id::create("Lane_Number");
         Port_Number = uvm_reg_field::type_id::create("Port_Number");

         Status2_7_CSRs_implemented.configure(this, 3, 29, "RO", 0, 3'b000, 1, 0, 0);
         Status1_CSR_implemented.configure(this, 1, 28, "RO", 0, 1'b0, 1, 0, 0);
         Reserved.configure(this, 2, 26, "RO", 0, 2'b00, 1, 0, 0);
         Rcvr_trained_state_change.configure(this, 1, 25, "RO", 0, 1'b0, 1, 0, 0);
         Lane_sync_state_change.configure(this, 1, 24, "RO", 0, 1'b0, 1, 0, 0);
         lane_8B_10B_decoding_errors.configure(this, 4, 20, "RO", 0, 4'h0, 1, 0, 0);
         Receiver_lane_ready.configure(this, 1, 19, "RO", 0, 1'b0, 1, 0, 0);
         Receiver_lane_sync.configure(this, 1, 18, "RO", 0, 1'b0, 1, 0, 0);
         Receiver_trained.configure(this, 1, 17, "RO", 0, 1'b0, 1, 0, 0);
         Receiver_input_inverted.configure(this, 1, 16, "RO", 0, 1'b0, 1, 0, 0);
         Receiver_type.configure(this, 2, 14, "RO", 0, 2'b00, 1, 0, 0);
         Transmitter_mode.configure(this, 1, 13, "RO", 0, 1'b0, 1, 0, 0);
         Transmitter_type.configure(this, 1, 12, "RO", 0, 1'b0, 1, 0, 0);
         Lane_Number.configure(this, 4, 8, "RO", 0, 4'h0, 1, 0, 0);
         Port_Number.configure(this, 8, 0, "RO", 0, 8'h00, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_7_Timestamp_1_LSW_CSR_reg
   // 
   // Timestamp_1_LSW_Register
   //--------------------------------------------------------------------

   class Port_7_Timestamp_1_LSW_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_7_Timestamp_1_LSW_CSR_reg)

      uvm_reg_field LSW_Bits; 


      // Function: new
      // 
      function new(string name = "Port_7_Timestamp_1_LSW_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         LSW_Bits = uvm_reg_field::type_id::create("LSW_Bits");

         LSW_Bits.configure(this, 32, 0, "RO", 0, 32'h00000000, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Lane_2_Status_0_CSR_reg
   // 
   // Status 0 Register
   //--------------------------------------------------------------------

   class Lane_2_Status_0_CSR_reg extends uvm_reg;
      `uvm_object_utils(Lane_2_Status_0_CSR_reg)

      uvm_reg_field Status2_7_CSRs_implemented; 
      uvm_reg_field Status1_CSR_implemented; 
      uvm_reg_field Reserved; 
      uvm_reg_field Rcvr_trained_state_change; 
      uvm_reg_field Lane_sync_state_change; 
      uvm_reg_field lane_8B_10B_decoding_errors; 
      uvm_reg_field Receiver_lane_ready; 
      uvm_reg_field Receiver_lane_sync; 
      uvm_reg_field Receiver_trained; 
      uvm_reg_field Receiver_input_inverted; 
      uvm_reg_field Receiver_type; 
      uvm_reg_field Transmitter_mode; 
      uvm_reg_field Transmitter_type; 
      uvm_reg_field Lane_Number; 
      uvm_reg_field Port_Number; 


      // Function: new
      // 
      function new(string name = "Lane_2_Status_0_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Status2_7_CSRs_implemented = uvm_reg_field::type_id::create("Status2_7_CSRs_implemented");
         Status1_CSR_implemented = uvm_reg_field::type_id::create("Status1_CSR_implemented");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Rcvr_trained_state_change = uvm_reg_field::type_id::create("Rcvr_trained_state_change");
         Lane_sync_state_change = uvm_reg_field::type_id::create("Lane_sync_state_change");
         lane_8B_10B_decoding_errors = uvm_reg_field::type_id::create("lane_8B_10B_decoding_errors");
         Receiver_lane_ready = uvm_reg_field::type_id::create("Receiver_lane_ready");
         Receiver_lane_sync = uvm_reg_field::type_id::create("Receiver_lane_sync");
         Receiver_trained = uvm_reg_field::type_id::create("Receiver_trained");
         Receiver_input_inverted = uvm_reg_field::type_id::create("Receiver_input_inverted");
         Receiver_type = uvm_reg_field::type_id::create("Receiver_type");
         Transmitter_mode = uvm_reg_field::type_id::create("Transmitter_mode");
         Transmitter_type = uvm_reg_field::type_id::create("Transmitter_type");
         Lane_Number = uvm_reg_field::type_id::create("Lane_Number");
         Port_Number = uvm_reg_field::type_id::create("Port_Number");

         Status2_7_CSRs_implemented.configure(this, 3, 29, "RO", 0, 3'b000, 1, 0, 0);
         Status1_CSR_implemented.configure(this, 1, 28, "RO", 0, 1'b0, 1, 0, 0);
         Reserved.configure(this, 2, 26, "RO", 0, 2'b00, 1, 0, 0);
         Rcvr_trained_state_change.configure(this, 1, 25, "RO", 0, 1'b0, 1, 0, 0);
         Lane_sync_state_change.configure(this, 1, 24, "RO", 0, 1'b0, 1, 0, 0);
         lane_8B_10B_decoding_errors.configure(this, 4, 20, "RO", 0, 4'h0, 1, 0, 0);
         Receiver_lane_ready.configure(this, 1, 19, "RO", 0, 1'b0, 1, 0, 0);
         Receiver_lane_sync.configure(this, 1, 18, "RO", 0, 1'b0, 1, 0, 0);
         Receiver_trained.configure(this, 1, 17, "RO", 0, 1'b0, 1, 0, 0);
         Receiver_input_inverted.configure(this, 1, 16, "RO", 0, 1'b0, 1, 0, 0);
         Receiver_type.configure(this, 2, 14, "RO", 0, 2'b00, 1, 0, 0);
         Transmitter_mode.configure(this, 1, 13, "RO", 0, 1'b0, 1, 0, 0);
         Transmitter_type.configure(this, 1, 12, "RO", 0, 1'b0, 1, 0, 0);
         Lane_Number.configure(this, 4, 8, "RO", 0, 4'h0, 1, 0, 0);
         Port_Number.configure(this, 8, 0, "RO", 0, 8'h00, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_3_Packet_Control_Symbol_Capture_0_CSR_reg
   // 
   // Symbol Capture Register
   //--------------------------------------------------------------------

   class Port_3_Packet_Control_Symbol_Capture_0_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_3_Packet_Control_Symbol_Capture_0_CSR_reg)

      rand uvm_reg_field Capture0; 


      // Function: new
      // 
      function new(string name = "Port_3_Packet_Control_Symbol_Capture_0_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture0 = uvm_reg_field::type_id::create("Capture0");

         Capture0.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_13_Packet_Capture_1_CSR_reg
   // 
   // Packet Capture 1 Register
   //--------------------------------------------------------------------

   class Port_13_Packet_Capture_1_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_13_Packet_Capture_1_CSR_reg)

      rand uvm_reg_field Capture1; 


      // Function: new
      // 
      function new(string name = "Port_13_Packet_Capture_1_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture1 = uvm_reg_field::type_id::create("Capture1");

         Capture1.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_12_Initialization_Status_CSR_reg
   // 
   // Initialization_Status_Register
   //--------------------------------------------------------------------

   class Port_12_Initialization_Status_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_12_Initialization_Status_CSR_reg)

      uvm_reg_field Reserved_3; 
      uvm_reg_field Transmitted_Status_Control_Symbols; 
      uvm_reg_field Reserved_2; 
      uvm_reg_field Received_Status_Control_Symbols; 
      uvm_reg_field Port_Initialization_State_Machine; 
      uvm_reg_field Reserved_1; 
      uvm_reg_field x1_x2_Mode_Detection; 
      uvm_reg_field Reserved; 
      uvm_reg_field Lane_Alignment; 


      // Function: new
      // 
      function new(string name = "Port_12_Initialization_Status_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved_3 = uvm_reg_field::type_id::create("Reserved_3");
         Transmitted_Status_Control_Symbols = uvm_reg_field::type_id::create("Transmitted_Status_Control_Symbols");
         Reserved_2 = uvm_reg_field::type_id::create("Reserved_2");
         Received_Status_Control_Symbols = uvm_reg_field::type_id::create("Received_Status_Control_Symbols");
         Port_Initialization_State_Machine = uvm_reg_field::type_id::create("Port_Initialization_State_Machine");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         x1_x2_Mode_Detection = uvm_reg_field::type_id::create("x1_x2_Mode_Detection");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Lane_Alignment = uvm_reg_field::type_id::create("Lane_Alignment");

         Reserved_3.configure(this, 4, 28, "RO", 0, 4'h0, 1, 0, 0);
         Transmitted_Status_Control_Symbols.configure(this, 7, 21, "RO", 0, 7'b0000000, 1, 0, 0);
         Reserved_2.configure(this, 1, 20, "RO", 0, 1'b0, 1, 0, 0);
         Received_Status_Control_Symbols.configure(this, 4, 16, "RO", 0, 4'h0, 1, 0, 0);
         Port_Initialization_State_Machine.configure(this, 5, 11, "RO", 0, 5'b00000, 1, 0, 0);
         Reserved_1.configure(this, 1, 10, "RO", 0, 1'b0, 1, 0, 0);
         x1_x2_Mode_Detection.configure(this, 4, 6, "RO", 0, 4'h0, 1, 0, 0);
         Reserved.configure(this, 1, 5, "RO", 0, 1'b0, 1, 0, 0);
         Lane_Alignment.configure(this, 5, 0, "RO", 0, 5'b00000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Lane_13_Status_0_CSR_reg
   // 
   // Status 0 Register
   //--------------------------------------------------------------------

   class Lane_13_Status_0_CSR_reg extends uvm_reg;
      `uvm_object_utils(Lane_13_Status_0_CSR_reg)

      uvm_reg_field Status2_7_CSRs_implemented; 
      uvm_reg_field Status1_CSR_implemented; 
      uvm_reg_field Reserved; 
      uvm_reg_field Rcvr_trained_state_change; 
      uvm_reg_field Lane_sync_state_change; 
      uvm_reg_field lane_8B_10B_decoding_errors; 
      uvm_reg_field Receiver_lane_ready; 
      uvm_reg_field Receiver_lane_sync; 
      uvm_reg_field Receiver_trained; 
      uvm_reg_field Receiver_input_inverted; 
      uvm_reg_field Receiver_type; 
      uvm_reg_field Transmitter_mode; 
      uvm_reg_field Transmitter_type; 
      uvm_reg_field Lane_Number; 
      uvm_reg_field Port_Number; 


      // Function: new
      // 
      function new(string name = "Lane_13_Status_0_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Status2_7_CSRs_implemented = uvm_reg_field::type_id::create("Status2_7_CSRs_implemented");
         Status1_CSR_implemented = uvm_reg_field::type_id::create("Status1_CSR_implemented");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Rcvr_trained_state_change = uvm_reg_field::type_id::create("Rcvr_trained_state_change");
         Lane_sync_state_change = uvm_reg_field::type_id::create("Lane_sync_state_change");
         lane_8B_10B_decoding_errors = uvm_reg_field::type_id::create("lane_8B_10B_decoding_errors");
         Receiver_lane_ready = uvm_reg_field::type_id::create("Receiver_lane_ready");
         Receiver_lane_sync = uvm_reg_field::type_id::create("Receiver_lane_sync");
         Receiver_trained = uvm_reg_field::type_id::create("Receiver_trained");
         Receiver_input_inverted = uvm_reg_field::type_id::create("Receiver_input_inverted");
         Receiver_type = uvm_reg_field::type_id::create("Receiver_type");
         Transmitter_mode = uvm_reg_field::type_id::create("Transmitter_mode");
         Transmitter_type = uvm_reg_field::type_id::create("Transmitter_type");
         Lane_Number = uvm_reg_field::type_id::create("Lane_Number");
         Port_Number = uvm_reg_field::type_id::create("Port_Number");

         Status2_7_CSRs_implemented.configure(this, 3, 29, "RO", 0, 3'b000, 1, 0, 0);
         Status1_CSR_implemented.configure(this, 1, 28, "RO", 0, 1'b0, 1, 0, 0);
         Reserved.configure(this, 2, 26, "RO", 0, 2'b00, 1, 0, 0);
         Rcvr_trained_state_change.configure(this, 1, 25, "RO", 0, 1'b0, 1, 0, 0);
         Lane_sync_state_change.configure(this, 1, 24, "RO", 0, 1'b0, 1, 0, 0);
         lane_8B_10B_decoding_errors.configure(this, 4, 20, "RO", 0, 4'h0, 1, 0, 0);
         Receiver_lane_ready.configure(this, 1, 19, "RO", 0, 1'b0, 1, 0, 0);
         Receiver_lane_sync.configure(this, 1, 18, "RO", 0, 1'b0, 1, 0, 0);
         Receiver_trained.configure(this, 1, 17, "RO", 0, 1'b0, 1, 0, 0);
         Receiver_input_inverted.configure(this, 1, 16, "RO", 0, 1'b0, 1, 0, 0);
         Receiver_type.configure(this, 2, 14, "RO", 0, 2'b00, 1, 0, 0);
         Transmitter_mode.configure(this, 1, 13, "RO", 0, 1'b0, 1, 0, 0);
         Transmitter_type.configure(this, 1, 12, "RO", 0, 1'b0, 1, 0, 0);
         Lane_Number.configure(this, 4, 8, "RO", 0, 4'h0, 1, 0, 0);
         Port_Number.configure(this, 8, 0, "RO", 0, 8'h00, 1, 0, 1);
      endfunction
   endclass

   //--------------------------------------------------------------------
   // Class: Port_11_Initialization_Status_CSR_reg
   // 
   // Initialization_Status_Register
   //--------------------------------------------------------------------

   class Port_11_Initialization_Status_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_11_Initialization_Status_CSR_reg)

      uvm_reg_field Reserved_3; 
      uvm_reg_field Transmitted_Status_Control_Symbols; 
      uvm_reg_field Reserved_2; 
      uvm_reg_field Received_Status_Control_Symbols; 
      uvm_reg_field Port_Initialization_State_Machine; 
      uvm_reg_field Reserved_1; 
      uvm_reg_field x1_x2_Mode_Detection; 
      uvm_reg_field Reserved; 
      uvm_reg_field Lane_Alignment; 


      // Function: new
      // 
      function new(string name = "Port_11_Initialization_Status_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved_3 = uvm_reg_field::type_id::create("Reserved_3");
         Transmitted_Status_Control_Symbols = uvm_reg_field::type_id::create("Transmitted_Status_Control_Symbols");
         Reserved_2 = uvm_reg_field::type_id::create("Reserved_2");
         Received_Status_Control_Symbols = uvm_reg_field::type_id::create("Received_Status_Control_Symbols");
         Port_Initialization_State_Machine = uvm_reg_field::type_id::create("Port_Initialization_State_Machine");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         x1_x2_Mode_Detection = uvm_reg_field::type_id::create("x1_x2_Mode_Detection");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Lane_Alignment = uvm_reg_field::type_id::create("Lane_Alignment");

         Reserved_3.configure(this, 4, 28, "RO", 0, 4'h0, 1, 0, 0);
         Transmitted_Status_Control_Symbols.configure(this, 7, 21, "RO", 0, 7'b0000000, 1, 0, 0);
         Reserved_2.configure(this, 1, 20, "RO", 0, 1'b0, 1, 0, 0);
         Received_Status_Control_Symbols.configure(this, 4, 16, "RO", 0, 4'h0, 1, 0, 0);
         Port_Initialization_State_Machine.configure(this, 5, 11, "RO", 0, 5'b00000, 1, 0, 0);
         Reserved_1.configure(this, 1, 10, "RO", 0, 1'b0, 1, 0, 0);
         x1_x2_Mode_Detection.configure(this, 4, 6, "RO", 0, 4'h0, 1, 0, 0);
         Reserved.configure(this, 1, 5, "RO", 0, 1'b0, 1, 0, 0);
         Lane_Alignment.configure(this, 5, 0, "RO", 0, 5'b00000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_12_Auto_Update_Counter_CSR_reg
   // 
   // Auto_Update_Counter_CSR_Register
   //--------------------------------------------------------------------

   class Port_12_Auto_Update_Counter_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_12_Auto_Update_Counter_CSR_reg)

      rand uvm_reg_field Update_Period; 


      // Function: new
      // 
      function new(string name = "Port_12_Auto_Update_Counter_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Update_Period = uvm_reg_field::type_id::create("Update_Period");

         Update_Period.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_14_Link_Uninit_Discard_Timer_CSR_reg
   // 
   // Link_Uninit_Discard_Timer_CSR_Register
   //--------------------------------------------------------------------

   class Port_14_Link_Uninit_Discard_Timer_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_14_Link_Uninit_Discard_Timer_CSR_reg)

      uvm_reg_field Reserved; 
      rand uvm_reg_field Link_Uninit_Timeout; 


      // Function: new
      // 
      function new(string name = "Port_14_Link_Uninit_Discard_Timer_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Link_Uninit_Timeout = uvm_reg_field::type_id::create("Link_Uninit_Timeout");

         Reserved.configure(this, 8, 24, "RO", 0, 8'h00, 1, 0, 1);
         Link_Uninit_Timeout.configure(this, 24, 0, "RW", 0, 24'h000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_13_Error_Rate_Threshold_CSR_reg
   // 
   // Error Threshold Register
   //--------------------------------------------------------------------

   class Port_13_Error_Rate_Threshold_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_13_Error_Rate_Threshold_CSR_reg)

      uvm_reg_field Reserved; 
      rand uvm_reg_field Error_Rate_Degraded_Threshold_Trigger; 
      rand uvm_reg_field Error_Rate_Failed_Threshold_Trigger; 


      // Function: new
      // 
      function new(string name = "Port_13_Error_Rate_Threshold_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Error_Rate_Degraded_Threshold_Trigger = uvm_reg_field::type_id::create("Error_Rate_Degraded_Threshold_Trigger");
         Error_Rate_Failed_Threshold_Trigger = uvm_reg_field::type_id::create("Error_Rate_Failed_Threshold_Trigger");

         Reserved.configure(this, 16, 16, "RO", 0, 16'h0000, 1, 0, 1);
         Error_Rate_Degraded_Threshold_Trigger.configure(this, 8, 8, "RW", 0, 8'hff, 1, 1, 1);
         Error_Rate_Failed_Threshold_Trigger.configure(this, 8, 0, "RW", 0, 8'hff, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_7_VC_Control_and_Status_Register_reg
   // 
   // CSR Register
   //--------------------------------------------------------------------

   class Port_7_VC_Control_and_Status_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_7_VC_Control_and_Status_Register_reg)

      rand uvm_reg_field VCs_Enable; 
      uvm_reg_field VCs_Support; 
      rand uvm_reg_field CT_Mode; 
      rand uvm_reg_field VC_Refresh_Interval; 


      // Function: new
      // 
      function new(string name = "Port_7_VC_Control_and_Status_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         VCs_Enable = uvm_reg_field::type_id::create("VCs_Enable");
         VCs_Support = uvm_reg_field::type_id::create("VCs_Support");
         CT_Mode = uvm_reg_field::type_id::create("CT_Mode");
         VC_Refresh_Interval = uvm_reg_field::type_id::create("VC_Refresh_Interval");

         VCs_Enable.configure(this, 8, 24, "RW", 0, 8'h00, 1, 1, 1);
         VCs_Support.configure(this, 8, 16, "RO", 0, 8'h00, 1, 0, 1);
         CT_Mode.configure(this, 8, 8, "RW", 0, 8'h00, 1, 1, 1);
         VC_Refresh_Interval.configure(this, 8, 0, "RW", 0, 8'h00, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_2_Timestamp_Synchronization_Command_CSR_reg
   // 
   // Timestamp_Synchronization_Command_CSR_Register
   //--------------------------------------------------------------------

   class Port_2_Timestamp_Synchronization_Command_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_2_Timestamp_Synchronization_Command_CSR_reg)

      rand uvm_reg_field Command; 
      uvm_reg_field Reserved_2; 
      rand uvm_reg_field Send_Timestamp; 
      uvm_reg_field Reserved_1; 
      rand uvm_reg_field Send_Zero_Timestamp; 
      uvm_reg_field Reserved; 


      // Function: new
      // 
      function new(string name = "Port_2_Timestamp_Synchronization_Command_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Command = uvm_reg_field::type_id::create("Command");
         Reserved_2 = uvm_reg_field::type_id::create("Reserved_2");
         Send_Timestamp = uvm_reg_field::type_id::create("Send_Timestamp");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         Send_Zero_Timestamp = uvm_reg_field::type_id::create("Send_Zero_Timestamp");
         Reserved = uvm_reg_field::type_id::create("Reserved");

         Command.configure(this, 3, 29, "RW", 0, 3'b000, 1, 1, 0);
         Reserved_2.configure(this, 1, 28, "RO", 0, 1'b0, 1, 0, 0);
         Send_Timestamp.configure(this, 1, 27, "RW", 0, 1'b0, 1, 1, 0);
         Reserved_1.configure(this, 3, 24, "RO", 0, 3'b000, 1, 0, 0);
         Send_Zero_Timestamp.configure(this, 1, 23, "RW", 0, 1'b0, 1, 1, 0);
         Reserved.configure(this, 23, 0, "RO", 0, 23'b00000000000000000000000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_0_Packet_Capture_1_CSR_reg
   // 
   // Packet Capture 1 Register
   //--------------------------------------------------------------------

   class Port_0_Packet_Capture_1_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_0_Packet_Capture_1_CSR_reg)

      rand uvm_reg_field Capture1; 


      // Function: new
      // 
      function new(string name = "Port_0_Packet_Capture_1_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture1 = uvm_reg_field::type_id::create("Capture1");

         Capture1.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Lane_2_Status_1_CSR_reg
   // 
   // Status 1 Register
   //--------------------------------------------------------------------

   class Lane_2_Status_1_CSR_reg extends uvm_reg;
      `uvm_object_utils(Lane_2_Status_1_CSR_reg)

      uvm_reg_field Reserved; 
      uvm_reg_field IDLE3_SC_Retraining_State; 
      uvm_reg_field IDLE3_SC_Training_State; 
      uvm_reg_field IDLE3_DME_Training_State; 
      uvm_reg_field IDLE3_Training_Type; 
      uvm_reg_field IDLE3_Loss_of_Signals; 
      uvm_reg_field IDLE2_Connected_port_scrambling_descrambling_enabled; 
      uvm_reg_field IDLE2_Connected_port_transmit_emphasis_Tap_plus1_status; 
      uvm_reg_field IDLE2_Connected_port_transmit_emphasis_Tap_minus1_status; 
      uvm_reg_field IDLE2_Lane_number_in_connected_port; 
      uvm_reg_field IDLE2_Received_port_width; 
      uvm_reg_field IDLE2_Connected_port_lane_receiver_trained; 
      uvm_reg_field Implementation_defined; 
      uvm_reg_field Values_changed; 
      uvm_reg_field IDLE_information_current; 
      rand uvm_reg_field IDLE_received; 


      // Function: new
      // 
      function new(string name = "Lane_2_Status_1_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         IDLE3_SC_Retraining_State = uvm_reg_field::type_id::create("IDLE3_SC_Retraining_State");
         IDLE3_SC_Training_State = uvm_reg_field::type_id::create("IDLE3_SC_Training_State");
         IDLE3_DME_Training_State = uvm_reg_field::type_id::create("IDLE3_DME_Training_State");
         IDLE3_Training_Type = uvm_reg_field::type_id::create("IDLE3_Training_Type");
         IDLE3_Loss_of_Signals = uvm_reg_field::type_id::create("IDLE3_Loss_of_Signals");
         IDLE2_Connected_port_scrambling_descrambling_enabled = uvm_reg_field::type_id::create("IDLE2_Connected_port_scrambling_descrambling_enabled");
         IDLE2_Connected_port_transmit_emphasis_Tap_plus1_status = uvm_reg_field::type_id::create("IDLE2_Connected_port_transmit_emphasis_Tap_plus1_status");
         IDLE2_Connected_port_transmit_emphasis_Tap_minus1_status = uvm_reg_field::type_id::create("IDLE2_Connected_port_transmit_emphasis_Tap_minus1_status");
         IDLE2_Lane_number_in_connected_port = uvm_reg_field::type_id::create("IDLE2_Lane_number_in_connected_port");
         IDLE2_Received_port_width = uvm_reg_field::type_id::create("IDLE2_Received_port_width");
         IDLE2_Connected_port_lane_receiver_trained = uvm_reg_field::type_id::create("IDLE2_Connected_port_lane_receiver_trained");
         Implementation_defined = uvm_reg_field::type_id::create("Implementation_defined");
         Values_changed = uvm_reg_field::type_id::create("Values_changed");
         IDLE_information_current = uvm_reg_field::type_id::create("IDLE_information_current");
         IDLE_received = uvm_reg_field::type_id::create("IDLE_received");

         Reserved.configure(this, 6, 26, "RO", 0, 6'b000000, 1, 0, 0);
         IDLE3_SC_Retraining_State.configure(this, 2, 24, "RO", 0, 2'b00, 1, 0, 0);
         IDLE3_SC_Training_State.configure(this, 2, 22, "RO", 0, 2'b00, 1, 0, 0);
         IDLE3_DME_Training_State.configure(this, 2, 20, "RO", 0, 2'b00, 1, 0, 0);
         IDLE3_Training_Type.configure(this, 2, 18, "RO", 0, 2'b00, 1, 0, 0);
         IDLE3_Loss_of_Signals.configure(this, 1, 17, "RO", 0, 1'b0, 1, 0, 0);
         IDLE2_Connected_port_scrambling_descrambling_enabled.configure(this, 1, 16, "RO", 0, 1'b0, 1, 0, 0);
         IDLE2_Connected_port_transmit_emphasis_Tap_plus1_status.configure(this, 2, 14, "RO", 0, 2'b00, 1, 0, 0);
         IDLE2_Connected_port_transmit_emphasis_Tap_minus1_status.configure(this, 2, 12, "RO", 0, 2'b00, 1, 0, 0);
         IDLE2_Lane_number_in_connected_port.configure(this, 4, 8, "RO", 0, 4'h0, 1, 0, 0);
         IDLE2_Received_port_width.configure(this, 3, 5, "RO", 0, 3'b000, 1, 0, 0);
         IDLE2_Connected_port_lane_receiver_trained.configure(this, 1, 4, "RO", 0, 1'b0, 1, 0, 0);
         Implementation_defined.configure(this, 1, 3, "RO", 0, 1'b0, 1, 0, 0);
         Values_changed.configure(this, 1, 2, "RO", 0, 1'b1, 1, 0, 0);
         IDLE_information_current.configure(this, 1, 1, "RO", 0, 1'b0, 1, 0, 0);
         IDLE_received.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass

   //--------------------------------------------------------------------
   // Class: Port_10_Link_Timers_Control_3_CSR_reg
   // 
   // Link_Timers_Control_3_Register
   //--------------------------------------------------------------------

   class Port_10_Link_Timers_Control_3_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_10_Link_Timers_Control_3_CSR_reg)

      rand uvm_reg_field Keep_alive_Transmission_Interval; 
      rand uvm_reg_field Keep_alive_Transmission_Period; 
      rand uvm_reg_field Receive_Width_Command_Timeout; 
      rand uvm_reg_field Transmit_Width_Command_Timeout; 


      // Function: new
      // 
      function new(string name = "Port_10_Link_Timers_Control_3_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Keep_alive_Transmission_Interval = uvm_reg_field::type_id::create("Keep_alive_Transmission_Interval");
         Keep_alive_Transmission_Period = uvm_reg_field::type_id::create("Keep_alive_Transmission_Period");
         Receive_Width_Command_Timeout = uvm_reg_field::type_id::create("Receive_Width_Command_Timeout");
         Transmit_Width_Command_Timeout = uvm_reg_field::type_id::create("Transmit_Width_Command_Timeout");

         Keep_alive_Transmission_Interval.configure(this, 10, 22, "RW", 0, 10'b1111111111, 1, 1, 0);
         Keep_alive_Transmission_Period.configure(this, 6, 16, "RW", 0, 6'b000001, 1, 1, 0);
         Receive_Width_Command_Timeout.configure(this, 8, 8, "RW", 0, 8'h40, 1, 1, 1);
         Transmit_Width_Command_Timeout.configure(this, 8, 0, "RW", 0, 8'hff, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_11_Link_Maintenance_Response_CSR_reg
   // 
   // Link Maintenance Response Register
   //--------------------------------------------------------------------

   class Port_11_Link_Maintenance_Response_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_11_Link_Maintenance_Response_CSR_reg)

      uvm_reg_field port_status; 
      uvm_reg_field ackID_status; 
      uvm_reg_field Port_status_cs64; 
      uvm_reg_field Reserved; 
      uvm_reg_field response_valid; 


      // Function: new
      // 
      function new(string name = "Port_11_Link_Maintenance_Response_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         port_status = uvm_reg_field::type_id::create("port_status");
         ackID_status = uvm_reg_field::type_id::create("ackID_status");
         Port_status_cs64 = uvm_reg_field::type_id::create("Port_status_cs64");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         response_valid = uvm_reg_field::type_id::create("response_valid");

         port_status.configure(this, 5, 27, "RO", 0, 5'b00000, 1, 0, 0);
         ackID_status.configure(this, 12, 15, "RO", 0, 12'h000, 1, 0, 0);
         Port_status_cs64.configure(this, 12, 3, "RO", 0, 12'h000, 1, 0, 0);
         Reserved.configure(this, 2, 1, "RO", 0, 2'b00, 1, 0, 0);
         response_valid.configure(this, 1, 0, "RO", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_11_Timestamp_Generator_Synchronization_CSR_reg
   // 
   // Timestamp_Generator_Synchronization_Register
   //--------------------------------------------------------------------

   class Port_11_Timestamp_Generator_Synchronization_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_11_Timestamp_Generator_Synchronization_CSR_reg)

      rand uvm_reg_field Asymmetry; 
      rand uvm_reg_field TX_Has_Lowwer_Latency; 
      uvm_reg_field Reserved_1; 
      rand uvm_reg_field Port_Opening_Mode; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Auto_Update_Link_Partner_Timestamp_Generators; 
      rand uvm_reg_field Disable_Clock_Compensation_Sequence; 
      rand uvm_reg_field Accept_Timestamps; 


      // Function: new
      // 
      function new(string name = "Port_11_Timestamp_Generator_Synchronization_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Asymmetry = uvm_reg_field::type_id::create("Asymmetry");
         TX_Has_Lowwer_Latency = uvm_reg_field::type_id::create("TX_Has_Lowwer_Latency");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         Port_Opening_Mode = uvm_reg_field::type_id::create("Port_Opening_Mode");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Auto_Update_Link_Partner_Timestamp_Generators = uvm_reg_field::type_id::create("Auto_Update_Link_Partner_Timestamp_Generators");
         Disable_Clock_Compensation_Sequence = uvm_reg_field::type_id::create("Disable_Clock_Compensation_Sequence");
         Accept_Timestamps = uvm_reg_field::type_id::create("Accept_Timestamps");

         Asymmetry.configure(this, 12, 20, "RW", 0, 12'h000, 1, 1, 0);
         TX_Has_Lowwer_Latency.configure(this, 1, 19, "RW", 0, 1'b0, 1, 1, 0);
         Reserved_1.configure(this, 11, 8, "RO", 0, 11'b00000000000, 1, 0, 0);
         Port_Opening_Mode.configure(this, 2, 6, "RW", 0, 2'b00, 1, 1, 0);
         Reserved.configure(this, 3, 3, "RO", 0, 3'b000, 1, 0, 0);
         Auto_Update_Link_Partner_Timestamp_Generators.configure(this, 1, 2, "RW", 0, 1'b0, 1, 1, 0);
         Disable_Clock_Compensation_Sequence.configure(this, 1, 1, "RW", 0, 1'b0, 1, 1, 0);
         Accept_Timestamps.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_4_Error_Rate_Threshold_CSR_reg
   // 
   // Error Threshold Register
   //--------------------------------------------------------------------

   class Port_4_Error_Rate_Threshold_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_4_Error_Rate_Threshold_CSR_reg)

      uvm_reg_field Reserved; 
      rand uvm_reg_field Error_Rate_Degraded_Threshold_Trigger; 
      rand uvm_reg_field Error_Rate_Failed_Threshold_Trigger; 


      // Function: new
      // 
      function new(string name = "Port_4_Error_Rate_Threshold_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Error_Rate_Degraded_Threshold_Trigger = uvm_reg_field::type_id::create("Error_Rate_Degraded_Threshold_Trigger");
         Error_Rate_Failed_Threshold_Trigger = uvm_reg_field::type_id::create("Error_Rate_Failed_Threshold_Trigger");

         Reserved.configure(this, 16, 16, "RO", 0, 16'h0000, 1, 0, 1);
         Error_Rate_Degraded_Threshold_Trigger.configure(this, 8, 8, "RW", 0, 8'hff, 1, 1, 1);
         Error_Rate_Failed_Threshold_Trigger.configure(this, 8, 0, "RW", 0, 8'hff, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_9_Timestamp_Synchronization_Command_CSR_reg
   // 
   // Timestamp_Synchronization_Command_CSR_Register
   //--------------------------------------------------------------------

   class Port_9_Timestamp_Synchronization_Command_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_9_Timestamp_Synchronization_Command_CSR_reg)

      rand uvm_reg_field Command; 
      uvm_reg_field Reserved_2; 
      rand uvm_reg_field Send_Timestamp; 
      uvm_reg_field Reserved_1; 
      rand uvm_reg_field Send_Zero_Timestamp; 
      uvm_reg_field Reserved; 


      // Function: new
      // 
      function new(string name = "Port_9_Timestamp_Synchronization_Command_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Command = uvm_reg_field::type_id::create("Command");
         Reserved_2 = uvm_reg_field::type_id::create("Reserved_2");
         Send_Timestamp = uvm_reg_field::type_id::create("Send_Timestamp");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         Send_Zero_Timestamp = uvm_reg_field::type_id::create("Send_Zero_Timestamp");
         Reserved = uvm_reg_field::type_id::create("Reserved");

         Command.configure(this, 3, 29, "RW", 0, 3'b000, 1, 1, 0);
         Reserved_2.configure(this, 1, 28, "RO", 0, 1'b0, 1, 0, 0);
         Send_Timestamp.configure(this, 1, 27, "RW", 0, 1'b0, 1, 1, 0);
         Reserved_1.configure(this, 3, 24, "RO", 0, 3'b000, 1, 0, 0);
         Send_Zero_Timestamp.configure(this, 1, 23, "RW", 0, 1'b0, 1, 1, 0);
         Reserved.configure(this, 23, 0, "RO", 0, 23'b00000000000000000000000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_2_Packet_Control_Symbol_Capture_0_CSR_reg
   // 
   // Symbol Capture Register
   //--------------------------------------------------------------------

   class Port_2_Packet_Control_Symbol_Capture_0_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_2_Packet_Control_Symbol_Capture_0_CSR_reg)

      rand uvm_reg_field Capture0; 


      // Function: new
      // 
      function new(string name = "Port_2_Packet_Control_Symbol_Capture_0_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture0 = uvm_reg_field::type_id::create("Capture0");

         Capture0.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_5_Inbound_ackID_CSR_reg
   // 
   // Inbound_Register
   //--------------------------------------------------------------------

   class Port_5_Inbound_ackID_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_5_Inbound_ackID_CSR_reg)

       rand uvm_reg_field Inbound_ackID;  
      uvm_reg_field Reserved; 


      // Function: new
      // 
      function new(string name = "Port_5_Inbound_ackID_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Inbound_ackID = uvm_reg_field::type_id::create("Inbound_ackID");
         Reserved = uvm_reg_field::type_id::create("Reserved");

       Inbound_ackID.configure(this, 12, 20, "RW", 0, 12'h000, 1, 1, 0);
         Reserved.configure(this, 20, 0, "RO", 0, 20'h00000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_9_Link_Timers_Control_3_CSR_reg
   // 
   // Link_Timers_Control_3_Register
   //--------------------------------------------------------------------

   class Port_9_Link_Timers_Control_3_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_9_Link_Timers_Control_3_CSR_reg)

      rand uvm_reg_field Keep_alive_Transmission_Interval; 
      rand uvm_reg_field Keep_alive_Transmission_Period; 
      rand uvm_reg_field Receive_Width_Command_Timeout; 
      rand uvm_reg_field Transmit_Width_Command_Timeout; 


      // Function: new
      // 
      function new(string name = "Port_9_Link_Timers_Control_3_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Keep_alive_Transmission_Interval = uvm_reg_field::type_id::create("Keep_alive_Transmission_Interval");
         Keep_alive_Transmission_Period = uvm_reg_field::type_id::create("Keep_alive_Transmission_Period");
         Receive_Width_Command_Timeout = uvm_reg_field::type_id::create("Receive_Width_Command_Timeout");
         Transmit_Width_Command_Timeout = uvm_reg_field::type_id::create("Transmit_Width_Command_Timeout");

         Keep_alive_Transmission_Interval.configure(this, 10, 22, "RW", 0, 10'b1111111111, 1, 1, 0);
         Keep_alive_Transmission_Period.configure(this, 6, 16, "RW", 0, 6'b000001, 1, 1, 0);
         Receive_Width_Command_Timeout.configure(this, 8, 8, "RW", 0, 8'h40, 1, 1, 1);
         Transmit_Width_Command_Timeout.configure(this, 8, 0, "RW", 0, 8'hff, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_14_Timestamp_1_LSW_CSR_reg
   // 
   // Timestamp_1_LSW_Register
   //--------------------------------------------------------------------

   class Port_14_Timestamp_1_LSW_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_14_Timestamp_1_LSW_CSR_reg)

      uvm_reg_field LSW_Bits; 


      // Function: new
      // 
      function new(string name = "Port_14_Timestamp_1_LSW_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         LSW_Bits = uvm_reg_field::type_id::create("LSW_Bits");

         LSW_Bits.configure(this, 32, 0, "RO", 0, 32'h00000000, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_7_Attributes_Capture_CSR_reg
   // 
   // Attributes Register
   //--------------------------------------------------------------------

   class Port_7_Attributes_Capture_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_7_Attributes_Capture_CSR_reg)

      rand uvm_reg_field Capture_valid_info; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Implementation_Dependent; 
      rand uvm_reg_field Error_type; 
      rand uvm_reg_field Info_type; 


      // Function: new
      // 
      function new(string name = "Port_7_Attributes_Capture_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture_valid_info = uvm_reg_field::type_id::create("Capture_valid_info");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Implementation_Dependent = uvm_reg_field::type_id::create("Implementation_Dependent");
         Error_type = uvm_reg_field::type_id::create("Error_type");
         Info_type = uvm_reg_field::type_id::create("Info_type");

         Capture_valid_info.configure(this, 1, 31, "RW", 0, 1'b0, 1, 1, 0);
         Reserved.configure(this, 3, 28, "RO", 0, 3'b000, 1, 0, 0);
         Implementation_Dependent.configure(this, 20, 8, "RW", 0, 20'h00000, 1, 1, 0);
         Error_type.configure(this, 5, 3, "RW", 0, 5'b00000, 1, 1, 0);
         Info_type.configure(this, 3, 0, "RW", 0, 3'b000, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_10_Link_Timers_Control_2_CSR_reg
   // 
   // Link_Timers_Control_2_Register
   //--------------------------------------------------------------------

   class Port_10_Link_Timers_Control_2_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_10_Link_Timers_Control_2_CSR_reg)

      uvm_reg_field Reserved; 
      rand uvm_reg_field Recovery_Timer; 
      rand uvm_reg_field Discovery_Completion_Timer; 
      rand uvm_reg_field Retraining_Completion_Timer; 


      // Function: new
      // 
      function new(string name = "Port_10_Link_Timers_Control_2_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Recovery_Timer = uvm_reg_field::type_id::create("Recovery_Timer");
         Discovery_Completion_Timer = uvm_reg_field::type_id::create("Discovery_Completion_Timer");
         Retraining_Completion_Timer = uvm_reg_field::type_id::create("Retraining_Completion_Timer");

         Reserved.configure(this, 8, 24, "RO", 0, 8'h00, 1, 0, 1);
         Recovery_Timer.configure(this, 8, 16, "RW", 0, 8'hff, 1, 1, 1);
         Discovery_Completion_Timer.configure(this, 8, 8, "RW", 0, 8'h00, 1, 1, 1);
         Retraining_Completion_Timer.configure(this, 8, 0, "RW", 0, 8'hfe, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_10_Inbound_ackID_CSR_reg
   // 
   // Inbound_Register
   //--------------------------------------------------------------------

   class Port_10_Inbound_ackID_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_10_Inbound_ackID_CSR_reg)

       rand uvm_reg_field Inbound_ackID;  
      uvm_reg_field Reserved; 


      // Function: new
      // 
      function new(string name = "Port_10_Inbound_ackID_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Inbound_ackID = uvm_reg_field::type_id::create("Inbound_ackID");
         Reserved = uvm_reg_field::type_id::create("Reserved");

       Inbound_ackID.configure(this, 12, 20, "RW", 0, 12'h000, 1, 1, 0);
         Reserved.configure(this, 20, 0, "RO", 0, 20'h00000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_15_VC5_VC1_BW_Allocation_Register_reg
   // 
   // BW Allocation Register
   //--------------------------------------------------------------------

   class Port_15_VC5_VC1_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_15_VC5_VC1_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 


      // Function: new
      // 
      function new(string name = "Port_15_VC5_VC1_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");

         Bandwidth_Allocation.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_2_Initialization_Status_CSR_reg
   // 
   // Initialization_Status_Register
   //--------------------------------------------------------------------

   class Port_2_Initialization_Status_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_2_Initialization_Status_CSR_reg)

      uvm_reg_field Reserved_3; 
      uvm_reg_field Transmitted_Status_Control_Symbols; 
      uvm_reg_field Reserved_2; 
      uvm_reg_field Received_Status_Control_Symbols; 
      uvm_reg_field Port_Initialization_State_Machine; 
      uvm_reg_field Reserved_1; 
      uvm_reg_field x1_x2_Mode_Detection; 
      uvm_reg_field Reserved; 
      uvm_reg_field Lane_Alignment; 


      // Function: new
      // 
      function new(string name = "Port_2_Initialization_Status_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved_3 = uvm_reg_field::type_id::create("Reserved_3");
         Transmitted_Status_Control_Symbols = uvm_reg_field::type_id::create("Transmitted_Status_Control_Symbols");
         Reserved_2 = uvm_reg_field::type_id::create("Reserved_2");
         Received_Status_Control_Symbols = uvm_reg_field::type_id::create("Received_Status_Control_Symbols");
         Port_Initialization_State_Machine = uvm_reg_field::type_id::create("Port_Initialization_State_Machine");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         x1_x2_Mode_Detection = uvm_reg_field::type_id::create("x1_x2_Mode_Detection");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Lane_Alignment = uvm_reg_field::type_id::create("Lane_Alignment");

         Reserved_3.configure(this, 4, 28, "RO", 0, 4'h0, 1, 0, 0);
         Transmitted_Status_Control_Symbols.configure(this, 7, 21, "RO", 0, 7'b0000000, 1, 0, 0);
         Reserved_2.configure(this, 1, 20, "RO", 0, 1'b0, 1, 0, 0);
         Received_Status_Control_Symbols.configure(this, 4, 16, "RO", 0, 4'h0, 1, 0, 0);
         Port_Initialization_State_Machine.configure(this, 5, 11, "RO", 0, 5'b00000, 1, 0, 0);
         Reserved_1.configure(this, 1, 10, "RO", 0, 1'b0, 1, 0, 0);
         x1_x2_Mode_Detection.configure(this, 4, 6, "RO", 0, 4'h0, 1, 0, 0);
         Reserved.configure(this, 1, 5, "RO", 0, 1'b0, 1, 0, 0);
         Lane_Alignment.configure(this, 5, 0, "RO", 0, 5'b00000, 1, 0, 0);
      endfunction
   endclass


   //--------------------------------------------------------------------
   // Class: Port_8_Timestamp_Synchronization_Status_CSR_reg
   // 
   // Timestamp_Synchronization_Status_CSR_Register
   //--------------------------------------------------------------------

   class Port_8_Timestamp_Synchronization_Status_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_8_Timestamp_Synchronization_Status_CSR_reg)

      uvm_reg_field Delay; 
      uvm_reg_field Reserved; 
      uvm_reg_field Response_Valid; 


      // Function: new
      // 
      function new(string name = "Port_8_Timestamp_Synchronization_Status_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Delay = uvm_reg_field::type_id::create("Delay");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Response_Valid = uvm_reg_field::type_id::create("Response_Valid");

         Delay.configure(this, 10, 22, "RO", 0, 10'b0000000000, 1, 0, 0);
         Reserved.configure(this, 21, 1, "RO", 0, 21'b000000000000000000000, 1, 0, 0);
         Response_Valid.configure(this, 1, 0, "RO", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_12_Link_Maintenance_Response_CSR_reg
   // 
   // Link Maintenance Response Register
   //--------------------------------------------------------------------

   class Port_12_Link_Maintenance_Response_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_12_Link_Maintenance_Response_CSR_reg)

      uvm_reg_field port_status; 
      uvm_reg_field ackID_status; 
      uvm_reg_field Port_status_cs64; 
      uvm_reg_field Reserved; 
      uvm_reg_field response_valid; 


      // Function: new
      // 
      function new(string name = "Port_12_Link_Maintenance_Response_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         port_status = uvm_reg_field::type_id::create("port_status");
         ackID_status = uvm_reg_field::type_id::create("ackID_status");
         Port_status_cs64 = uvm_reg_field::type_id::create("Port_status_cs64");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         response_valid = uvm_reg_field::type_id::create("response_valid");

         port_status.configure(this, 5, 27, "RO", 0, 5'b00000, 1, 0, 0);
         ackID_status.configure(this, 12, 15, "RO", 0, 12'h000, 1, 0, 0);
         Port_status_cs64.configure(this, 12, 3, "RO", 0, 12'h000, 1, 0, 0);
         Reserved.configure(this, 2, 1, "RO", 0, 2'b00, 1, 0, 0);
         response_valid.configure(this, 1, 0, "RO", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_9_Link_Timers_Control_2_CSR_reg
   // 
   // Link_Timers_Control_2_Register
   //--------------------------------------------------------------------

   class Port_9_Link_Timers_Control_2_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_9_Link_Timers_Control_2_CSR_reg)

      uvm_reg_field Reserved; 
      rand uvm_reg_field Recovery_Timer; 
      rand uvm_reg_field Discovery_Completion_Timer; 
      rand uvm_reg_field Retraining_Completion_Timer; 


      // Function: new
      // 
      function new(string name = "Port_9_Link_Timers_Control_2_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Recovery_Timer = uvm_reg_field::type_id::create("Recovery_Timer");
         Discovery_Completion_Timer = uvm_reg_field::type_id::create("Discovery_Completion_Timer");
         Retraining_Completion_Timer = uvm_reg_field::type_id::create("Retraining_Completion_Timer");

         Reserved.configure(this, 8, 24, "RO", 0, 8'h00, 1, 0, 1);
         Recovery_Timer.configure(this, 8, 16, "RW", 0, 8'hff, 1, 1, 1);
         Discovery_Completion_Timer.configure(this, 8, 8, "RW", 0, 8'h00, 1, 1, 1);
         Retraining_Completion_Timer.configure(this, 8, 0, "RW", 0, 8'hfe, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_6_Timestamp_Offset_CSR_reg
   // 
   // Timestamp_Offset_CSR_Register
   //--------------------------------------------------------------------

   class Port_6_Timestamp_Offset_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_6_Timestamp_Offset_CSR_reg)

      uvm_reg_field Reserved; 
      rand uvm_reg_field Offset; 


      // Function: new
      // 
      function new(string name = "Port_6_Timestamp_Offset_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Offset = uvm_reg_field::type_id::create("Offset");

         Reserved.configure(this, 16, 16, "RO", 0, 16'h0000, 1, 0, 1);
         Offset.configure(this, 16, 0, "RW", 0, 16'h0000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_9_Attributes_Capture_CSR_reg
   // 
   // Attributes Register
   //--------------------------------------------------------------------

   class Port_9_Attributes_Capture_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_9_Attributes_Capture_CSR_reg)

      rand uvm_reg_field Capture_valid_info; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Implementation_Dependent; 
      rand uvm_reg_field Error_type; 
      rand uvm_reg_field Info_type; 


      // Function: new
      // 
      function new(string name = "Port_9_Attributes_Capture_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture_valid_info = uvm_reg_field::type_id::create("Capture_valid_info");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Implementation_Dependent = uvm_reg_field::type_id::create("Implementation_Dependent");
         Error_type = uvm_reg_field::type_id::create("Error_type");
         Info_type = uvm_reg_field::type_id::create("Info_type");

         Capture_valid_info.configure(this, 1, 31, "RW", 0, 1'b0, 1, 1, 0);
         Reserved.configure(this, 3, 28, "RO", 0, 3'b000, 1, 0, 0);
         Implementation_Dependent.configure(this, 20, 8, "RW", 0, 20'h00000, 1, 1, 0);
         Error_type.configure(this, 5, 3, "RW", 0, 5'b00000, 1, 1, 0);
         Info_type.configure(this, 3, 0, "RW", 0, 3'b000, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_15_Initialization_Status_CSR_reg
   // 
   // Initialization_Status_Register
   //--------------------------------------------------------------------

   class Port_15_Initialization_Status_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_15_Initialization_Status_CSR_reg)

      uvm_reg_field Reserved_3; 
      uvm_reg_field Transmitted_Status_Control_Symbols; 
      uvm_reg_field Reserved_2; 
      uvm_reg_field Received_Status_Control_Symbols; 
      uvm_reg_field Port_Initialization_State_Machine; 
      uvm_reg_field Reserved_1; 
      uvm_reg_field x1_x2_Mode_Detection; 
      uvm_reg_field Reserved; 
      uvm_reg_field Lane_Alignment; 


      // Function: new
      // 
      function new(string name = "Port_15_Initialization_Status_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved_3 = uvm_reg_field::type_id::create("Reserved_3");
         Transmitted_Status_Control_Symbols = uvm_reg_field::type_id::create("Transmitted_Status_Control_Symbols");
         Reserved_2 = uvm_reg_field::type_id::create("Reserved_2");
         Received_Status_Control_Symbols = uvm_reg_field::type_id::create("Received_Status_Control_Symbols");
         Port_Initialization_State_Machine = uvm_reg_field::type_id::create("Port_Initialization_State_Machine");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         x1_x2_Mode_Detection = uvm_reg_field::type_id::create("x1_x2_Mode_Detection");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Lane_Alignment = uvm_reg_field::type_id::create("Lane_Alignment");

         Reserved_3.configure(this, 4, 28, "RO", 0, 4'h0, 1, 0, 0);
         Transmitted_Status_Control_Symbols.configure(this, 7, 21, "RO", 0, 7'b0000000, 1, 0, 0);
         Reserved_2.configure(this, 1, 20, "RO", 0, 1'b0, 1, 0, 0);
         Received_Status_Control_Symbols.configure(this, 4, 16, "RO", 0, 4'h0, 1, 0, 0);
         Port_Initialization_State_Machine.configure(this, 5, 11, "RO", 0, 5'b00000, 1, 0, 0);
         Reserved_1.configure(this, 1, 10, "RO", 0, 1'b0, 1, 0, 0);
         x1_x2_Mode_Detection.configure(this, 4, 6, "RO", 0, 4'h0, 1, 0, 0);
         Reserved.configure(this, 1, 5, "RO", 0, 1'b0, 1, 0, 0);
         Lane_Alignment.configure(this, 5, 0, "RO", 0, 5'b00000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_5_Link_Timers_Control_CSR_reg
   // 
   // Link_Timers_Control_Register
   //--------------------------------------------------------------------

   class Port_5_Link_Timers_Control_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_5_Link_Timers_Control_CSR_reg)

      rand uvm_reg_field Emphasis_Command_Timeout; 
      rand uvm_reg_field CW_Training_Completion_Timer; 
      rand uvm_reg_field DME_Wait_Timer; 
      rand uvm_reg_field DME_Training_Completion_Timer; 


      // Function: new
      // 
      function new(string name = "Port_5_Link_Timers_Control_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Emphasis_Command_Timeout = uvm_reg_field::type_id::create("Emphasis_Command_Timeout");
         CW_Training_Completion_Timer = uvm_reg_field::type_id::create("CW_Training_Completion_Timer");
         DME_Wait_Timer = uvm_reg_field::type_id::create("DME_Wait_Timer");
         DME_Training_Completion_Timer = uvm_reg_field::type_id::create("DME_Training_Completion_Timer");

         Emphasis_Command_Timeout.configure(this, 8, 24, "RW", 0, 8'hff, 1, 1, 1);
         CW_Training_Completion_Timer.configure(this, 8, 16, "RW", 0, 8'h00, 1, 1, 1);
         DME_Wait_Timer.configure(this, 8, 8, "RW", 0, 8'h3f, 1, 1, 1);
         DME_Training_Completion_Timer.configure(this, 8, 0, "RW", 0, 8'h00, 1, 1, 1);
      endfunction
   endclass

   //--------------------------------------------------------------------
   // Class: Lane_2_Status_3_CSR_reg
   // 
   // Status 3 Register
   //--------------------------------------------------------------------

   class Lane_2_Status_3_CSR_reg extends uvm_reg;
      `uvm_object_utils(Lane_2_Status_3_CSR_reg)

      uvm_reg_field Reserved; 
      uvm_reg_field LP_State_Control_Reserved; 
      uvm_reg_field LP_Lane_Entering_Silence; 
      uvm_reg_field LP_Port_Entering_Silence; 
      uvm_reg_field LP_Retraining; 
      uvm_reg_field LP_Retrain_Ready; 
      uvm_reg_field LP_Retrain_Grant; 
      uvm_reg_field LP_Transmit_Equalizer_Status; 
      uvm_reg_field LP_Transmit_Equalizer_Command; 
      uvm_reg_field LP_Transmit_Equalizer_Tap; 
      uvm_reg_field LP_Transmit_SC_Sequences; 
      uvm_reg_field LP_Transmit_Width_Request_Pending; 
      uvm_reg_field LP_Transmit_Width_Request; 


      // Function: new
      // 
      function new(string name = "Lane_2_Status_3_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         LP_State_Control_Reserved = uvm_reg_field::type_id::create("LP_State_Control_Reserved");
         LP_Lane_Entering_Silence = uvm_reg_field::type_id::create("LP_Lane_Entering_Silence");
         LP_Port_Entering_Silence = uvm_reg_field::type_id::create("LP_Port_Entering_Silence");
         LP_Retraining = uvm_reg_field::type_id::create("LP_Retraining");
         LP_Retrain_Ready = uvm_reg_field::type_id::create("LP_Retrain_Ready");
         LP_Retrain_Grant = uvm_reg_field::type_id::create("LP_Retrain_Grant");
         LP_Transmit_Equalizer_Status = uvm_reg_field::type_id::create("LP_Transmit_Equalizer_Status");
         LP_Transmit_Equalizer_Command = uvm_reg_field::type_id::create("LP_Transmit_Equalizer_Command");
         LP_Transmit_Equalizer_Tap = uvm_reg_field::type_id::create("LP_Transmit_Equalizer_Tap");
         LP_Transmit_SC_Sequences = uvm_reg_field::type_id::create("LP_Transmit_SC_Sequences");
         LP_Transmit_Width_Request_Pending = uvm_reg_field::type_id::create("LP_Transmit_Width_Request_Pending");
         LP_Transmit_Width_Request = uvm_reg_field::type_id::create("LP_Transmit_Width_Request");

         Reserved.configure(this, 4, 28, "RO", 0, 4'h0, 1, 0, 0);
         LP_State_Control_Reserved.configure(this, 8, 20, "RO", 0, 8'h00, 1, 0, 0);
         LP_Lane_Entering_Silence.configure(this, 1, 19, "RO", 0, 1'b0, 1, 0, 0);
         LP_Port_Entering_Silence.configure(this, 1, 18, "RO", 0, 1'b0, 1, 0, 0);
         LP_Retraining.configure(this, 1, 17, "RO", 0, 1'b0, 1, 0, 0);
         LP_Retrain_Ready.configure(this, 1, 16, "RO", 0, 1'b0, 1, 0, 0);
         LP_Retrain_Grant.configure(this, 1, 15, "RO", 0, 1'b0, 1, 0, 0);
         LP_Transmit_Equalizer_Status.configure(this, 3, 12, "RO", 0, 3'b000, 1, 0, 0);
         LP_Transmit_Equalizer_Command.configure(this, 3, 9, "RO", 0, 3'b000, 1, 0, 0);
         LP_Transmit_Equalizer_Tap.configure(this, 4, 5, "RO", 0, 4'h0, 1, 0, 0);
         LP_Transmit_SC_Sequences.configure(this, 1, 4, "RO", 0, 1'b0, 1, 0, 0);
         LP_Transmit_Width_Request_Pending.configure(this, 1, 3, "RO", 0, 1'b0, 1, 0, 0);
         LP_Transmit_Width_Request.configure(this, 3, 0, "RO", 0, 3'b000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_5_VC0_BW_Allocation_Register_reg
   // 
   // BW Register
   //--------------------------------------------------------------------

   class Port_5_VC0_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_5_VC0_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 
      rand uvm_reg_field Bandwidth_Reservation_Precision; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field VC0_BW_Res_Enable; 
      uvm_reg_field VC0_Bandwidth_Reservation_Capable; 


      // Function: new
      // 
      function new(string name = "Port_5_VC0_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");
         Bandwidth_Reservation_Precision = uvm_reg_field::type_id::create("Bandwidth_Reservation_Precision");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         VC0_BW_Res_Enable = uvm_reg_field::type_id::create("VC0_BW_Res_Enable");
         VC0_Bandwidth_Reservation_Capable = uvm_reg_field::type_id::create("VC0_Bandwidth_Reservation_Capable");

         Bandwidth_Allocation.configure(this, 16, 16, "RW", 0, 16'h0000, 1, 1, 1);
         Bandwidth_Reservation_Precision.configure(this, 8, 8, "RW", 0, 8'h00, 1, 1, 1);
         Reserved.configure(this, 6, 2, "RO", 0, 6'b000000, 1, 0, 0);
         VC0_BW_Res_Enable.configure(this, 1, 1, "RW", 0, 1'b0, 1, 1, 0);
         VC0_Bandwidth_Reservation_Capable.configure(this, 1, 0, "RO", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_3_VC6_VC2_BW_Allocation_Register_reg
   // 
   // BW Allocation Register
   //--------------------------------------------------------------------

   class Port_3_VC6_VC2_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_3_VC6_VC2_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 


      // Function: new
      // 
      function new(string name = "Port_3_VC6_VC2_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");

         Bandwidth_Allocation.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_7_Control_CSR_reg
   // 
   // Control Register
   //--------------------------------------------------------------------

   class Port_7_Control_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_7_Control_CSR_reg)

      uvm_reg_field Port_Type; 
      rand uvm_reg_field Port_Lockout; 
      rand uvm_reg_field Drop_Packet_Enable; 
      rand uvm_reg_field Stop_on_Port_Failed_encountered_Enable; 
      rand uvm_reg_field Implementation_defined; 
      uvm_reg_field Extended_Port_Width_Support; 
      rand uvm_reg_field Extended_Port_Width_Override; 
      rand uvm_reg_field Flow_Arbitration_Participant; 
      rand uvm_reg_field Enumeration_Boundary; 
      rand uvm_reg_field Flow_Control_Participant; 
      rand uvm_reg_field Multicast_event_Participant; 
      rand uvm_reg_field Error_Checking_Disable; 
      rand uvm_reg_field Input_Port_Enable; 
      rand uvm_reg_field Output_Port_Enable; 
      rand uvm_reg_field Port_Disable; 
      uvm_reg_field Port_Width_Override; 
      rand uvm_reg_field Initialized_Port_Width; 
      uvm_reg_field Port_Width_Support; 


      // Function: new
      // 
      function new(string name = "Port_7_Control_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Port_Type = uvm_reg_field::type_id::create("Port_Type");
         Port_Lockout = uvm_reg_field::type_id::create("Port_Lockout");
         Drop_Packet_Enable = uvm_reg_field::type_id::create("Drop_Packet_Enable");
         Stop_on_Port_Failed_encountered_Enable = uvm_reg_field::type_id::create("Stop_on_Port_Failed_encountered_Enable");
         Implementation_defined = uvm_reg_field::type_id::create("Implementation_defined");
         Extended_Port_Width_Support = uvm_reg_field::type_id::create("Extended_Port_Width_Support");
         Extended_Port_Width_Override = uvm_reg_field::type_id::create("Extended_Port_Width_Override");
         Flow_Arbitration_Participant = uvm_reg_field::type_id::create("Flow_Arbitration_Participant");
         Enumeration_Boundary = uvm_reg_field::type_id::create("Enumeration_Boundary");
         Flow_Control_Participant = uvm_reg_field::type_id::create("Flow_Control_Participant");
         Multicast_event_Participant = uvm_reg_field::type_id::create("Multicast_event_Participant");
         Error_Checking_Disable = uvm_reg_field::type_id::create("Error_Checking_Disable");
         Input_Port_Enable = uvm_reg_field::type_id::create("Input_Port_Enable");
         Output_Port_Enable = uvm_reg_field::type_id::create("Output_Port_Enable");
         Port_Disable = uvm_reg_field::type_id::create("Port_Disable");
         Port_Width_Override = uvm_reg_field::type_id::create("Port_Width_Override");
         Initialized_Port_Width = uvm_reg_field::type_id::create("Initialized_Port_Width");
         Port_Width_Support = uvm_reg_field::type_id::create("Port_Width_Support");

         Port_Type.configure(this, 1, 31, "RO", 0, 1'b0, 1, 0, 0);
         Port_Lockout.configure(this, 1, 30, "RW", 0, 1'b0, 1, 1, 0);
         Drop_Packet_Enable.configure(this, 1, 29, "RW", 0, 1'b0, 1, 1, 0);
         Stop_on_Port_Failed_encountered_Enable.configure(this, 1, 28, "RW", 0, 1'b0, 1, 1, 0);
         Implementation_defined.configure(this, 8, 20, "RW", 0, 8'h00, 1, 1, 0);
         Extended_Port_Width_Support.configure(this, 2, 18, "RO", 0, 2'b00, 1, 0, 0);
         Extended_Port_Width_Override.configure(this, 2, 16, "RW", 0, 2'b00, 1, 1, 0);
         Flow_Arbitration_Participant.configure(this, 1, 15, "RW", 0, 1'b0, 1, 1, 0);
         Enumeration_Boundary.configure(this, 1, 14, "RW", 0, 1'b0, 1, 1, 0);
         Flow_Control_Participant.configure(this, 1, 13, "RW", 0, 1'b0, 1, 1, 0);
         Multicast_event_Participant.configure(this, 1, 12, "RW", 0, 1'b0, 1, 1, 0);
         Error_Checking_Disable.configure(this, 1, 11, "RW", 0, 1'b0, 1, 1, 0);
         Input_Port_Enable.configure(this, 1, 10, "RW", 0, 1'b0, 1, 1, 0);
         Output_Port_Enable.configure(this, 1, 9, "RW", 0, 1'b0, 1, 1, 0);
         Port_Disable.configure(this, 1, 8, "RW", 0, 1'b0, 1, 1, 0);
         Port_Width_Override.configure(this, 3, 5, "RO", 0, 3'b000, 1, 0, 0);
         Initialized_Port_Width.configure(this, 3, 2, "RW", 0, 3'b000, 1, 1, 0);
         Port_Width_Support.configure(this, 2, 0, "RO", 0, 2'b00, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_0_VC_Control_and_Status_Register_reg
   // 
   // CSR Register
   //--------------------------------------------------------------------

   class Port_0_VC_Control_and_Status_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_0_VC_Control_and_Status_Register_reg)

      rand uvm_reg_field VCs_Enable; 
      uvm_reg_field VCs_Support; 
      rand uvm_reg_field CT_Mode; 
      rand uvm_reg_field VC_Refresh_Interval; 


      // Function: new
      // 
      function new(string name = "Port_0_VC_Control_and_Status_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         VCs_Enable = uvm_reg_field::type_id::create("VCs_Enable");
         VCs_Support = uvm_reg_field::type_id::create("VCs_Support");
         CT_Mode = uvm_reg_field::type_id::create("CT_Mode");
         VC_Refresh_Interval = uvm_reg_field::type_id::create("VC_Refresh_Interval");

         VCs_Enable.configure(this, 8, 24, "RW", 0, 8'h00, 1, 1, 1);
         VCs_Support.configure(this, 8, 16, "RO", 0, 8'h00, 1, 0, 1);
         CT_Mode.configure(this, 8, 8, "RW", 0, 8'h00, 1, 1, 1);
         VC_Refresh_Interval.configure(this, 8, 0, "RW", 0, 8'h00, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_N_Error_Detect_CSR_reg
   // 
   // Error Detect Register
   //--------------------------------------------------------------------

   class Port_N_Error_Detect_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_N_Error_Detect_CSR_reg)
      bit brc3;
      rand uvm_reg_field Link_timeout; 
      rand uvm_reg_field Unsolicited_acknowledgement_control_symbol; 
      rand uvm_reg_field Delineation_error; 
      uvm_reg_field Frame_toggle_edge_error; 
      rand uvm_reg_field Protocol_error; 
      rand uvm_reg_field Non_outstanding_ackID; 
      uvm_reg_field Reserved_1; 
      rand uvm_reg_field Ivalid_Ordered_Sequence; 
      rand uvm_reg_field Loss_of_descrambler_synchronization; 
      rand uvm_reg_field Received_data_character_in_IDLE1_sequence; 
      rand uvm_reg_field Received_illegal_or_invalid_character; 
      rand uvm_reg_field Received_packet_exceeds_maximum_allowed_size; 
      rand uvm_reg_field Received_packet_with_bad_CRC; 
      rand uvm_reg_field Received_packet_with_unexpected_ackID; 
      rand uvm_reg_field Received_packet_not_accepted_control_symbol; 
      rand uvm_reg_field Received_acknowledge_control_symbol_with_unexpected_ackID; 
      rand uvm_reg_field Received_corrupt_control_symbol; 
      uvm_reg_field Received_S_bit_error; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Link_Uninit_To_Ok_Transition; 
      rand uvm_reg_field Link_Uninit_Packet_Discard_Active; 
      rand uvm_reg_field Link_Ok_To_Uninit_Transition; 
      uvm_reg_field Implementation_specific_error; 


      // Function: new
      // 
      function new(string name = "Port_N_Error_Detect_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Link_timeout = uvm_reg_field::type_id::create("Link_timeout");
         Unsolicited_acknowledgement_control_symbol = uvm_reg_field::type_id::create("Unsolicited_acknowledgement_control_symbol");
         Delineation_error = uvm_reg_field::type_id::create("Delineation_error");
         Frame_toggle_edge_error = uvm_reg_field::type_id::create("Frame_toggle_edge_error");
         Protocol_error = uvm_reg_field::type_id::create("Protocol_error");
         Non_outstanding_ackID = uvm_reg_field::type_id::create("Non_outstanding_ackID");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         Ivalid_Ordered_Sequence = uvm_reg_field::type_id::create("Ivalid_Ordered_Sequence");
         Loss_of_descrambler_synchronization = uvm_reg_field::type_id::create("Loss_of_descrambler_synchronization");
         Received_data_character_in_IDLE1_sequence = uvm_reg_field::type_id::create("Received_data_character_in_IDLE1_sequence");
         Received_illegal_or_invalid_character = uvm_reg_field::type_id::create("Received_illegal_or_invalid_character");
         Received_packet_exceeds_maximum_allowed_size = uvm_reg_field::type_id::create("Received_packet_exceeds_maximum_allowed_size");
         Received_packet_with_bad_CRC = uvm_reg_field::type_id::create("Received_packet_with_bad_CRC");
         Received_packet_with_unexpected_ackID = uvm_reg_field::type_id::create("Received_packet_with_unexpected_ackID");
         Received_packet_not_accepted_control_symbol = uvm_reg_field::type_id::create("Received_packet_not_accepted_control_symbol");
         Received_acknowledge_control_symbol_with_unexpected_ackID = uvm_reg_field::type_id::create("Received_acknowledge_control_symbol_with_unexpected_ackID");
         Received_corrupt_control_symbol = uvm_reg_field::type_id::create("Received_corrupt_control_symbol");
         Received_S_bit_error = uvm_reg_field::type_id::create("Received_S_bit_error");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Link_Uninit_To_Ok_Transition = uvm_reg_field::type_id::create("Link_Uninit_To_Ok_Transition");
         Link_Uninit_Packet_Discard_Active = uvm_reg_field::type_id::create("Link_Uninit_Packet_Discard_Active");
         Link_Ok_To_Uninit_Transition = uvm_reg_field::type_id::create("Link_Ok_To_Uninit_Transition");
         Implementation_specific_error = uvm_reg_field::type_id::create("Implementation_specific_error");

         Link_timeout.configure(this, 1, 31, "RW", 0, 1'b0, 1, 1, 0);
         Unsolicited_acknowledgement_control_symbol.configure(this, 1, 30, "RW", 0, 1'b0, 1, 1, 0);
         Delineation_error.configure(this, 1, 29, "RW", 0, 1'b0, 1, 1, 0);
         Frame_toggle_edge_error.configure(this, 1, 28, "RO", 0, 1'b0, 1, 0, 0);
         Protocol_error.configure(this, 1, 27, "RW", 0, 1'b0, 1, 1, 0);
         Non_outstanding_ackID.configure(this, 1, 26, "RW", 0, 1'b0, 1, 1, 0);
         Reserved_1.configure(this, 7, 19, "RO", 0, 7'b0000000, 1, 0, 0);
         Ivalid_Ordered_Sequence.configure(this, 1, 18, "RW", 0, 1'b0, 1, 1, 0);
         Loss_of_descrambler_synchronization.configure(this, 1, 17, "RW", 0, 1'b0, 1, 1, 0);
         Received_data_character_in_IDLE1_sequence.configure(this, 1, 16, "RW", 0, 1'b0, 1, 1, 0);
         Received_illegal_or_invalid_character.configure(this, 1, 15, "RW", 0, 1'b0, 1, 1, 0);
         Received_packet_exceeds_maximum_allowed_size.configure(this, 1, 14, "RW", 0, 1'b0, 1, 1, 0);
         Received_packet_with_bad_CRC.configure(this, 1, 13, "RW", 0, 1'b0, 1, 1, 0);
         Received_packet_with_unexpected_ackID.configure(this, 1, 12, "RW", 0, 1'b0, 1, 1, 0);
         Received_packet_not_accepted_control_symbol.configure(this, 1, 11, "RW", 0, 1'b0, 1, 1, 0);
         Received_acknowledge_control_symbol_with_unexpected_ackID.configure(this, 1, 10, "RW", 0, 1'b0, 1, 1, 0);
         Received_corrupt_control_symbol.configure(this, 1, 9, "RW", 0, 1'b0, 1, 1, 0);
         Received_S_bit_error.configure(this, 1, 8, "RO", 0, 1'b0, 1, 0, 0);
         Reserved.configure(this, 4, 4, "RO", 0, 4'h0, 1, 0, 0);
         Link_Uninit_To_Ok_Transition.configure(this, 1, 3, "RW", 0, 1'b0, 1, 1, 0);
         Link_Uninit_Packet_Discard_Active.configure(this, 1, 2, "RW", 0, 1'b0, 1, 1, 0);
         Link_Ok_To_Uninit_Transition.configure(this, 1, 1, "RW", 0, 1'b0, 1, 1, 0);
         Implementation_specific_error.configure(this, 1, 0, "RO", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_12_Link_Timers_Control_3_CSR_reg
   // 
   // Link_Timers_Control_3_Register
   //--------------------------------------------------------------------

   class Port_12_Link_Timers_Control_3_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_12_Link_Timers_Control_3_CSR_reg)

      rand uvm_reg_field Keep_alive_Transmission_Interval; 
      rand uvm_reg_field Keep_alive_Transmission_Period; 
      rand uvm_reg_field Receive_Width_Command_Timeout; 
      rand uvm_reg_field Transmit_Width_Command_Timeout; 


      // Function: new
      // 
      function new(string name = "Port_12_Link_Timers_Control_3_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Keep_alive_Transmission_Interval = uvm_reg_field::type_id::create("Keep_alive_Transmission_Interval");
         Keep_alive_Transmission_Period = uvm_reg_field::type_id::create("Keep_alive_Transmission_Period");
         Receive_Width_Command_Timeout = uvm_reg_field::type_id::create("Receive_Width_Command_Timeout");
         Transmit_Width_Command_Timeout = uvm_reg_field::type_id::create("Transmit_Width_Command_Timeout");

         Keep_alive_Transmission_Interval.configure(this, 10, 22, "RW", 0, 10'b1111111111, 1, 1, 0);
         Keep_alive_Transmission_Period.configure(this, 6, 16, "RW", 0, 6'b000001, 1, 1, 0);
         Receive_Width_Command_Timeout.configure(this, 8, 8, "RW", 0, 8'h40, 1, 1, 1);
         Transmit_Width_Command_Timeout.configure(this, 8, 0, "RW", 0, 8'hff, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Logical_Transport_Layer_Address_Capture_CSR_reg
   // 
   // Address capture register
   //--------------------------------------------------------------------

   class Logical_Transport_Layer_Address_Capture_CSR_reg extends uvm_reg;
      `uvm_object_utils(Logical_Transport_Layer_Address_Capture_CSR_reg)

      rand uvm_reg_field xamsbs; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field address_32_60; 


      // Function: new
      // 
      function new(string name = "Logical_Transport_Layer_Address_Capture_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         xamsbs = uvm_reg_field::type_id::create("xamsbs");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         address_32_60 = uvm_reg_field::type_id::create("address_32_60");

         xamsbs.configure(this, 2, 30, "RW", 0, 2'b00, 1, 1, 0);
         Reserved.configure(this, 1, 29, "RO", 0, 1'b0, 1, 0, 0);
         address_32_60.configure(this, 29, 0, "RW", 0, 29'b00000000000000000000000000000, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_12_Timestamp_Synchronization_Status_CSR_reg
   // 
   // Timestamp_Synchronization_Status_CSR_Register
   //--------------------------------------------------------------------

   class Port_12_Timestamp_Synchronization_Status_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_12_Timestamp_Synchronization_Status_CSR_reg)

      uvm_reg_field Delay; 
      uvm_reg_field Reserved; 
      uvm_reg_field Response_Valid; 


      // Function: new
      // 
      function new(string name = "Port_12_Timestamp_Synchronization_Status_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Delay = uvm_reg_field::type_id::create("Delay");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Response_Valid = uvm_reg_field::type_id::create("Response_Valid");

         Delay.configure(this, 10, 22, "RO", 0, 10'b0000000000, 1, 0, 0);
         Reserved.configure(this, 21, 1, "RO", 0, 21'b000000000000000000000, 1, 0, 0);
         Response_Valid.configure(this, 1, 0, "RO", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass

   //--------------------------------------------------------------------
   // Class: Port_6_Initialization_Status_CSR_reg
   // 
   // Initialization_Status_Register
   //--------------------------------------------------------------------

   class Port_6_Initialization_Status_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_6_Initialization_Status_CSR_reg)

      uvm_reg_field Reserved_3; 
      uvm_reg_field Transmitted_Status_Control_Symbols; 
      uvm_reg_field Reserved_2; 
      uvm_reg_field Received_Status_Control_Symbols; 
      uvm_reg_field Port_Initialization_State_Machine; 
      uvm_reg_field Reserved_1; 
      uvm_reg_field x1_x2_Mode_Detection; 
      uvm_reg_field Reserved; 
      uvm_reg_field Lane_Alignment; 


      // Function: new
      // 
      function new(string name = "Port_6_Initialization_Status_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved_3 = uvm_reg_field::type_id::create("Reserved_3");
         Transmitted_Status_Control_Symbols = uvm_reg_field::type_id::create("Transmitted_Status_Control_Symbols");
         Reserved_2 = uvm_reg_field::type_id::create("Reserved_2");
         Received_Status_Control_Symbols = uvm_reg_field::type_id::create("Received_Status_Control_Symbols");
         Port_Initialization_State_Machine = uvm_reg_field::type_id::create("Port_Initialization_State_Machine");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         x1_x2_Mode_Detection = uvm_reg_field::type_id::create("x1_x2_Mode_Detection");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Lane_Alignment = uvm_reg_field::type_id::create("Lane_Alignment");

         Reserved_3.configure(this, 4, 28, "RO", 0, 4'h0, 1, 0, 0);
         Transmitted_Status_Control_Symbols.configure(this, 7, 21, "RO", 0, 7'b0000000, 1, 0, 0);
         Reserved_2.configure(this, 1, 20, "RO", 0, 1'b0, 1, 0, 0);
         Received_Status_Control_Symbols.configure(this, 4, 16, "RO", 0, 4'h0, 1, 0, 0);
         Port_Initialization_State_Machine.configure(this, 5, 11, "RO", 0, 5'b00000, 1, 0, 0);
         Reserved_1.configure(this, 1, 10, "RO", 0, 1'b0, 1, 0, 0);
         x1_x2_Mode_Detection.configure(this, 4, 6, "RO", 0, 4'h0, 1, 0, 0);
         Reserved.configure(this, 1, 5, "RO", 0, 1'b0, 1, 0, 0);
         Lane_Alignment.configure(this, 5, 0, "RO", 0, 5'b00000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_1_Timestamp_1_LSW_CSR_reg
   // 
   // Timestamp_1_LSW_Register
   //--------------------------------------------------------------------

   class Port_1_Timestamp_1_LSW_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_1_Timestamp_1_LSW_CSR_reg)

      uvm_reg_field LSW_Bits; 


      // Function: new
      // 
      function new(string name = "Port_1_Timestamp_1_LSW_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         LSW_Bits = uvm_reg_field::type_id::create("LSW_Bits");

         LSW_Bits.configure(this, 32, 0, "RO", 0, 32'h00000000, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_14_Packet_Capture_3_CSR_reg
   // 
   // Packet Capture 3 Register
   //--------------------------------------------------------------------

   class Port_14_Packet_Capture_3_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_14_Packet_Capture_3_CSR_reg)

      rand uvm_reg_field Capture3; 


      // Function: new
      // 
      function new(string name = "Port_14_Packet_Capture_3_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture3 = uvm_reg_field::type_id::create("Capture3");

         Capture3.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_4_Attributes_Capture_CSR_reg
   // 
   // Attributes Register
   //--------------------------------------------------------------------

   class Port_4_Attributes_Capture_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_4_Attributes_Capture_CSR_reg)

      rand uvm_reg_field Capture_valid_info; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Implementation_Dependent; 
      rand uvm_reg_field Error_type; 
      rand uvm_reg_field Info_type; 


      // Function: new
      // 
      function new(string name = "Port_4_Attributes_Capture_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture_valid_info = uvm_reg_field::type_id::create("Capture_valid_info");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Implementation_Dependent = uvm_reg_field::type_id::create("Implementation_Dependent");
         Error_type = uvm_reg_field::type_id::create("Error_type");
         Info_type = uvm_reg_field::type_id::create("Info_type");

         Capture_valid_info.configure(this, 1, 31, "RW", 0, 1'b0, 1, 1, 0);
         Reserved.configure(this, 3, 28, "RO", 0, 3'b000, 1, 0, 0);
         Implementation_Dependent.configure(this, 20, 8, "RW", 0, 20'h00000, 1, 1, 0);
         Error_type.configure(this, 5, 3, "RW", 0, 5'b00000, 1, 1, 0);
         Info_type.configure(this, 3, 0, "RW", 0, 3'b000, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_8_Outbound_ackID_CSR_reg
   // 
   // Outbound_Register
   //--------------------------------------------------------------------

   class Port_8_Outbound_ackID_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_8_Outbound_ackID_CSR_reg)

      rand uvm_reg_field Outbound_ackID; 
      uvm_reg_field Outstanding_ackID; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Clr_outstanding_ackID; 


      // Function: new
      // 
      function new(string name = "Port_8_Outbound_ackID_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Outbound_ackID = uvm_reg_field::type_id::create("Outbound_ackID");
         Outstanding_ackID = uvm_reg_field::type_id::create("Outstanding_ackID");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Clr_outstanding_ackID = uvm_reg_field::type_id::create("Clr_outstanding_ackID");

         Outbound_ackID.configure(this, 12, 20, "RW", 0, 12'h000, 1, 1, 0);
         Outstanding_ackID.configure(this, 12, 8, "RW", 0, 12'h000, 1, 1, 0);
         Reserved.configure(this, 7, 1, "RO", 0, 7'b0000000, 1, 0, 0);
         Clr_outstanding_ackID.configure(this, 1, 0, "W1C", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_9_VC0_BW_Allocation_Register_reg
   // 
   // BW Register
   //--------------------------------------------------------------------

   class Port_9_VC0_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_9_VC0_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 
      rand uvm_reg_field Bandwidth_Reservation_Precision; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field VC0_BW_Res_Enable; 
      uvm_reg_field VC0_Bandwidth_Reservation_Capable; 


      // Function: new
      // 
      function new(string name = "Port_9_VC0_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");
         Bandwidth_Reservation_Precision = uvm_reg_field::type_id::create("Bandwidth_Reservation_Precision");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         VC0_BW_Res_Enable = uvm_reg_field::type_id::create("VC0_BW_Res_Enable");
         VC0_Bandwidth_Reservation_Capable = uvm_reg_field::type_id::create("VC0_Bandwidth_Reservation_Capable");

         Bandwidth_Allocation.configure(this, 16, 16, "RW", 0, 16'h0000, 1, 1, 1);
         Bandwidth_Reservation_Precision.configure(this, 8, 8, "RW", 0, 8'h00, 1, 1, 1);
         Reserved.configure(this, 6, 2, "RO", 0, 6'b000000, 1, 0, 0);
         VC0_BW_Res_Enable.configure(this, 1, 1, "RW", 0, 1'b0, 1, 1, 0);
         VC0_Bandwidth_Reservation_Capable.configure(this, 1, 0, "RO", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Source_Operations_CAR_reg
   // 
   // Source Register
   //--------------------------------------------------------------------

   class Source_Operations_CAR_reg extends uvm_reg;
      `uvm_object_utils(Source_Operations_CAR_reg)

      uvm_reg_field Implementation_Defined_1; 
      uvm_reg_field Port_write; 
      uvm_reg_field Atomic_swap; 
      uvm_reg_field Atomic_clear; 
      uvm_reg_field Atomic_set; 
      uvm_reg_field Atomic_decrement; 
      uvm_reg_field Atomic_increment; 
      uvm_reg_field Atomic_test_and_swap; 
      uvm_reg_field Atomic_compare_and_swap; 
      uvm_reg_field Doorbell; 
      uvm_reg_field Data_Message; 
      uvm_reg_field Write_with_response; 
      uvm_reg_field Streaming_write; 
      uvm_reg_field nwrite; 
      uvm_reg_field Nread; 
      uvm_reg_field Implementation_Defined; 
      uvm_reg_field Data_streaming; 
      uvm_reg_field Data_streaming_traffic_management; 
      uvm_reg_field Reserved; 
      uvm_reg_field TLB_invalidate_entry_sync; 
      uvm_reg_field TLB_invalidate_entry; 
      uvm_reg_field Instruction_cache_invalidate; 
      uvm_reg_field IO_read; 
      uvm_reg_field Data_cache_flush; 
      uvm_reg_field Castout; 
      uvm_reg_field Data_cache_invalidate; 
      uvm_reg_field Read_for_ownership; 
      uvm_reg_field Instruction_read; 
      uvm_reg_field Read; 


      // Function: new
      // 
      function new(string name = "Source_Operations_CAR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Implementation_Defined_1 = uvm_reg_field::type_id::create("Implementation_Defined_1");
         Port_write = uvm_reg_field::type_id::create("Port_write");
         Atomic_swap = uvm_reg_field::type_id::create("Atomic_swap");
         Atomic_clear = uvm_reg_field::type_id::create("Atomic_clear");
         Atomic_set = uvm_reg_field::type_id::create("Atomic_set");
         Atomic_decrement = uvm_reg_field::type_id::create("Atomic_decrement");
         Atomic_increment = uvm_reg_field::type_id::create("Atomic_increment");
         Atomic_test_and_swap = uvm_reg_field::type_id::create("Atomic_test_and_swap");
         Atomic_compare_and_swap = uvm_reg_field::type_id::create("Atomic_compare_and_swap");
         Doorbell = uvm_reg_field::type_id::create("Doorbell");
         Data_Message = uvm_reg_field::type_id::create("Data_Message");
         Write_with_response = uvm_reg_field::type_id::create("Write_with_response");
         Streaming_write = uvm_reg_field::type_id::create("Streaming_write");
         nwrite = uvm_reg_field::type_id::create("nwrite");
         Nread = uvm_reg_field::type_id::create("Nread");
         Implementation_Defined = uvm_reg_field::type_id::create("Implementation_Defined");
         Data_streaming = uvm_reg_field::type_id::create("Data_streaming");
         Data_streaming_traffic_management = uvm_reg_field::type_id::create("Data_streaming_traffic_management");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         TLB_invalidate_entry_sync = uvm_reg_field::type_id::create("TLB_invalidate_entry_sync");
         TLB_invalidate_entry = uvm_reg_field::type_id::create("TLB_invalidate_entry");
         Instruction_cache_invalidate = uvm_reg_field::type_id::create("Instruction_cache_invalidate");
         IO_read = uvm_reg_field::type_id::create("IO_read");
         Data_cache_flush = uvm_reg_field::type_id::create("Data_cache_flush");
         Castout = uvm_reg_field::type_id::create("Castout");
         Data_cache_invalidate = uvm_reg_field::type_id::create("Data_cache_invalidate");
         Read_for_ownership = uvm_reg_field::type_id::create("Read_for_ownership");
         Instruction_read = uvm_reg_field::type_id::create("Instruction_read");
         Read = uvm_reg_field::type_id::create("Read");

         Implementation_Defined_1.configure(this, 2, 30, "RO", 0, 2'b00, 1, 0, 0);
         Port_write.configure(this, 1, 29, "RO", 0, 1'b0, 1, 0, 0);
         Atomic_swap.configure(this, 1, 28, "RO", 0, 1'b0, 1, 0, 0);
         Atomic_clear.configure(this, 1, 27, "RO", 0, 1'b0, 1, 0, 0);
         Atomic_set.configure(this, 1, 26, "RO", 0, 1'b0, 1, 0, 0);
         Atomic_decrement.configure(this, 1, 25, "RO", 0, 1'b0, 1, 0, 0);
         Atomic_increment.configure(this, 1, 24, "RO", 0, 1'b0, 1, 0, 0);
         Atomic_test_and_swap.configure(this, 1, 23, "RO", 0, 1'b0, 1, 0, 0);
         Atomic_compare_and_swap.configure(this, 1, 22, "RO", 0, 1'b0, 1, 0, 0);
         Doorbell.configure(this, 1, 21, "RO", 0, 1'b0, 1, 0, 0);
         Data_Message.configure(this, 1, 20, "RO", 0, 1'b0, 1, 0, 0);
         Write_with_response.configure(this, 1, 19, "RO", 0, 1'b0, 1, 0, 0);
         Streaming_write.configure(this, 1, 18, "RO", 0, 1'b0, 1, 0, 0);
         nwrite.configure(this, 1, 17, "RO", 0, 1'b0, 1, 0, 0);
         Nread.configure(this, 1, 16, "RO", 0, 1'b0, 1, 0, 0);
         Implementation_Defined.configure(this, 2, 14, "RO", 0, 2'b00, 1, 0, 0);
         Data_streaming.configure(this, 1, 13, "RO", 0, 1'b0, 1, 0, 0);
         Data_streaming_traffic_management.configure(this, 1, 12, "RO", 0, 1'b0, 1, 0, 0);
         Reserved.configure(this, 2, 10, "RO", 0, 2'b00, 1, 0, 0);
         TLB_invalidate_entry_sync.configure(this, 1, 9, "RO", 0, 1'b0, 1, 0, 0);
         TLB_invalidate_entry.configure(this, 1, 8, "RO", 0, 1'b0, 1, 0, 0);
         Instruction_cache_invalidate.configure(this, 1, 7, "RO", 0, 1'b0, 1, 0, 0);
         IO_read.configure(this, 1, 6, "RO", 0, 1'b0, 1, 0, 0);
         Data_cache_flush.configure(this, 1, 5, "RO", 0, 1'b0, 1, 0, 0);
         Castout.configure(this, 1, 4, "RO", 0, 1'b0, 1, 0, 0);
         Data_cache_invalidate.configure(this, 1, 3, "RO", 0, 1'b0, 1, 0, 0);
         Read_for_ownership.configure(this, 1, 2, "RO", 0, 1'b0, 1, 0, 0);
         Instruction_read.configure(this, 1, 1, "RO", 0, 1'b0, 1, 0, 0);
         Read.configure(this, 1, 0, "RO", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_8_Error_Rate_Threshold_CSR_reg
   // 
   // Error Threshold Register
   //--------------------------------------------------------------------

   class Port_8_Error_Rate_Threshold_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_8_Error_Rate_Threshold_CSR_reg)

      uvm_reg_field Reserved; 
      rand uvm_reg_field Error_Rate_Degraded_Threshold_Trigger; 
      rand uvm_reg_field Error_Rate_Failed_Threshold_Trigger; 


      // Function: new
      // 
      function new(string name = "Port_8_Error_Rate_Threshold_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Error_Rate_Degraded_Threshold_Trigger = uvm_reg_field::type_id::create("Error_Rate_Degraded_Threshold_Trigger");
         Error_Rate_Failed_Threshold_Trigger = uvm_reg_field::type_id::create("Error_Rate_Failed_Threshold_Trigger");

         Reserved.configure(this, 16, 16, "RO", 0, 16'h0000, 1, 0, 1);
         Error_Rate_Degraded_Threshold_Trigger.configure(this, 8, 8, "RW", 0, 8'hff, 1, 1, 1);
         Error_Rate_Failed_Threshold_Trigger.configure(this, 8, 0, "RW", 0, 8'hff, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_0_Link_Maintenance_Response_CSR_reg
   // 
   // Link Maintenance Response Register
   //--------------------------------------------------------------------

   class Port_0_Link_Maintenance_Response_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_0_Link_Maintenance_Response_CSR_reg)

      uvm_reg_field port_status; 
      uvm_reg_field ackID_status; 
      uvm_reg_field Port_status_cs64; 
      uvm_reg_field Reserved; 
      uvm_reg_field response_valid; 


      // Function: new
      // 
      function new(string name = "Port_0_Link_Maintenance_Response_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         port_status = uvm_reg_field::type_id::create("port_status");
         ackID_status = uvm_reg_field::type_id::create("ackID_status");
         Port_status_cs64 = uvm_reg_field::type_id::create("Port_status_cs64");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         response_valid = uvm_reg_field::type_id::create("response_valid");

         port_status.configure(this, 5, 27, "RO", 0, 5'b00000, 1, 0, 0);
         ackID_status.configure(this, 12, 15, "RO", 0, 12'h000, 1, 0, 0);
         Port_status_cs64.configure(this, 12, 3, "RO", 0, 12'h000, 1, 0, 0);
         Reserved.configure(this, 2, 1, "RO", 0, 2'b00, 1, 0, 0);
         response_valid.configure(this, 1, 0, "RO", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Lane_7_Status_3_CSR_reg
   // 
   // Status 3 Register
   //--------------------------------------------------------------------

   class Lane_7_Status_3_CSR_reg extends uvm_reg;
      `uvm_object_utils(Lane_7_Status_3_CSR_reg)

      uvm_reg_field Reserved; 
      uvm_reg_field LP_State_Control_Reserved; 
      uvm_reg_field LP_Lane_Entering_Silence; 
      uvm_reg_field LP_Port_Entering_Silence; 
      uvm_reg_field LP_Retraining; 
      uvm_reg_field LP_Retrain_Ready; 
      uvm_reg_field LP_Retrain_Grant; 
      uvm_reg_field LP_Transmit_Equalizer_Status; 
      uvm_reg_field LP_Transmit_Equalizer_Command; 
      uvm_reg_field LP_Transmit_Equalizer_Tap; 
      uvm_reg_field LP_Transmit_SC_Sequences; 
      uvm_reg_field LP_Transmit_Width_Request_Pending; 
      uvm_reg_field LP_Transmit_Width_Request; 


      // Function: new
      // 
      function new(string name = "Lane_7_Status_3_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         LP_State_Control_Reserved = uvm_reg_field::type_id::create("LP_State_Control_Reserved");
         LP_Lane_Entering_Silence = uvm_reg_field::type_id::create("LP_Lane_Entering_Silence");
         LP_Port_Entering_Silence = uvm_reg_field::type_id::create("LP_Port_Entering_Silence");
         LP_Retraining = uvm_reg_field::type_id::create("LP_Retraining");
         LP_Retrain_Ready = uvm_reg_field::type_id::create("LP_Retrain_Ready");
         LP_Retrain_Grant = uvm_reg_field::type_id::create("LP_Retrain_Grant");
         LP_Transmit_Equalizer_Status = uvm_reg_field::type_id::create("LP_Transmit_Equalizer_Status");
         LP_Transmit_Equalizer_Command = uvm_reg_field::type_id::create("LP_Transmit_Equalizer_Command");
         LP_Transmit_Equalizer_Tap = uvm_reg_field::type_id::create("LP_Transmit_Equalizer_Tap");
         LP_Transmit_SC_Sequences = uvm_reg_field::type_id::create("LP_Transmit_SC_Sequences");
         LP_Transmit_Width_Request_Pending = uvm_reg_field::type_id::create("LP_Transmit_Width_Request_Pending");
         LP_Transmit_Width_Request = uvm_reg_field::type_id::create("LP_Transmit_Width_Request");

         Reserved.configure(this, 4, 28, "RO", 0, 4'h0, 1, 0, 0);
         LP_State_Control_Reserved.configure(this, 8, 20, "RO", 0, 8'h00, 1, 0, 0);
         LP_Lane_Entering_Silence.configure(this, 1, 19, "RO", 0, 1'b0, 1, 0, 0);
         LP_Port_Entering_Silence.configure(this, 1, 18, "RO", 0, 1'b0, 1, 0, 0);
         LP_Retraining.configure(this, 1, 17, "RO", 0, 1'b0, 1, 0, 0);
         LP_Retrain_Ready.configure(this, 1, 16, "RO", 0, 1'b0, 1, 0, 0);
         LP_Retrain_Grant.configure(this, 1, 15, "RO", 0, 1'b0, 1, 0, 0);
         LP_Transmit_Equalizer_Status.configure(this, 3, 12, "RO", 0, 3'b000, 1, 0, 0);
         LP_Transmit_Equalizer_Command.configure(this, 3, 9, "RO", 0, 3'b000, 1, 0, 0);
         LP_Transmit_Equalizer_Tap.configure(this, 4, 5, "RO", 0, 4'h0, 1, 0, 0);
         LP_Transmit_SC_Sequences.configure(this, 1, 4, "RO", 0, 1'b0, 1, 0, 0);
         LP_Transmit_Width_Request_Pending.configure(this, 1, 3, "RO", 0, 1'b0, 1, 0, 0);
         LP_Transmit_Width_Request.configure(this, 3, 0, "RO", 0, 3'b000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_10_VC6_VC2_BW_Allocation_Register_reg
   // 
   // BW Allocation Register
   //--------------------------------------------------------------------

   class Port_10_VC6_VC2_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_10_VC6_VC2_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 


      // Function: new
      // 
      function new(string name = "Port_10_VC6_VC2_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");

         Bandwidth_Allocation.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_4_Error_Rate_CSR_reg
   // 
   // Error Rate Register
   //--------------------------------------------------------------------

   class Port_4_Error_Rate_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_4_Error_Rate_CSR_reg)

      rand uvm_reg_field Error_Rate_Counter; 
      rand uvm_reg_field Peak_Error_Rate; 
      rand uvm_reg_field Error_Rate_Recovery; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Error_Rate_Bias; 


      // Function: new
      // 
      function new(string name = "Port_4_Error_Rate_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Error_Rate_Counter = uvm_reg_field::type_id::create("Error_Rate_Counter");
         Peak_Error_Rate = uvm_reg_field::type_id::create("Peak_Error_Rate");
         Error_Rate_Recovery = uvm_reg_field::type_id::create("Error_Rate_Recovery");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Error_Rate_Bias = uvm_reg_field::type_id::create("Error_Rate_Bias");

         Error_Rate_Counter.configure(this, 8, 24, "RW", 0, 8'h00, 1, 1, 1);
         Peak_Error_Rate.configure(this, 8, 16, "RW", 0, 8'h00, 1, 1, 1);
         Error_Rate_Recovery.configure(this, 2, 14, "RW", 0, 2'b00, 1, 1, 0);
         Reserved.configure(this, 6, 8, "RO", 0, 6'b000000, 1, 0, 0);
         Error_Rate_Bias.configure(this, 8, 0, "RW", 0, 8'h80, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_8_Link_Maintenance_Response_CSR_reg
   // 
   // Link Maintenance Response Register
   //--------------------------------------------------------------------

   class Port_8_Link_Maintenance_Response_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_8_Link_Maintenance_Response_CSR_reg)

      uvm_reg_field port_status; 
      uvm_reg_field ackID_status; 
      uvm_reg_field Port_status_cs64; 
      uvm_reg_field Reserved; 
      uvm_reg_field response_valid; 


      // Function: new
      // 
      function new(string name = "Port_8_Link_Maintenance_Response_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         port_status = uvm_reg_field::type_id::create("port_status");
         ackID_status = uvm_reg_field::type_id::create("ackID_status");
         Port_status_cs64 = uvm_reg_field::type_id::create("Port_status_cs64");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         response_valid = uvm_reg_field::type_id::create("response_valid");

         port_status.configure(this, 5, 27, "RO", 0, 5'b00000, 1, 0, 0);
         ackID_status.configure(this, 12, 15, "RO", 0, 12'h000, 1, 0, 0);
         Port_status_cs64.configure(this, 12, 3, "RO", 0, 12'h000, 1, 0, 0);
         Reserved.configure(this, 2, 1, "RO", 0, 2'b00, 1, 0, 0);
         response_valid.configure(this, 1, 0, "RO", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Lane_10_Status_2_CSR_reg
   // 
   // Status 2 Register
   //--------------------------------------------------------------------

   class Lane_10_Status_2_CSR_reg extends uvm_reg;
      `uvm_object_utils(Lane_10_Status_2_CSR_reg)

      uvm_reg_field Reserved; 
      uvm_reg_field LP_Change_Receiver_Width_Command_Negative_Acknowlege; 
      uvm_reg_field LP_Change_Receiver_Width_Command_Acknowlege; 
      uvm_reg_field LP_Change_Receiver_Width_Command; 
      uvm_reg_field LP_Lane_Trained; 
      uvm_reg_field LP_Receive_Lane_Ready; 
      uvm_reg_field LP_Receive_Lanes_Ready; 
      uvm_reg_field LP_Receive_Width; 
      uvm_reg_field LP_Transmit_1x_Mode; 
      uvm_reg_field LP_Port_Intialized; 
      uvm_reg_field LP_Asymmetric_mode_Enabled; 
      uvm_reg_field LP_Retraining_Enabled; 
      uvm_reg_field LP_Remort_Training_Support; 
      uvm_reg_field LP_Lane_Number; 
      uvm_reg_field LP_Port_Number; 


      // Function: new
      // 
      function new(string name = "Lane_10_Status_2_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         LP_Change_Receiver_Width_Command_Negative_Acknowlege = uvm_reg_field::type_id::create("LP_Change_Receiver_Width_Command_Negative_Acknowlege");
         LP_Change_Receiver_Width_Command_Acknowlege = uvm_reg_field::type_id::create("LP_Change_Receiver_Width_Command_Acknowlege");
         LP_Change_Receiver_Width_Command = uvm_reg_field::type_id::create("LP_Change_Receiver_Width_Command");
         LP_Lane_Trained = uvm_reg_field::type_id::create("LP_Lane_Trained");
         LP_Receive_Lane_Ready = uvm_reg_field::type_id::create("LP_Receive_Lane_Ready");
         LP_Receive_Lanes_Ready = uvm_reg_field::type_id::create("LP_Receive_Lanes_Ready");
         LP_Receive_Width = uvm_reg_field::type_id::create("LP_Receive_Width");
         LP_Transmit_1x_Mode = uvm_reg_field::type_id::create("LP_Transmit_1x_Mode");
         LP_Port_Intialized = uvm_reg_field::type_id::create("LP_Port_Intialized");
         LP_Asymmetric_mode_Enabled = uvm_reg_field::type_id::create("LP_Asymmetric_mode_Enabled");
         LP_Retraining_Enabled = uvm_reg_field::type_id::create("LP_Retraining_Enabled");
         LP_Remort_Training_Support = uvm_reg_field::type_id::create("LP_Remort_Training_Support");
         LP_Lane_Number = uvm_reg_field::type_id::create("LP_Lane_Number");
         LP_Port_Number = uvm_reg_field::type_id::create("LP_Port_Number");

         Reserved.configure(this, 2, 30, "RO", 0, 2'b00, 1, 0, 0);
         LP_Change_Receiver_Width_Command_Negative_Acknowlege.configure(this, 1, 29, "RO", 0, 1'b0, 1, 0, 0);
         LP_Change_Receiver_Width_Command_Acknowlege.configure(this, 1, 28, "RO", 0, 1'b0, 1, 0, 0);
         LP_Change_Receiver_Width_Command.configure(this, 3, 25, "RO", 0, 3'b000, 1, 0, 0);
         LP_Lane_Trained.configure(this, 1, 24, "RO", 0, 1'b0, 1, 0, 0);
         LP_Receive_Lane_Ready.configure(this, 1, 23, "RO", 0, 1'b0, 1, 0, 0);
         LP_Receive_Lanes_Ready.configure(this, 3, 20, "RO", 0, 3'b000, 1, 0, 0);
         LP_Receive_Width.configure(this, 3, 17, "RO", 0, 3'b000, 1, 0, 0);
         LP_Transmit_1x_Mode.configure(this, 1, 16, "RO", 0, 1'b0, 1, 0, 0);
         LP_Port_Intialized.configure(this, 1, 15, "RO", 0, 1'b0, 1, 0, 0);
         LP_Asymmetric_mode_Enabled.configure(this, 1, 14, "RO", 0, 1'b0, 1, 0, 0);
         LP_Retraining_Enabled.configure(this, 1, 13, "RO", 0, 1'b0, 1, 0, 0);
         LP_Remort_Training_Support.configure(this, 1, 12, "RO", 0, 1'b0, 1, 0, 0);
         LP_Lane_Number.configure(this, 4, 8, "RO", 0, 4'h0, 1, 0, 0);
         LP_Port_Number.configure(this, 8, 0, "RO", 0, 8'h00, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Lane_12_Status_1_CSR_reg
   // 
   // Status 1 Register
   //--------------------------------------------------------------------

   class Lane_12_Status_1_CSR_reg extends uvm_reg;
      `uvm_object_utils(Lane_12_Status_1_CSR_reg)

      uvm_reg_field Reserved; 
      uvm_reg_field IDLE3_SC_Retraining_State; 
      uvm_reg_field IDLE3_SC_Training_State; 
      uvm_reg_field IDLE3_DME_Training_State; 
      uvm_reg_field IDLE3_Training_Type; 
      uvm_reg_field IDLE3_Loss_of_Signals; 
      uvm_reg_field IDLE2_Connected_port_scrambling_descrambling_enabled; 
      uvm_reg_field IDLE2_Connected_port_transmit_emphasis_Tap_plus1_status; 
      uvm_reg_field IDLE2_Connected_port_transmit_emphasis_Tap_minus1_status; 
      uvm_reg_field IDLE2_Lane_number_in_connected_port; 
      uvm_reg_field IDLE2_Received_port_width; 
      uvm_reg_field IDLE2_Connected_port_lane_receiver_trained; 
      uvm_reg_field Implementation_defined; 
      uvm_reg_field Values_changed; 
      uvm_reg_field IDLE_information_current; 
      rand uvm_reg_field IDLE_received; 


      // Function: new
      // 
      function new(string name = "Lane_12_Status_1_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         IDLE3_SC_Retraining_State = uvm_reg_field::type_id::create("IDLE3_SC_Retraining_State");
         IDLE3_SC_Training_State = uvm_reg_field::type_id::create("IDLE3_SC_Training_State");
         IDLE3_DME_Training_State = uvm_reg_field::type_id::create("IDLE3_DME_Training_State");
         IDLE3_Training_Type = uvm_reg_field::type_id::create("IDLE3_Training_Type");
         IDLE3_Loss_of_Signals = uvm_reg_field::type_id::create("IDLE3_Loss_of_Signals");
         IDLE2_Connected_port_scrambling_descrambling_enabled = uvm_reg_field::type_id::create("IDLE2_Connected_port_scrambling_descrambling_enabled");
         IDLE2_Connected_port_transmit_emphasis_Tap_plus1_status = uvm_reg_field::type_id::create("IDLE2_Connected_port_transmit_emphasis_Tap_plus1_status");
         IDLE2_Connected_port_transmit_emphasis_Tap_minus1_status = uvm_reg_field::type_id::create("IDLE2_Connected_port_transmit_emphasis_Tap_minus1_status");
         IDLE2_Lane_number_in_connected_port = uvm_reg_field::type_id::create("IDLE2_Lane_number_in_connected_port");
         IDLE2_Received_port_width = uvm_reg_field::type_id::create("IDLE2_Received_port_width");
         IDLE2_Connected_port_lane_receiver_trained = uvm_reg_field::type_id::create("IDLE2_Connected_port_lane_receiver_trained");
         Implementation_defined = uvm_reg_field::type_id::create("Implementation_defined");
         Values_changed = uvm_reg_field::type_id::create("Values_changed");
         IDLE_information_current = uvm_reg_field::type_id::create("IDLE_information_current");
         IDLE_received = uvm_reg_field::type_id::create("IDLE_received");

         Reserved.configure(this, 6, 26, "RO", 0, 6'b000000, 1, 0, 0);
         IDLE3_SC_Retraining_State.configure(this, 2, 24, "RO", 0, 2'b00, 1, 0, 0);
         IDLE3_SC_Training_State.configure(this, 2, 22, "RO", 0, 2'b00, 1, 0, 0);
         IDLE3_DME_Training_State.configure(this, 2, 20, "RO", 0, 2'b00, 1, 0, 0);
         IDLE3_Training_Type.configure(this, 2, 18, "RO", 0, 2'b00, 1, 0, 0);
         IDLE3_Loss_of_Signals.configure(this, 1, 17, "RO", 0, 1'b0, 1, 0, 0);
         IDLE2_Connected_port_scrambling_descrambling_enabled.configure(this, 1, 16, "RO", 0, 1'b0, 1, 0, 0);
         IDLE2_Connected_port_transmit_emphasis_Tap_plus1_status.configure(this, 2, 14, "RO", 0, 2'b00, 1, 0, 0);
         IDLE2_Connected_port_transmit_emphasis_Tap_minus1_status.configure(this, 2, 12, "RO", 0, 2'b00, 1, 0, 0);
         IDLE2_Lane_number_in_connected_port.configure(this, 4, 8, "RO", 0, 4'h0, 1, 0, 0);
         IDLE2_Received_port_width.configure(this, 3, 5, "RO", 0, 3'b000, 1, 0, 0);
         IDLE2_Connected_port_lane_receiver_trained.configure(this, 1, 4, "RO", 0, 1'b0, 1, 0, 0);
         Implementation_defined.configure(this, 1, 3, "RO", 0, 1'b0, 1, 0, 0);
         Values_changed.configure(this, 1, 2, "RO", 0, 1'b1, 1, 0, 0);
         IDLE_information_current.configure(this, 1, 1, "RO", 0, 1'b0, 1, 0, 0);
         IDLE_received.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_7_Auto_Update_Counter_CSR_reg
   // 
   // Auto_Update_Counter_CSR_Register
   //--------------------------------------------------------------------

   class Port_7_Auto_Update_Counter_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_7_Auto_Update_Counter_CSR_reg)

      rand uvm_reg_field Update_Period; 


      // Function: new
      // 
      function new(string name = "Port_7_Auto_Update_Counter_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Update_Period = uvm_reg_field::type_id::create("Update_Period");

         Update_Period.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_2_Link_Timers_Control_3_CSR_reg
   // 
   // Link_Timers_Control_3_Register
   //--------------------------------------------------------------------

   class Port_2_Link_Timers_Control_3_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_2_Link_Timers_Control_3_CSR_reg)

      rand uvm_reg_field Keep_alive_Transmission_Interval; 
      rand uvm_reg_field Keep_alive_Transmission_Period; 
      rand uvm_reg_field Receive_Width_Command_Timeout; 
      rand uvm_reg_field Transmit_Width_Command_Timeout; 


      // Function: new
      // 
      function new(string name = "Port_2_Link_Timers_Control_3_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Keep_alive_Transmission_Interval = uvm_reg_field::type_id::create("Keep_alive_Transmission_Interval");
         Keep_alive_Transmission_Period = uvm_reg_field::type_id::create("Keep_alive_Transmission_Period");
         Receive_Width_Command_Timeout = uvm_reg_field::type_id::create("Receive_Width_Command_Timeout");
         Transmit_Width_Command_Timeout = uvm_reg_field::type_id::create("Transmit_Width_Command_Timeout");

         Keep_alive_Transmission_Interval.configure(this, 10, 22, "RW", 0, 10'b1111111111, 1, 1, 0);
         Keep_alive_Transmission_Period.configure(this, 6, 16, "RW", 0, 6'b000001, 1, 1, 0);
         Receive_Width_Command_Timeout.configure(this, 8, 8, "RW", 0, 8'h40, 1, 1, 1);
         Transmit_Width_Command_Timeout.configure(this, 8, 0, "RW", 0, 8'hff, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Lane_12_Status_2_CSR_reg
   // 
   // Status 2 Register
   //--------------------------------------------------------------------

   class Lane_12_Status_2_CSR_reg extends uvm_reg;
      `uvm_object_utils(Lane_12_Status_2_CSR_reg)

      uvm_reg_field Reserved; 
      uvm_reg_field LP_Change_Receiver_Width_Command_Negative_Acknowlege; 
      uvm_reg_field LP_Change_Receiver_Width_Command_Acknowlege; 
      uvm_reg_field LP_Change_Receiver_Width_Command; 
      uvm_reg_field LP_Lane_Trained; 
      uvm_reg_field LP_Receive_Lane_Ready; 
      uvm_reg_field LP_Receive_Lanes_Ready; 
      uvm_reg_field LP_Receive_Width; 
      uvm_reg_field LP_Transmit_1x_Mode; 
      uvm_reg_field LP_Port_Intialized; 
      uvm_reg_field LP_Asymmetric_mode_Enabled; 
      uvm_reg_field LP_Retraining_Enabled; 
      uvm_reg_field LP_Remort_Training_Support; 
      uvm_reg_field LP_Lane_Number; 
      uvm_reg_field LP_Port_Number; 


      // Function: new
      // 
      function new(string name = "Lane_12_Status_2_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         LP_Change_Receiver_Width_Command_Negative_Acknowlege = uvm_reg_field::type_id::create("LP_Change_Receiver_Width_Command_Negative_Acknowlege");
         LP_Change_Receiver_Width_Command_Acknowlege = uvm_reg_field::type_id::create("LP_Change_Receiver_Width_Command_Acknowlege");
         LP_Change_Receiver_Width_Command = uvm_reg_field::type_id::create("LP_Change_Receiver_Width_Command");
         LP_Lane_Trained = uvm_reg_field::type_id::create("LP_Lane_Trained");
         LP_Receive_Lane_Ready = uvm_reg_field::type_id::create("LP_Receive_Lane_Ready");
         LP_Receive_Lanes_Ready = uvm_reg_field::type_id::create("LP_Receive_Lanes_Ready");
         LP_Receive_Width = uvm_reg_field::type_id::create("LP_Receive_Width");
         LP_Transmit_1x_Mode = uvm_reg_field::type_id::create("LP_Transmit_1x_Mode");
         LP_Port_Intialized = uvm_reg_field::type_id::create("LP_Port_Intialized");
         LP_Asymmetric_mode_Enabled = uvm_reg_field::type_id::create("LP_Asymmetric_mode_Enabled");
         LP_Retraining_Enabled = uvm_reg_field::type_id::create("LP_Retraining_Enabled");
         LP_Remort_Training_Support = uvm_reg_field::type_id::create("LP_Remort_Training_Support");
         LP_Lane_Number = uvm_reg_field::type_id::create("LP_Lane_Number");
         LP_Port_Number = uvm_reg_field::type_id::create("LP_Port_Number");

         Reserved.configure(this, 2, 30, "RO", 0, 2'b00, 1, 0, 0);
         LP_Change_Receiver_Width_Command_Negative_Acknowlege.configure(this, 1, 29, "RO", 0, 1'b0, 1, 0, 0);
         LP_Change_Receiver_Width_Command_Acknowlege.configure(this, 1, 28, "RO", 0, 1'b0, 1, 0, 0);
         LP_Change_Receiver_Width_Command.configure(this, 3, 25, "RO", 0, 3'b000, 1, 0, 0);
         LP_Lane_Trained.configure(this, 1, 24, "RO", 0, 1'b0, 1, 0, 0);
         LP_Receive_Lane_Ready.configure(this, 1, 23, "RO", 0, 1'b0, 1, 0, 0);
         LP_Receive_Lanes_Ready.configure(this, 3, 20, "RO", 0, 3'b000, 1, 0, 0);
         LP_Receive_Width.configure(this, 3, 17, "RO", 0, 3'b000, 1, 0, 0);
         LP_Transmit_1x_Mode.configure(this, 1, 16, "RO", 0, 1'b0, 1, 0, 0);
         LP_Port_Intialized.configure(this, 1, 15, "RO", 0, 1'b0, 1, 0, 0);
         LP_Asymmetric_mode_Enabled.configure(this, 1, 14, "RO", 0, 1'b0, 1, 0, 0);
         LP_Retraining_Enabled.configure(this, 1, 13, "RO", 0, 1'b0, 1, 0, 0);
         LP_Remort_Training_Support.configure(this, 1, 12, "RO", 0, 1'b0, 1, 0, 0);
         LP_Lane_Number.configure(this, 4, 8, "RO", 0, 4'h0, 1, 0, 0);
         LP_Port_Number.configure(this, 8, 0, "RO", 0, 8'h00, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_1_Auto_Update_Counter_CSR_reg
   // 
   // Auto_Update_Counter_CSR_Register
   //--------------------------------------------------------------------

   class Port_1_Auto_Update_Counter_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_1_Auto_Update_Counter_CSR_reg)

      rand uvm_reg_field Update_Period; 


      // Function: new
      // 
      function new(string name = "Port_1_Auto_Update_Counter_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Update_Period = uvm_reg_field::type_id::create("Update_Period");

         Update_Period.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_5_VoQ_Control_Status_Register_reg
   // 
   // VoQ_Control_Status_Register
   //--------------------------------------------------------------------

   class Port_5_VoQ_Control_Status_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_5_VoQ_Control_Status_Register_reg)

      rand uvm_reg_field RX_Port_Group_Size; 
      rand uvm_reg_field TX_Port_Group_Size; 
      uvm_reg_field Reserved_1; 
      rand uvm_reg_field Port_Group_Size_6_Supported; 
      rand uvm_reg_field Port_Group_Size_5_Supported; 
      rand uvm_reg_field Port_Group_Size_4_Supported; 
      rand uvm_reg_field Port_Group_Size_3_Supported; 
      rand uvm_reg_field Port_Group_Size_2_Supported; 
      rand uvm_reg_field Port_Group_Size_1_Supported; 
      rand uvm_reg_field Port_Group_Size_0_Supported; 
      rand uvm_reg_field Enable_VoQ_Backpressure_Per_VC_Transmission; 
      rand uvm_reg_field Port_XOFF; 
      rand uvm_reg_field Enable_VoQ_Symbol_Participation; 
      rand uvm_reg_field Enable_VoQ_Symbol_Genreation; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field VoQ_Backpressure_Per_VC_Supported; 
      rand uvm_reg_field VoQ_Backpressure_Symbol_Reception_Supported; 
      rand uvm_reg_field VoQ_Backpressure_Symbol_Generation_Supported; 


      // Function: new
      // 
      function new(string name = "Port_5_VoQ_Control_Status_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         RX_Port_Group_Size = uvm_reg_field::type_id::create("RX_Port_Group_Size");
         TX_Port_Group_Size = uvm_reg_field::type_id::create("TX_Port_Group_Size");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         Port_Group_Size_6_Supported = uvm_reg_field::type_id::create("Port_Group_Size_6_Supported");
         Port_Group_Size_5_Supported = uvm_reg_field::type_id::create("Port_Group_Size_5_Supported");
         Port_Group_Size_4_Supported = uvm_reg_field::type_id::create("Port_Group_Size_4_Supported");
         Port_Group_Size_3_Supported = uvm_reg_field::type_id::create("Port_Group_Size_3_Supported");
         Port_Group_Size_2_Supported = uvm_reg_field::type_id::create("Port_Group_Size_2_Supported");
         Port_Group_Size_1_Supported = uvm_reg_field::type_id::create("Port_Group_Size_1_Supported");
         Port_Group_Size_0_Supported = uvm_reg_field::type_id::create("Port_Group_Size_0_Supported");
         Enable_VoQ_Backpressure_Per_VC_Transmission = uvm_reg_field::type_id::create("Enable_VoQ_Backpressure_Per_VC_Transmission");
         Port_XOFF = uvm_reg_field::type_id::create("Port_XOFF");
         Enable_VoQ_Symbol_Participation = uvm_reg_field::type_id::create("Enable_VoQ_Symbol_Participation");
         Enable_VoQ_Symbol_Genreation = uvm_reg_field::type_id::create("Enable_VoQ_Symbol_Genreation");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         VoQ_Backpressure_Per_VC_Supported = uvm_reg_field::type_id::create("VoQ_Backpressure_Per_VC_Supported");
         VoQ_Backpressure_Symbol_Reception_Supported = uvm_reg_field::type_id::create("VoQ_Backpressure_Symbol_Reception_Supported");
         VoQ_Backpressure_Symbol_Generation_Supported = uvm_reg_field::type_id::create("VoQ_Backpressure_Symbol_Generation_Supported");

         RX_Port_Group_Size.configure(this, 3, 29, "RW", 0, 3'b000, 1, 1, 0);
         TX_Port_Group_Size.configure(this, 3, 26, "RW", 0, 3'b000, 1, 1, 0);
         Reserved_1.configure(this, 7, 19, "RO", 0, 7'b0000000, 1, 0, 0);
         Port_Group_Size_6_Supported.configure(this, 1, 18, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_5_Supported.configure(this, 1, 17, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_4_Supported.configure(this, 1, 16, "RW", 0, 1'b1, 1, 1, 0);
         Port_Group_Size_3_Supported.configure(this, 1, 15, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_2_Supported.configure(this, 1, 14, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_1_Supported.configure(this, 1, 13, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_0_Supported.configure(this, 1, 12, "RW", 0, 1'b1, 1, 1, 0);
         Enable_VoQ_Backpressure_Per_VC_Transmission.configure(this, 1, 11, "RW", 0, 1'b0, 1, 1, 0);
         Port_XOFF.configure(this, 1, 10, "RW", 0, 1'b0, 1, 1, 0);
         Enable_VoQ_Symbol_Participation.configure(this, 1, 9, "RW", 0, 1'b0, 1, 1, 0);
         Enable_VoQ_Symbol_Genreation.configure(this, 1, 8, "RW", 0, 1'b0, 1, 1, 0);
         Reserved.configure(this, 5, 3, "RO", 0, 5'b00000, 1, 0, 0);
         VoQ_Backpressure_Per_VC_Supported.configure(this, 1, 2, "RW", 0, 1'b0, 1, 1, 0);
         VoQ_Backpressure_Symbol_Reception_Supported.configure(this, 1, 1, "RW", 0, 1'b0, 1, 1, 0);
         VoQ_Backpressure_Symbol_Generation_Supported.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_6_Error_Rate_Threshold_CSR_reg
   // 
   // Error Threshold Register
   //--------------------------------------------------------------------

   class Port_6_Error_Rate_Threshold_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_6_Error_Rate_Threshold_CSR_reg)

      uvm_reg_field Reserved; 
      rand uvm_reg_field Error_Rate_Degraded_Threshold_Trigger; 
      rand uvm_reg_field Error_Rate_Failed_Threshold_Trigger; 


      // Function: new
      // 
      function new(string name = "Port_6_Error_Rate_Threshold_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Error_Rate_Degraded_Threshold_Trigger = uvm_reg_field::type_id::create("Error_Rate_Degraded_Threshold_Trigger");
         Error_Rate_Failed_Threshold_Trigger = uvm_reg_field::type_id::create("Error_Rate_Failed_Threshold_Trigger");

         Reserved.configure(this, 16, 16, "RO", 0, 16'h0000, 1, 0, 1);
         Error_Rate_Degraded_Threshold_Trigger.configure(this, 8, 8, "RW", 0, 8'hff, 1, 1, 1);
         Error_Rate_Failed_Threshold_Trigger.configure(this, 8, 0, "RW", 0, 8'hff, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_1_Packet_Capture_1_CSR_reg
   // 
   // Packet Capture 1 Register
   //--------------------------------------------------------------------

   class Port_1_Packet_Capture_1_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_1_Packet_Capture_1_CSR_reg)

      rand uvm_reg_field Capture1; 


      // Function: new
      // 
      function new(string name = "Port_1_Packet_Capture_1_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture1 = uvm_reg_field::type_id::create("Capture1");

         Capture1.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass

   //--------------------------------------------------------------------
   // Class: Port_11_Packet_Capture_2_CSR_reg
   // 
   // Packet Capture 2 Register
   //--------------------------------------------------------------------

   class Port_11_Packet_Capture_2_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_11_Packet_Capture_2_CSR_reg)

      rand uvm_reg_field Capture2; 


      // Function: new
      // 
      function new(string name = "Port_11_Packet_Capture_2_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture2 = uvm_reg_field::type_id::create("Capture2");

         Capture2.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass


   //--------------------------------------------------------------------
   // Class: Port_10_Packet_Control_Symbol_Capture_0_CSR_reg
   // 
   // Symbol Capture Register
   //--------------------------------------------------------------------

   class Port_10_Packet_Control_Symbol_Capture_0_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_10_Packet_Control_Symbol_Capture_0_CSR_reg)

      rand uvm_reg_field Capture0; 


      // Function: new
      // 
      function new(string name = "Port_10_Packet_Control_Symbol_Capture_0_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture0 = uvm_reg_field::type_id::create("Capture0");

         Capture0.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_12_Error_Rate_Threshold_CSR_reg
   // 
   // Error Threshold Register
   //--------------------------------------------------------------------

   class Port_12_Error_Rate_Threshold_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_12_Error_Rate_Threshold_CSR_reg)

      uvm_reg_field Reserved; 
      rand uvm_reg_field Error_Rate_Degraded_Threshold_Trigger; 
      rand uvm_reg_field Error_Rate_Failed_Threshold_Trigger; 


      // Function: new
      // 
      function new(string name = "Port_12_Error_Rate_Threshold_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Error_Rate_Degraded_Threshold_Trigger = uvm_reg_field::type_id::create("Error_Rate_Degraded_Threshold_Trigger");
         Error_Rate_Failed_Threshold_Trigger = uvm_reg_field::type_id::create("Error_Rate_Failed_Threshold_Trigger");

         Reserved.configure(this, 16, 16, "RO", 0, 16'h0000, 1, 0, 1);
         Error_Rate_Degraded_Threshold_Trigger.configure(this, 8, 8, "RW", 0, 8'hff, 1, 1, 1);
         Error_Rate_Failed_Threshold_Trigger.configure(this, 8, 0, "RW", 0, 8'hff, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_12_Attributes_Capture_CSR_reg
   // 
   // Attributes Register
   //--------------------------------------------------------------------

   class Port_12_Attributes_Capture_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_12_Attributes_Capture_CSR_reg)

      rand uvm_reg_field Capture_valid_info; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Implementation_Dependent; 
      rand uvm_reg_field Error_type; 
      rand uvm_reg_field Info_type; 


      // Function: new
      // 
      function new(string name = "Port_12_Attributes_Capture_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture_valid_info = uvm_reg_field::type_id::create("Capture_valid_info");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Implementation_Dependent = uvm_reg_field::type_id::create("Implementation_Dependent");
         Error_type = uvm_reg_field::type_id::create("Error_type");
         Info_type = uvm_reg_field::type_id::create("Info_type");

         Capture_valid_info.configure(this, 1, 31, "RW", 0, 1'b0, 1, 1, 0);
         Reserved.configure(this, 3, 28, "RO", 0, 3'b000, 1, 0, 0);
         Implementation_Dependent.configure(this, 20, 8, "RW", 0, 20'h00000, 1, 1, 0);
         Error_type.configure(this, 5, 3, "RW", 0, 5'b00000, 1, 1, 0);
         Info_type.configure(this, 3, 0, "RW", 0, 3'b000, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_15_Error_Rate_CSR_reg
   // 
   // Error Rate Register
   //--------------------------------------------------------------------

   class Port_15_Error_Rate_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_15_Error_Rate_CSR_reg)

      rand uvm_reg_field Error_Rate_Counter; 
      rand uvm_reg_field Peak_Error_Rate; 
      rand uvm_reg_field Error_Rate_Recovery; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Error_Rate_Bias; 


      // Function: new
      // 
      function new(string name = "Port_15_Error_Rate_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Error_Rate_Counter = uvm_reg_field::type_id::create("Error_Rate_Counter");
         Peak_Error_Rate = uvm_reg_field::type_id::create("Peak_Error_Rate");
         Error_Rate_Recovery = uvm_reg_field::type_id::create("Error_Rate_Recovery");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Error_Rate_Bias = uvm_reg_field::type_id::create("Error_Rate_Bias");

         Error_Rate_Counter.configure(this, 8, 24, "RW", 0, 8'h00, 1, 1, 1);
         Peak_Error_Rate.configure(this, 8, 16, "RW", 0, 8'h00, 1, 1, 1);
         Error_Rate_Recovery.configure(this, 2, 14, "RW", 0, 2'b00, 1, 1, 0);
         Reserved.configure(this, 6, 8, "RO", 0, 6'b000000, 1, 0, 0);
         Error_Rate_Bias.configure(this, 8, 0, "RW", 0, 8'h80, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Destination_Operations_CAR_reg
   // 
   // Destination Register
   //--------------------------------------------------------------------

   class Destination_Operations_CAR_reg extends uvm_reg;
      `uvm_object_utils(Destination_Operations_CAR_reg)

      uvm_reg_field Implementation_Defined_1; 
      uvm_reg_field Port_write; 
      uvm_reg_field Atomic_swap; 
      uvm_reg_field Atomic_clear; 
      uvm_reg_field Atomic_set; 
      uvm_reg_field Atomic_decrement; 
      uvm_reg_field Atomic_increment; 
      uvm_reg_field Atomic_test_and_swap; 
      uvm_reg_field Atomic_compare_and_swap; 
      uvm_reg_field Doorbell; 
      uvm_reg_field Data_Message; 
      uvm_reg_field Write_with_response; 
      uvm_reg_field Streaming_write; 
      uvm_reg_field nwrite; 
      uvm_reg_field Nread; 
      uvm_reg_field Implementation_Defined; 
      uvm_reg_field Data_streaming; 
      uvm_reg_field Data_streaming_traffic_management; 
      uvm_reg_field Reserved; 
      uvm_reg_field TLB_invalidate_entry_sync; 
      uvm_reg_field TLB_invalidate_entry; 
      uvm_reg_field Instruction_cache_invalidate; 
      uvm_reg_field IO_read; 
      uvm_reg_field Data_cache_flush; 
      uvm_reg_field Castout; 
      uvm_reg_field Data_cache_invalidate; 
      uvm_reg_field Read_for_ownership; 
      uvm_reg_field Instruction_read; 
      uvm_reg_field Read; 


      // Function: new
      // 
      function new(string name = "Destination_Operations_CAR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Implementation_Defined_1 = uvm_reg_field::type_id::create("Implementation_Defined_1");
         Port_write = uvm_reg_field::type_id::create("Port_write");
         Atomic_swap = uvm_reg_field::type_id::create("Atomic_swap");
         Atomic_clear = uvm_reg_field::type_id::create("Atomic_clear");
         Atomic_set = uvm_reg_field::type_id::create("Atomic_set");
         Atomic_decrement = uvm_reg_field::type_id::create("Atomic_decrement");
         Atomic_increment = uvm_reg_field::type_id::create("Atomic_increment");
         Atomic_test_and_swap = uvm_reg_field::type_id::create("Atomic_test_and_swap");
         Atomic_compare_and_swap = uvm_reg_field::type_id::create("Atomic_compare_and_swap");
         Doorbell = uvm_reg_field::type_id::create("Doorbell");
         Data_Message = uvm_reg_field::type_id::create("Data_Message");
         Write_with_response = uvm_reg_field::type_id::create("Write_with_response");
         Streaming_write = uvm_reg_field::type_id::create("Streaming_write");
         nwrite = uvm_reg_field::type_id::create("nwrite");
         Nread = uvm_reg_field::type_id::create("Nread");
         Implementation_Defined = uvm_reg_field::type_id::create("Implementation_Defined");
         Data_streaming = uvm_reg_field::type_id::create("Data_streaming");
         Data_streaming_traffic_management = uvm_reg_field::type_id::create("Data_streaming_traffic_management");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         TLB_invalidate_entry_sync = uvm_reg_field::type_id::create("TLB_invalidate_entry_sync");
         TLB_invalidate_entry = uvm_reg_field::type_id::create("TLB_invalidate_entry");
         Instruction_cache_invalidate = uvm_reg_field::type_id::create("Instruction_cache_invalidate");
         IO_read = uvm_reg_field::type_id::create("IO_read");
         Data_cache_flush = uvm_reg_field::type_id::create("Data_cache_flush");
         Castout = uvm_reg_field::type_id::create("Castout");
         Data_cache_invalidate = uvm_reg_field::type_id::create("Data_cache_invalidate");
         Read_for_ownership = uvm_reg_field::type_id::create("Read_for_ownership");
         Instruction_read = uvm_reg_field::type_id::create("Instruction_read");
         Read = uvm_reg_field::type_id::create("Read");

         Implementation_Defined_1.configure(this, 2, 30, "RO", 0, 2'b00, 1, 0, 0);
         Port_write.configure(this, 1, 29, "RO", 0, 1'b0, 1, 0, 0);
         Atomic_swap.configure(this, 1, 28, "RO", 0, 1'b0, 1, 0, 0);
         Atomic_clear.configure(this, 1, 27, "RO", 0, 1'b0, 1, 0, 0);
         Atomic_set.configure(this, 1, 26, "RO", 0, 1'b0, 1, 0, 0);
         Atomic_decrement.configure(this, 1, 25, "RO", 0, 1'b0, 1, 0, 0);
         Atomic_increment.configure(this, 1, 24, "RO", 0, 1'b0, 1, 0, 0);
         Atomic_test_and_swap.configure(this, 1, 23, "RO", 0, 1'b0, 1, 0, 0);
         Atomic_compare_and_swap.configure(this, 1, 22, "RO", 0, 1'b0, 1, 0, 0);
         Doorbell.configure(this, 1, 21, "RO", 0, 1'b0, 1, 0, 0);
         Data_Message.configure(this, 1, 20, "RO", 0, 1'b0, 1, 0, 0);
         Write_with_response.configure(this, 1, 19, "RO", 0, 1'b0, 1, 0, 0);
         Streaming_write.configure(this, 1, 18, "RO", 0, 1'b0, 1, 0, 0);
         nwrite.configure(this, 1, 17, "RO", 0, 1'b0, 1, 0, 0);
         Nread.configure(this, 1, 16, "RO", 0, 1'b0, 1, 0, 0);
         Implementation_Defined.configure(this, 2, 14, "RO", 0, 2'b00, 1, 0, 0);
         Data_streaming.configure(this, 1, 13, "RO", 0, 1'b0, 1, 0, 0);
         Data_streaming_traffic_management.configure(this, 1, 12, "RO", 0, 1'b0, 1, 0, 0);
         Reserved.configure(this, 2, 10, "RO", 0, 2'b00, 1, 0, 0);
         TLB_invalidate_entry_sync.configure(this, 1, 9, "RO", 0, 1'b0, 1, 0, 0);
         TLB_invalidate_entry.configure(this, 1, 8, "RO", 0, 1'b0, 1, 0, 0);
         Instruction_cache_invalidate.configure(this, 1, 7, "RO", 0, 1'b0, 1, 0, 0);
         IO_read.configure(this, 1, 6, "RO", 0, 1'b0, 1, 0, 0);
         Data_cache_flush.configure(this, 1, 5, "RO", 0, 1'b0, 1, 0, 0);
         Castout.configure(this, 1, 4, "RO", 0, 1'b0, 1, 0, 0);
         Data_cache_invalidate.configure(this, 1, 3, "RO", 0, 1'b0, 1, 0, 0);
         Read_for_ownership.configure(this, 1, 2, "RO", 0, 1'b0, 1, 0, 0);
         Instruction_read.configure(this, 1, 1, "RO", 0, 1'b0, 1, 0, 0);
         Read.configure(this, 1, 0, "RO", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_2_VC5_VC1_BW_Allocation_Register_reg
   // 
   // BW Allocation Register
   //--------------------------------------------------------------------

   class Port_2_VC5_VC1_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_2_VC5_VC1_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 


      // Function: new
      // 
      function new(string name = "Port_2_VC5_VC1_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");

         Bandwidth_Allocation.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Processing_Element_Logical_Layer_Control_CSR_reg
   // 
   // Logical Layer Register
   //--------------------------------------------------------------------

   class Processing_Element_Logical_Layer_Control_CSR_reg extends uvm_reg;
      `uvm_object_utils(Processing_Element_Logical_Layer_Control_CSR_reg)

      rand uvm_reg_field Extended_addressing_control; 
      uvm_reg_field Reserved; 


      // Function: new
      // 
      function new(string name = "Processing_Element_Logical_Layer_Control_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Extended_addressing_control = uvm_reg_field::type_id::create("Extended_addressing_control");
         Reserved = uvm_reg_field::type_id::create("Reserved");

         Extended_addressing_control.configure(this, 3, 29, "RW", 0, 3'b001, 1, 1, 0);
         Reserved.configure(this, 29, 0, "RO", 0, 29'b00000000000000000000000000000, 1, 0, 0);
      endfunction
   endclass

   //--------------------------------------------------------------------
   // Class: Port_1_VC5_VC1_BW_Allocation_Register_reg
   // 
   // BW Allocation Register
   //--------------------------------------------------------------------

   class Port_1_VC5_VC1_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_1_VC5_VC1_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 


      // Function: new
      // 
      function new(string name = "Port_1_VC5_VC1_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");

         Bandwidth_Allocation.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_7_VoQ_Control_Status_Register_reg
   // 
   // VoQ_Control_Status_Register
   //--------------------------------------------------------------------

   class Port_7_VoQ_Control_Status_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_7_VoQ_Control_Status_Register_reg)

      rand uvm_reg_field RX_Port_Group_Size; 
      rand uvm_reg_field TX_Port_Group_Size; 
      uvm_reg_field Reserved_1; 
      rand uvm_reg_field Port_Group_Size_6_Supported; 
      rand uvm_reg_field Port_Group_Size_5_Supported; 
      rand uvm_reg_field Port_Group_Size_4_Supported; 
      rand uvm_reg_field Port_Group_Size_3_Supported; 
      rand uvm_reg_field Port_Group_Size_2_Supported; 
      rand uvm_reg_field Port_Group_Size_1_Supported; 
      rand uvm_reg_field Port_Group_Size_0_Supported; 
      rand uvm_reg_field Enable_VoQ_Backpressure_Per_VC_Transmission; 
      rand uvm_reg_field Port_XOFF; 
      rand uvm_reg_field Enable_VoQ_Symbol_Participation; 
      rand uvm_reg_field Enable_VoQ_Symbol_Genreation; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field VoQ_Backpressure_Per_VC_Supported; 
      rand uvm_reg_field VoQ_Backpressure_Symbol_Reception_Supported; 
      rand uvm_reg_field VoQ_Backpressure_Symbol_Generation_Supported; 


      // Function: new
      // 
      function new(string name = "Port_7_VoQ_Control_Status_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         RX_Port_Group_Size = uvm_reg_field::type_id::create("RX_Port_Group_Size");
         TX_Port_Group_Size = uvm_reg_field::type_id::create("TX_Port_Group_Size");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         Port_Group_Size_6_Supported = uvm_reg_field::type_id::create("Port_Group_Size_6_Supported");
         Port_Group_Size_5_Supported = uvm_reg_field::type_id::create("Port_Group_Size_5_Supported");
         Port_Group_Size_4_Supported = uvm_reg_field::type_id::create("Port_Group_Size_4_Supported");
         Port_Group_Size_3_Supported = uvm_reg_field::type_id::create("Port_Group_Size_3_Supported");
         Port_Group_Size_2_Supported = uvm_reg_field::type_id::create("Port_Group_Size_2_Supported");
         Port_Group_Size_1_Supported = uvm_reg_field::type_id::create("Port_Group_Size_1_Supported");
         Port_Group_Size_0_Supported = uvm_reg_field::type_id::create("Port_Group_Size_0_Supported");
         Enable_VoQ_Backpressure_Per_VC_Transmission = uvm_reg_field::type_id::create("Enable_VoQ_Backpressure_Per_VC_Transmission");
         Port_XOFF = uvm_reg_field::type_id::create("Port_XOFF");
         Enable_VoQ_Symbol_Participation = uvm_reg_field::type_id::create("Enable_VoQ_Symbol_Participation");
         Enable_VoQ_Symbol_Genreation = uvm_reg_field::type_id::create("Enable_VoQ_Symbol_Genreation");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         VoQ_Backpressure_Per_VC_Supported = uvm_reg_field::type_id::create("VoQ_Backpressure_Per_VC_Supported");
         VoQ_Backpressure_Symbol_Reception_Supported = uvm_reg_field::type_id::create("VoQ_Backpressure_Symbol_Reception_Supported");
         VoQ_Backpressure_Symbol_Generation_Supported = uvm_reg_field::type_id::create("VoQ_Backpressure_Symbol_Generation_Supported");

         RX_Port_Group_Size.configure(this, 3, 29, "RW", 0, 3'b000, 1, 1, 0);
         TX_Port_Group_Size.configure(this, 3, 26, "RW", 0, 3'b000, 1, 1, 0);
         Reserved_1.configure(this, 7, 19, "RO", 0, 7'b0000000, 1, 0, 0);
         Port_Group_Size_6_Supported.configure(this, 1, 18, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_5_Supported.configure(this, 1, 17, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_4_Supported.configure(this, 1, 16, "RW", 0, 1'b1, 1, 1, 0);
         Port_Group_Size_3_Supported.configure(this, 1, 15, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_2_Supported.configure(this, 1, 14, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_1_Supported.configure(this, 1, 13, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_0_Supported.configure(this, 1, 12, "RW", 0, 1'b1, 1, 1, 0);
         Enable_VoQ_Backpressure_Per_VC_Transmission.configure(this, 1, 11, "RW", 0, 1'b0, 1, 1, 0);
         Port_XOFF.configure(this, 1, 10, "RW", 0, 1'b0, 1, 1, 0);
         Enable_VoQ_Symbol_Participation.configure(this, 1, 9, "RW", 0, 1'b0, 1, 1, 0);
         Enable_VoQ_Symbol_Genreation.configure(this, 1, 8, "RW", 0, 1'b0, 1, 1, 0);
         Reserved.configure(this, 5, 3, "RO", 0, 5'b00000, 1, 0, 0);
         VoQ_Backpressure_Per_VC_Supported.configure(this, 1, 2, "RW", 0, 1'b0, 1, 1, 0);
         VoQ_Backpressure_Symbol_Reception_Supported.configure(this, 1, 1, "RW", 0, 1'b0, 1, 1, 0);
         VoQ_Backpressure_Symbol_Generation_Supported.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_3_Packet_Capture_3_CSR_reg
   // 
   // Packet Capture 3 Register
   //--------------------------------------------------------------------

   class Port_3_Packet_Capture_3_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_3_Packet_Capture_3_CSR_reg)

      rand uvm_reg_field Capture3; 


      // Function: new
      // 
      function new(string name = "Port_3_Packet_Capture_3_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture3 = uvm_reg_field::type_id::create("Capture3");

         Capture3.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_2_Timestamp_0_LSW_CSR_reg
   // 
   // Timestamp_0_LSW_Register
   //--------------------------------------------------------------------

   class Port_2_Timestamp_0_LSW_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_2_Timestamp_0_LSW_CSR_reg)

      uvm_reg_field LSW_Bits; 


      // Function: new
      // 
      function new(string name = "Port_2_Timestamp_0_LSW_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         LSW_Bits = uvm_reg_field::type_id::create("LSW_Bits");

         LSW_Bits.configure(this, 32, 0, "RO", 0, 32'h00000000, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_10_VoQ_Control_Status_Register_reg
   // 
   // VoQ_Control_Status_Register
   //--------------------------------------------------------------------

   class Port_10_VoQ_Control_Status_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_10_VoQ_Control_Status_Register_reg)

      rand uvm_reg_field RX_Port_Group_Size; 
      rand uvm_reg_field TX_Port_Group_Size; 
      uvm_reg_field Reserved_1; 
      rand uvm_reg_field Port_Group_Size_6_Supported; 
      rand uvm_reg_field Port_Group_Size_5_Supported; 
      rand uvm_reg_field Port_Group_Size_4_Supported; 
      rand uvm_reg_field Port_Group_Size_3_Supported; 
      rand uvm_reg_field Port_Group_Size_2_Supported; 
      rand uvm_reg_field Port_Group_Size_1_Supported; 
      rand uvm_reg_field Port_Group_Size_0_Supported; 
      rand uvm_reg_field Enable_VoQ_Backpressure_Per_VC_Transmission; 
      rand uvm_reg_field Port_XOFF; 
      rand uvm_reg_field Enable_VoQ_Symbol_Participation; 
      rand uvm_reg_field Enable_VoQ_Symbol_Genreation; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field VoQ_Backpressure_Per_VC_Supported; 
      rand uvm_reg_field VoQ_Backpressure_Symbol_Reception_Supported; 
      rand uvm_reg_field VoQ_Backpressure_Symbol_Generation_Supported; 


      // Function: new
      // 
      function new(string name = "Port_10_VoQ_Control_Status_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         RX_Port_Group_Size = uvm_reg_field::type_id::create("RX_Port_Group_Size");
         TX_Port_Group_Size = uvm_reg_field::type_id::create("TX_Port_Group_Size");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         Port_Group_Size_6_Supported = uvm_reg_field::type_id::create("Port_Group_Size_6_Supported");
         Port_Group_Size_5_Supported = uvm_reg_field::type_id::create("Port_Group_Size_5_Supported");
         Port_Group_Size_4_Supported = uvm_reg_field::type_id::create("Port_Group_Size_4_Supported");
         Port_Group_Size_3_Supported = uvm_reg_field::type_id::create("Port_Group_Size_3_Supported");
         Port_Group_Size_2_Supported = uvm_reg_field::type_id::create("Port_Group_Size_2_Supported");
         Port_Group_Size_1_Supported = uvm_reg_field::type_id::create("Port_Group_Size_1_Supported");
         Port_Group_Size_0_Supported = uvm_reg_field::type_id::create("Port_Group_Size_0_Supported");
         Enable_VoQ_Backpressure_Per_VC_Transmission = uvm_reg_field::type_id::create("Enable_VoQ_Backpressure_Per_VC_Transmission");
         Port_XOFF = uvm_reg_field::type_id::create("Port_XOFF");
         Enable_VoQ_Symbol_Participation = uvm_reg_field::type_id::create("Enable_VoQ_Symbol_Participation");
         Enable_VoQ_Symbol_Genreation = uvm_reg_field::type_id::create("Enable_VoQ_Symbol_Genreation");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         VoQ_Backpressure_Per_VC_Supported = uvm_reg_field::type_id::create("VoQ_Backpressure_Per_VC_Supported");
         VoQ_Backpressure_Symbol_Reception_Supported = uvm_reg_field::type_id::create("VoQ_Backpressure_Symbol_Reception_Supported");
         VoQ_Backpressure_Symbol_Generation_Supported = uvm_reg_field::type_id::create("VoQ_Backpressure_Symbol_Generation_Supported");

         RX_Port_Group_Size.configure(this, 3, 29, "RW", 0, 3'b000, 1, 1, 0);
         TX_Port_Group_Size.configure(this, 3, 26, "RW", 0, 3'b000, 1, 1, 0);
         Reserved_1.configure(this, 7, 19, "RO", 0, 7'b0000000, 1, 0, 0);
         Port_Group_Size_6_Supported.configure(this, 1, 18, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_5_Supported.configure(this, 1, 17, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_4_Supported.configure(this, 1, 16, "RW", 0, 1'b1, 1, 1, 0);
         Port_Group_Size_3_Supported.configure(this, 1, 15, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_2_Supported.configure(this, 1, 14, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_1_Supported.configure(this, 1, 13, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_0_Supported.configure(this, 1, 12, "RW", 0, 1'b1, 1, 1, 0);
         Enable_VoQ_Backpressure_Per_VC_Transmission.configure(this, 1, 11, "RW", 0, 1'b0, 1, 1, 0);
         Port_XOFF.configure(this, 1, 10, "RW", 0, 1'b0, 1, 1, 0);
         Enable_VoQ_Symbol_Participation.configure(this, 1, 9, "RW", 0, 1'b0, 1, 1, 0);
         Enable_VoQ_Symbol_Genreation.configure(this, 1, 8, "RW", 0, 1'b0, 1, 1, 0);
         Reserved.configure(this, 5, 3, "RO", 0, 5'b00000, 1, 0, 0);
         VoQ_Backpressure_Per_VC_Supported.configure(this, 1, 2, "RW", 0, 1'b0, 1, 1, 0);
         VoQ_Backpressure_Symbol_Reception_Supported.configure(this, 1, 1, "RW", 0, 1'b0, 1, 1, 0);
         VoQ_Backpressure_Symbol_Generation_Supported.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass


   //--------------------------------------------------------------------
   // Class: Lane_6_Status_1_CSR_reg
   // 
   // Status 1 Register
   //--------------------------------------------------------------------

   class Lane_6_Status_1_CSR_reg extends uvm_reg;
      `uvm_object_utils(Lane_6_Status_1_CSR_reg)

      uvm_reg_field Reserved; 
      uvm_reg_field IDLE3_SC_Retraining_State; 
      uvm_reg_field IDLE3_SC_Training_State; 
      uvm_reg_field IDLE3_DME_Training_State; 
      uvm_reg_field IDLE3_Training_Type; 
      uvm_reg_field IDLE3_Loss_of_Signals; 
      uvm_reg_field IDLE2_Connected_port_scrambling_descrambling_enabled; 
      uvm_reg_field IDLE2_Connected_port_transmit_emphasis_Tap_plus1_status; 
      uvm_reg_field IDLE2_Connected_port_transmit_emphasis_Tap_minus1_status; 
      uvm_reg_field IDLE2_Lane_number_in_connected_port; 
      uvm_reg_field IDLE2_Received_port_width; 
      uvm_reg_field IDLE2_Connected_port_lane_receiver_trained; 
      uvm_reg_field Implementation_defined; 
      uvm_reg_field Values_changed; 
      uvm_reg_field IDLE_information_current; 
      rand uvm_reg_field IDLE_received; 


      // Function: new
      // 
      function new(string name = "Lane_6_Status_1_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         IDLE3_SC_Retraining_State = uvm_reg_field::type_id::create("IDLE3_SC_Retraining_State");
         IDLE3_SC_Training_State = uvm_reg_field::type_id::create("IDLE3_SC_Training_State");
         IDLE3_DME_Training_State = uvm_reg_field::type_id::create("IDLE3_DME_Training_State");
         IDLE3_Training_Type = uvm_reg_field::type_id::create("IDLE3_Training_Type");
         IDLE3_Loss_of_Signals = uvm_reg_field::type_id::create("IDLE3_Loss_of_Signals");
         IDLE2_Connected_port_scrambling_descrambling_enabled = uvm_reg_field::type_id::create("IDLE2_Connected_port_scrambling_descrambling_enabled");
         IDLE2_Connected_port_transmit_emphasis_Tap_plus1_status = uvm_reg_field::type_id::create("IDLE2_Connected_port_transmit_emphasis_Tap_plus1_status");
         IDLE2_Connected_port_transmit_emphasis_Tap_minus1_status = uvm_reg_field::type_id::create("IDLE2_Connected_port_transmit_emphasis_Tap_minus1_status");
         IDLE2_Lane_number_in_connected_port = uvm_reg_field::type_id::create("IDLE2_Lane_number_in_connected_port");
         IDLE2_Received_port_width = uvm_reg_field::type_id::create("IDLE2_Received_port_width");
         IDLE2_Connected_port_lane_receiver_trained = uvm_reg_field::type_id::create("IDLE2_Connected_port_lane_receiver_trained");
         Implementation_defined = uvm_reg_field::type_id::create("Implementation_defined");
         Values_changed = uvm_reg_field::type_id::create("Values_changed");
         IDLE_information_current = uvm_reg_field::type_id::create("IDLE_information_current");
         IDLE_received = uvm_reg_field::type_id::create("IDLE_received");

         Reserved.configure(this, 6, 26, "RO", 0, 6'b000000, 1, 0, 0);
         IDLE3_SC_Retraining_State.configure(this, 2, 24, "RO", 0, 2'b00, 1, 0, 0);
         IDLE3_SC_Training_State.configure(this, 2, 22, "RO", 0, 2'b00, 1, 0, 0);
         IDLE3_DME_Training_State.configure(this, 2, 20, "RO", 0, 2'b00, 1, 0, 0);
         IDLE3_Training_Type.configure(this, 2, 18, "RO", 0, 2'b00, 1, 0, 0);
         IDLE3_Loss_of_Signals.configure(this, 1, 17, "RO", 0, 1'b0, 1, 0, 0);
         IDLE2_Connected_port_scrambling_descrambling_enabled.configure(this, 1, 16, "RO", 0, 1'b0, 1, 0, 0);
         IDLE2_Connected_port_transmit_emphasis_Tap_plus1_status.configure(this, 2, 14, "RO", 0, 2'b00, 1, 0, 0);
         IDLE2_Connected_port_transmit_emphasis_Tap_minus1_status.configure(this, 2, 12, "RO", 0, 2'b00, 1, 0, 0);
         IDLE2_Lane_number_in_connected_port.configure(this, 4, 8, "RO", 0, 4'h0, 1, 0, 0);
         IDLE2_Received_port_width.configure(this, 3, 5, "RO", 0, 3'b000, 1, 0, 0);
         IDLE2_Connected_port_lane_receiver_trained.configure(this, 1, 4, "RO", 0, 1'b0, 1, 0, 0);
         Implementation_defined.configure(this, 1, 3, "RO", 0, 1'b0, 1, 0, 0);
         Values_changed.configure(this, 1, 2, "RO", 0, 1'b1, 1, 0, 0);
         IDLE_information_current.configure(this, 1, 1, "RO", 0, 1'b0, 1, 0, 0);
         IDLE_received.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_4_Timestamp_0_MSW_CSR_reg
   // 
   // Timestamp_0_MSW_Register
   //--------------------------------------------------------------------

   class Port_4_Timestamp_0_MSW_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_4_Timestamp_0_MSW_CSR_reg)

      uvm_reg_field MSW_Bits; 


      // Function: new
      // 
      function new(string name = "Port_4_Timestamp_0_MSW_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         MSW_Bits = uvm_reg_field::type_id::create("MSW_Bits");

         MSW_Bits.configure(this, 32, 0, "RO", 0, 32'h00000000, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_8_Auto_Update_Counter_CSR_reg
   // 
   // Auto_Update_Counter_CSR_Register
   //--------------------------------------------------------------------

   class Port_8_Auto_Update_Counter_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_8_Auto_Update_Counter_CSR_reg)

      rand uvm_reg_field Update_Period; 


      // Function: new
      // 
      function new(string name = "Port_8_Auto_Update_Counter_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Update_Period = uvm_reg_field::type_id::create("Update_Period");

         Update_Period.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_2_Timestamp_0_MSW_CSR_reg
   // 
   // Timestamp_0_MSW_Register
   //--------------------------------------------------------------------

   class Port_2_Timestamp_0_MSW_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_2_Timestamp_0_MSW_CSR_reg)

      uvm_reg_field MSW_Bits; 


      // Function: new
      // 
      function new(string name = "Port_2_Timestamp_0_MSW_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         MSW_Bits = uvm_reg_field::type_id::create("MSW_Bits");

         MSW_Bits.configure(this, 32, 0, "RO", 0, 32'h00000000, 1, 0, 1);
      endfunction
   endclass

   //--------------------------------------------------------------------
   // Class: Host_Base_Device_ID_Lock_CSR_reg
   // 
   // Host_Base_Device_ID_Lock_Register
   //--------------------------------------------------------------------

   class Host_Base_Device_ID_Lock_CSR_reg extends uvm_reg;
      `uvm_object_utils(Host_Base_Device_ID_Lock_CSR_reg)

      rand uvm_reg_field Host_Base_Device_ID; 
      rand uvm_reg_field Host_Base_Dev32_ID; 


      // Function: new
      // 
      function new(string name = "Host_Base_Device_ID_Lock_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Host_Base_Device_ID = uvm_reg_field::type_id::create("Host_Base_Device_ID");
         Host_Base_Dev32_ID = uvm_reg_field::type_id::create("Host_Base_Dev32_ID");

         Host_Base_Device_ID.configure(this, 16, 16, "RW", 0, 16'hffff, 1, 1, 1);
         Host_Base_Dev32_ID.configure(this, 16, 0, "RO", 0, 16'h0000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_11_Auto_Update_Counter_CSR_reg
   // 
   // Auto_Update_Counter_CSR_Register
   //--------------------------------------------------------------------

   class Port_11_Auto_Update_Counter_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_11_Auto_Update_Counter_CSR_reg)

      rand uvm_reg_field Update_Period; 


      // Function: new
      // 
      function new(string name = "Port_11_Auto_Update_Counter_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Update_Period = uvm_reg_field::type_id::create("Update_Period");

         Update_Period.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_5_Outbound_ackID_CSR_reg
   // 
   // Outbound_Register
   //--------------------------------------------------------------------

   class Port_5_Outbound_ackID_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_5_Outbound_ackID_CSR_reg)

      rand uvm_reg_field Outbound_ackID; 
      uvm_reg_field Outstanding_ackID; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Clr_outstanding_ackID; 


      // Function: new
      // 
      function new(string name = "Port_5_Outbound_ackID_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Outbound_ackID = uvm_reg_field::type_id::create("Outbound_ackID");
         Outstanding_ackID = uvm_reg_field::type_id::create("Outstanding_ackID");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Clr_outstanding_ackID = uvm_reg_field::type_id::create("Clr_outstanding_ackID");

         Outbound_ackID.configure(this, 12, 20, "RW", 0, 12'h000, 1, 1, 0);
         Outstanding_ackID.configure(this, 12, 8, "RW", 0, 12'h000, 1, 1, 0);
         Reserved.configure(this, 7, 1, "RO", 0, 7'b0000000, 1, 0, 0);
         Clr_outstanding_ackID.configure(this, 1, 0, "W1C", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_8_Timestamp_Generator_Synchronization_CSR_reg
   // 
   // Timestamp_Generator_Synchronization_Register
   //--------------------------------------------------------------------

   class Port_8_Timestamp_Generator_Synchronization_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_8_Timestamp_Generator_Synchronization_CSR_reg)

      rand uvm_reg_field Asymmetry; 
      rand uvm_reg_field TX_Has_Lowwer_Latency; 
      uvm_reg_field Reserved_1; 
      rand uvm_reg_field Port_Opening_Mode; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Auto_Update_Link_Partner_Timestamp_Generators; 
      rand uvm_reg_field Disable_Clock_Compensation_Sequence; 
      rand uvm_reg_field Accept_Timestamps; 


      // Function: new
      // 
      function new(string name = "Port_8_Timestamp_Generator_Synchronization_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Asymmetry = uvm_reg_field::type_id::create("Asymmetry");
         TX_Has_Lowwer_Latency = uvm_reg_field::type_id::create("TX_Has_Lowwer_Latency");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         Port_Opening_Mode = uvm_reg_field::type_id::create("Port_Opening_Mode");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Auto_Update_Link_Partner_Timestamp_Generators = uvm_reg_field::type_id::create("Auto_Update_Link_Partner_Timestamp_Generators");
         Disable_Clock_Compensation_Sequence = uvm_reg_field::type_id::create("Disable_Clock_Compensation_Sequence");
         Accept_Timestamps = uvm_reg_field::type_id::create("Accept_Timestamps");

         Asymmetry.configure(this, 12, 20, "RW", 0, 12'h000, 1, 1, 0);
         TX_Has_Lowwer_Latency.configure(this, 1, 19, "RW", 0, 1'b0, 1, 1, 0);
         Reserved_1.configure(this, 11, 8, "RO", 0, 11'b00000000000, 1, 0, 0);
         Port_Opening_Mode.configure(this, 2, 6, "RW", 0, 2'b00, 1, 1, 0);
         Reserved.configure(this, 3, 3, "RO", 0, 3'b000, 1, 0, 0);
         Auto_Update_Link_Partner_Timestamp_Generators.configure(this, 1, 2, "RW", 0, 1'b0, 1, 1, 0);
         Disable_Clock_Compensation_Sequence.configure(this, 1, 1, "RW", 0, 1'b0, 1, 1, 0);
         Accept_Timestamps.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_4_Packet_Capture_3_CSR_reg
   // 
   // Packet Capture 3 Register
   //--------------------------------------------------------------------

   class Port_4_Packet_Capture_3_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_4_Packet_Capture_3_CSR_reg)

      rand uvm_reg_field Capture3; 


      // Function: new
      // 
      function new(string name = "Port_4_Packet_Capture_3_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture3 = uvm_reg_field::type_id::create("Capture3");

         Capture3.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_6_Control_CSR_reg
   // 
   // Control Register
   //--------------------------------------------------------------------

   class Port_6_Control_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_6_Control_CSR_reg)

      uvm_reg_field Port_Type; 
      rand uvm_reg_field Port_Lockout; 
      rand uvm_reg_field Drop_Packet_Enable; 
      rand uvm_reg_field Stop_on_Port_Failed_encountered_Enable; 
      rand uvm_reg_field Implementation_defined; 
      uvm_reg_field Extended_Port_Width_Support; 
      rand uvm_reg_field Extended_Port_Width_Override; 
      rand uvm_reg_field Flow_Arbitration_Participant; 
      rand uvm_reg_field Enumeration_Boundary; 
      rand uvm_reg_field Flow_Control_Participant; 
      rand uvm_reg_field Multicast_event_Participant; 
      rand uvm_reg_field Error_Checking_Disable; 
      rand uvm_reg_field Input_Port_Enable; 
      rand uvm_reg_field Output_Port_Enable; 
      rand uvm_reg_field Port_Disable; 
      uvm_reg_field Port_Width_Override; 
      rand uvm_reg_field Initialized_Port_Width; 
      uvm_reg_field Port_Width_Support; 


      // Function: new
      // 
      function new(string name = "Port_6_Control_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Port_Type = uvm_reg_field::type_id::create("Port_Type");
         Port_Lockout = uvm_reg_field::type_id::create("Port_Lockout");
         Drop_Packet_Enable = uvm_reg_field::type_id::create("Drop_Packet_Enable");
         Stop_on_Port_Failed_encountered_Enable = uvm_reg_field::type_id::create("Stop_on_Port_Failed_encountered_Enable");
         Implementation_defined = uvm_reg_field::type_id::create("Implementation_defined");
         Extended_Port_Width_Support = uvm_reg_field::type_id::create("Extended_Port_Width_Support");
         Extended_Port_Width_Override = uvm_reg_field::type_id::create("Extended_Port_Width_Override");
         Flow_Arbitration_Participant = uvm_reg_field::type_id::create("Flow_Arbitration_Participant");
         Enumeration_Boundary = uvm_reg_field::type_id::create("Enumeration_Boundary");
         Flow_Control_Participant = uvm_reg_field::type_id::create("Flow_Control_Participant");
         Multicast_event_Participant = uvm_reg_field::type_id::create("Multicast_event_Participant");
         Error_Checking_Disable = uvm_reg_field::type_id::create("Error_Checking_Disable");
         Input_Port_Enable = uvm_reg_field::type_id::create("Input_Port_Enable");
         Output_Port_Enable = uvm_reg_field::type_id::create("Output_Port_Enable");
         Port_Disable = uvm_reg_field::type_id::create("Port_Disable");
         Port_Width_Override = uvm_reg_field::type_id::create("Port_Width_Override");
         Initialized_Port_Width = uvm_reg_field::type_id::create("Initialized_Port_Width");
         Port_Width_Support = uvm_reg_field::type_id::create("Port_Width_Support");

         Port_Type.configure(this, 1, 31, "RO", 0, 1'b0, 1, 0, 0);
         Port_Lockout.configure(this, 1, 30, "RW", 0, 1'b0, 1, 1, 0);
         Drop_Packet_Enable.configure(this, 1, 29, "RW", 0, 1'b0, 1, 1, 0);
         Stop_on_Port_Failed_encountered_Enable.configure(this, 1, 28, "RW", 0, 1'b0, 1, 1, 0);
         Implementation_defined.configure(this, 8, 20, "RW", 0, 8'h00, 1, 1, 0);
         Extended_Port_Width_Support.configure(this, 2, 18, "RO", 0, 2'b00, 1, 0, 0);
         Extended_Port_Width_Override.configure(this, 2, 16, "RW", 0, 2'b00, 1, 1, 0);
         Flow_Arbitration_Participant.configure(this, 1, 15, "RW", 0, 1'b0, 1, 1, 0);
         Enumeration_Boundary.configure(this, 1, 14, "RW", 0, 1'b0, 1, 1, 0);
         Flow_Control_Participant.configure(this, 1, 13, "RW", 0, 1'b0, 1, 1, 0);
         Multicast_event_Participant.configure(this, 1, 12, "RW", 0, 1'b0, 1, 1, 0);
         Error_Checking_Disable.configure(this, 1, 11, "RW", 0, 1'b0, 1, 1, 0);
         Input_Port_Enable.configure(this, 1, 10, "RW", 0, 1'b0, 1, 1, 0);
         Output_Port_Enable.configure(this, 1, 9, "RW", 0, 1'b0, 1, 1, 0);
         Port_Disable.configure(this, 1, 8, "RW", 0, 1'b0, 1, 1, 0);
         Port_Width_Override.configure(this, 3, 5, "RO", 0, 3'b000, 1, 0, 0);
         Initialized_Port_Width.configure(this, 3, 2, "RW", 0, 3'b000, 1, 1, 0);
         Port_Width_Support.configure(this, 2, 0, "RO", 0, 2'b00, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_1_Packet_Capture_3_CSR_reg
   // 
   // Packet Capture 3 Register
   //--------------------------------------------------------------------

   class Port_1_Packet_Capture_3_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_1_Packet_Capture_3_CSR_reg)

      rand uvm_reg_field Capture3; 


      // Function: new
      // 
      function new(string name = "Port_1_Packet_Capture_3_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture3 = uvm_reg_field::type_id::create("Capture3");

         Capture3.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_1_Outbound_ackID_CSR_reg
   // 
   // Outbound_Register
   //--------------------------------------------------------------------

   class Port_1_Outbound_ackID_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_1_Outbound_ackID_CSR_reg)

      rand uvm_reg_field Outbound_ackID; 
      uvm_reg_field Outstanding_ackID; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Clr_outstanding_ackID; 


      // Function: new
      // 
      function new(string name = "Port_1_Outbound_ackID_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Outbound_ackID = uvm_reg_field::type_id::create("Outbound_ackID");
         Outstanding_ackID = uvm_reg_field::type_id::create("Outstanding_ackID");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Clr_outstanding_ackID = uvm_reg_field::type_id::create("Clr_outstanding_ackID");

         Outbound_ackID.configure(this, 12, 20, "RW", 0, 12'h000, 1, 1, 0);
         Outstanding_ackID.configure(this, 12, 8, "RW", 0, 12'h000, 1, 1, 0);
         Reserved.configure(this, 7, 1, "RO", 0, 7'b0000000, 1, 0, 0);
         Clr_outstanding_ackID.configure(this, 1, 0, "W1C", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_write_Target_deviceID_CSR_reg
   // 
   // Target Device ID Register
   //--------------------------------------------------------------------

   class Port_write_Target_deviceID_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_write_Target_deviceID_CSR_reg)

      uvm_reg_field Reserved; 
      rand uvm_reg_field Dev32_PW; 
      rand uvm_reg_field Dev8_or_16; 
      rand uvm_reg_field Dev8_deviceID; 
      rand uvm_reg_field Dev16_deviceID_msb; 


      // Function: new
      // 
      function new(string name = "Port_write_Target_deviceID_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Dev32_PW = uvm_reg_field::type_id::create("Dev32_PW");
         Dev8_or_16 = uvm_reg_field::type_id::create("Dev8_or_16");
         Dev8_deviceID = uvm_reg_field::type_id::create("Dev8_deviceID");
         Dev16_deviceID_msb = uvm_reg_field::type_id::create("Dev16_deviceID_msb");

         Reserved.configure(this, 14, 18, "RO", 0, 14'b00000000000000, 1, 0, 0);
         Dev32_PW.configure(this, 1, 17, "RW", 0, 1'b0, 1, 1, 0);
         Dev8_or_16.configure(this, 1, 16, "RW", 0, 1'b0, 1, 1, 0);
         Dev8_deviceID.configure(this, 8, 8, "RW", 0, 8'h00, 1, 1, 1);
         Dev16_deviceID_msb.configure(this, 8, 0, "RW", 0, 8'h00, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_4_Auto_Update_Counter_CSR_reg
   // 
   // Auto_Update_Counter_CSR_Register
   //--------------------------------------------------------------------

   class Port_4_Auto_Update_Counter_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_4_Auto_Update_Counter_CSR_reg)

      rand uvm_reg_field Update_Period; 


      // Function: new
      // 
      function new(string name = "Port_4_Auto_Update_Counter_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Update_Period = uvm_reg_field::type_id::create("Update_Period");

         Update_Period.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_4_VC6_VC2_BW_Allocation_Register_reg
   // 
   // BW Allocation Register
   //--------------------------------------------------------------------

   class Port_4_VC6_VC2_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_4_VC6_VC2_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 


      // Function: new
      // 
      function new(string name = "Port_4_VC6_VC2_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");

         Bandwidth_Allocation.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_14_Timestamp_1_MSW_CSR_reg
   // 
   // Timestamp_1_MSW_Register
   //--------------------------------------------------------------------

   class Port_14_Timestamp_1_MSW_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_14_Timestamp_1_MSW_CSR_reg)

      uvm_reg_field MSW_Bits; 


      // Function: new
      // 
      function new(string name = "Port_14_Timestamp_1_MSW_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         MSW_Bits = uvm_reg_field::type_id::create("MSW_Bits");

         MSW_Bits.configure(this, 32, 0, "RO", 0, 32'h00000000, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_1_Initialization_Status_CSR_reg
   // 
   // Initialization_Status_Register
   //--------------------------------------------------------------------

   class Port_1_Initialization_Status_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_1_Initialization_Status_CSR_reg)

      uvm_reg_field Reserved_3; 
      uvm_reg_field Transmitted_Status_Control_Symbols; 
      uvm_reg_field Reserved_2; 
      uvm_reg_field Received_Status_Control_Symbols; 
      uvm_reg_field Port_Initialization_State_Machine; 
      uvm_reg_field Reserved_1; 
      uvm_reg_field x1_x2_Mode_Detection; 
      uvm_reg_field Reserved; 
      uvm_reg_field Lane_Alignment; 


      // Function: new
      // 
      function new(string name = "Port_1_Initialization_Status_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved_3 = uvm_reg_field::type_id::create("Reserved_3");
         Transmitted_Status_Control_Symbols = uvm_reg_field::type_id::create("Transmitted_Status_Control_Symbols");
         Reserved_2 = uvm_reg_field::type_id::create("Reserved_2");
         Received_Status_Control_Symbols = uvm_reg_field::type_id::create("Received_Status_Control_Symbols");
         Port_Initialization_State_Machine = uvm_reg_field::type_id::create("Port_Initialization_State_Machine");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         x1_x2_Mode_Detection = uvm_reg_field::type_id::create("x1_x2_Mode_Detection");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Lane_Alignment = uvm_reg_field::type_id::create("Lane_Alignment");

         Reserved_3.configure(this, 4, 28, "RO", 0, 4'h0, 1, 0, 0);
         Transmitted_Status_Control_Symbols.configure(this, 7, 21, "RO", 0, 7'b0000000, 1, 0, 0);
         Reserved_2.configure(this, 1, 20, "RO", 0, 1'b0, 1, 0, 0);
         Received_Status_Control_Symbols.configure(this, 4, 16, "RO", 0, 4'h0, 1, 0, 0);
         Port_Initialization_State_Machine.configure(this, 5, 11, "RO", 0, 5'b00000, 1, 0, 0);
         Reserved_1.configure(this, 1, 10, "RO", 0, 1'b0, 1, 0, 0);
         x1_x2_Mode_Detection.configure(this, 4, 6, "RO", 0, 4'h0, 1, 0, 0);
         Reserved.configure(this, 1, 5, "RO", 0, 1'b0, 1, 0, 0);
         Lane_Alignment.configure(this, 5, 0, "RO", 0, 5'b00000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_1_VC0_BW_Allocation_Register_reg
   // 
   // BW Register
   //--------------------------------------------------------------------

   class Port_1_VC0_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_1_VC0_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 
      rand uvm_reg_field Bandwidth_Reservation_Precision; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field VC0_BW_Res_Enable; 
      uvm_reg_field VC0_Bandwidth_Reservation_Capable; 


      // Function: new
      // 
      function new(string name = "Port_1_VC0_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");
         Bandwidth_Reservation_Precision = uvm_reg_field::type_id::create("Bandwidth_Reservation_Precision");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         VC0_BW_Res_Enable = uvm_reg_field::type_id::create("VC0_BW_Res_Enable");
         VC0_Bandwidth_Reservation_Capable = uvm_reg_field::type_id::create("VC0_Bandwidth_Reservation_Capable");

         Bandwidth_Allocation.configure(this, 16, 16, "RW", 0, 16'h0000, 1, 1, 1);
         Bandwidth_Reservation_Precision.configure(this, 8, 8, "RW", 0, 8'h00, 1, 1, 1);
         Reserved.configure(this, 6, 2, "RO", 0, 6'b000000, 1, 0, 0);
         VC0_BW_Res_Enable.configure(this, 1, 1, "RW", 0, 1'b0, 1, 1, 0);
         VC0_Bandwidth_Reservation_Capable.configure(this, 1, 0, "RO", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_10_VC_Control_and_Status_Register_reg
   // 
   // CSR Register
   //--------------------------------------------------------------------

   class Port_10_VC_Control_and_Status_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_10_VC_Control_and_Status_Register_reg)

      rand uvm_reg_field VCs_Enable; 
      uvm_reg_field VCs_Support; 
      rand uvm_reg_field CT_Mode; 
      rand uvm_reg_field VC_Refresh_Interval; 


      // Function: new
      // 
      function new(string name = "Port_10_VC_Control_and_Status_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         VCs_Enable = uvm_reg_field::type_id::create("VCs_Enable");
         VCs_Support = uvm_reg_field::type_id::create("VCs_Support");
         CT_Mode = uvm_reg_field::type_id::create("CT_Mode");
         VC_Refresh_Interval = uvm_reg_field::type_id::create("VC_Refresh_Interval");

         VCs_Enable.configure(this, 8, 24, "RW", 0, 8'h00, 1, 1, 1);
         VCs_Support.configure(this, 8, 16, "RO", 0, 8'h00, 1, 0, 1);
         CT_Mode.configure(this, 8, 8, "RW", 0, 8'h00, 1, 1, 1);
         VC_Refresh_Interval.configure(this, 8, 0, "RW", 0, 8'h00, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_14_Local_ackID_CSR_reg
   // 
   // ackID Register
   //--------------------------------------------------------------------

   class Port_14_Local_ackID_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_14_Local_ackID_CSR_reg)

      rand uvm_reg_field Outbound_ackID; 
      uvm_reg_field Reserved_2; 
      uvm_reg_field Outstanding_ackID; 
      uvm_reg_field Reserved_1; 
      rand uvm_reg_field Inbound_ackID; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Clr_outstanding_ackID; 


      // Function: new
      // 
      function new(string name = "Port_14_Local_ackID_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Outbound_ackID = uvm_reg_field::type_id::create("Outbound_ackID");
         Reserved_2 = uvm_reg_field::type_id::create("Reserved_2");
         Outstanding_ackID = uvm_reg_field::type_id::create("Outstanding_ackID");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         Inbound_ackID = uvm_reg_field::type_id::create("Inbound_ackID");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Clr_outstanding_ackID = uvm_reg_field::type_id::create("Clr_outstanding_ackID");

         Outbound_ackID.configure(this, 6, 26, "RW", 0, 6'b000000, 1, 1, 0);
         Reserved_2.configure(this, 2, 24, "RO", 0, 2'b00, 1, 0, 0);
         Outstanding_ackID.configure(this, 6, 18, "RW", 0, 6'b000000, 1, 1, 0);
         Reserved_1.configure(this, 10, 8, "RO", 0, 10'b0000000000, 1, 0, 0);
         Inbound_ackID.configure(this, 6, 2, "RW", 0, 6'b000000, 1, 1, 0);
         Reserved.configure(this, 1, 1, "RO", 0, 1'b0, 1, 0, 0);
         Clr_outstanding_ackID.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_12_Packet_Capture_1_CSR_reg
   // 
   // Packet Capture 1 Register
   //--------------------------------------------------------------------

   class Port_12_Packet_Capture_1_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_12_Packet_Capture_1_CSR_reg)

      rand uvm_reg_field Capture1; 


      // Function: new
      // 
      function new(string name = "Port_12_Packet_Capture_1_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture1 = uvm_reg_field::type_id::create("Capture1");

         Capture1.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_11_VC0_BW_Allocation_Register_reg
   // 
   // BW Register
   //--------------------------------------------------------------------

   class Port_11_VC0_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_11_VC0_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 
      rand uvm_reg_field Bandwidth_Reservation_Precision; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field VC0_BW_Res_Enable; 
      uvm_reg_field VC0_Bandwidth_Reservation_Capable; 


      // Function: new
      // 
      function new(string name = "Port_11_VC0_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");
         Bandwidth_Reservation_Precision = uvm_reg_field::type_id::create("Bandwidth_Reservation_Precision");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         VC0_BW_Res_Enable = uvm_reg_field::type_id::create("VC0_BW_Res_Enable");
         VC0_Bandwidth_Reservation_Capable = uvm_reg_field::type_id::create("VC0_Bandwidth_Reservation_Capable");

         Bandwidth_Allocation.configure(this, 16, 16, "RW", 0, 16'h0000, 1, 1, 1);
         Bandwidth_Reservation_Precision.configure(this, 8, 8, "RW", 0, 8'h00, 1, 1, 1);
         Reserved.configure(this, 6, 2, "RO", 0, 6'b000000, 1, 0, 0);
         VC0_BW_Res_Enable.configure(this, 1, 1, "RW", 0, 1'b0, 1, 1, 0);
         VC0_Bandwidth_Reservation_Capable.configure(this, 1, 0, "RO", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_9_Link_Timers_Control_CSR_reg
   // 
   // Link_Timers_Control_Register
   //--------------------------------------------------------------------

   class Port_9_Link_Timers_Control_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_9_Link_Timers_Control_CSR_reg)

      rand uvm_reg_field Emphasis_Command_Timeout; 
      rand uvm_reg_field CW_Training_Completion_Timer; 
      rand uvm_reg_field DME_Wait_Timer; 
      rand uvm_reg_field DME_Training_Completion_Timer; 


      // Function: new
      // 
      function new(string name = "Port_9_Link_Timers_Control_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Emphasis_Command_Timeout = uvm_reg_field::type_id::create("Emphasis_Command_Timeout");
         CW_Training_Completion_Timer = uvm_reg_field::type_id::create("CW_Training_Completion_Timer");
         DME_Wait_Timer = uvm_reg_field::type_id::create("DME_Wait_Timer");
         DME_Training_Completion_Timer = uvm_reg_field::type_id::create("DME_Training_Completion_Timer");

         Emphasis_Command_Timeout.configure(this, 8, 24, "RW", 0, 8'hff, 1, 1, 1);
         CW_Training_Completion_Timer.configure(this, 8, 16, "RW", 0, 8'h00, 1, 1, 1);
         DME_Wait_Timer.configure(this, 8, 8, "RW", 0, 8'h3f, 1, 1, 1);
         DME_Training_Completion_Timer.configure(this, 8, 0, "RW", 0, 8'h00, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_15_Link_Timers_Control_3_CSR_reg
   // 
   // Link_Timers_Control_3_Register
   //--------------------------------------------------------------------

   class Port_15_Link_Timers_Control_3_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_15_Link_Timers_Control_3_CSR_reg)

      rand uvm_reg_field Keep_alive_Transmission_Interval; 
      rand uvm_reg_field Keep_alive_Transmission_Period; 
      rand uvm_reg_field Receive_Width_Command_Timeout; 
      rand uvm_reg_field Transmit_Width_Command_Timeout; 


      // Function: new
      // 
      function new(string name = "Port_15_Link_Timers_Control_3_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Keep_alive_Transmission_Interval = uvm_reg_field::type_id::create("Keep_alive_Transmission_Interval");
         Keep_alive_Transmission_Period = uvm_reg_field::type_id::create("Keep_alive_Transmission_Period");
         Receive_Width_Command_Timeout = uvm_reg_field::type_id::create("Receive_Width_Command_Timeout");
         Transmit_Width_Command_Timeout = uvm_reg_field::type_id::create("Transmit_Width_Command_Timeout");

         Keep_alive_Transmission_Interval.configure(this, 10, 22, "RW", 0, 10'b1111111111, 1, 1, 0);
         Keep_alive_Transmission_Period.configure(this, 6, 16, "RW", 0, 6'b000001, 1, 1, 0);
         Receive_Width_Command_Timeout.configure(this, 8, 8, "RW", 0, 8'h40, 1, 1, 1);
         Transmit_Width_Command_Timeout.configure(this, 8, 0, "RW", 0, 8'hff, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_14_Packet_Control_Symbol_Capture_0_CSR_reg
   // 
   // Symbol Capture Register
   //--------------------------------------------------------------------

   class Port_14_Packet_Control_Symbol_Capture_0_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_14_Packet_Control_Symbol_Capture_0_CSR_reg)

      rand uvm_reg_field Capture0; 


      // Function: new
      // 
      function new(string name = "Port_14_Packet_Control_Symbol_Capture_0_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture0 = uvm_reg_field::type_id::create("Capture0");

         Capture0.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Error_Management_Hot_Swap_Extensions_Block_CAR_reg
   // 
   // Error_Management_Hot_Swap_Extensions_Block_CAR_Register
   //--------------------------------------------------------------------

   class Error_Management_Hot_Swap_Extensions_Block_CAR_reg extends uvm_reg;
      `uvm_object_utils(Error_Management_Hot_Swap_Extensions_Block_CAR_reg)

      uvm_reg_field Reserved; 
      uvm_reg_field Hot_Swap_Extensions_Not_Implemented; 
      uvm_reg_field Error_Management_Extensions_Not_Implemented; 


      // Function: new
      // 
      function new(string name = "Error_Management_Hot_Swap_Extensions_Block_CAR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Hot_Swap_Extensions_Not_Implemented = uvm_reg_field::type_id::create("Hot_Swap_Extensions_Not_Implemented");
         Error_Management_Extensions_Not_Implemented = uvm_reg_field::type_id::create("Error_Management_Extensions_Not_Implemented");

         Reserved.configure(this, 30, 2, "RO", 0, 30'b000000000000000000000000000000, 1, 0, 0);
         Hot_Swap_Extensions_Not_Implemented.configure(this, 1, 1, "RO", 0, 1'b0, 1, 0, 0);
         Error_Management_Extensions_Not_Implemented.configure(this, 1, 0, "RO", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_8_VC8_VC4_BW_Allocation_Register_reg
   // 
   // BW Allocation Register
   //--------------------------------------------------------------------

   class Port_8_VC8_VC4_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_8_VC8_VC4_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 


      // Function: new
      // 
      function new(string name = "Port_8_VC8_VC4_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");

         Bandwidth_Allocation.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_3_Timestamp_Synchronization_Command_CSR_reg
   // 
   // Timestamp_Synchronization_Command_CSR_Register
   //--------------------------------------------------------------------

   class Port_3_Timestamp_Synchronization_Command_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_3_Timestamp_Synchronization_Command_CSR_reg)

      rand uvm_reg_field Command; 
      uvm_reg_field Reserved_2; 
      rand uvm_reg_field Send_Timestamp; 
      uvm_reg_field Reserved_1; 
      rand uvm_reg_field Send_Zero_Timestamp; 
      uvm_reg_field Reserved; 


      // Function: new
      // 
      function new(string name = "Port_3_Timestamp_Synchronization_Command_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Command = uvm_reg_field::type_id::create("Command");
         Reserved_2 = uvm_reg_field::type_id::create("Reserved_2");
         Send_Timestamp = uvm_reg_field::type_id::create("Send_Timestamp");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         Send_Zero_Timestamp = uvm_reg_field::type_id::create("Send_Zero_Timestamp");
         Reserved = uvm_reg_field::type_id::create("Reserved");

         Command.configure(this, 3, 29, "RW", 0, 3'b000, 1, 1, 0);
         Reserved_2.configure(this, 1, 28, "RO", 0, 1'b0, 1, 0, 0);
         Send_Timestamp.configure(this, 1, 27, "RW", 0, 1'b0, 1, 1, 0);
         Reserved_1.configure(this, 3, 24, "RO", 0, 3'b000, 1, 0, 0);
         Send_Zero_Timestamp.configure(this, 1, 23, "RW", 0, 1'b0, 1, 1, 0);
         Reserved.configure(this, 23, 0, "RO", 0, 23'b00000000000000000000000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_9_VoQ_Control_Status_Register_reg
   // 
   // VoQ_Control_Status_Register
   //--------------------------------------------------------------------

   class Port_9_VoQ_Control_Status_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_9_VoQ_Control_Status_Register_reg)

      rand uvm_reg_field RX_Port_Group_Size; 
      rand uvm_reg_field TX_Port_Group_Size; 
      uvm_reg_field Reserved_1; 
      rand uvm_reg_field Port_Group_Size_6_Supported; 
      rand uvm_reg_field Port_Group_Size_5_Supported; 
      rand uvm_reg_field Port_Group_Size_4_Supported; 
      rand uvm_reg_field Port_Group_Size_3_Supported; 
      rand uvm_reg_field Port_Group_Size_2_Supported; 
      rand uvm_reg_field Port_Group_Size_1_Supported; 
      rand uvm_reg_field Port_Group_Size_0_Supported; 
      rand uvm_reg_field Enable_VoQ_Backpressure_Per_VC_Transmission; 
      rand uvm_reg_field Port_XOFF; 
      rand uvm_reg_field Enable_VoQ_Symbol_Participation; 
      rand uvm_reg_field Enable_VoQ_Symbol_Genreation; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field VoQ_Backpressure_Per_VC_Supported; 
      rand uvm_reg_field VoQ_Backpressure_Symbol_Reception_Supported; 
      rand uvm_reg_field VoQ_Backpressure_Symbol_Generation_Supported; 


      // Function: new
      // 
      function new(string name = "Port_9_VoQ_Control_Status_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         RX_Port_Group_Size = uvm_reg_field::type_id::create("RX_Port_Group_Size");
         TX_Port_Group_Size = uvm_reg_field::type_id::create("TX_Port_Group_Size");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         Port_Group_Size_6_Supported = uvm_reg_field::type_id::create("Port_Group_Size_6_Supported");
         Port_Group_Size_5_Supported = uvm_reg_field::type_id::create("Port_Group_Size_5_Supported");
         Port_Group_Size_4_Supported = uvm_reg_field::type_id::create("Port_Group_Size_4_Supported");
         Port_Group_Size_3_Supported = uvm_reg_field::type_id::create("Port_Group_Size_3_Supported");
         Port_Group_Size_2_Supported = uvm_reg_field::type_id::create("Port_Group_Size_2_Supported");
         Port_Group_Size_1_Supported = uvm_reg_field::type_id::create("Port_Group_Size_1_Supported");
         Port_Group_Size_0_Supported = uvm_reg_field::type_id::create("Port_Group_Size_0_Supported");
         Enable_VoQ_Backpressure_Per_VC_Transmission = uvm_reg_field::type_id::create("Enable_VoQ_Backpressure_Per_VC_Transmission");
         Port_XOFF = uvm_reg_field::type_id::create("Port_XOFF");
         Enable_VoQ_Symbol_Participation = uvm_reg_field::type_id::create("Enable_VoQ_Symbol_Participation");
         Enable_VoQ_Symbol_Genreation = uvm_reg_field::type_id::create("Enable_VoQ_Symbol_Genreation");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         VoQ_Backpressure_Per_VC_Supported = uvm_reg_field::type_id::create("VoQ_Backpressure_Per_VC_Supported");
         VoQ_Backpressure_Symbol_Reception_Supported = uvm_reg_field::type_id::create("VoQ_Backpressure_Symbol_Reception_Supported");
         VoQ_Backpressure_Symbol_Generation_Supported = uvm_reg_field::type_id::create("VoQ_Backpressure_Symbol_Generation_Supported");

         RX_Port_Group_Size.configure(this, 3, 29, "RW", 0, 3'b000, 1, 1, 0);
         TX_Port_Group_Size.configure(this, 3, 26, "RW", 0, 3'b000, 1, 1, 0);
         Reserved_1.configure(this, 7, 19, "RO", 0, 7'b0000000, 1, 0, 0);
         Port_Group_Size_6_Supported.configure(this, 1, 18, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_5_Supported.configure(this, 1, 17, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_4_Supported.configure(this, 1, 16, "RW", 0, 1'b1, 1, 1, 0);
         Port_Group_Size_3_Supported.configure(this, 1, 15, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_2_Supported.configure(this, 1, 14, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_1_Supported.configure(this, 1, 13, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_0_Supported.configure(this, 1, 12, "RW", 0, 1'b1, 1, 1, 0);
         Enable_VoQ_Backpressure_Per_VC_Transmission.configure(this, 1, 11, "RW", 0, 1'b0, 1, 1, 0);
         Port_XOFF.configure(this, 1, 10, "RW", 0, 1'b0, 1, 1, 0);
         Enable_VoQ_Symbol_Participation.configure(this, 1, 9, "RW", 0, 1'b0, 1, 1, 0);
         Enable_VoQ_Symbol_Genreation.configure(this, 1, 8, "RW", 0, 1'b0, 1, 1, 0);
         Reserved.configure(this, 5, 3, "RO", 0, 5'b00000, 1, 0, 0);
         VoQ_Backpressure_Per_VC_Supported.configure(this, 1, 2, "RW", 0, 1'b0, 1, 1, 0);
         VoQ_Backpressure_Symbol_Reception_Supported.configure(this, 1, 1, "RW", 0, 1'b0, 1, 1, 0);
         VoQ_Backpressure_Symbol_Generation_Supported.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_3_Error_Rate_Threshold_CSR_reg
   // 
   // Error Threshold Register
   //--------------------------------------------------------------------

   class Port_3_Error_Rate_Threshold_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_3_Error_Rate_Threshold_CSR_reg)

      uvm_reg_field Reserved; 
      rand uvm_reg_field Error_Rate_Degraded_Threshold_Trigger; 
      rand uvm_reg_field Error_Rate_Failed_Threshold_Trigger; 


      // Function: new
      // 
      function new(string name = "Port_3_Error_Rate_Threshold_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Error_Rate_Degraded_Threshold_Trigger = uvm_reg_field::type_id::create("Error_Rate_Degraded_Threshold_Trigger");
         Error_Rate_Failed_Threshold_Trigger = uvm_reg_field::type_id::create("Error_Rate_Failed_Threshold_Trigger");

         Reserved.configure(this, 16, 16, "RO", 0, 16'h0000, 1, 0, 1);
         Error_Rate_Degraded_Threshold_Trigger.configure(this, 8, 8, "RW", 0, 8'hff, 1, 1, 1);
         Error_Rate_Failed_Threshold_Trigger.configure(this, 8, 0, "RW", 0, 8'hff, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_0_Packet_Capture_2_CSR_reg
   // 
   // Packet Capture 2 Register
   //--------------------------------------------------------------------

   class Port_0_Packet_Capture_2_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_0_Packet_Capture_2_CSR_reg)

      rand uvm_reg_field Capture2; 


      // Function: new
      // 
      function new(string name = "Port_0_Packet_Capture_2_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture2 = uvm_reg_field::type_id::create("Capture2");

         Capture2.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_4_VoQ_Control_Status_Register_reg
   // 
   // VoQ_Control_Status_Register
   //--------------------------------------------------------------------

   class Port_4_VoQ_Control_Status_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_4_VoQ_Control_Status_Register_reg)

      rand uvm_reg_field RX_Port_Group_Size; 
      rand uvm_reg_field TX_Port_Group_Size; 
      uvm_reg_field Reserved_1; 
      rand uvm_reg_field Port_Group_Size_6_Supported; 
      rand uvm_reg_field Port_Group_Size_5_Supported; 
      rand uvm_reg_field Port_Group_Size_4_Supported; 
      rand uvm_reg_field Port_Group_Size_3_Supported; 
      rand uvm_reg_field Port_Group_Size_2_Supported; 
      rand uvm_reg_field Port_Group_Size_1_Supported; 
      rand uvm_reg_field Port_Group_Size_0_Supported; 
      rand uvm_reg_field Enable_VoQ_Backpressure_Per_VC_Transmission; 
      rand uvm_reg_field Port_XOFF; 
      rand uvm_reg_field Enable_VoQ_Symbol_Participation; 
      rand uvm_reg_field Enable_VoQ_Symbol_Genreation; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field VoQ_Backpressure_Per_VC_Supported; 
      rand uvm_reg_field VoQ_Backpressure_Symbol_Reception_Supported; 
      rand uvm_reg_field VoQ_Backpressure_Symbol_Generation_Supported; 


      // Function: new
      // 
      function new(string name = "Port_4_VoQ_Control_Status_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         RX_Port_Group_Size = uvm_reg_field::type_id::create("RX_Port_Group_Size");
         TX_Port_Group_Size = uvm_reg_field::type_id::create("TX_Port_Group_Size");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         Port_Group_Size_6_Supported = uvm_reg_field::type_id::create("Port_Group_Size_6_Supported");
         Port_Group_Size_5_Supported = uvm_reg_field::type_id::create("Port_Group_Size_5_Supported");
         Port_Group_Size_4_Supported = uvm_reg_field::type_id::create("Port_Group_Size_4_Supported");
         Port_Group_Size_3_Supported = uvm_reg_field::type_id::create("Port_Group_Size_3_Supported");
         Port_Group_Size_2_Supported = uvm_reg_field::type_id::create("Port_Group_Size_2_Supported");
         Port_Group_Size_1_Supported = uvm_reg_field::type_id::create("Port_Group_Size_1_Supported");
         Port_Group_Size_0_Supported = uvm_reg_field::type_id::create("Port_Group_Size_0_Supported");
         Enable_VoQ_Backpressure_Per_VC_Transmission = uvm_reg_field::type_id::create("Enable_VoQ_Backpressure_Per_VC_Transmission");
         Port_XOFF = uvm_reg_field::type_id::create("Port_XOFF");
         Enable_VoQ_Symbol_Participation = uvm_reg_field::type_id::create("Enable_VoQ_Symbol_Participation");
         Enable_VoQ_Symbol_Genreation = uvm_reg_field::type_id::create("Enable_VoQ_Symbol_Genreation");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         VoQ_Backpressure_Per_VC_Supported = uvm_reg_field::type_id::create("VoQ_Backpressure_Per_VC_Supported");
         VoQ_Backpressure_Symbol_Reception_Supported = uvm_reg_field::type_id::create("VoQ_Backpressure_Symbol_Reception_Supported");
         VoQ_Backpressure_Symbol_Generation_Supported = uvm_reg_field::type_id::create("VoQ_Backpressure_Symbol_Generation_Supported");

         RX_Port_Group_Size.configure(this, 3, 29, "RW", 0, 3'b000, 1, 1, 0);
         TX_Port_Group_Size.configure(this, 3, 26, "RW", 0, 3'b000, 1, 1, 0);
         Reserved_1.configure(this, 7, 19, "RO", 0, 7'b0000000, 1, 0, 0);
         Port_Group_Size_6_Supported.configure(this, 1, 18, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_5_Supported.configure(this, 1, 17, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_4_Supported.configure(this, 1, 16, "RW", 0, 1'b1, 1, 1, 0);
         Port_Group_Size_3_Supported.configure(this, 1, 15, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_2_Supported.configure(this, 1, 14, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_1_Supported.configure(this, 1, 13, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_0_Supported.configure(this, 1, 12, "RW", 0, 1'b1, 1, 1, 0);
         Enable_VoQ_Backpressure_Per_VC_Transmission.configure(this, 1, 11, "RW", 0, 1'b0, 1, 1, 0);
         Port_XOFF.configure(this, 1, 10, "RW", 0, 1'b0, 1, 1, 0);
         Enable_VoQ_Symbol_Participation.configure(this, 1, 9, "RW", 0, 1'b0, 1, 1, 0);
         Enable_VoQ_Symbol_Genreation.configure(this, 1, 8, "RW", 0, 1'b0, 1, 1, 0);
         Reserved.configure(this, 5, 3, "RO", 0, 5'b00000, 1, 0, 0);
         VoQ_Backpressure_Per_VC_Supported.configure(this, 1, 2, "RW", 0, 1'b0, 1, 1, 0);
         VoQ_Backpressure_Symbol_Reception_Supported.configure(this, 1, 1, "RW", 0, 1'b0, 1, 1, 0);
         VoQ_Backpressure_Symbol_Generation_Supported.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_8_Control_CSR_reg
   // 
   // Control Register
   //--------------------------------------------------------------------

   class Port_8_Control_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_8_Control_CSR_reg)

      uvm_reg_field Port_Type; 
      rand uvm_reg_field Port_Lockout; 
      rand uvm_reg_field Drop_Packet_Enable; 
      rand uvm_reg_field Stop_on_Port_Failed_encountered_Enable; 
      rand uvm_reg_field Implementation_defined; 
      uvm_reg_field Extended_Port_Width_Support; 
      rand uvm_reg_field Extended_Port_Width_Override; 
      rand uvm_reg_field Flow_Arbitration_Participant; 
      rand uvm_reg_field Enumeration_Boundary; 
      rand uvm_reg_field Flow_Control_Participant; 
      rand uvm_reg_field Multicast_event_Participant; 
      rand uvm_reg_field Error_Checking_Disable; 
      rand uvm_reg_field Input_Port_Enable; 
      rand uvm_reg_field Output_Port_Enable; 
      rand uvm_reg_field Port_Disable; 
      uvm_reg_field Port_Width_Override; 
      rand uvm_reg_field Initialized_Port_Width; 
      uvm_reg_field Port_Width_Support; 


      // Function: new
      // 
      function new(string name = "Port_8_Control_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Port_Type = uvm_reg_field::type_id::create("Port_Type");
         Port_Lockout = uvm_reg_field::type_id::create("Port_Lockout");
         Drop_Packet_Enable = uvm_reg_field::type_id::create("Drop_Packet_Enable");
         Stop_on_Port_Failed_encountered_Enable = uvm_reg_field::type_id::create("Stop_on_Port_Failed_encountered_Enable");
         Implementation_defined = uvm_reg_field::type_id::create("Implementation_defined");
         Extended_Port_Width_Support = uvm_reg_field::type_id::create("Extended_Port_Width_Support");
         Extended_Port_Width_Override = uvm_reg_field::type_id::create("Extended_Port_Width_Override");
         Flow_Arbitration_Participant = uvm_reg_field::type_id::create("Flow_Arbitration_Participant");
         Enumeration_Boundary = uvm_reg_field::type_id::create("Enumeration_Boundary");
         Flow_Control_Participant = uvm_reg_field::type_id::create("Flow_Control_Participant");
         Multicast_event_Participant = uvm_reg_field::type_id::create("Multicast_event_Participant");
         Error_Checking_Disable = uvm_reg_field::type_id::create("Error_Checking_Disable");
         Input_Port_Enable = uvm_reg_field::type_id::create("Input_Port_Enable");
         Output_Port_Enable = uvm_reg_field::type_id::create("Output_Port_Enable");
         Port_Disable = uvm_reg_field::type_id::create("Port_Disable");
         Port_Width_Override = uvm_reg_field::type_id::create("Port_Width_Override");
         Initialized_Port_Width = uvm_reg_field::type_id::create("Initialized_Port_Width");
         Port_Width_Support = uvm_reg_field::type_id::create("Port_Width_Support");

         Port_Type.configure(this, 1, 31, "RO", 0, 1'b0, 1, 0, 0);
         Port_Lockout.configure(this, 1, 30, "RW", 0, 1'b0, 1, 1, 0);
         Drop_Packet_Enable.configure(this, 1, 29, "RW", 0, 1'b0, 1, 1, 0);
         Stop_on_Port_Failed_encountered_Enable.configure(this, 1, 28, "RW", 0, 1'b0, 1, 1, 0);
         Implementation_defined.configure(this, 8, 20, "RW", 0, 8'h00, 1, 1, 0);
         Extended_Port_Width_Support.configure(this, 2, 18, "RO", 0, 2'b00, 1, 0, 0);
         Extended_Port_Width_Override.configure(this, 2, 16, "RW", 0, 2'b00, 1, 1, 0);
         Flow_Arbitration_Participant.configure(this, 1, 15, "RW", 0, 1'b0, 1, 1, 0);
         Enumeration_Boundary.configure(this, 1, 14, "RW", 0, 1'b0, 1, 1, 0);
         Flow_Control_Participant.configure(this, 1, 13, "RW", 0, 1'b0, 1, 1, 0);
         Multicast_event_Participant.configure(this, 1, 12, "RW", 0, 1'b0, 1, 1, 0);
         Error_Checking_Disable.configure(this, 1, 11, "RW", 0, 1'b0, 1, 1, 0);
         Input_Port_Enable.configure(this, 1, 10, "RW", 0, 1'b0, 1, 1, 0);
         Output_Port_Enable.configure(this, 1, 9, "RW", 0, 1'b0, 1, 1, 0);
         Port_Disable.configure(this, 1, 8, "RW", 0, 1'b0, 1, 1, 0);
         Port_Width_Override.configure(this, 3, 5, "RO", 0, 3'b000, 1, 0, 0);
         Initialized_Port_Width.configure(this, 3, 2, "RW", 0, 3'b000, 1, 1, 0);
         Port_Width_Support.configure(this, 2, 0, "RO", 0, 2'b00, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_1_Link_Timers_Control_3_CSR_reg
   // 
   // Link_Timers_Control_3_Register
   //--------------------------------------------------------------------

   class Port_1_Link_Timers_Control_3_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_1_Link_Timers_Control_3_CSR_reg)

      rand uvm_reg_field Keep_alive_Transmission_Interval; 
      rand uvm_reg_field Keep_alive_Transmission_Period; 
      rand uvm_reg_field Receive_Width_Command_Timeout; 
      rand uvm_reg_field Transmit_Width_Command_Timeout; 


      // Function: new
      // 
      function new(string name = "Port_1_Link_Timers_Control_3_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Keep_alive_Transmission_Interval = uvm_reg_field::type_id::create("Keep_alive_Transmission_Interval");
         Keep_alive_Transmission_Period = uvm_reg_field::type_id::create("Keep_alive_Transmission_Period");
         Receive_Width_Command_Timeout = uvm_reg_field::type_id::create("Receive_Width_Command_Timeout");
         Transmit_Width_Command_Timeout = uvm_reg_field::type_id::create("Transmit_Width_Command_Timeout");

         Keep_alive_Transmission_Interval.configure(this, 10, 22, "RW", 0, 10'b1111111111, 1, 1, 0);
         Keep_alive_Transmission_Period.configure(this, 6, 16, "RW", 0, 6'b000001, 1, 1, 0);
         Receive_Width_Command_Timeout.configure(this, 8, 8, "RW", 0, 8'h40, 1, 1, 1);
         Transmit_Width_Command_Timeout.configure(this, 8, 0, "RW", 0, 8'hff, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_15_Packet_Control_Symbol_Capture_0_CSR_reg
   // 
   // Symbol Capture Register
   //--------------------------------------------------------------------

   class Port_15_Packet_Control_Symbol_Capture_0_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_15_Packet_Control_Symbol_Capture_0_CSR_reg)

      rand uvm_reg_field Capture0; 


      // Function: new
      // 
      function new(string name = "Port_15_Packet_Control_Symbol_Capture_0_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture0 = uvm_reg_field::type_id::create("Capture0");

         Capture0.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_11_Timestamp_1_LSW_CSR_reg
   // 
   // Timestamp_1_LSW_Register
   //--------------------------------------------------------------------

   class Port_11_Timestamp_1_LSW_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_11_Timestamp_1_LSW_CSR_reg)

      uvm_reg_field LSW_Bits; 


      // Function: new
      // 
      function new(string name = "Port_11_Timestamp_1_LSW_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         LSW_Bits = uvm_reg_field::type_id::create("LSW_Bits");

         LSW_Bits.configure(this, 32, 0, "RO", 0, 32'h00000000, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_6_Timestamp_0_LSW_CSR_reg
   // 
   // Timestamp_0_LSW_Register
   //--------------------------------------------------------------------

   class Port_6_Timestamp_0_LSW_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_6_Timestamp_0_LSW_CSR_reg)

      uvm_reg_field LSW_Bits; 


      // Function: new
      // 
      function new(string name = "Port_6_Timestamp_0_LSW_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         LSW_Bits = uvm_reg_field::type_id::create("LSW_Bits");

         LSW_Bits.configure(this, 32, 0, "RO", 0, 32'h00000000, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_11_Timestamp_Offset_CSR_reg
   // 
   // Timestamp_Offset_CSR_Register
   //--------------------------------------------------------------------

   class Port_11_Timestamp_Offset_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_11_Timestamp_Offset_CSR_reg)

      uvm_reg_field Reserved; 
      rand uvm_reg_field Offset; 


      // Function: new
      // 
      function new(string name = "Port_11_Timestamp_Offset_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Offset = uvm_reg_field::type_id::create("Offset");

         Reserved.configure(this, 16, 16, "RO", 0, 16'h0000, 1, 0, 1);
         Offset.configure(this, 16, 0, "RW", 0, 16'h0000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_14_Timestamp_Synchronization_Status_CSR_reg
   // 
   // Timestamp_Synchronization_Status_CSR_Register
   //--------------------------------------------------------------------

   class Port_14_Timestamp_Synchronization_Status_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_14_Timestamp_Synchronization_Status_CSR_reg)

      uvm_reg_field Delay; 
      uvm_reg_field Reserved; 
      uvm_reg_field Response_Valid; 


      // Function: new
      // 
      function new(string name = "Port_14_Timestamp_Synchronization_Status_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Delay = uvm_reg_field::type_id::create("Delay");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Response_Valid = uvm_reg_field::type_id::create("Response_Valid");

         Delay.configure(this, 10, 22, "RO", 0, 10'b0000000000, 1, 0, 0);
         Reserved.configure(this, 21, 1, "RO", 0, 21'b000000000000000000000, 1, 0, 0);
         Response_Valid.configure(this, 1, 0, "RO", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_1_Timestamp_Synchronization_Command_CSR_reg
   // 
   // Timestamp_Synchronization_Command_CSR_Register
   //--------------------------------------------------------------------

   class Port_1_Timestamp_Synchronization_Command_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_1_Timestamp_Synchronization_Command_CSR_reg)

      rand uvm_reg_field Command; 
      uvm_reg_field Reserved_2; 
      rand uvm_reg_field Send_Timestamp; 
      uvm_reg_field Reserved_1; 
      rand uvm_reg_field Send_Zero_Timestamp; 
      uvm_reg_field Reserved; 


      // Function: new
      // 
      function new(string name = "Port_1_Timestamp_Synchronization_Command_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Command = uvm_reg_field::type_id::create("Command");
         Reserved_2 = uvm_reg_field::type_id::create("Reserved_2");
         Send_Timestamp = uvm_reg_field::type_id::create("Send_Timestamp");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         Send_Zero_Timestamp = uvm_reg_field::type_id::create("Send_Zero_Timestamp");
         Reserved = uvm_reg_field::type_id::create("Reserved");

         Command.configure(this, 3, 29, "RW", 0, 3'b000, 1, 1, 0);
         Reserved_2.configure(this, 1, 28, "RO", 0, 1'b0, 1, 0, 0);
         Send_Timestamp.configure(this, 1, 27, "RW", 0, 1'b0, 1, 1, 0);
         Reserved_1.configure(this, 3, 24, "RO", 0, 3'b000, 1, 0, 0);
         Send_Zero_Timestamp.configure(this, 1, 23, "RW", 0, 1'b0, 1, 1, 0);
         Reserved.configure(this, 23, 0, "RO", 0, 23'b00000000000000000000000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_0_VoQ_Control_Status_Register_reg
   // 
   // VoQ_Control_Status_Register
   //--------------------------------------------------------------------

   class Port_0_VoQ_Control_Status_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_0_VoQ_Control_Status_Register_reg)

      rand uvm_reg_field RX_Port_Group_Size; 
      rand uvm_reg_field TX_Port_Group_Size; 
      uvm_reg_field Reserved_1; 
      rand uvm_reg_field Port_Group_Size_6_Supported; 
      rand uvm_reg_field Port_Group_Size_5_Supported; 
      rand uvm_reg_field Port_Group_Size_4_Supported; 
      rand uvm_reg_field Port_Group_Size_3_Supported; 
      rand uvm_reg_field Port_Group_Size_2_Supported; 
      rand uvm_reg_field Port_Group_Size_1_Supported; 
      rand uvm_reg_field Port_Group_Size_0_Supported; 
      rand uvm_reg_field Enable_VoQ_Backpressure_Per_VC_Transmission; 
      rand uvm_reg_field Port_XOFF; 
      rand uvm_reg_field Enable_VoQ_Symbol_Participation; 
      rand uvm_reg_field Enable_VoQ_Symbol_Genreation; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field VoQ_Backpressure_Per_VC_Supported; 
      rand uvm_reg_field VoQ_Backpressure_Symbol_Reception_Supported; 
      rand uvm_reg_field VoQ_Backpressure_Symbol_Generation_Supported; 


      // Function: new
      // 
      function new(string name = "Port_0_VoQ_Control_Status_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         RX_Port_Group_Size = uvm_reg_field::type_id::create("RX_Port_Group_Size");
         TX_Port_Group_Size = uvm_reg_field::type_id::create("TX_Port_Group_Size");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         Port_Group_Size_6_Supported = uvm_reg_field::type_id::create("Port_Group_Size_6_Supported");
         Port_Group_Size_5_Supported = uvm_reg_field::type_id::create("Port_Group_Size_5_Supported");
         Port_Group_Size_4_Supported = uvm_reg_field::type_id::create("Port_Group_Size_4_Supported");
         Port_Group_Size_3_Supported = uvm_reg_field::type_id::create("Port_Group_Size_3_Supported");
         Port_Group_Size_2_Supported = uvm_reg_field::type_id::create("Port_Group_Size_2_Supported");
         Port_Group_Size_1_Supported = uvm_reg_field::type_id::create("Port_Group_Size_1_Supported");
         Port_Group_Size_0_Supported = uvm_reg_field::type_id::create("Port_Group_Size_0_Supported");
         Enable_VoQ_Backpressure_Per_VC_Transmission = uvm_reg_field::type_id::create("Enable_VoQ_Backpressure_Per_VC_Transmission");
         Port_XOFF = uvm_reg_field::type_id::create("Port_XOFF");
         Enable_VoQ_Symbol_Participation = uvm_reg_field::type_id::create("Enable_VoQ_Symbol_Participation");
         Enable_VoQ_Symbol_Genreation = uvm_reg_field::type_id::create("Enable_VoQ_Symbol_Genreation");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         VoQ_Backpressure_Per_VC_Supported = uvm_reg_field::type_id::create("VoQ_Backpressure_Per_VC_Supported");
         VoQ_Backpressure_Symbol_Reception_Supported = uvm_reg_field::type_id::create("VoQ_Backpressure_Symbol_Reception_Supported");
         VoQ_Backpressure_Symbol_Generation_Supported = uvm_reg_field::type_id::create("VoQ_Backpressure_Symbol_Generation_Supported");

         RX_Port_Group_Size.configure(this, 3, 29, "RW", 0, 3'b000, 1, 1, 0);
         TX_Port_Group_Size.configure(this, 3, 26, "RW", 0, 3'b000, 1, 1, 0);
         Reserved_1.configure(this, 7, 19, "RO", 0, 7'b0000000, 1, 0, 0);
         Port_Group_Size_6_Supported.configure(this, 1, 18, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_5_Supported.configure(this, 1, 17, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_4_Supported.configure(this, 1, 16, "RW", 0, 1'b1, 1, 1, 0);
         Port_Group_Size_3_Supported.configure(this, 1, 15, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_2_Supported.configure(this, 1, 14, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_1_Supported.configure(this, 1, 13, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_0_Supported.configure(this, 1, 12, "RW", 0, 1'b1, 1, 1, 0);
         Enable_VoQ_Backpressure_Per_VC_Transmission.configure(this, 1, 11, "RW", 0, 1'b0, 1, 1, 0);
         Port_XOFF.configure(this, 1, 10, "RW", 0, 1'b0, 1, 1, 0);
         Enable_VoQ_Symbol_Participation.configure(this, 1, 9, "RW", 0, 1'b0, 1, 1, 0);
         Enable_VoQ_Symbol_Genreation.configure(this, 1, 8, "RW", 0, 1'b0, 1, 1, 0);
         Reserved.configure(this, 5, 3, "RO", 0, 5'b00000, 1, 0, 0);
         VoQ_Backpressure_Per_VC_Supported.configure(this, 1, 2, "RW", 0, 1'b0, 1, 1, 0);
         VoQ_Backpressure_Symbol_Reception_Supported.configure(this, 1, 1, "RW", 0, 1'b0, 1, 1, 0);
         VoQ_Backpressure_Symbol_Generation_Supported.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_10_Timestamp_1_MSW_CSR_reg
   // 
   // Timestamp_1_MSW_Register
   //--------------------------------------------------------------------

   class Port_10_Timestamp_1_MSW_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_10_Timestamp_1_MSW_CSR_reg)

      uvm_reg_field MSW_Bits; 


      // Function: new
      // 
      function new(string name = "Port_10_Timestamp_1_MSW_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         MSW_Bits = uvm_reg_field::type_id::create("MSW_Bits");

         MSW_Bits.configure(this, 32, 0, "RO", 0, 32'h00000000, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Lane_5_Status_2_CSR_reg
   // 
   // Status 2 Register
   //--------------------------------------------------------------------

   class Lane_5_Status_2_CSR_reg extends uvm_reg;
      `uvm_object_utils(Lane_5_Status_2_CSR_reg)

      uvm_reg_field Reserved; 
      uvm_reg_field LP_Change_Receiver_Width_Command_Negative_Acknowlege; 
      uvm_reg_field LP_Change_Receiver_Width_Command_Acknowlege; 
      uvm_reg_field LP_Change_Receiver_Width_Command; 
      uvm_reg_field LP_Lane_Trained; 
      uvm_reg_field LP_Receive_Lane_Ready; 
      uvm_reg_field LP_Receive_Lanes_Ready; 
      uvm_reg_field LP_Receive_Width; 
      uvm_reg_field LP_Transmit_1x_Mode; 
      uvm_reg_field LP_Port_Intialized; 
      uvm_reg_field LP_Asymmetric_mode_Enabled; 
      uvm_reg_field LP_Retraining_Enabled; 
      uvm_reg_field LP_Remort_Training_Support; 
      uvm_reg_field LP_Lane_Number; 
      uvm_reg_field LP_Port_Number; 


      // Function: new
      // 
      function new(string name = "Lane_5_Status_2_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         LP_Change_Receiver_Width_Command_Negative_Acknowlege = uvm_reg_field::type_id::create("LP_Change_Receiver_Width_Command_Negative_Acknowlege");
         LP_Change_Receiver_Width_Command_Acknowlege = uvm_reg_field::type_id::create("LP_Change_Receiver_Width_Command_Acknowlege");
         LP_Change_Receiver_Width_Command = uvm_reg_field::type_id::create("LP_Change_Receiver_Width_Command");
         LP_Lane_Trained = uvm_reg_field::type_id::create("LP_Lane_Trained");
         LP_Receive_Lane_Ready = uvm_reg_field::type_id::create("LP_Receive_Lane_Ready");
         LP_Receive_Lanes_Ready = uvm_reg_field::type_id::create("LP_Receive_Lanes_Ready");
         LP_Receive_Width = uvm_reg_field::type_id::create("LP_Receive_Width");
         LP_Transmit_1x_Mode = uvm_reg_field::type_id::create("LP_Transmit_1x_Mode");
         LP_Port_Intialized = uvm_reg_field::type_id::create("LP_Port_Intialized");
         LP_Asymmetric_mode_Enabled = uvm_reg_field::type_id::create("LP_Asymmetric_mode_Enabled");
         LP_Retraining_Enabled = uvm_reg_field::type_id::create("LP_Retraining_Enabled");
         LP_Remort_Training_Support = uvm_reg_field::type_id::create("LP_Remort_Training_Support");
         LP_Lane_Number = uvm_reg_field::type_id::create("LP_Lane_Number");
         LP_Port_Number = uvm_reg_field::type_id::create("LP_Port_Number");

         Reserved.configure(this, 2, 30, "RO", 0, 2'b00, 1, 0, 0);
         LP_Change_Receiver_Width_Command_Negative_Acknowlege.configure(this, 1, 29, "RO", 0, 1'b0, 1, 0, 0);
         LP_Change_Receiver_Width_Command_Acknowlege.configure(this, 1, 28, "RO", 0, 1'b0, 1, 0, 0);
         LP_Change_Receiver_Width_Command.configure(this, 3, 25, "RO", 0, 3'b000, 1, 0, 0);
         LP_Lane_Trained.configure(this, 1, 24, "RO", 0, 1'b0, 1, 0, 0);
         LP_Receive_Lane_Ready.configure(this, 1, 23, "RO", 0, 1'b0, 1, 0, 0);
         LP_Receive_Lanes_Ready.configure(this, 3, 20, "RO", 0, 3'b000, 1, 0, 0);
         LP_Receive_Width.configure(this, 3, 17, "RO", 0, 3'b000, 1, 0, 0);
         LP_Transmit_1x_Mode.configure(this, 1, 16, "RO", 0, 1'b0, 1, 0, 0);
         LP_Port_Intialized.configure(this, 1, 15, "RO", 0, 1'b0, 1, 0, 0);
         LP_Asymmetric_mode_Enabled.configure(this, 1, 14, "RO", 0, 1'b0, 1, 0, 0);
         LP_Retraining_Enabled.configure(this, 1, 13, "RO", 0, 1'b0, 1, 0, 0);
         LP_Remort_Training_Support.configure(this, 1, 12, "RO", 0, 1'b0, 1, 0, 0);
         LP_Lane_Number.configure(this, 4, 8, "RO", 0, 4'h0, 1, 0, 0);
         LP_Port_Number.configure(this, 8, 0, "RO", 0, 8'h00, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_2_Timestamp_Offset_CSR_reg
   // 
   // Timestamp_Offset_CSR_Register
   //--------------------------------------------------------------------

   class Port_2_Timestamp_Offset_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_2_Timestamp_Offset_CSR_reg)

      uvm_reg_field Reserved; 
      rand uvm_reg_field Offset; 


      // Function: new
      // 
      function new(string name = "Port_2_Timestamp_Offset_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Offset = uvm_reg_field::type_id::create("Offset");

         Reserved.configure(this, 16, 16, "RO", 0, 16'h0000, 1, 0, 1);
         Offset.configure(this, 16, 0, "RW", 0, 16'h0000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_12_Link_Uninit_Discard_Timer_CSR_reg
   // 
   // Link_Uninit_Discard_Timer_CSR_Register
   //--------------------------------------------------------------------

   class Port_12_Link_Uninit_Discard_Timer_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_12_Link_Uninit_Discard_Timer_CSR_reg)

      uvm_reg_field Reserved; 
      rand uvm_reg_field Link_Uninit_Timeout; 


      // Function: new
      // 
      function new(string name = "Port_12_Link_Uninit_Discard_Timer_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Link_Uninit_Timeout = uvm_reg_field::type_id::create("Link_Uninit_Timeout");

         Reserved.configure(this, 8, 24, "RO", 0, 8'h00, 1, 0, 1);
         Link_Uninit_Timeout.configure(this, 24, 0, "RW", 0, 24'h000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Lane_8_Status_0_CSR_reg
   // 
   // Status 0 Register
   //--------------------------------------------------------------------

   class Lane_8_Status_0_CSR_reg extends uvm_reg;
      `uvm_object_utils(Lane_8_Status_0_CSR_reg)

      uvm_reg_field Status2_7_CSRs_implemented; 
      uvm_reg_field Status1_CSR_implemented; 
      uvm_reg_field Reserved; 
      uvm_reg_field Rcvr_trained_state_change; 
      uvm_reg_field Lane_sync_state_change; 
      uvm_reg_field lane_8B_10B_decoding_errors; 
      uvm_reg_field Receiver_lane_ready; 
      uvm_reg_field Receiver_lane_sync; 
      uvm_reg_field Receiver_trained; 
      uvm_reg_field Receiver_input_inverted; 
      uvm_reg_field Receiver_type; 
      uvm_reg_field Transmitter_mode; 
      uvm_reg_field Transmitter_type; 
      uvm_reg_field Lane_Number; 
      uvm_reg_field Port_Number; 


      // Function: new
      // 
      function new(string name = "Lane_8_Status_0_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Status2_7_CSRs_implemented = uvm_reg_field::type_id::create("Status2_7_CSRs_implemented");
         Status1_CSR_implemented = uvm_reg_field::type_id::create("Status1_CSR_implemented");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Rcvr_trained_state_change = uvm_reg_field::type_id::create("Rcvr_trained_state_change");
         Lane_sync_state_change = uvm_reg_field::type_id::create("Lane_sync_state_change");
         lane_8B_10B_decoding_errors = uvm_reg_field::type_id::create("lane_8B_10B_decoding_errors");
         Receiver_lane_ready = uvm_reg_field::type_id::create("Receiver_lane_ready");
         Receiver_lane_sync = uvm_reg_field::type_id::create("Receiver_lane_sync");
         Receiver_trained = uvm_reg_field::type_id::create("Receiver_trained");
         Receiver_input_inverted = uvm_reg_field::type_id::create("Receiver_input_inverted");
         Receiver_type = uvm_reg_field::type_id::create("Receiver_type");
         Transmitter_mode = uvm_reg_field::type_id::create("Transmitter_mode");
         Transmitter_type = uvm_reg_field::type_id::create("Transmitter_type");
         Lane_Number = uvm_reg_field::type_id::create("Lane_Number");
         Port_Number = uvm_reg_field::type_id::create("Port_Number");

         Status2_7_CSRs_implemented.configure(this, 3, 29, "RO", 0, 3'b000, 1, 0, 0);
         Status1_CSR_implemented.configure(this, 1, 28, "RO", 0, 1'b0, 1, 0, 0);
         Reserved.configure(this, 2, 26, "RO", 0, 2'b00, 1, 0, 0);
         Rcvr_trained_state_change.configure(this, 1, 25, "RO", 0, 1'b0, 1, 0, 0);
         Lane_sync_state_change.configure(this, 1, 24, "RO", 0, 1'b0, 1, 0, 0);
         lane_8B_10B_decoding_errors.configure(this, 4, 20, "RO", 0, 4'h0, 1, 0, 0);
         Receiver_lane_ready.configure(this, 1, 19, "RO", 0, 1'b0, 1, 0, 0);
         Receiver_lane_sync.configure(this, 1, 18, "RO", 0, 1'b0, 1, 0, 0);
         Receiver_trained.configure(this, 1, 17, "RO", 0, 1'b0, 1, 0, 0);
         Receiver_input_inverted.configure(this, 1, 16, "RO", 0, 1'b0, 1, 0, 0);
         Receiver_type.configure(this, 2, 14, "RO", 0, 2'b00, 1, 0, 0);
         Transmitter_mode.configure(this, 1, 13, "RO", 0, 1'b0, 1, 0, 0);
         Transmitter_type.configure(this, 1, 12, "RO", 0, 1'b0, 1, 0, 0);
         Lane_Number.configure(this, 4, 8, "RO", 0, 4'h0, 1, 0, 0);
         Port_Number.configure(this, 8, 0, "RO", 0, 8'h00, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Standard_Route_Configuration_Destination_ID_Select_CSR_reg
   // 
   // Destination ID select Register
   //--------------------------------------------------------------------

   class Standard_Route_Configuration_Destination_ID_Select_CSR_reg extends uvm_reg;
      `uvm_object_utils(Standard_Route_Configuration_Destination_ID_Select_CSR_reg)

      rand uvm_reg_field Config_destID; 
      rand uvm_reg_field Config_destID_msb; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Ext_config_en; 


      // Function: new
      // 
      function new(string name = "Standard_Route_Configuration_Destination_ID_Select_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Config_destID = uvm_reg_field::type_id::create("Config_destID");
         Config_destID_msb = uvm_reg_field::type_id::create("Config_destID_msb");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Ext_config_en = uvm_reg_field::type_id::create("Ext_config_en");

         Config_destID.configure(this, 8, 24, "RW", 0, 8'h00, 1, 1, 1);
         Config_destID_msb.configure(this, 8, 16, "RW", 0, 8'h00, 1, 1, 1);
         Reserved.configure(this, 15, 1, "RO", 0, 15'b000000000000000, 1, 0, 0);
         Ext_config_en.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Lane_3_Status_2_CSR_reg
   // 
   // Status 2 Register
   //--------------------------------------------------------------------

   class Lane_3_Status_2_CSR_reg extends uvm_reg;
      `uvm_object_utils(Lane_3_Status_2_CSR_reg)

      uvm_reg_field Reserved; 
      uvm_reg_field LP_Change_Receiver_Width_Command_Negative_Acknowlege; 
      uvm_reg_field LP_Change_Receiver_Width_Command_Acknowlege; 
      uvm_reg_field LP_Change_Receiver_Width_Command; 
      uvm_reg_field LP_Lane_Trained; 
      uvm_reg_field LP_Receive_Lane_Ready; 
      uvm_reg_field LP_Receive_Lanes_Ready; 
      uvm_reg_field LP_Receive_Width; 
      uvm_reg_field LP_Transmit_1x_Mode; 
      uvm_reg_field LP_Port_Intialized; 
      uvm_reg_field LP_Asymmetric_mode_Enabled; 
      uvm_reg_field LP_Retraining_Enabled; 
      uvm_reg_field LP_Remort_Training_Support; 
      uvm_reg_field LP_Lane_Number; 
      uvm_reg_field LP_Port_Number; 


      // Function: new
      // 
      function new(string name = "Lane_3_Status_2_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         LP_Change_Receiver_Width_Command_Negative_Acknowlege = uvm_reg_field::type_id::create("LP_Change_Receiver_Width_Command_Negative_Acknowlege");
         LP_Change_Receiver_Width_Command_Acknowlege = uvm_reg_field::type_id::create("LP_Change_Receiver_Width_Command_Acknowlege");
         LP_Change_Receiver_Width_Command = uvm_reg_field::type_id::create("LP_Change_Receiver_Width_Command");
         LP_Lane_Trained = uvm_reg_field::type_id::create("LP_Lane_Trained");
         LP_Receive_Lane_Ready = uvm_reg_field::type_id::create("LP_Receive_Lane_Ready");
         LP_Receive_Lanes_Ready = uvm_reg_field::type_id::create("LP_Receive_Lanes_Ready");
         LP_Receive_Width = uvm_reg_field::type_id::create("LP_Receive_Width");
         LP_Transmit_1x_Mode = uvm_reg_field::type_id::create("LP_Transmit_1x_Mode");
         LP_Port_Intialized = uvm_reg_field::type_id::create("LP_Port_Intialized");
         LP_Asymmetric_mode_Enabled = uvm_reg_field::type_id::create("LP_Asymmetric_mode_Enabled");
         LP_Retraining_Enabled = uvm_reg_field::type_id::create("LP_Retraining_Enabled");
         LP_Remort_Training_Support = uvm_reg_field::type_id::create("LP_Remort_Training_Support");
         LP_Lane_Number = uvm_reg_field::type_id::create("LP_Lane_Number");
         LP_Port_Number = uvm_reg_field::type_id::create("LP_Port_Number");

         Reserved.configure(this, 2, 30, "RO", 0, 2'b00, 1, 0, 0);
         LP_Change_Receiver_Width_Command_Negative_Acknowlege.configure(this, 1, 29, "RO", 0, 1'b0, 1, 0, 0);
         LP_Change_Receiver_Width_Command_Acknowlege.configure(this, 1, 28, "RO", 0, 1'b0, 1, 0, 0);
         LP_Change_Receiver_Width_Command.configure(this, 3, 25, "RO", 0, 3'b000, 1, 0, 0);
         LP_Lane_Trained.configure(this, 1, 24, "RO", 0, 1'b0, 1, 0, 0);
         LP_Receive_Lane_Ready.configure(this, 1, 23, "RO", 0, 1'b0, 1, 0, 0);
         LP_Receive_Lanes_Ready.configure(this, 3, 20, "RO", 0, 3'b000, 1, 0, 0);
         LP_Receive_Width.configure(this, 3, 17, "RO", 0, 3'b000, 1, 0, 0);
         LP_Transmit_1x_Mode.configure(this, 1, 16, "RO", 0, 1'b0, 1, 0, 0);
         LP_Port_Intialized.configure(this, 1, 15, "RO", 0, 1'b0, 1, 0, 0);
         LP_Asymmetric_mode_Enabled.configure(this, 1, 14, "RO", 0, 1'b0, 1, 0, 0);
         LP_Retraining_Enabled.configure(this, 1, 13, "RO", 0, 1'b0, 1, 0, 0);
         LP_Remort_Training_Support.configure(this, 1, 12, "RO", 0, 1'b0, 1, 0, 0);
         LP_Lane_Number.configure(this, 4, 8, "RO", 0, 4'h0, 1, 0, 0);
         LP_Port_Number.configure(this, 8, 0, "RO", 0, 8'h00, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_6_VC5_VC1_BW_Allocation_Register_reg
   // 
   // BW Allocation Register
   //--------------------------------------------------------------------

   class Port_6_VC5_VC1_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_6_VC5_VC1_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 


      // Function: new
      // 
      function new(string name = "Port_6_VC5_VC1_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");

         Bandwidth_Allocation.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_8_Timestamp_Offset_CSR_reg
   // 
   // Timestamp_Offset_CSR_Register
   //--------------------------------------------------------------------

   class Port_8_Timestamp_Offset_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_8_Timestamp_Offset_CSR_reg)

      uvm_reg_field Reserved; 
      rand uvm_reg_field Offset; 


      // Function: new
      // 
      function new(string name = "Port_8_Timestamp_Offset_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Offset = uvm_reg_field::type_id::create("Offset");

         Reserved.configure(this, 16, 16, "RO", 0, 16'h0000, 1, 0, 1);
         Offset.configure(this, 16, 0, "RW", 0, 16'h0000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_3_Auto_Update_Counter_CSR_reg
   // 
   // Auto_Update_Counter_CSR_Register
   //--------------------------------------------------------------------

   class Port_3_Auto_Update_Counter_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_3_Auto_Update_Counter_CSR_reg)

      rand uvm_reg_field Update_Period; 


      // Function: new
      // 
      function new(string name = "Port_3_Auto_Update_Counter_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Update_Period = uvm_reg_field::type_id::create("Update_Period");

         Update_Period.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_N_Error_and_Status_CSR_reg
   // 
   // Error and status Register
   //--------------------------------------------------------------------

   class Port_N_Error_and_Status_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_N_Error_and_Status_CSR_reg)
      bit brc3;

      uvm_reg_field Port_Uninitialized; 
      uvm_reg_field Port_OK; 
      uvm_reg_field Port_Error; 
      uvm_reg_field Port_Unavailable; 
      uvm_reg_field Port_write_Pending; 
      rand uvm_reg_field Port_write_Disabled; 
      uvm_reg_field Reserved_3; 
      uvm_reg_field Input_Error_stopped; 
      uvm_reg_field Input_Error_encountered; 
      uvm_reg_field Input_Retry_stopped; 
      uvm_reg_field Reserved_2; 
      uvm_reg_field Output_Error_stopped; 
      uvm_reg_field Output_Error_encountered; 
      uvm_reg_field Output_Retry_stopped; 
      uvm_reg_field Output_Retried; 
      uvm_reg_field Output_Retry_encountered; 
      uvm_reg_field Reserved_1; 
      uvm_reg_field Output_Degraded_encountered; 
      uvm_reg_field Output_Failed_encountered; 
      uvm_reg_field Output_Packet_dropped; 
      uvm_reg_field Flow_Control_Mode; 
      uvm_reg_field rsvd; 
      rand uvm_reg_field Idle_Sequence; 
      rand uvm_reg_field Idle_Sequence2_Enable; 
      rand uvm_reg_field Idle_Sequence2_Support; 


      // Function: new
      // 
      function new(string name = "Port_N_Error_and_Status_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Port_Uninitialized = uvm_reg_field::type_id::create("Port_Uninitialized");
         Port_OK = uvm_reg_field::type_id::create("Port_OK");
         Port_Error = uvm_reg_field::type_id::create("Port_Error");
         Port_Unavailable = uvm_reg_field::type_id::create("Port_Unavailable");
         Port_write_Pending = uvm_reg_field::type_id::create("Port_write_Pending");
         Port_write_Disabled = uvm_reg_field::type_id::create("Port_write_Disabled");
         Reserved_3 = uvm_reg_field::type_id::create("Reserved_3");
         Input_Error_stopped = uvm_reg_field::type_id::create("Input_Error_stopped");
         Input_Error_encountered = uvm_reg_field::type_id::create("Input_Error_encountered");
         Input_Retry_stopped = uvm_reg_field::type_id::create("Input_Retry_stopped");
         Reserved_2 = uvm_reg_field::type_id::create("Reserved_2");
         Output_Error_stopped = uvm_reg_field::type_id::create("Output_Error_stopped");
         Output_Error_encountered = uvm_reg_field::type_id::create("Output_Error_encountered");
         Output_Retry_stopped = uvm_reg_field::type_id::create("Output_Retry_stopped");
         Output_Retried = uvm_reg_field::type_id::create("Output_Retried");
         Output_Retry_encountered = uvm_reg_field::type_id::create("Output_Retry_encountered");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         Output_Degraded_encountered = uvm_reg_field::type_id::create("Output_Degraded_encountered");
         Output_Failed_encountered = uvm_reg_field::type_id::create("Output_Failed_encountered");
         Output_Packet_dropped = uvm_reg_field::type_id::create("Output_Packet_dropped");
         Flow_Control_Mode = uvm_reg_field::type_id::create("Flow_Control_Mode");
         rsvd = uvm_reg_field::type_id::create("rsvd");
         Idle_Sequence = uvm_reg_field::type_id::create("Idle_Sequence");
         Idle_Sequence2_Enable = uvm_reg_field::type_id::create("Idle_Sequence2_Enable");
         Idle_Sequence2_Support = uvm_reg_field::type_id::create("Idle_Sequence2_Support");

         Port_Uninitialized.configure(this, 1, 31, "RO", 0, 1'b1, 1, 0, 0);
         Port_OK.configure(this, 1, 30, "RO", 0, 1'b0, 1, 0, 0);
         Port_Error.configure(this, 1, 29, "W1C", 0, 1'b0, 1, 0, 0);
         Port_Unavailable.configure(this, 1, 28, "RO", 0, 1'b0, 1, 0, 0);
         Port_write_Pending.configure(this, 1, 27, "W1C", 0, 1'b0, 1, 0, 0);
         Port_write_Disabled.configure(this, 1, 26, "RW", 0, 1'b0, 1, 1, 0);
         Reserved_3.configure(this, 2, 24, "RO", 0, 2'b00, 1, 0, 0);
         Input_Error_stopped.configure(this, 1, 23, "RO", 0, 1'b0, 1, 0, 0);
         Input_Error_encountered.configure(this, 1, 22, "W1C", 0, 1'b0, 1, 0, 0);
         Input_Retry_stopped.configure(this, 1, 21, "RO", 0, 1'b0, 1, 0, 0);
         Reserved_2.configure(this, 5, 16, "RO", 0, 5'b00000, 1, 0, 0);
         Output_Error_stopped.configure(this, 1, 15, "RO", 0, 1'b0, 1, 0, 0);
         Output_Error_encountered.configure(this, 1, 14, "W1C", 0, 1'b0, 1, 0, 0);
         Output_Retry_stopped.configure(this, 1, 13, "RO", 0, 1'b0, 1, 0, 0);
         Output_Retried.configure(this, 1, 12, "RO", 0, 1'b0, 1, 0, 0);
         Output_Retry_encountered.configure(this, 1, 11, "W1C", 0, 1'b0, 1, 0, 0);
         Reserved_1.configure(this, 3, 8, "RO", 0, 3'b000, 1, 0, 0);
         Output_Degraded_encountered.configure(this, 1, 7, "W1C", 0, 1'b0, 1, 0, 0);
         Output_Failed_encountered.configure(this, 1, 6, "W1C", 0, 1'b0, 1, 0, 0);
         Output_Packet_dropped.configure(this, 1, 5, "W1C", 0, 1'b0, 1, 0, 0);
         Flow_Control_Mode.configure(this, 1, 4, "RO", 0, 1'b0, 1, 0, 0);
         if(brc3 == 1)
         Idle_Sequence.configure(this, 2, 2, "RW", 0, 2'b00, 1, 1, 0);
         else
         begin
         rsvd.configure(this, 1, 3, "RO", 0, 1'b0, 1, 0, 0);
         Idle_Sequence.configure(this, 1, 2, "RW", 0, 1'b0, 1, 1, 0);
         end
         Idle_Sequence2_Enable.configure(this, 1, 1, "RW", 0, 1'b0, 1, 1, 0);
         Idle_Sequence2_Support.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass


   //--------------------------------------------------------------------
   // Class: Port_14_Packet_Capture_1_CSR_reg
   // 
   // Packet Capture 1 Register
   //--------------------------------------------------------------------

   class Port_14_Packet_Capture_1_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_14_Packet_Capture_1_CSR_reg)

      rand uvm_reg_field Capture1; 


      // Function: new
      // 
      function new(string name = "Port_14_Packet_Capture_1_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture1 = uvm_reg_field::type_id::create("Capture1");

         Capture1.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_11_VoQ_Control_Status_Register_reg
   // 
   // VoQ_Control_Status_Register
   //--------------------------------------------------------------------

   class Port_11_VoQ_Control_Status_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_11_VoQ_Control_Status_Register_reg)

      rand uvm_reg_field RX_Port_Group_Size; 
      rand uvm_reg_field TX_Port_Group_Size; 
      uvm_reg_field Reserved_1; 
      rand uvm_reg_field Port_Group_Size_6_Supported; 
      rand uvm_reg_field Port_Group_Size_5_Supported; 
      rand uvm_reg_field Port_Group_Size_4_Supported; 
      rand uvm_reg_field Port_Group_Size_3_Supported; 
      rand uvm_reg_field Port_Group_Size_2_Supported; 
      rand uvm_reg_field Port_Group_Size_1_Supported; 
      rand uvm_reg_field Port_Group_Size_0_Supported; 
      rand uvm_reg_field Enable_VoQ_Backpressure_Per_VC_Transmission; 
      rand uvm_reg_field Port_XOFF; 
      rand uvm_reg_field Enable_VoQ_Symbol_Participation; 
      rand uvm_reg_field Enable_VoQ_Symbol_Genreation; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field VoQ_Backpressure_Per_VC_Supported; 
      rand uvm_reg_field VoQ_Backpressure_Symbol_Reception_Supported; 
      rand uvm_reg_field VoQ_Backpressure_Symbol_Generation_Supported; 


      // Function: new
      // 
      function new(string name = "Port_11_VoQ_Control_Status_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         RX_Port_Group_Size = uvm_reg_field::type_id::create("RX_Port_Group_Size");
         TX_Port_Group_Size = uvm_reg_field::type_id::create("TX_Port_Group_Size");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         Port_Group_Size_6_Supported = uvm_reg_field::type_id::create("Port_Group_Size_6_Supported");
         Port_Group_Size_5_Supported = uvm_reg_field::type_id::create("Port_Group_Size_5_Supported");
         Port_Group_Size_4_Supported = uvm_reg_field::type_id::create("Port_Group_Size_4_Supported");
         Port_Group_Size_3_Supported = uvm_reg_field::type_id::create("Port_Group_Size_3_Supported");
         Port_Group_Size_2_Supported = uvm_reg_field::type_id::create("Port_Group_Size_2_Supported");
         Port_Group_Size_1_Supported = uvm_reg_field::type_id::create("Port_Group_Size_1_Supported");
         Port_Group_Size_0_Supported = uvm_reg_field::type_id::create("Port_Group_Size_0_Supported");
         Enable_VoQ_Backpressure_Per_VC_Transmission = uvm_reg_field::type_id::create("Enable_VoQ_Backpressure_Per_VC_Transmission");
         Port_XOFF = uvm_reg_field::type_id::create("Port_XOFF");
         Enable_VoQ_Symbol_Participation = uvm_reg_field::type_id::create("Enable_VoQ_Symbol_Participation");
         Enable_VoQ_Symbol_Genreation = uvm_reg_field::type_id::create("Enable_VoQ_Symbol_Genreation");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         VoQ_Backpressure_Per_VC_Supported = uvm_reg_field::type_id::create("VoQ_Backpressure_Per_VC_Supported");
         VoQ_Backpressure_Symbol_Reception_Supported = uvm_reg_field::type_id::create("VoQ_Backpressure_Symbol_Reception_Supported");
         VoQ_Backpressure_Symbol_Generation_Supported = uvm_reg_field::type_id::create("VoQ_Backpressure_Symbol_Generation_Supported");

         RX_Port_Group_Size.configure(this, 3, 29, "RW", 0, 3'b000, 1, 1, 0);
         TX_Port_Group_Size.configure(this, 3, 26, "RW", 0, 3'b000, 1, 1, 0);
         Reserved_1.configure(this, 7, 19, "RO", 0, 7'b0000000, 1, 0, 0);
         Port_Group_Size_6_Supported.configure(this, 1, 18, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_5_Supported.configure(this, 1, 17, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_4_Supported.configure(this, 1, 16, "RW", 0, 1'b1, 1, 1, 0);
         Port_Group_Size_3_Supported.configure(this, 1, 15, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_2_Supported.configure(this, 1, 14, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_1_Supported.configure(this, 1, 13, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_0_Supported.configure(this, 1, 12, "RW", 0, 1'b1, 1, 1, 0);
         Enable_VoQ_Backpressure_Per_VC_Transmission.configure(this, 1, 11, "RW", 0, 1'b0, 1, 1, 0);
         Port_XOFF.configure(this, 1, 10, "RW", 0, 1'b0, 1, 1, 0);
         Enable_VoQ_Symbol_Participation.configure(this, 1, 9, "RW", 0, 1'b0, 1, 1, 0);
         Enable_VoQ_Symbol_Genreation.configure(this, 1, 8, "RW", 0, 1'b0, 1, 1, 0);
         Reserved.configure(this, 5, 3, "RO", 0, 5'b00000, 1, 0, 0);
         VoQ_Backpressure_Per_VC_Supported.configure(this, 1, 2, "RW", 0, 1'b0, 1, 1, 0);
         VoQ_Backpressure_Symbol_Reception_Supported.configure(this, 1, 1, "RW", 0, 1'b0, 1, 1, 0);
         VoQ_Backpressure_Symbol_Generation_Supported.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_0_Packet_Control_Symbol_Capture_0_CSR_reg
   // 
   // Symbol Capture Register
   //--------------------------------------------------------------------

   class Port_0_Packet_Control_Symbol_Capture_0_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_0_Packet_Control_Symbol_Capture_0_CSR_reg)

      rand uvm_reg_field Capture0; 


      // Function: new
      // 
      function new(string name = "Port_0_Packet_Control_Symbol_Capture_0_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture0 = uvm_reg_field::type_id::create("Capture0");

         Capture0.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass

   //--------------------------------------------------------------------
   // Class: Port_9_Timestamp_Generator_Synchronization_CSR_reg
   // 
   // Timestamp_Generator_Synchronization_Register
   //--------------------------------------------------------------------

   class Port_9_Timestamp_Generator_Synchronization_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_9_Timestamp_Generator_Synchronization_CSR_reg)

      rand uvm_reg_field Asymmetry; 
      rand uvm_reg_field TX_Has_Lowwer_Latency; 
      uvm_reg_field Reserved_1; 
      rand uvm_reg_field Port_Opening_Mode; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Auto_Update_Link_Partner_Timestamp_Generators; 
      rand uvm_reg_field Disable_Clock_Compensation_Sequence; 
      rand uvm_reg_field Accept_Timestamps; 


      // Function: new
      // 
      function new(string name = "Port_9_Timestamp_Generator_Synchronization_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Asymmetry = uvm_reg_field::type_id::create("Asymmetry");
         TX_Has_Lowwer_Latency = uvm_reg_field::type_id::create("TX_Has_Lowwer_Latency");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         Port_Opening_Mode = uvm_reg_field::type_id::create("Port_Opening_Mode");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Auto_Update_Link_Partner_Timestamp_Generators = uvm_reg_field::type_id::create("Auto_Update_Link_Partner_Timestamp_Generators");
         Disable_Clock_Compensation_Sequence = uvm_reg_field::type_id::create("Disable_Clock_Compensation_Sequence");
         Accept_Timestamps = uvm_reg_field::type_id::create("Accept_Timestamps");

         Asymmetry.configure(this, 12, 20, "RW", 0, 12'h000, 1, 1, 0);
         TX_Has_Lowwer_Latency.configure(this, 1, 19, "RW", 0, 1'b0, 1, 1, 0);
         Reserved_1.configure(this, 11, 8, "RO", 0, 11'b00000000000, 1, 0, 0);
         Port_Opening_Mode.configure(this, 2, 6, "RW", 0, 2'b00, 1, 1, 0);
         Reserved.configure(this, 3, 3, "RO", 0, 3'b000, 1, 0, 0);
         Auto_Update_Link_Partner_Timestamp_Generators.configure(this, 1, 2, "RW", 0, 1'b0, 1, 1, 0);
         Disable_Clock_Compensation_Sequence.configure(this, 1, 1, "RW", 0, 1'b0, 1, 1, 0);
         Accept_Timestamps.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_3_Timestamp_Offset_CSR_reg
   // 
   // Timestamp_Offset_CSR_Register
   //--------------------------------------------------------------------

   class Port_3_Timestamp_Offset_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_3_Timestamp_Offset_CSR_reg)

      uvm_reg_field Reserved; 
      rand uvm_reg_field Offset; 


      // Function: new
      // 
      function new(string name = "Port_3_Timestamp_Offset_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Offset = uvm_reg_field::type_id::create("Offset");

         Reserved.configure(this, 16, 16, "RO", 0, 16'h0000, 1, 0, 1);
         Offset.configure(this, 16, 0, "RW", 0, 16'h0000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_8_Initialization_Status_CSR_reg
   // 
   // Initialization_Status_Register
   //--------------------------------------------------------------------

   class Port_8_Initialization_Status_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_8_Initialization_Status_CSR_reg)

      uvm_reg_field Reserved_3; 
      uvm_reg_field Transmitted_Status_Control_Symbols; 
      uvm_reg_field Reserved_2; 
      uvm_reg_field Received_Status_Control_Symbols; 
      uvm_reg_field Port_Initialization_State_Machine; 
      uvm_reg_field Reserved_1; 
      uvm_reg_field x1_x2_Mode_Detection; 
      uvm_reg_field Reserved; 
      uvm_reg_field Lane_Alignment; 


      // Function: new
      // 
      function new(string name = "Port_8_Initialization_Status_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved_3 = uvm_reg_field::type_id::create("Reserved_3");
         Transmitted_Status_Control_Symbols = uvm_reg_field::type_id::create("Transmitted_Status_Control_Symbols");
         Reserved_2 = uvm_reg_field::type_id::create("Reserved_2");
         Received_Status_Control_Symbols = uvm_reg_field::type_id::create("Received_Status_Control_Symbols");
         Port_Initialization_State_Machine = uvm_reg_field::type_id::create("Port_Initialization_State_Machine");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         x1_x2_Mode_Detection = uvm_reg_field::type_id::create("x1_x2_Mode_Detection");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Lane_Alignment = uvm_reg_field::type_id::create("Lane_Alignment");

         Reserved_3.configure(this, 4, 28, "RO", 0, 4'h0, 1, 0, 0);
         Transmitted_Status_Control_Symbols.configure(this, 7, 21, "RO", 0, 7'b0000000, 1, 0, 0);
         Reserved_2.configure(this, 1, 20, "RO", 0, 1'b0, 1, 0, 0);
         Received_Status_Control_Symbols.configure(this, 4, 16, "RO", 0, 4'h0, 1, 0, 0);
         Port_Initialization_State_Machine.configure(this, 5, 11, "RO", 0, 5'b00000, 1, 0, 0);
         Reserved_1.configure(this, 1, 10, "RO", 0, 1'b0, 1, 0, 0);
         x1_x2_Mode_Detection.configure(this, 4, 6, "RO", 0, 4'h0, 1, 0, 0);
         Reserved.configure(this, 1, 5, "RO", 0, 1'b0, 1, 0, 0);
         Lane_Alignment.configure(this, 5, 0, "RO", 0, 5'b00000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_3_Link_Timers_Control_2_CSR_reg
   // 
   // Link_Timers_Control_2_Register
   //--------------------------------------------------------------------

   class Port_3_Link_Timers_Control_2_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_3_Link_Timers_Control_2_CSR_reg)

      uvm_reg_field Reserved; 
      rand uvm_reg_field Recovery_Timer; 
      rand uvm_reg_field Discovery_Completion_Timer; 
      rand uvm_reg_field Retraining_Completion_Timer; 


      // Function: new
      // 
      function new(string name = "Port_3_Link_Timers_Control_2_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Recovery_Timer = uvm_reg_field::type_id::create("Recovery_Timer");
         Discovery_Completion_Timer = uvm_reg_field::type_id::create("Discovery_Completion_Timer");
         Retraining_Completion_Timer = uvm_reg_field::type_id::create("Retraining_Completion_Timer");

         Reserved.configure(this, 8, 24, "RO", 0, 8'h00, 1, 0, 1);
         Recovery_Timer.configure(this, 8, 16, "RW", 0, 8'hff, 1, 1, 1);
         Discovery_Completion_Timer.configure(this, 8, 8, "RW", 0, 8'h00, 1, 1, 1);
         Retraining_Completion_Timer.configure(this, 8, 0, "RW", 0, 8'hfe, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_9_Timestamp_0_LSW_CSR_reg
   // 
   // Timestamp_0_LSW_Register
   //--------------------------------------------------------------------

   class Port_9_Timestamp_0_LSW_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_9_Timestamp_0_LSW_CSR_reg)

      uvm_reg_field LSW_Bits; 


      // Function: new
      // 
      function new(string name = "Port_9_Timestamp_0_LSW_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         LSW_Bits = uvm_reg_field::type_id::create("LSW_Bits");

         LSW_Bits.configure(this, 32, 0, "RO", 0, 32'h00000000, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Logical_Transport_Layer_Control_Capture_CSR_reg
   // 
   // Control Register
   //--------------------------------------------------------------------

   class Logical_Transport_Layer_Control_Capture_CSR_reg extends uvm_reg;
      `uvm_object_utils(Logical_Transport_Layer_Control_Capture_CSR_reg)

      rand uvm_reg_field Implementation_specific; 
      rand uvm_reg_field msg_info; 
      rand uvm_reg_field ttype; 
      rand uvm_reg_field ftype; 


      // Function: new
      // 
      function new(string name = "Logical_Transport_Layer_Control_Capture_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Implementation_specific = uvm_reg_field::type_id::create("Implementation_specific");
         msg_info = uvm_reg_field::type_id::create("msg_info");
         ttype = uvm_reg_field::type_id::create("ttype");
         ftype = uvm_reg_field::type_id::create("ftype");

         Implementation_specific.configure(this, 16, 16, "RO", 0, 16'h0000, 1, 0, 0);
         msg_info.configure(this, 8, 8, "RW", 0, 8'h00, 1, 1, 1);
         ttype.configure(this, 4, 4, "RW", 0, 4'h0, 1, 1, 0);
         ftype.configure(this, 4, 0, "RW", 0, 4'h0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_10_Error_Rate_CSR_reg
   // 
   // Error Rate Register
   //--------------------------------------------------------------------

   class Port_10_Error_Rate_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_10_Error_Rate_CSR_reg)

      rand uvm_reg_field Error_Rate_Counter; 
      rand uvm_reg_field Peak_Error_Rate; 
      rand uvm_reg_field Error_Rate_Recovery; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Error_Rate_Bias; 


      // Function: new
      // 
      function new(string name = "Port_10_Error_Rate_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Error_Rate_Counter = uvm_reg_field::type_id::create("Error_Rate_Counter");
         Peak_Error_Rate = uvm_reg_field::type_id::create("Peak_Error_Rate");
         Error_Rate_Recovery = uvm_reg_field::type_id::create("Error_Rate_Recovery");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Error_Rate_Bias = uvm_reg_field::type_id::create("Error_Rate_Bias");

         Error_Rate_Counter.configure(this, 8, 24, "RW", 0, 8'h00, 1, 1, 1);
         Peak_Error_Rate.configure(this, 8, 16, "RW", 0, 8'h00, 1, 1, 1);
         Error_Rate_Recovery.configure(this, 2, 14, "RW", 0, 2'b00, 1, 1, 0);
         Reserved.configure(this, 6, 8, "RO", 0, 6'b000000, 1, 0, 0);
         Error_Rate_Bias.configure(this, 8, 0, "RW", 0, 8'h80, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_5_VC5_VC1_BW_Allocation_Register_reg
   // 
   // BW Allocation Register
   //--------------------------------------------------------------------

   class Port_5_VC5_VC1_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_5_VC5_VC1_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 


      // Function: new
      // 
      function new(string name = "Port_5_VC5_VC1_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");

         Bandwidth_Allocation.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_1_Timestamp_0_LSW_CSR_reg
   // 
   // Timestamp_0_LSW_Register
   //--------------------------------------------------------------------

   class Port_1_Timestamp_0_LSW_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_1_Timestamp_0_LSW_CSR_reg)

      uvm_reg_field LSW_Bits; 


      // Function: new
      // 
      function new(string name = "Port_1_Timestamp_0_LSW_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         LSW_Bits = uvm_reg_field::type_id::create("LSW_Bits");

         LSW_Bits.configure(this, 32, 0, "RO", 0, 32'h00000000, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_10_VC0_BW_Allocation_Register_reg
   // 
   // BW Register
   //--------------------------------------------------------------------

   class Port_10_VC0_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_10_VC0_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 
      rand uvm_reg_field Bandwidth_Reservation_Precision; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field VC0_BW_Res_Enable; 
      uvm_reg_field VC0_Bandwidth_Reservation_Capable; 


      // Function: new
      // 
      function new(string name = "Port_10_VC0_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");
         Bandwidth_Reservation_Precision = uvm_reg_field::type_id::create("Bandwidth_Reservation_Precision");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         VC0_BW_Res_Enable = uvm_reg_field::type_id::create("VC0_BW_Res_Enable");
         VC0_Bandwidth_Reservation_Capable = uvm_reg_field::type_id::create("VC0_Bandwidth_Reservation_Capable");

         Bandwidth_Allocation.configure(this, 16, 16, "RW", 0, 16'h0000, 1, 1, 1);
         Bandwidth_Reservation_Precision.configure(this, 8, 8, "RW", 0, 8'h00, 1, 1, 1);
         Reserved.configure(this, 6, 2, "RO", 0, 6'b000000, 1, 0, 0);
         VC0_BW_Res_Enable.configure(this, 1, 1, "RW", 0, 1'b0, 1, 1, 0);
         VC0_Bandwidth_Reservation_Capable.configure(this, 1, 0, "RO", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_13_Error_Rate_CSR_reg
   // 
   // Error Rate Register
   //--------------------------------------------------------------------

   class Port_13_Error_Rate_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_13_Error_Rate_CSR_reg)

      rand uvm_reg_field Error_Rate_Counter; 
      rand uvm_reg_field Peak_Error_Rate; 
      rand uvm_reg_field Error_Rate_Recovery; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Error_Rate_Bias; 


      // Function: new
      // 
      function new(string name = "Port_13_Error_Rate_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Error_Rate_Counter = uvm_reg_field::type_id::create("Error_Rate_Counter");
         Peak_Error_Rate = uvm_reg_field::type_id::create("Peak_Error_Rate");
         Error_Rate_Recovery = uvm_reg_field::type_id::create("Error_Rate_Recovery");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Error_Rate_Bias = uvm_reg_field::type_id::create("Error_Rate_Bias");

         Error_Rate_Counter.configure(this, 8, 24, "RW", 0, 8'h00, 1, 1, 1);
         Peak_Error_Rate.configure(this, 8, 16, "RW", 0, 8'h00, 1, 1, 1);
         Error_Rate_Recovery.configure(this, 2, 14, "RW", 0, 2'b00, 1, 1, 0);
         Reserved.configure(this, 6, 8, "RO", 0, 6'b000000, 1, 0, 0);
         Error_Rate_Bias.configure(this, 8, 0, "RW", 0, 8'h80, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_0_Packet_Capture_4_CSR_reg
   // 
   // Packet Capture 4 Register
   //--------------------------------------------------------------------

   class Port_0_Packet_Capture_4_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_0_Packet_Capture_4_CSR_reg)

      rand uvm_reg_field Capture4; 


      // Function: new
      // 
      function new(string name = "Port_0_Packet_Capture_4_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture4 = uvm_reg_field::type_id::create("Capture4");

         Capture4.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_7_Inbound_ackID_CSR_reg
   // 
   // Inbound_Register
   //--------------------------------------------------------------------

   class Port_7_Inbound_ackID_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_7_Inbound_ackID_CSR_reg)

      rand uvm_reg_field Inbound_ackID;  
      uvm_reg_field Reserved; 


      // Function: new
      // 
      function new(string name = "Port_7_Inbound_ackID_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Inbound_ackID = uvm_reg_field::type_id::create("Inbound_ackID");
         Reserved = uvm_reg_field::type_id::create("Reserved");

       Inbound_ackID.configure(this, 12, 20, "RW", 0, 12'h000, 1, 1, 0);
         Reserved.configure(this, 20, 0, "RO", 0, 20'h00000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_10_Error_Rate_Threshold_CSR_reg
   // 
   // Error Threshold Register
   //--------------------------------------------------------------------

   class Port_10_Error_Rate_Threshold_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_10_Error_Rate_Threshold_CSR_reg)

      uvm_reg_field Reserved; 
      rand uvm_reg_field Error_Rate_Degraded_Threshold_Trigger; 
      rand uvm_reg_field Error_Rate_Failed_Threshold_Trigger; 


      // Function: new
      // 
      function new(string name = "Port_10_Error_Rate_Threshold_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Error_Rate_Degraded_Threshold_Trigger = uvm_reg_field::type_id::create("Error_Rate_Degraded_Threshold_Trigger");
         Error_Rate_Failed_Threshold_Trigger = uvm_reg_field::type_id::create("Error_Rate_Failed_Threshold_Trigger");

         Reserved.configure(this, 16, 16, "RO", 0, 16'h0000, 1, 0, 1);
         Error_Rate_Degraded_Threshold_Trigger.configure(this, 8, 8, "RW", 0, 8'hff, 1, 1, 1);
         Error_Rate_Failed_Threshold_Trigger.configure(this, 8, 0, "RW", 0, 8'hff, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_15_Inbound_ackID_CSR_reg
   // 
   // Inbound_Register
   //--------------------------------------------------------------------

   class Port_15_Inbound_ackID_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_15_Inbound_ackID_CSR_reg)

      rand uvm_reg_field Inbound_ackID;  
      uvm_reg_field Reserved; 


      // Function: new
      // 
      function new(string name = "Port_15_Inbound_ackID_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Inbound_ackID = uvm_reg_field::type_id::create("Inbound_ackID");
         Reserved = uvm_reg_field::type_id::create("Reserved");

       Inbound_ackID.configure(this, 12, 20, "RW", 0, 12'h000, 1, 1, 0);
         Reserved.configure(this, 20, 0, "RO", 0, 20'h00000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_3_VC_Control_and_Status_Register_reg
   // 
   // CSR Register
   //--------------------------------------------------------------------

   class Port_3_VC_Control_and_Status_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_3_VC_Control_and_Status_Register_reg)

      rand uvm_reg_field VCs_Enable; 
      uvm_reg_field VCs_Support; 
      rand uvm_reg_field CT_Mode; 
      rand uvm_reg_field VC_Refresh_Interval; 


      // Function: new
      // 
      function new(string name = "Port_3_VC_Control_and_Status_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         VCs_Enable = uvm_reg_field::type_id::create("VCs_Enable");
         VCs_Support = uvm_reg_field::type_id::create("VCs_Support");
         CT_Mode = uvm_reg_field::type_id::create("CT_Mode");
         VC_Refresh_Interval = uvm_reg_field::type_id::create("VC_Refresh_Interval");

         VCs_Enable.configure(this, 8, 24, "RW", 0, 8'h00, 1, 1, 1);
         VCs_Support.configure(this, 8, 16, "RO", 0, 8'h00, 1, 0, 1);
         CT_Mode.configure(this, 8, 8, "RW", 0, 8'h00, 1, 1, 1);
         VC_Refresh_Interval.configure(this, 8, 0, "RW", 0, 8'h00, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_10_Control_CSR_reg
   // 
   // Control Register
   //--------------------------------------------------------------------

   class Port_10_Control_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_10_Control_CSR_reg)

      uvm_reg_field Port_Type; 
      rand uvm_reg_field Port_Lockout; 
      rand uvm_reg_field Drop_Packet_Enable; 
      rand uvm_reg_field Stop_on_Port_Failed_encountered_Enable; 
      rand uvm_reg_field Implementation_defined; 
      uvm_reg_field Extended_Port_Width_Support; 
      rand uvm_reg_field Extended_Port_Width_Override; 
      rand uvm_reg_field Flow_Arbitration_Participant; 
      rand uvm_reg_field Enumeration_Boundary; 
      rand uvm_reg_field Flow_Control_Participant; 
      rand uvm_reg_field Multicast_event_Participant; 
      rand uvm_reg_field Error_Checking_Disable; 
      rand uvm_reg_field Input_Port_Enable; 
      rand uvm_reg_field Output_Port_Enable; 
      rand uvm_reg_field Port_Disable; 
      uvm_reg_field Port_Width_Override; 
      rand uvm_reg_field Initialized_Port_Width; 
      uvm_reg_field Port_Width_Support; 


      // Function: new
      // 
      function new(string name = "Port_10_Control_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Port_Type = uvm_reg_field::type_id::create("Port_Type");
         Port_Lockout = uvm_reg_field::type_id::create("Port_Lockout");
         Drop_Packet_Enable = uvm_reg_field::type_id::create("Drop_Packet_Enable");
         Stop_on_Port_Failed_encountered_Enable = uvm_reg_field::type_id::create("Stop_on_Port_Failed_encountered_Enable");
         Implementation_defined = uvm_reg_field::type_id::create("Implementation_defined");
         Extended_Port_Width_Support = uvm_reg_field::type_id::create("Extended_Port_Width_Support");
         Extended_Port_Width_Override = uvm_reg_field::type_id::create("Extended_Port_Width_Override");
         Flow_Arbitration_Participant = uvm_reg_field::type_id::create("Flow_Arbitration_Participant");
         Enumeration_Boundary = uvm_reg_field::type_id::create("Enumeration_Boundary");
         Flow_Control_Participant = uvm_reg_field::type_id::create("Flow_Control_Participant");
         Multicast_event_Participant = uvm_reg_field::type_id::create("Multicast_event_Participant");
         Error_Checking_Disable = uvm_reg_field::type_id::create("Error_Checking_Disable");
         Input_Port_Enable = uvm_reg_field::type_id::create("Input_Port_Enable");
         Output_Port_Enable = uvm_reg_field::type_id::create("Output_Port_Enable");
         Port_Disable = uvm_reg_field::type_id::create("Port_Disable");
         Port_Width_Override = uvm_reg_field::type_id::create("Port_Width_Override");
         Initialized_Port_Width = uvm_reg_field::type_id::create("Initialized_Port_Width");
         Port_Width_Support = uvm_reg_field::type_id::create("Port_Width_Support");

         Port_Type.configure(this, 1, 31, "RO", 0, 1'b0, 1, 0, 0);
         Port_Lockout.configure(this, 1, 30, "RW", 0, 1'b0, 1, 1, 0);
         Drop_Packet_Enable.configure(this, 1, 29, "RW", 0, 1'b0, 1, 1, 0);
         Stop_on_Port_Failed_encountered_Enable.configure(this, 1, 28, "RW", 0, 1'b0, 1, 1, 0);
         Implementation_defined.configure(this, 8, 20, "RW", 0, 8'h00, 1, 1, 0);
         Extended_Port_Width_Support.configure(this, 2, 18, "RO", 0, 2'b00, 1, 0, 0);
         Extended_Port_Width_Override.configure(this, 2, 16, "RW", 0, 2'b00, 1, 1, 0);
         Flow_Arbitration_Participant.configure(this, 1, 15, "RW", 0, 1'b0, 1, 1, 0);
         Enumeration_Boundary.configure(this, 1, 14, "RW", 0, 1'b0, 1, 1, 0);
         Flow_Control_Participant.configure(this, 1, 13, "RW", 0, 1'b0, 1, 1, 0);
         Multicast_event_Participant.configure(this, 1, 12, "RW", 0, 1'b0, 1, 1, 0);
         Error_Checking_Disable.configure(this, 1, 11, "RW", 0, 1'b0, 1, 1, 0);
         Input_Port_Enable.configure(this, 1, 10, "RW", 0, 1'b0, 1, 1, 0);
         Output_Port_Enable.configure(this, 1, 9, "RW", 0, 1'b0, 1, 1, 0);
         Port_Disable.configure(this, 1, 8, "RW", 0, 1'b0, 1, 1, 0);
         Port_Width_Override.configure(this, 3, 5, "RO", 0, 3'b000, 1, 0, 0);
         Initialized_Port_Width.configure(this, 3, 2, "RW", 0, 3'b000, 1, 1, 0);
         Port_Width_Support.configure(this, 2, 0, "RO", 0, 2'b00, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_6_Timestamp_0_MSW_CSR_reg
   // 
   // Timestamp_0_MSW_Register
   //--------------------------------------------------------------------

   class Port_6_Timestamp_0_MSW_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_6_Timestamp_0_MSW_CSR_reg)

      uvm_reg_field MSW_Bits; 


      // Function: new
      // 
      function new(string name = "Port_6_Timestamp_0_MSW_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         MSW_Bits = uvm_reg_field::type_id::create("MSW_Bits");

         MSW_Bits.configure(this, 32, 0, "RO", 0, 32'h00000000, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_11_Error_Rate_CSR_reg
   // 
   // Error Rate Register
   //--------------------------------------------------------------------

   class Port_11_Error_Rate_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_11_Error_Rate_CSR_reg)

      rand uvm_reg_field Error_Rate_Counter; 
      rand uvm_reg_field Peak_Error_Rate; 
      rand uvm_reg_field Error_Rate_Recovery; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Error_Rate_Bias; 


      // Function: new
      // 
      function new(string name = "Port_11_Error_Rate_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Error_Rate_Counter = uvm_reg_field::type_id::create("Error_Rate_Counter");
         Peak_Error_Rate = uvm_reg_field::type_id::create("Peak_Error_Rate");
         Error_Rate_Recovery = uvm_reg_field::type_id::create("Error_Rate_Recovery");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Error_Rate_Bias = uvm_reg_field::type_id::create("Error_Rate_Bias");

         Error_Rate_Counter.configure(this, 8, 24, "RW", 0, 8'h00, 1, 1, 1);
         Peak_Error_Rate.configure(this, 8, 16, "RW", 0, 8'h00, 1, 1, 1);
         Error_Rate_Recovery.configure(this, 2, 14, "RW", 0, 2'b00, 1, 1, 0);
         Reserved.configure(this, 6, 8, "RO", 0, 6'b000000, 1, 0, 0);
         Error_Rate_Bias.configure(this, 8, 0, "RW", 0, 8'h80, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_13_Packet_Control_Symbol_Capture_0_CSR_reg
   // 
   // Symbol Capture Register
   //--------------------------------------------------------------------

   class Port_13_Packet_Control_Symbol_Capture_0_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_13_Packet_Control_Symbol_Capture_0_CSR_reg)

      rand uvm_reg_field Capture0; 


      // Function: new
      // 
      function new(string name = "Port_13_Packet_Control_Symbol_Capture_0_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture0 = uvm_reg_field::type_id::create("Capture0");

         Capture0.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass

   //--------------------------------------------------------------------
   // Class: Device_Identity_CAR_reg
   // 
   // Identity Register
   //--------------------------------------------------------------------

   class Device_Identity_CAR_reg extends uvm_reg;
      `uvm_object_utils(Device_Identity_CAR_reg)

      uvm_reg_field DeviceVendorIdentity; 
      uvm_reg_field DeviceIdentity; 


      // Function: new
      // 
      function new(string name = "Device_Identity_CAR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         DeviceVendorIdentity = uvm_reg_field::type_id::create("DeviceVendorIdentity");
         DeviceIdentity = uvm_reg_field::type_id::create("DeviceIdentity");

         DeviceVendorIdentity.configure(this, 16, 16, "RO", 0, 16'h0000, 1, 0, 1);
         DeviceIdentity.configure(this, 16, 0, "RO", 0, 16'h0000, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_10_Initialization_Status_CSR_reg
   // 
   // Initialization_Status_Register
   //--------------------------------------------------------------------

   class Port_10_Initialization_Status_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_10_Initialization_Status_CSR_reg)

      uvm_reg_field Reserved_3; 
      uvm_reg_field Transmitted_Status_Control_Symbols; 
      uvm_reg_field Reserved_2; 
      uvm_reg_field Received_Status_Control_Symbols; 
      uvm_reg_field Port_Initialization_State_Machine; 
      uvm_reg_field Reserved_1; 
      uvm_reg_field x1_x2_Mode_Detection; 
      uvm_reg_field Reserved; 
      uvm_reg_field Lane_Alignment; 


      // Function: new
      // 
      function new(string name = "Port_10_Initialization_Status_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved_3 = uvm_reg_field::type_id::create("Reserved_3");
         Transmitted_Status_Control_Symbols = uvm_reg_field::type_id::create("Transmitted_Status_Control_Symbols");
         Reserved_2 = uvm_reg_field::type_id::create("Reserved_2");
         Received_Status_Control_Symbols = uvm_reg_field::type_id::create("Received_Status_Control_Symbols");
         Port_Initialization_State_Machine = uvm_reg_field::type_id::create("Port_Initialization_State_Machine");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         x1_x2_Mode_Detection = uvm_reg_field::type_id::create("x1_x2_Mode_Detection");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Lane_Alignment = uvm_reg_field::type_id::create("Lane_Alignment");

         Reserved_3.configure(this, 4, 28, "RO", 0, 4'h0, 1, 0, 0);
         Transmitted_Status_Control_Symbols.configure(this, 7, 21, "RO", 0, 7'b0000000, 1, 0, 0);
         Reserved_2.configure(this, 1, 20, "RO", 0, 1'b0, 1, 0, 0);
         Received_Status_Control_Symbols.configure(this, 4, 16, "RO", 0, 4'h0, 1, 0, 0);
         Port_Initialization_State_Machine.configure(this, 5, 11, "RO", 0, 5'b00000, 1, 0, 0);
         Reserved_1.configure(this, 1, 10, "RO", 0, 1'b0, 1, 0, 0);
         x1_x2_Mode_Detection.configure(this, 4, 6, "RO", 0, 4'h0, 1, 0, 0);
         Reserved.configure(this, 1, 5, "RO", 0, 1'b0, 1, 0, 0);
         Lane_Alignment.configure(this, 5, 0, "RO", 0, 5'b00000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_7_Error_Rate_Threshold_CSR_reg
   // 
   // Error Threshold Register
   //--------------------------------------------------------------------

   class Port_7_Error_Rate_Threshold_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_7_Error_Rate_Threshold_CSR_reg)

      uvm_reg_field Reserved; 
      rand uvm_reg_field Error_Rate_Degraded_Threshold_Trigger; 
      rand uvm_reg_field Error_Rate_Failed_Threshold_Trigger; 


      // Function: new
      // 
      function new(string name = "Port_7_Error_Rate_Threshold_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Error_Rate_Degraded_Threshold_Trigger = uvm_reg_field::type_id::create("Error_Rate_Degraded_Threshold_Trigger");
         Error_Rate_Failed_Threshold_Trigger = uvm_reg_field::type_id::create("Error_Rate_Failed_Threshold_Trigger");

         Reserved.configure(this, 16, 16, "RO", 0, 16'h0000, 1, 0, 1);
         Error_Rate_Degraded_Threshold_Trigger.configure(this, 8, 8, "RW", 0, 8'hff, 1, 1, 1);
         Error_Rate_Failed_Threshold_Trigger.configure(this, 8, 0, "RW", 0, 8'hff, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_2_Inbound_ackID_CSR_reg
   // 
   // Inbound_Register
   //--------------------------------------------------------------------

   class Port_2_Inbound_ackID_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_2_Inbound_ackID_CSR_reg)

      rand uvm_reg_field Inbound_ackID;  
      uvm_reg_field Reserved; 


      // Function: new
      // 
      function new(string name = "Port_2_Inbound_ackID_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Inbound_ackID = uvm_reg_field::type_id::create("Inbound_ackID");
         Reserved = uvm_reg_field::type_id::create("Reserved");

       Inbound_ackID.configure(this, 12, 20, "RW", 0, 12'h000, 1, 1, 0);
         Reserved.configure(this, 20, 0, "RO", 0, 20'h00000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_10_Outbound_ackID_CSR_reg
   // 
   // Outbound_Register
   //--------------------------------------------------------------------

   class Port_10_Outbound_ackID_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_10_Outbound_ackID_CSR_reg)

      rand uvm_reg_field Outbound_ackID; 
      uvm_reg_field Outstanding_ackID; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Clr_outstanding_ackID; 


      // Function: new
      // 
      function new(string name = "Port_10_Outbound_ackID_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Outbound_ackID = uvm_reg_field::type_id::create("Outbound_ackID");
         Outstanding_ackID = uvm_reg_field::type_id::create("Outstanding_ackID");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Clr_outstanding_ackID = uvm_reg_field::type_id::create("Clr_outstanding_ackID");

         Outbound_ackID.configure(this, 12, 20, "RW", 0, 12'h000, 1, 1, 0);
         Outstanding_ackID.configure(this, 12, 8, "RW", 0, 12'h000, 1, 1, 0);
         Reserved.configure(this, 7, 1, "RO", 0, 7'b0000000, 1, 0, 0);
         Clr_outstanding_ackID.configure(this, 1, 0, "W1C", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Standard_Route_Configuration_Port_Select_CSR_reg
   // 
   // Configuration port select Register
   //--------------------------------------------------------------------

   class Standard_Route_Configuration_Port_Select_CSR_reg extends uvm_reg;
      `uvm_object_utils(Standard_Route_Configuration_Port_Select_CSR_reg)

      rand uvm_reg_field Config_output_port; 
      rand uvm_reg_field Config_output_port1_lsb; 
      rand uvm_reg_field Config_output_port1_msb; 
      rand uvm_reg_field Config_output_port2; 
      rand uvm_reg_field Config_output_port3; 


      // Function: new
      // 
      function new(string name = "Standard_Route_Configuration_Port_Select_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Config_output_port = uvm_reg_field::type_id::create("Config_output_port");
         Config_output_port1_lsb = uvm_reg_field::type_id::create("Config_output_port1_lsb");
         Config_output_port1_msb = uvm_reg_field::type_id::create("Config_output_port1_msb");
         Config_output_port2 = uvm_reg_field::type_id::create("Config_output_port2");
         Config_output_port3 = uvm_reg_field::type_id::create("Config_output_port3");

         Config_output_port.configure(this, 8, 24, "RW", 0, 8'h00, 1, 1, 1);
         Config_output_port1_lsb.configure(this, 2, 22, "RW", 0, 2'b00, 1, 1, 0);
         Config_output_port1_msb.configure(this, 6, 16, "RW", 0, 6'b000000, 1, 1, 0);
         Config_output_port2.configure(this, 8, 8, "RW", 0, 8'h00, 1, 1, 1);
         Config_output_port3.configure(this, 8, 0, "RW", 0, 8'h00, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Lane_14_Status_1_CSR_reg
   // 
   // Status 1 Register
   //--------------------------------------------------------------------

   class Lane_14_Status_1_CSR_reg extends uvm_reg;
      `uvm_object_utils(Lane_14_Status_1_CSR_reg)

      uvm_reg_field Reserved; 
      uvm_reg_field IDLE3_SC_Retraining_State; 
      uvm_reg_field IDLE3_SC_Training_State; 
      uvm_reg_field IDLE3_DME_Training_State; 
      uvm_reg_field IDLE3_Training_Type; 
      uvm_reg_field IDLE3_Loss_of_Signals; 
      uvm_reg_field IDLE2_Connected_port_scrambling_descrambling_enabled; 
      uvm_reg_field IDLE2_Connected_port_transmit_emphasis_Tap_plus1_status; 
      uvm_reg_field IDLE2_Connected_port_transmit_emphasis_Tap_minus1_status; 
      uvm_reg_field IDLE2_Lane_number_in_connected_port; 
      uvm_reg_field IDLE2_Received_port_width; 
      uvm_reg_field IDLE2_Connected_port_lane_receiver_trained; 
      uvm_reg_field Implementation_defined; 
      uvm_reg_field Values_changed; 
      uvm_reg_field IDLE_information_current; 
      rand uvm_reg_field IDLE_received; 


      // Function: new
      // 
      function new(string name = "Lane_14_Status_1_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         IDLE3_SC_Retraining_State = uvm_reg_field::type_id::create("IDLE3_SC_Retraining_State");
         IDLE3_SC_Training_State = uvm_reg_field::type_id::create("IDLE3_SC_Training_State");
         IDLE3_DME_Training_State = uvm_reg_field::type_id::create("IDLE3_DME_Training_State");
         IDLE3_Training_Type = uvm_reg_field::type_id::create("IDLE3_Training_Type");
         IDLE3_Loss_of_Signals = uvm_reg_field::type_id::create("IDLE3_Loss_of_Signals");
         IDLE2_Connected_port_scrambling_descrambling_enabled = uvm_reg_field::type_id::create("IDLE2_Connected_port_scrambling_descrambling_enabled");
         IDLE2_Connected_port_transmit_emphasis_Tap_plus1_status = uvm_reg_field::type_id::create("IDLE2_Connected_port_transmit_emphasis_Tap_plus1_status");
         IDLE2_Connected_port_transmit_emphasis_Tap_minus1_status = uvm_reg_field::type_id::create("IDLE2_Connected_port_transmit_emphasis_Tap_minus1_status");
         IDLE2_Lane_number_in_connected_port = uvm_reg_field::type_id::create("IDLE2_Lane_number_in_connected_port");
         IDLE2_Received_port_width = uvm_reg_field::type_id::create("IDLE2_Received_port_width");
         IDLE2_Connected_port_lane_receiver_trained = uvm_reg_field::type_id::create("IDLE2_Connected_port_lane_receiver_trained");
         Implementation_defined = uvm_reg_field::type_id::create("Implementation_defined");
         Values_changed = uvm_reg_field::type_id::create("Values_changed");
         IDLE_information_current = uvm_reg_field::type_id::create("IDLE_information_current");
         IDLE_received = uvm_reg_field::type_id::create("IDLE_received");

         Reserved.configure(this, 6, 26, "RO", 0, 6'b000000, 1, 0, 0);
         IDLE3_SC_Retraining_State.configure(this, 2, 24, "RO", 0, 2'b00, 1, 0, 0);
         IDLE3_SC_Training_State.configure(this, 2, 22, "RO", 0, 2'b00, 1, 0, 0);
         IDLE3_DME_Training_State.configure(this, 2, 20, "RO", 0, 2'b00, 1, 0, 0);
         IDLE3_Training_Type.configure(this, 2, 18, "RO", 0, 2'b00, 1, 0, 0);
         IDLE3_Loss_of_Signals.configure(this, 1, 17, "RO", 0, 1'b0, 1, 0, 0);
         IDLE2_Connected_port_scrambling_descrambling_enabled.configure(this, 1, 16, "RO", 0, 1'b0, 1, 0, 0);
         IDLE2_Connected_port_transmit_emphasis_Tap_plus1_status.configure(this, 2, 14, "RO", 0, 2'b00, 1, 0, 0);
         IDLE2_Connected_port_transmit_emphasis_Tap_minus1_status.configure(this, 2, 12, "RO", 0, 2'b00, 1, 0, 0);
         IDLE2_Lane_number_in_connected_port.configure(this, 4, 8, "RO", 0, 4'h0, 1, 0, 0);
         IDLE2_Received_port_width.configure(this, 3, 5, "RO", 0, 3'b000, 1, 0, 0);
         IDLE2_Connected_port_lane_receiver_trained.configure(this, 1, 4, "RO", 0, 1'b0, 1, 0, 0);
         Implementation_defined.configure(this, 1, 3, "RO", 0, 1'b0, 1, 0, 0);
         Values_changed.configure(this, 1, 2, "RO", 0, 1'b1, 1, 0, 0);
         IDLE_information_current.configure(this, 1, 1, "RO", 0, 1'b0, 1, 0, 0);
         IDLE_received.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_12_VC5_VC1_BW_Allocation_Register_reg
   // 
   // BW Allocation Register
   //--------------------------------------------------------------------

   class Port_12_VC5_VC1_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_12_VC5_VC1_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 


      // Function: new
      // 
      function new(string name = "Port_12_VC5_VC1_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");

         Bandwidth_Allocation.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Lane_1_Status_1_CSR_reg
   // 
   // Status 1 Register
   //--------------------------------------------------------------------

   class Lane_1_Status_1_CSR_reg extends uvm_reg;
      `uvm_object_utils(Lane_1_Status_1_CSR_reg)

      uvm_reg_field Reserved; 
      uvm_reg_field IDLE3_SC_Retraining_State; 
      uvm_reg_field IDLE3_SC_Training_State; 
      uvm_reg_field IDLE3_DME_Training_State; 
      uvm_reg_field IDLE3_Training_Type; 
      uvm_reg_field IDLE3_Loss_of_Signals; 
      uvm_reg_field IDLE2_Connected_port_scrambling_descrambling_enabled; 
      uvm_reg_field IDLE2_Connected_port_transmit_emphasis_Tap_plus1_status; 
      uvm_reg_field IDLE2_Connected_port_transmit_emphasis_Tap_minus1_status; 
      uvm_reg_field IDLE2_Lane_number_in_connected_port; 
      uvm_reg_field IDLE2_Received_port_width; 
      uvm_reg_field IDLE2_Connected_port_lane_receiver_trained; 
      uvm_reg_field Implementation_defined; 
      uvm_reg_field Values_changed; 
      uvm_reg_field IDLE_information_current; 
      rand uvm_reg_field IDLE_received; 


      // Function: new
      // 
      function new(string name = "Lane_1_Status_1_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         IDLE3_SC_Retraining_State = uvm_reg_field::type_id::create("IDLE3_SC_Retraining_State");
         IDLE3_SC_Training_State = uvm_reg_field::type_id::create("IDLE3_SC_Training_State");
         IDLE3_DME_Training_State = uvm_reg_field::type_id::create("IDLE3_DME_Training_State");
         IDLE3_Training_Type = uvm_reg_field::type_id::create("IDLE3_Training_Type");
         IDLE3_Loss_of_Signals = uvm_reg_field::type_id::create("IDLE3_Loss_of_Signals");
         IDLE2_Connected_port_scrambling_descrambling_enabled = uvm_reg_field::type_id::create("IDLE2_Connected_port_scrambling_descrambling_enabled");
         IDLE2_Connected_port_transmit_emphasis_Tap_plus1_status = uvm_reg_field::type_id::create("IDLE2_Connected_port_transmit_emphasis_Tap_plus1_status");
         IDLE2_Connected_port_transmit_emphasis_Tap_minus1_status = uvm_reg_field::type_id::create("IDLE2_Connected_port_transmit_emphasis_Tap_minus1_status");
         IDLE2_Lane_number_in_connected_port = uvm_reg_field::type_id::create("IDLE2_Lane_number_in_connected_port");
         IDLE2_Received_port_width = uvm_reg_field::type_id::create("IDLE2_Received_port_width");
         IDLE2_Connected_port_lane_receiver_trained = uvm_reg_field::type_id::create("IDLE2_Connected_port_lane_receiver_trained");
         Implementation_defined = uvm_reg_field::type_id::create("Implementation_defined");
         Values_changed = uvm_reg_field::type_id::create("Values_changed");
         IDLE_information_current = uvm_reg_field::type_id::create("IDLE_information_current");
         IDLE_received = uvm_reg_field::type_id::create("IDLE_received");

         Reserved.configure(this, 6, 26, "RO", 0, 6'b000000, 1, 0, 0);
         IDLE3_SC_Retraining_State.configure(this, 2, 24, "RO", 0, 2'b00, 1, 0, 0);
         IDLE3_SC_Training_State.configure(this, 2, 22, "RO", 0, 2'b00, 1, 0, 0);
         IDLE3_DME_Training_State.configure(this, 2, 20, "RO", 0, 2'b00, 1, 0, 0);
         IDLE3_Training_Type.configure(this, 2, 18, "RO", 0, 2'b00, 1, 0, 0);
         IDLE3_Loss_of_Signals.configure(this, 1, 17, "RO", 0, 1'b0, 1, 0, 0);
         IDLE2_Connected_port_scrambling_descrambling_enabled.configure(this, 1, 16, "RO", 0, 1'b0, 1, 0, 0);
         IDLE2_Connected_port_transmit_emphasis_Tap_plus1_status.configure(this, 2, 14, "RO", 0, 2'b00, 1, 0, 0);
         IDLE2_Connected_port_transmit_emphasis_Tap_minus1_status.configure(this, 2, 12, "RO", 0, 2'b00, 1, 0, 0);
         IDLE2_Lane_number_in_connected_port.configure(this, 4, 8, "RO", 0, 4'h0, 1, 0, 0);
         IDLE2_Received_port_width.configure(this, 3, 5, "RO", 0, 3'b000, 1, 0, 0);
         IDLE2_Connected_port_lane_receiver_trained.configure(this, 1, 4, "RO", 0, 1'b0, 1, 0, 0);
         Implementation_defined.configure(this, 1, 3, "RO", 0, 1'b0, 1, 0, 0);
         Values_changed.configure(this, 1, 2, "RO", 0, 1'b1, 1, 0, 0);
         IDLE_information_current.configure(this, 1, 1, "RO", 0, 1'b0, 1, 0, 0);
         IDLE_received.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_6_Packet_Control_Symbol_Capture_0_CSR_reg
   // 
   // Symbol Capture Register
   //--------------------------------------------------------------------

   class Port_6_Packet_Control_Symbol_Capture_0_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_6_Packet_Control_Symbol_Capture_0_CSR_reg)

      rand uvm_reg_field Capture0; 


      // Function: new
      // 
      function new(string name = "Port_6_Packet_Control_Symbol_Capture_0_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture0 = uvm_reg_field::type_id::create("Capture0");

         Capture0.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_13_Link_Uninit_Discard_Timer_CSR_reg
   // 
   // Link_Uninit_Discard_Timer_CSR_Register
   //--------------------------------------------------------------------

   class Port_13_Link_Uninit_Discard_Timer_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_13_Link_Uninit_Discard_Timer_CSR_reg)

      uvm_reg_field Reserved; 
      rand uvm_reg_field Link_Uninit_Timeout; 


      // Function: new
      // 
      function new(string name = "Port_13_Link_Uninit_Discard_Timer_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Link_Uninit_Timeout = uvm_reg_field::type_id::create("Link_Uninit_Timeout");

         Reserved.configure(this, 8, 24, "RO", 0, 8'h00, 1, 0, 1);
         Link_Uninit_Timeout.configure(this, 24, 0, "RW", 0, 24'h000000, 1, 1, 1);
      endfunction
   endclass


   //--------------------------------------------------------------------
   // Class: Port_14_VC7_VC3_BW_Allocation_Register_reg
   // 
   // BW Allocation Register
   //--------------------------------------------------------------------

   class Port_14_VC7_VC3_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_14_VC7_VC3_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 


      // Function: new
      // 
      function new(string name = "Port_14_VC7_VC3_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");

         Bandwidth_Allocation.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_6_VoQ_Control_Status_Register_reg
   // 
   // VoQ_Control_Status_Register
   //--------------------------------------------------------------------

   class Port_6_VoQ_Control_Status_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_6_VoQ_Control_Status_Register_reg)

      rand uvm_reg_field RX_Port_Group_Size; 
      rand uvm_reg_field TX_Port_Group_Size; 
      uvm_reg_field Reserved_1; 
      rand uvm_reg_field Port_Group_Size_6_Supported; 
      rand uvm_reg_field Port_Group_Size_5_Supported; 
      rand uvm_reg_field Port_Group_Size_4_Supported; 
      rand uvm_reg_field Port_Group_Size_3_Supported; 
      rand uvm_reg_field Port_Group_Size_2_Supported; 
      rand uvm_reg_field Port_Group_Size_1_Supported; 
      rand uvm_reg_field Port_Group_Size_0_Supported; 
      rand uvm_reg_field Enable_VoQ_Backpressure_Per_VC_Transmission; 
      rand uvm_reg_field Port_XOFF; 
      rand uvm_reg_field Enable_VoQ_Symbol_Participation; 
      rand uvm_reg_field Enable_VoQ_Symbol_Genreation; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field VoQ_Backpressure_Per_VC_Supported; 
      rand uvm_reg_field VoQ_Backpressure_Symbol_Reception_Supported; 
      rand uvm_reg_field VoQ_Backpressure_Symbol_Generation_Supported; 


      // Function: new
      // 
      function new(string name = "Port_6_VoQ_Control_Status_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         RX_Port_Group_Size = uvm_reg_field::type_id::create("RX_Port_Group_Size");
         TX_Port_Group_Size = uvm_reg_field::type_id::create("TX_Port_Group_Size");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         Port_Group_Size_6_Supported = uvm_reg_field::type_id::create("Port_Group_Size_6_Supported");
         Port_Group_Size_5_Supported = uvm_reg_field::type_id::create("Port_Group_Size_5_Supported");
         Port_Group_Size_4_Supported = uvm_reg_field::type_id::create("Port_Group_Size_4_Supported");
         Port_Group_Size_3_Supported = uvm_reg_field::type_id::create("Port_Group_Size_3_Supported");
         Port_Group_Size_2_Supported = uvm_reg_field::type_id::create("Port_Group_Size_2_Supported");
         Port_Group_Size_1_Supported = uvm_reg_field::type_id::create("Port_Group_Size_1_Supported");
         Port_Group_Size_0_Supported = uvm_reg_field::type_id::create("Port_Group_Size_0_Supported");
         Enable_VoQ_Backpressure_Per_VC_Transmission = uvm_reg_field::type_id::create("Enable_VoQ_Backpressure_Per_VC_Transmission");
         Port_XOFF = uvm_reg_field::type_id::create("Port_XOFF");
         Enable_VoQ_Symbol_Participation = uvm_reg_field::type_id::create("Enable_VoQ_Symbol_Participation");
         Enable_VoQ_Symbol_Genreation = uvm_reg_field::type_id::create("Enable_VoQ_Symbol_Genreation");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         VoQ_Backpressure_Per_VC_Supported = uvm_reg_field::type_id::create("VoQ_Backpressure_Per_VC_Supported");
         VoQ_Backpressure_Symbol_Reception_Supported = uvm_reg_field::type_id::create("VoQ_Backpressure_Symbol_Reception_Supported");
         VoQ_Backpressure_Symbol_Generation_Supported = uvm_reg_field::type_id::create("VoQ_Backpressure_Symbol_Generation_Supported");

         RX_Port_Group_Size.configure(this, 3, 29, "RW", 0, 3'b000, 1, 1, 0);
         TX_Port_Group_Size.configure(this, 3, 26, "RW", 0, 3'b000, 1, 1, 0);
         Reserved_1.configure(this, 7, 19, "RO", 0, 7'b0000000, 1, 0, 0);
         Port_Group_Size_6_Supported.configure(this, 1, 18, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_5_Supported.configure(this, 1, 17, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_4_Supported.configure(this, 1, 16, "RW", 0, 1'b1, 1, 1, 0);
         Port_Group_Size_3_Supported.configure(this, 1, 15, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_2_Supported.configure(this, 1, 14, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_1_Supported.configure(this, 1, 13, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_0_Supported.configure(this, 1, 12, "RW", 0, 1'b1, 1, 1, 0);
         Enable_VoQ_Backpressure_Per_VC_Transmission.configure(this, 1, 11, "RW", 0, 1'b0, 1, 1, 0);
         Port_XOFF.configure(this, 1, 10, "RW", 0, 1'b0, 1, 1, 0);
         Enable_VoQ_Symbol_Participation.configure(this, 1, 9, "RW", 0, 1'b0, 1, 1, 0);
         Enable_VoQ_Symbol_Genreation.configure(this, 1, 8, "RW", 0, 1'b0, 1, 1, 0);
         Reserved.configure(this, 5, 3, "RO", 0, 5'b00000, 1, 0, 0);
         VoQ_Backpressure_Per_VC_Supported.configure(this, 1, 2, "RW", 0, 1'b0, 1, 1, 0);
         VoQ_Backpressure_Symbol_Reception_Supported.configure(this, 1, 1, "RW", 0, 1'b0, 1, 1, 0);
         VoQ_Backpressure_Symbol_Generation_Supported.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_9_Error_Rate_Threshold_CSR_reg
   // 
   // Error Threshold Register
   //--------------------------------------------------------------------

   class Port_9_Error_Rate_Threshold_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_9_Error_Rate_Threshold_CSR_reg)

      uvm_reg_field Reserved; 
      rand uvm_reg_field Error_Rate_Degraded_Threshold_Trigger; 
      rand uvm_reg_field Error_Rate_Failed_Threshold_Trigger; 


      // Function: new
      // 
      function new(string name = "Port_9_Error_Rate_Threshold_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Error_Rate_Degraded_Threshold_Trigger = uvm_reg_field::type_id::create("Error_Rate_Degraded_Threshold_Trigger");
         Error_Rate_Failed_Threshold_Trigger = uvm_reg_field::type_id::create("Error_Rate_Failed_Threshold_Trigger");

         Reserved.configure(this, 16, 16, "RO", 0, 16'h0000, 1, 0, 1);
         Error_Rate_Degraded_Threshold_Trigger.configure(this, 8, 8, "RW", 0, 8'hff, 1, 1, 1);
         Error_Rate_Failed_Threshold_Trigger.configure(this, 8, 0, "RW", 0, 8'hff, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_15_Timestamp_1_LSW_CSR_reg
   // 
   // Timestamp_1_LSW_Register
   //--------------------------------------------------------------------

   class Port_15_Timestamp_1_LSW_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_15_Timestamp_1_LSW_CSR_reg)

      uvm_reg_field LSW_Bits; 


      // Function: new
      // 
      function new(string name = "Port_15_Timestamp_1_LSW_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         LSW_Bits = uvm_reg_field::type_id::create("LSW_Bits");

         LSW_Bits.configure(this, 32, 0, "RO", 0, 32'h00000000, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_12_VC6_VC2_BW_Allocation_Register_reg
   // 
   // BW Allocation Register
   //--------------------------------------------------------------------

   class Port_12_VC6_VC2_BW_Allocation_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_12_VC6_VC2_BW_Allocation_Register_reg)

      rand uvm_reg_field Bandwidth_Allocation; 


      // Function: new
      // 
      function new(string name = "Port_12_VC6_VC2_BW_Allocation_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Bandwidth_Allocation = uvm_reg_field::type_id::create("Bandwidth_Allocation");

         Bandwidth_Allocation.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_6_Attributes_Capture_CSR_reg
   // 
   // Attributes Register
   //--------------------------------------------------------------------

   class Port_6_Attributes_Capture_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_6_Attributes_Capture_CSR_reg)

      rand uvm_reg_field Capture_valid_info; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Implementation_Dependent; 
      rand uvm_reg_field Error_type; 
      rand uvm_reg_field Info_type; 


      // Function: new
      // 
      function new(string name = "Port_6_Attributes_Capture_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Capture_valid_info = uvm_reg_field::type_id::create("Capture_valid_info");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Implementation_Dependent = uvm_reg_field::type_id::create("Implementation_Dependent");
         Error_type = uvm_reg_field::type_id::create("Error_type");
         Info_type = uvm_reg_field::type_id::create("Info_type");

         Capture_valid_info.configure(this, 1, 31, "RW", 0, 1'b0, 1, 1, 0);
         Reserved.configure(this, 3, 28, "RO", 0, 3'b000, 1, 0, 0);
         Implementation_Dependent.configure(this, 20, 8, "RW", 0, 20'h00000, 1, 1, 0);
         Error_type.configure(this, 5, 3, "RW", 0, 5'b00000, 1, 1, 0);
         Info_type.configure(this, 3, 0, "RW", 0, 3'b000, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Data_Streaming_Logical_Layer_Control_CSR_reg
   // 
   // Data Stream Logical Register
   //--------------------------------------------------------------------

   class Data_Streaming_Logical_Layer_Control_CSR_reg extends uvm_reg;
      `uvm_object_utils(Data_Streaming_Logical_Layer_Control_CSR_reg)

      rand uvm_reg_field MTU; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field TM_Mode; 
      uvm_reg_field TM_Types_Supported; 


      // Function: new
      // 
      function new(string name = "Data_Streaming_Logical_Layer_Control_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         MTU = uvm_reg_field::type_id::create("MTU");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         TM_Mode = uvm_reg_field::type_id::create("TM_Mode");
         TM_Types_Supported = uvm_reg_field::type_id::create("TM_Types_Supported");

         MTU.configure(this, 8, 24, "RW", 0, 8'h00, 1, 1, 1);
         Reserved.configure(this, 16, 8, "RO", 0, 16'h0000, 1, 0, 1);
         TM_Mode.configure(this, 4, 4, "RW", 0, 4'h0, 1, 1, 0);
         TM_Types_Supported.configure(this, 4, 0, "RO", 0, 4'h0, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_9_VC_Control_and_Status_Register_reg
   // 
   // CSR Register
   //--------------------------------------------------------------------

   class Port_9_VC_Control_and_Status_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_9_VC_Control_and_Status_Register_reg)

      rand uvm_reg_field VCs_Enable; 
      uvm_reg_field VCs_Support; 
      rand uvm_reg_field CT_Mode; 
      rand uvm_reg_field VC_Refresh_Interval; 


      // Function: new
      // 
      function new(string name = "Port_9_VC_Control_and_Status_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         VCs_Enable = uvm_reg_field::type_id::create("VCs_Enable");
         VCs_Support = uvm_reg_field::type_id::create("VCs_Support");
         CT_Mode = uvm_reg_field::type_id::create("CT_Mode");
         VC_Refresh_Interval = uvm_reg_field::type_id::create("VC_Refresh_Interval");

         VCs_Enable.configure(this, 8, 24, "RW", 0, 8'h00, 1, 1, 1);
         VCs_Support.configure(this, 8, 16, "RO", 0, 8'h00, 1, 0, 1);
         CT_Mode.configure(this, 8, 8, "RW", 0, 8'h00, 1, 1, 1);
         VC_Refresh_Interval.configure(this, 8, 0, "RW", 0, 8'h00, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_5_Timestamp_Generator_Synchronization_CSR_reg
   // 
   // Timestamp_Generator_Synchronization_Register
   //--------------------------------------------------------------------

   class Port_5_Timestamp_Generator_Synchronization_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_5_Timestamp_Generator_Synchronization_CSR_reg)

      rand uvm_reg_field Asymmetry; 
      rand uvm_reg_field TX_Has_Lowwer_Latency; 
      uvm_reg_field Reserved_1; 
      rand uvm_reg_field Port_Opening_Mode; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field Auto_Update_Link_Partner_Timestamp_Generators; 
      rand uvm_reg_field Disable_Clock_Compensation_Sequence; 
      rand uvm_reg_field Accept_Timestamps; 


      // Function: new
      // 
      function new(string name = "Port_5_Timestamp_Generator_Synchronization_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Asymmetry = uvm_reg_field::type_id::create("Asymmetry");
         TX_Has_Lowwer_Latency = uvm_reg_field::type_id::create("TX_Has_Lowwer_Latency");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         Port_Opening_Mode = uvm_reg_field::type_id::create("Port_Opening_Mode");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Auto_Update_Link_Partner_Timestamp_Generators = uvm_reg_field::type_id::create("Auto_Update_Link_Partner_Timestamp_Generators");
         Disable_Clock_Compensation_Sequence = uvm_reg_field::type_id::create("Disable_Clock_Compensation_Sequence");
         Accept_Timestamps = uvm_reg_field::type_id::create("Accept_Timestamps");

         Asymmetry.configure(this, 12, 20, "RW", 0, 12'h000, 1, 1, 0);
         TX_Has_Lowwer_Latency.configure(this, 1, 19, "RW", 0, 1'b0, 1, 1, 0);
         Reserved_1.configure(this, 11, 8, "RO", 0, 11'b00000000000, 1, 0, 0);
         Port_Opening_Mode.configure(this, 2, 6, "RW", 0, 2'b00, 1, 1, 0);
         Reserved.configure(this, 3, 3, "RO", 0, 3'b000, 1, 0, 0);
         Auto_Update_Link_Partner_Timestamp_Generators.configure(this, 1, 2, "RW", 0, 1'b0, 1, 1, 0);
         Disable_Clock_Compensation_Sequence.configure(this, 1, 1, "RW", 0, 1'b0, 1, 1, 0);
         Accept_Timestamps.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass

   //--------------------------------------------------------------------
   // Class: Port_15_VoQ_Control_Status_Register_reg
   // 
   // VoQ_Control_Status_Register
   //--------------------------------------------------------------------

   class Port_15_VoQ_Control_Status_Register_reg extends uvm_reg;
      `uvm_object_utils(Port_15_VoQ_Control_Status_Register_reg)

      rand uvm_reg_field RX_Port_Group_Size; 
      rand uvm_reg_field TX_Port_Group_Size; 
      uvm_reg_field Reserved_1; 
      rand uvm_reg_field Port_Group_Size_6_Supported; 
      rand uvm_reg_field Port_Group_Size_5_Supported; 
      rand uvm_reg_field Port_Group_Size_4_Supported; 
      rand uvm_reg_field Port_Group_Size_3_Supported; 
      rand uvm_reg_field Port_Group_Size_2_Supported; 
      rand uvm_reg_field Port_Group_Size_1_Supported; 
      rand uvm_reg_field Port_Group_Size_0_Supported; 
      rand uvm_reg_field Enable_VoQ_Backpressure_Per_VC_Transmission; 
      rand uvm_reg_field Port_XOFF; 
      rand uvm_reg_field Enable_VoQ_Symbol_Participation; 
      rand uvm_reg_field Enable_VoQ_Symbol_Genreation; 
      uvm_reg_field Reserved; 
      rand uvm_reg_field VoQ_Backpressure_Per_VC_Supported; 
      rand uvm_reg_field VoQ_Backpressure_Symbol_Reception_Supported; 
      rand uvm_reg_field VoQ_Backpressure_Symbol_Generation_Supported; 


      // Function: new
      // 
      function new(string name = "Port_15_VoQ_Control_Status_Register_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         RX_Port_Group_Size = uvm_reg_field::type_id::create("RX_Port_Group_Size");
         TX_Port_Group_Size = uvm_reg_field::type_id::create("TX_Port_Group_Size");
         Reserved_1 = uvm_reg_field::type_id::create("Reserved_1");
         Port_Group_Size_6_Supported = uvm_reg_field::type_id::create("Port_Group_Size_6_Supported");
         Port_Group_Size_5_Supported = uvm_reg_field::type_id::create("Port_Group_Size_5_Supported");
         Port_Group_Size_4_Supported = uvm_reg_field::type_id::create("Port_Group_Size_4_Supported");
         Port_Group_Size_3_Supported = uvm_reg_field::type_id::create("Port_Group_Size_3_Supported");
         Port_Group_Size_2_Supported = uvm_reg_field::type_id::create("Port_Group_Size_2_Supported");
         Port_Group_Size_1_Supported = uvm_reg_field::type_id::create("Port_Group_Size_1_Supported");
         Port_Group_Size_0_Supported = uvm_reg_field::type_id::create("Port_Group_Size_0_Supported");
         Enable_VoQ_Backpressure_Per_VC_Transmission = uvm_reg_field::type_id::create("Enable_VoQ_Backpressure_Per_VC_Transmission");
         Port_XOFF = uvm_reg_field::type_id::create("Port_XOFF");
         Enable_VoQ_Symbol_Participation = uvm_reg_field::type_id::create("Enable_VoQ_Symbol_Participation");
         Enable_VoQ_Symbol_Genreation = uvm_reg_field::type_id::create("Enable_VoQ_Symbol_Genreation");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         VoQ_Backpressure_Per_VC_Supported = uvm_reg_field::type_id::create("VoQ_Backpressure_Per_VC_Supported");
         VoQ_Backpressure_Symbol_Reception_Supported = uvm_reg_field::type_id::create("VoQ_Backpressure_Symbol_Reception_Supported");
         VoQ_Backpressure_Symbol_Generation_Supported = uvm_reg_field::type_id::create("VoQ_Backpressure_Symbol_Generation_Supported");

         RX_Port_Group_Size.configure(this, 3, 29, "RW", 0, 3'b000, 1, 1, 0);
         TX_Port_Group_Size.configure(this, 3, 26, "RW", 0, 3'b000, 1, 1, 0);
         Reserved_1.configure(this, 7, 19, "RO", 0, 7'b0000000, 1, 0, 0);
         Port_Group_Size_6_Supported.configure(this, 1, 18, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_5_Supported.configure(this, 1, 17, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_4_Supported.configure(this, 1, 16, "RW", 0, 1'b1, 1, 1, 0);
         Port_Group_Size_3_Supported.configure(this, 1, 15, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_2_Supported.configure(this, 1, 14, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_1_Supported.configure(this, 1, 13, "RW", 0, 1'b0, 1, 1, 0);
         Port_Group_Size_0_Supported.configure(this, 1, 12, "RW", 0, 1'b1, 1, 1, 0);
         Enable_VoQ_Backpressure_Per_VC_Transmission.configure(this, 1, 11, "RW", 0, 1'b0, 1, 1, 0);
         Port_XOFF.configure(this, 1, 10, "RW", 0, 1'b0, 1, 1, 0);
         Enable_VoQ_Symbol_Participation.configure(this, 1, 9, "RW", 0, 1'b0, 1, 1, 0);
         Enable_VoQ_Symbol_Genreation.configure(this, 1, 8, "RW", 0, 1'b0, 1, 1, 0);
         Reserved.configure(this, 5, 3, "RO", 0, 5'b00000, 1, 0, 0);
         VoQ_Backpressure_Per_VC_Supported.configure(this, 1, 2, "RW", 0, 1'b0, 1, 1, 0);
         VoQ_Backpressure_Symbol_Reception_Supported.configure(this, 1, 1, "RW", 0, 1'b0, 1, 1, 0);
         VoQ_Backpressure_Symbol_Generation_Supported.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Timestamp_CAR_reg
   // 
   // Timestamp_CAR_Register
   //--------------------------------------------------------------------

   class Timestamp_CAR_reg extends uvm_reg;
      `uvm_object_utils(Timestamp_CAR_reg)

      uvm_reg_field Reserved; 
      uvm_reg_field Common_Clock_Frequency_Supported; 
      uvm_reg_field Timestamp_Master_Supported; 
      uvm_reg_field Timestamp_Slave_Supported; 


      // Function: new
      // 
      function new(string name = "Timestamp_CAR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Common_Clock_Frequency_Supported = uvm_reg_field::type_id::create("Common_Clock_Frequency_Supported");
         Timestamp_Master_Supported = uvm_reg_field::type_id::create("Timestamp_Master_Supported");
         Timestamp_Slave_Supported = uvm_reg_field::type_id::create("Timestamp_Slave_Supported");

         Reserved.configure(this, 29, 3, "RO", 0, 29'b00000000000000000000000000000, 1, 0, 0);
         Common_Clock_Frequency_Supported.configure(this, 1, 2, "RO", 0, 1'b0, 1, 0, 0);
         Timestamp_Master_Supported.configure(this, 1, 1, "RO", 0, 1'b0, 1, 0, 0);
         Timestamp_Slave_Supported.configure(this, 1, 0, "RO", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_0_Error_Rate_Threshold_CSR_reg
   // 
   // Error Threshold Register
   //--------------------------------------------------------------------

   class Port_0_Error_Rate_Threshold_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_0_Error_Rate_Threshold_CSR_reg)

      uvm_reg_field Reserved; 
      rand uvm_reg_field Error_Rate_Degraded_Threshold_Trigger; 
      rand uvm_reg_field Error_Rate_Failed_Threshold_Trigger; 


      // Function: new
      // 
      function new(string name = "Port_0_Error_Rate_Threshold_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         Reserved = uvm_reg_field::type_id::create("Reserved");
         Error_Rate_Degraded_Threshold_Trigger = uvm_reg_field::type_id::create("Error_Rate_Degraded_Threshold_Trigger");
         Error_Rate_Failed_Threshold_Trigger = uvm_reg_field::type_id::create("Error_Rate_Failed_Threshold_Trigger");

         Reserved.configure(this, 16, 16, "RO", 0, 16'h0000, 1, 0, 1);
         Error_Rate_Degraded_Threshold_Trigger.configure(this, 8, 8, "RW", 0, 8'hff, 1, 1, 1);
         Error_Rate_Failed_Threshold_Trigger.configure(this, 8, 0, "RW", 0, 8'hff, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: Port_15_Link_Maintenance_Response_CSR_reg
   // 
   // Link Maintenance Response Register
   //--------------------------------------------------------------------

   class Port_15_Link_Maintenance_Response_CSR_reg extends uvm_reg;
      `uvm_object_utils(Port_15_Link_Maintenance_Response_CSR_reg)

      uvm_reg_field port_status; 
      uvm_reg_field ackID_status; 
      uvm_reg_field Port_status_cs64; 
      uvm_reg_field Reserved; 
      uvm_reg_field response_valid; 


      // Function: new
      // 
      function new(string name = "Port_15_Link_Maintenance_Response_CSR_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         port_status = uvm_reg_field::type_id::create("port_status");
         ackID_status = uvm_reg_field::type_id::create("ackID_status");
         Port_status_cs64 = uvm_reg_field::type_id::create("Port_status_cs64");
         Reserved = uvm_reg_field::type_id::create("Reserved");
         response_valid = uvm_reg_field::type_id::create("response_valid");

         port_status.configure(this, 5, 27, "RO", 0, 5'b00000, 1, 0, 0);
         ackID_status.configure(this, 12, 15, "RO", 0, 12'h000, 1, 0, 0);
         Port_status_cs64.configure(this, 12, 3, "RO", 0, 12'h000, 1, 0, 0);
         Reserved.configure(this, 2, 1, "RO", 0, 2'b00, 1, 0, 0);
         response_valid.configure(this, 1, 0, "RO", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass


   /* BLOCKS */



   //--------------------------------------------------------------------
   // Class: srio_reg_block
   // 
   //--------------------------------------------------------------------

   class srio_reg_block extends uvm_reg_block;
   
      bit [31:0] EXT1_BASE_ADDR = 21'h00100;
      bit [31:0] EXT2_BASE_ADDR = 21'h00C00;
      bit [31:0] EXT3_BASE_ADDR = 21'h00600;
      bit [31:0] EXT4_BASE_ADDR = 21'h01600;
      bit [31:0] EXT5_BASE_ADDR = 21'h01100;
      bit [31:0] EXT6_BASE_ADDR = 21'h01C00;
      bit brc3 = 1'b1;     //brc is used to denote baud rate class i.e., brc 1&2 or brc 3

     `uvm_object_utils(srio_reg_block)

      rand Device_Identity_CAR_reg Device_Identity_CAR; // Identity Register
      rand Device_Information_CAR_reg Device_Information_CAR; // Information Register
      rand Assembly_Identity_CAR_reg Assembly_Identity_CAR; // Assembly Identity Register
      rand Assembly_Information_CAR_reg Assembly_Information_CAR; // Assy Information Register
      rand Processing_Element_Features_CAR_reg Processing_Element_Features_CAR; // Element Features Register
      rand Switch_Port_Information_CAR_reg Switch_Port_Information_CAR; // Switch Port Register
      rand Source_Operations_CAR_reg Source_Operations_CAR; // Source Register
      rand Destination_Operations_CAR_reg Destination_Operations_CAR; // Destination Register
      rand Switch_Route_Table_Destination_ID_Limit_CAR_reg Switch_Route_Table_Destination_ID_Limit_CAR; // Destination ID Register
      rand Data_Streaming_Information_CAR_reg Data_Streaming_Information_CAR; // Data Stream Register
      rand Data_Streaming_Logical_Layer_Control_CSR_reg Data_Streaming_Logical_Layer_Control_CSR; // Data Stream Logical Register
      rand Processing_Element_Logical_Layer_Control_CSR_reg Processing_Element_Logical_Layer_Control_CSR; // Logical Layer Register
      rand Local_Configuration_Space_Base_Address_0_CSR_reg Local_Configuration_Space_Base_Address_0_CSR; // Base address 0 Register
      rand Local_Configuration_Space_Base_Address_1_CSR_reg Local_Configuration_Space_Base_Address_1_CSR; // Base address 1 Register
      rand Base_Device_ID_CSR_reg Base_Device_ID_CSR; // Base Device ID Register
      rand Dev32_Base_Device_ID_CSR_reg Dev32_Base_Device_ID_CSR; // Dev32_Base_Device_ID_Register
      rand Host_Base_Device_ID_Lock_CSR_reg Host_Base_Device_ID_Lock_CSR; // Host_Base_Device_ID_Lock_Register
      rand Component_Tag_CSR_reg Component_Tag_CSR; // Tag Register
      rand Standard_Route_Configuration_Destination_ID_Select_CSR_reg Standard_Route_Configuration_Destination_ID_Select_CSR; // Destination ID select Register
      rand Standard_Route_Configuration_Port_Select_CSR_reg Standard_Route_Configuration_Port_Select_CSR; // Configuration port select Register
      rand Standard_Route_Default_Port_CSR_reg Standard_Route_Default_Port_CSR; // Default port Register
      rand LP_Serial_Register_Block_Header_reg LP_Serial_Register_Block_Header; // Block Header Register
      rand Port_Link_Timeout_Control_CSR_reg Port_Link_Timeout_Control_CSR; // Link Time out Register
      rand Port_Response_Timeout_Control_CSR_reg Port_Response_Timeout_Control_CSR; // Response Timeout Register
      rand Port_General_Control_CSR_reg Port_General_Control_CSR; // General Control Register
      rand Port_0_Link_Maintenance_Request_CSR_reg Port_0_Link_Maintenance_Request_CSR; // Link  Maintenance Request Register
      rand Port_1_Link_Maintenance_Request_CSR_reg Port_1_Link_Maintenance_Request_CSR; // Link  Maintenance Request Register
      rand Port_2_Link_Maintenance_Request_CSR_reg Port_2_Link_Maintenance_Request_CSR; // Link  Maintenance Request Register
      rand Port_3_Link_Maintenance_Request_CSR_reg Port_3_Link_Maintenance_Request_CSR; // Link  Maintenance Request Register
      rand Port_4_Link_Maintenance_Request_CSR_reg Port_4_Link_Maintenance_Request_CSR; // Link  Maintenance Request Register
      rand Port_5_Link_Maintenance_Request_CSR_reg Port_5_Link_Maintenance_Request_CSR; // Link  Maintenance Request Register
      rand Port_6_Link_Maintenance_Request_CSR_reg Port_6_Link_Maintenance_Request_CSR; // Link  Maintenance Request Register
      rand Port_7_Link_Maintenance_Request_CSR_reg Port_7_Link_Maintenance_Request_CSR; // Link  Maintenance Request Register
      rand Port_8_Link_Maintenance_Request_CSR_reg Port_8_Link_Maintenance_Request_CSR; // Link  Maintenance Request Register
      rand Port_9_Link_Maintenance_Request_CSR_reg Port_9_Link_Maintenance_Request_CSR; // Link  Maintenance Request Register
      rand Port_10_Link_Maintenance_Request_CSR_reg Port_10_Link_Maintenance_Request_CSR; // Link  Maintenance Request Register
      rand Port_11_Link_Maintenance_Request_CSR_reg Port_11_Link_Maintenance_Request_CSR; // Link  Maintenance Request Register
      rand Port_12_Link_Maintenance_Request_CSR_reg Port_12_Link_Maintenance_Request_CSR; // Link  Maintenance Request Register
      rand Port_13_Link_Maintenance_Request_CSR_reg Port_13_Link_Maintenance_Request_CSR; // Link  Maintenance Request Register
      rand Port_14_Link_Maintenance_Request_CSR_reg Port_14_Link_Maintenance_Request_CSR; // Link  Maintenance Request Register
      rand Port_15_Link_Maintenance_Request_CSR_reg Port_15_Link_Maintenance_Request_CSR; // Link  Maintenance Request Register
      rand Port_0_Link_Maintenance_Response_CSR_reg Port_0_Link_Maintenance_Response_CSR; // Link Maintenance Response Register
      rand Port_1_Link_Maintenance_Response_CSR_reg Port_1_Link_Maintenance_Response_CSR; // Link Maintenance Response Register
      rand Port_2_Link_Maintenance_Response_CSR_reg Port_2_Link_Maintenance_Response_CSR; // Link Maintenance Response Register
      rand Port_3_Link_Maintenance_Response_CSR_reg Port_3_Link_Maintenance_Response_CSR; // Link Maintenance Response Register
      rand Port_4_Link_Maintenance_Response_CSR_reg Port_4_Link_Maintenance_Response_CSR; // Link Maintenance Response Register
      rand Port_5_Link_Maintenance_Response_CSR_reg Port_5_Link_Maintenance_Response_CSR; // Link Maintenance Response Register
      rand Port_6_Link_Maintenance_Response_CSR_reg Port_6_Link_Maintenance_Response_CSR; // Link Maintenance Response Register
      rand Port_7_Link_Maintenance_Response_CSR_reg Port_7_Link_Maintenance_Response_CSR; // Link Maintenance Response Register
      rand Port_8_Link_Maintenance_Response_CSR_reg Port_8_Link_Maintenance_Response_CSR; // Link Maintenance Response Register
      rand Port_9_Link_Maintenance_Response_CSR_reg Port_9_Link_Maintenance_Response_CSR; // Link Maintenance Response Register
      rand Port_10_Link_Maintenance_Response_CSR_reg Port_10_Link_Maintenance_Response_CSR; // Link Maintenance Response Register
      rand Port_11_Link_Maintenance_Response_CSR_reg Port_11_Link_Maintenance_Response_CSR; // Link Maintenance Response Register
      rand Port_12_Link_Maintenance_Response_CSR_reg Port_12_Link_Maintenance_Response_CSR; // Link Maintenance Response Register
      rand Port_13_Link_Maintenance_Response_CSR_reg Port_13_Link_Maintenance_Response_CSR; // Link Maintenance Response Register
      rand Port_14_Link_Maintenance_Response_CSR_reg Port_14_Link_Maintenance_Response_CSR; // Link Maintenance Response Register
      rand Port_15_Link_Maintenance_Response_CSR_reg Port_15_Link_Maintenance_Response_CSR; // Link Maintenance Response Register
      rand Port_0_Local_ackID_CSR_reg Port_0_Local_ackID_CSR; // ackID Register
      rand Port_1_Local_ackID_CSR_reg Port_1_Local_ackID_CSR; // ackID Register
      rand Port_2_Local_ackID_CSR_reg Port_2_Local_ackID_CSR; // ackID Register
      rand Port_3_Local_ackID_CSR_reg Port_3_Local_ackID_CSR; // ackID Register
      rand Port_4_Local_ackID_CSR_reg Port_4_Local_ackID_CSR; // ackID Register
      rand Port_5_Local_ackID_CSR_reg Port_5_Local_ackID_CSR; // ackID Register
      rand Port_6_Local_ackID_CSR_reg Port_6_Local_ackID_CSR; // ackID Register
      rand Port_7_Local_ackID_CSR_reg Port_7_Local_ackID_CSR; // ackID Register
      rand Port_8_Local_ackID_CSR_reg Port_8_Local_ackID_CSR; // ackID Register
      rand Port_9_Local_ackID_CSR_reg Port_9_Local_ackID_CSR; // ackID Register
      rand Port_10_Local_ackID_CSR_reg Port_10_Local_ackID_CSR; // ackID Register
      rand Port_11_Local_ackID_CSR_reg Port_11_Local_ackID_CSR; // ackID Register
      rand Port_12_Local_ackID_CSR_reg Port_12_Local_ackID_CSR; // ackID Register
      rand Port_13_Local_ackID_CSR_reg Port_13_Local_ackID_CSR; // ackID Register
      rand Port_14_Local_ackID_CSR_reg Port_14_Local_ackID_CSR; // ackID Register
      rand Port_15_Local_ackID_CSR_reg Port_15_Local_ackID_CSR; // ackID Register
      rand Port_0_Initialization_Status_CSR_reg Port_0_Initialization_Status_CSR; // Initialization_Status_Register
      rand Port_1_Initialization_Status_CSR_reg Port_1_Initialization_Status_CSR; // Initialization_Status_Register
      rand Port_2_Initialization_Status_CSR_reg Port_2_Initialization_Status_CSR; // Initialization_Status_Register
      rand Port_3_Initialization_Status_CSR_reg Port_3_Initialization_Status_CSR; // Initialization_Status_Register
      rand Port_4_Initialization_Status_CSR_reg Port_4_Initialization_Status_CSR; // Initialization_Status_Register
      rand Port_5_Initialization_Status_CSR_reg Port_5_Initialization_Status_CSR; // Initialization_Status_Register
      rand Port_6_Initialization_Status_CSR_reg Port_6_Initialization_Status_CSR; // Initialization_Status_Register
      rand Port_7_Initialization_Status_CSR_reg Port_7_Initialization_Status_CSR; // Initialization_Status_Register
      rand Port_8_Initialization_Status_CSR_reg Port_8_Initialization_Status_CSR; // Initialization_Status_Register
      rand Port_9_Initialization_Status_CSR_reg Port_9_Initialization_Status_CSR; // Initialization_Status_Register
      rand Port_10_Initialization_Status_CSR_reg Port_10_Initialization_Status_CSR; // Initialization_Status_Register
      rand Port_11_Initialization_Status_CSR_reg Port_11_Initialization_Status_CSR; // Initialization_Status_Register
      rand Port_12_Initialization_Status_CSR_reg Port_12_Initialization_Status_CSR; // Initialization_Status_Register
      rand Port_13_Initialization_Status_CSR_reg Port_13_Initialization_Status_CSR; // Initialization_Status_Register
      rand Port_14_Initialization_Status_CSR_reg Port_14_Initialization_Status_CSR; // Initialization_Status_Register
      rand Port_15_Initialization_Status_CSR_reg Port_15_Initialization_Status_CSR; // Initialization_Status_Register
      rand Port_N_Control_2_CSR_reg Port_0_Control_2_CSR; // Control 2 Register
      rand Port_N_Control_2_CSR_reg Port_1_Control_2_CSR; // Control 2 Register
      rand Port_N_Control_2_CSR_reg Port_2_Control_2_CSR; // Control 2 Register
      rand Port_N_Control_2_CSR_reg Port_3_Control_2_CSR; // Control 2 Register
      rand Port_N_Control_2_CSR_reg Port_4_Control_2_CSR; // Control 2 Register
      rand Port_N_Control_2_CSR_reg Port_5_Control_2_CSR; // Control 2 Register
      rand Port_N_Control_2_CSR_reg Port_6_Control_2_CSR; // Control 2 Register
      rand Port_N_Control_2_CSR_reg Port_7_Control_2_CSR; // Control 2 Register
      rand Port_N_Control_2_CSR_reg Port_8_Control_2_CSR; // Control 2 Register
      rand Port_N_Control_2_CSR_reg Port_9_Control_2_CSR; // Control 2 Register
      rand Port_N_Control_2_CSR_reg Port_10_Control_2_CSR; // Control 2 Register
      rand Port_N_Control_2_CSR_reg Port_11_Control_2_CSR; // Control 2 Register
      rand Port_N_Control_2_CSR_reg Port_12_Control_2_CSR; // Control 2 Register
      rand Port_N_Control_2_CSR_reg Port_13_Control_2_CSR; // Control 2 Register
      rand Port_N_Control_2_CSR_reg Port_14_Control_2_CSR; // Control 2 Register
      rand Port_N_Control_2_CSR_reg Port_15_Control_2_CSR; // Control 2 Register
      rand Port_N_Error_and_Status_CSR_reg Port_0_Error_and_Status_CSR; // Error and status Register
      rand Port_N_Error_and_Status_CSR_reg Port_1_Error_and_Status_CSR; // Error and status Register
      rand Port_N_Error_and_Status_CSR_reg Port_2_Error_and_Status_CSR; // Error and status Register
      rand Port_N_Error_and_Status_CSR_reg Port_3_Error_and_Status_CSR; // Error and status Register
      rand Port_N_Error_and_Status_CSR_reg Port_4_Error_and_Status_CSR; // Error and status Register
      rand Port_N_Error_and_Status_CSR_reg Port_5_Error_and_Status_CSR; // Error and status Register
      rand Port_N_Error_and_Status_CSR_reg Port_6_Error_and_Status_CSR; // Error and status Register
      rand Port_N_Error_and_Status_CSR_reg Port_7_Error_and_Status_CSR; // Error and status Register
      rand Port_N_Error_and_Status_CSR_reg Port_8_Error_and_Status_CSR; // Error and status Register
      rand Port_N_Error_and_Status_CSR_reg Port_9_Error_and_Status_CSR; // Error and status Register
      rand Port_N_Error_and_Status_CSR_reg Port_10_Error_and_Status_CSR; // Error and status Register
      rand Port_N_Error_and_Status_CSR_reg Port_11_Error_and_Status_CSR; // Error and status Register
      rand Port_N_Error_and_Status_CSR_reg Port_12_Error_and_Status_CSR; // Error and status Register
      rand Port_N_Error_and_Status_CSR_reg Port_13_Error_and_Status_CSR; // Error and status Register
      rand Port_N_Error_and_Status_CSR_reg Port_14_Error_and_Status_CSR; // Error and status Register
      rand Port_N_Error_and_Status_CSR_reg Port_15_Error_and_Status_CSR; // Error and status Register
      rand Port_0_Control_CSR_reg Port_0_Control_CSR; // Control Register
      rand Port_1_Control_CSR_reg Port_1_Control_CSR; // Control Register
      rand Port_2_Control_CSR_reg Port_2_Control_CSR; // Control Register
      rand Port_3_Control_CSR_reg Port_3_Control_CSR; // Control Register
      rand Port_4_Control_CSR_reg Port_4_Control_CSR; // Control Register
      rand Port_5_Control_CSR_reg Port_5_Control_CSR; // Control Register
      rand Port_6_Control_CSR_reg Port_6_Control_CSR; // Control Register
      rand Port_7_Control_CSR_reg Port_7_Control_CSR; // Control Register
      rand Port_8_Control_CSR_reg Port_8_Control_CSR; // Control Register
      rand Port_9_Control_CSR_reg Port_9_Control_CSR; // Control Register
      rand Port_10_Control_CSR_reg Port_10_Control_CSR; // Control Register
      rand Port_11_Control_CSR_reg Port_11_Control_CSR; // Control Register
      rand Port_12_Control_CSR_reg Port_12_Control_CSR; // Control Register
      rand Port_13_Control_CSR_reg Port_13_Control_CSR; // Control Register
      rand Port_14_Control_CSR_reg Port_14_Control_CSR; // Control Register
      rand Port_15_Control_CSR_reg Port_15_Control_CSR; // Control Register
      rand Port_0_Outbound_ackID_CSR_reg Port_0_Outbound_ackID_CSR; // Outbound_Register
      rand Port_1_Outbound_ackID_CSR_reg Port_1_Outbound_ackID_CSR; // Outbound_Register
      rand Port_2_Outbound_ackID_CSR_reg Port_2_Outbound_ackID_CSR; // Outbound_Register
      rand Port_3_Outbound_ackID_CSR_reg Port_3_Outbound_ackID_CSR; // Outbound_Register
      rand Port_4_Outbound_ackID_CSR_reg Port_4_Outbound_ackID_CSR; // Outbound_Register
      rand Port_5_Outbound_ackID_CSR_reg Port_5_Outbound_ackID_CSR; // Outbound_Register
      rand Port_6_Outbound_ackID_CSR_reg Port_6_Outbound_ackID_CSR; // Outbound_Register
      rand Port_7_Outbound_ackID_CSR_reg Port_7_Outbound_ackID_CSR; // Outbound_Register
      rand Port_8_Outbound_ackID_CSR_reg Port_8_Outbound_ackID_CSR; // Outbound_Register
      rand Port_9_Outbound_ackID_CSR_reg Port_9_Outbound_ackID_CSR; // Outbound_Register
      rand Port_10_Outbound_ackID_CSR_reg Port_10_Outbound_ackID_CSR; // Outbound_Register
      rand Port_11_Outbound_ackID_CSR_reg Port_11_Outbound_ackID_CSR; // Outbound_Register
      rand Port_12_Outbound_ackID_CSR_reg Port_12_Outbound_ackID_CSR; // Outbound_Register
      rand Port_13_Outbound_ackID_CSR_reg Port_13_Outbound_ackID_CSR; // Outbound_Register
      rand Port_14_Outbound_ackID_CSR_reg Port_14_Outbound_ackID_CSR; // Outbound_Register
      rand Port_15_Outbound_ackID_CSR_reg Port_15_Outbound_ackID_CSR; // Outbound_Register
      rand Port_0_Inbound_ackID_CSR_reg Port_0_Inbound_ackID_CSR; // Inbound_Register
      rand Port_1_Inbound_ackID_CSR_reg Port_1_Inbound_ackID_CSR; // Inbound_Register
      rand Port_2_Inbound_ackID_CSR_reg Port_2_Inbound_ackID_CSR; // Inbound_Register
      rand Port_3_Inbound_ackID_CSR_reg Port_3_Inbound_ackID_CSR; // Inbound_Register
      rand Port_4_Inbound_ackID_CSR_reg Port_4_Inbound_ackID_CSR; // Inbound_Register
      rand Port_5_Inbound_ackID_CSR_reg Port_5_Inbound_ackID_CSR; // Inbound_Register
      rand Port_6_Inbound_ackID_CSR_reg Port_6_Inbound_ackID_CSR; // Inbound_Register
      rand Port_7_Inbound_ackID_CSR_reg Port_7_Inbound_ackID_CSR; // Inbound_Register
      rand Port_8_Inbound_ackID_CSR_reg Port_8_Inbound_ackID_CSR; // Inbound_Register
      rand Port_9_Inbound_ackID_CSR_reg Port_9_Inbound_ackID_CSR; // Inbound_Register
      rand Port_10_Inbound_ackID_CSR_reg Port_10_Inbound_ackID_CSR; // Inbound_Register
      rand Port_11_Inbound_ackID_CSR_reg Port_11_Inbound_ackID_CSR; // Inbound_Register
      rand Port_12_Inbound_ackID_CSR_reg Port_12_Inbound_ackID_CSR; // Inbound_Register
      rand Port_13_Inbound_ackID_CSR_reg Port_13_Inbound_ackID_CSR; // Inbound_Register
      rand Port_14_Inbound_ackID_CSR_reg Port_14_Inbound_ackID_CSR; // Inbound_Register
      rand Port_15_Inbound_ackID_CSR_reg Port_15_Inbound_ackID_CSR; // Inbound_Register
      rand Port_0_Power_Management_CSR_reg Port_0_Power_Management_CSR; // Power_Management_Register
      rand Port_1_Power_Management_CSR_reg Port_1_Power_Management_CSR; // Power_Management_Register
      rand Port_2_Power_Management_CSR_reg Port_2_Power_Management_CSR; // Power_Management_Register
      rand Port_3_Power_Management_CSR_reg Port_3_Power_Management_CSR; // Power_Management_Register
      rand Port_4_Power_Management_CSR_reg Port_4_Power_Management_CSR; // Power_Management_Register
      rand Port_5_Power_Management_CSR_reg Port_5_Power_Management_CSR; // Power_Management_Register
      rand Port_6_Power_Management_CSR_reg Port_6_Power_Management_CSR; // Power_Management_Register
      rand Port_7_Power_Management_CSR_reg Port_7_Power_Management_CSR; // Power_Management_Register
      rand Port_8_Power_Management_CSR_reg Port_8_Power_Management_CSR; // Power_Management_Register
      rand Port_9_Power_Management_CSR_reg Port_9_Power_Management_CSR; // Power_Management_Register
      rand Port_10_Power_Management_CSR_reg Port_10_Power_Management_CSR; // Power_Management_Register
      rand Port_11_Power_Management_CSR_reg Port_11_Power_Management_CSR; // Power_Management_Register
      rand Port_12_Power_Management_CSR_reg Port_12_Power_Management_CSR; // Power_Management_Register
      rand Port_13_Power_Management_CSR_reg Port_13_Power_Management_CSR; // Power_Management_Register
      rand Port_14_Power_Management_CSR_reg Port_14_Power_Management_CSR; // Power_Management_Register
      rand Port_15_Power_Management_CSR_reg Port_15_Power_Management_CSR; // Power_Management_Register
      rand Port_N_Latency_Optimization_CSR_reg Port_0_Latency_Optimization_CSR; // Latency_Optimization_Register
      rand Port_N_Latency_Optimization_CSR_reg Port_1_Latency_Optimization_CSR; // Latency_Optimization_Register
      rand Port_N_Latency_Optimization_CSR_reg Port_2_Latency_Optimization_CSR; // Latency_Optimization_Register
      rand Port_N_Latency_Optimization_CSR_reg Port_3_Latency_Optimization_CSR; // Latency_Optimization_Register
      rand Port_N_Latency_Optimization_CSR_reg Port_4_Latency_Optimization_CSR; // Latency_Optimization_Register
      rand Port_N_Latency_Optimization_CSR_reg Port_5_Latency_Optimization_CSR; // Latency_Optimization_Register
      rand Port_N_Latency_Optimization_CSR_reg Port_6_Latency_Optimization_CSR; // Latency_Optimization_Register
      rand Port_N_Latency_Optimization_CSR_reg Port_7_Latency_Optimization_CSR; // Latency_Optimization_Register
      rand Port_N_Latency_Optimization_CSR_reg Port_8_Latency_Optimization_CSR; // Latency_Optimization_Register
      rand Port_N_Latency_Optimization_CSR_reg Port_9_Latency_Optimization_CSR; // Latency_Optimization_Register
      rand Port_N_Latency_Optimization_CSR_reg Port_10_Latency_Optimization_CSR; // Latency_Optimization_Register
      rand Port_N_Latency_Optimization_CSR_reg Port_11_Latency_Optimization_CSR; // Latency_Optimization_Register
      rand Port_N_Latency_Optimization_CSR_reg Port_12_Latency_Optimization_CSR; // Latency_Optimization_Register
      rand Port_N_Latency_Optimization_CSR_reg Port_13_Latency_Optimization_CSR; // Latency_Optimization_Register
      rand Port_N_Latency_Optimization_CSR_reg Port_14_Latency_Optimization_CSR; // Latency_Optimization_Register
      rand Port_N_Latency_Optimization_CSR_reg Port_15_Latency_Optimization_CSR; // Latency_Optimization_Register
      rand Port_0_Link_Timers_Control_CSR_reg Port_0_Link_Timers_Control_CSR; // Link_Timers_Control_Register
      rand Port_1_Link_Timers_Control_CSR_reg Port_1_Link_Timers_Control_CSR; // Link_Timers_Control_Register
      rand Port_2_Link_Timers_Control_CSR_reg Port_2_Link_Timers_Control_CSR; // Link_Timers_Control_Register
      rand Port_3_Link_Timers_Control_CSR_reg Port_3_Link_Timers_Control_CSR; // Link_Timers_Control_Register
      rand Port_4_Link_Timers_Control_CSR_reg Port_4_Link_Timers_Control_CSR; // Link_Timers_Control_Register
      rand Port_5_Link_Timers_Control_CSR_reg Port_5_Link_Timers_Control_CSR; // Link_Timers_Control_Register
      rand Port_6_Link_Timers_Control_CSR_reg Port_6_Link_Timers_Control_CSR; // Link_Timers_Control_Register
      rand Port_7_Link_Timers_Control_CSR_reg Port_7_Link_Timers_Control_CSR; // Link_Timers_Control_Register
      rand Port_8_Link_Timers_Control_CSR_reg Port_8_Link_Timers_Control_CSR; // Link_Timers_Control_Register
      rand Port_9_Link_Timers_Control_CSR_reg Port_9_Link_Timers_Control_CSR; // Link_Timers_Control_Register
      rand Port_10_Link_Timers_Control_CSR_reg Port_10_Link_Timers_Control_CSR; // Link_Timers_Control_Register
      rand Port_11_Link_Timers_Control_CSR_reg Port_11_Link_Timers_Control_CSR; // Link_Timers_Control_Register
      rand Port_12_Link_Timers_Control_CSR_reg Port_12_Link_Timers_Control_CSR; // Link_Timers_Control_Register
      rand Port_13_Link_Timers_Control_CSR_reg Port_13_Link_Timers_Control_CSR; // Link_Timers_Control_Register
      rand Port_14_Link_Timers_Control_CSR_reg Port_14_Link_Timers_Control_CSR; // Link_Timers_Control_Register
      rand Port_15_Link_Timers_Control_CSR_reg Port_15_Link_Timers_Control_CSR; // Link_Timers_Control_Register
      rand Port_0_Link_Timers_Control_2_CSR_reg Port_0_Link_Timers_Control_2_CSR; // Link_Timers_Control_2_Register
      rand Port_1_Link_Timers_Control_2_CSR_reg Port_1_Link_Timers_Control_2_CSR; // Link_Timers_Control_2_Register
      rand Port_2_Link_Timers_Control_2_CSR_reg Port_2_Link_Timers_Control_2_CSR; // Link_Timers_Control_2_Register
      rand Port_3_Link_Timers_Control_2_CSR_reg Port_3_Link_Timers_Control_2_CSR; // Link_Timers_Control_2_Register
      rand Port_4_Link_Timers_Control_2_CSR_reg Port_4_Link_Timers_Control_2_CSR; // Link_Timers_Control_2_Register
      rand Port_5_Link_Timers_Control_2_CSR_reg Port_5_Link_Timers_Control_2_CSR; // Link_Timers_Control_2_Register
      rand Port_6_Link_Timers_Control_2_CSR_reg Port_6_Link_Timers_Control_2_CSR; // Link_Timers_Control_2_Register
      rand Port_7_Link_Timers_Control_2_CSR_reg Port_7_Link_Timers_Control_2_CSR; // Link_Timers_Control_2_Register
      rand Port_8_Link_Timers_Control_2_CSR_reg Port_8_Link_Timers_Control_2_CSR; // Link_Timers_Control_2_Register
      rand Port_9_Link_Timers_Control_2_CSR_reg Port_9_Link_Timers_Control_2_CSR; // Link_Timers_Control_2_Register
      rand Port_10_Link_Timers_Control_2_CSR_reg Port_10_Link_Timers_Control_2_CSR; // Link_Timers_Control_2_Register
      rand Port_11_Link_Timers_Control_2_CSR_reg Port_11_Link_Timers_Control_2_CSR; // Link_Timers_Control_2_Register
      rand Port_12_Link_Timers_Control_2_CSR_reg Port_12_Link_Timers_Control_2_CSR; // Link_Timers_Control_2_Register
      rand Port_13_Link_Timers_Control_2_CSR_reg Port_13_Link_Timers_Control_2_CSR; // Link_Timers_Control_2_Register
      rand Port_14_Link_Timers_Control_2_CSR_reg Port_14_Link_Timers_Control_2_CSR; // Link_Timers_Control_2_Register
      rand Port_15_Link_Timers_Control_2_CSR_reg Port_15_Link_Timers_Control_2_CSR; // Link_Timers_Control_2_Register
      rand Port_0_Link_Timers_Control_3_CSR_reg Port_0_Link_Timers_Control_3_CSR; // Link_Timers_Control_3_Register
      rand Port_1_Link_Timers_Control_3_CSR_reg Port_1_Link_Timers_Control_3_CSR; // Link_Timers_Control_3_Register
      rand Port_2_Link_Timers_Control_3_CSR_reg Port_2_Link_Timers_Control_3_CSR; // Link_Timers_Control_3_Register
      rand Port_3_Link_Timers_Control_3_CSR_reg Port_3_Link_Timers_Control_3_CSR; // Link_Timers_Control_3_Register
      rand Port_4_Link_Timers_Control_3_CSR_reg Port_4_Link_Timers_Control_3_CSR; // Link_Timers_Control_3_Register
      rand Port_5_Link_Timers_Control_3_CSR_reg Port_5_Link_Timers_Control_3_CSR; // Link_Timers_Control_3_Register
      rand Port_6_Link_Timers_Control_3_CSR_reg Port_6_Link_Timers_Control_3_CSR; // Link_Timers_Control_3_Register
      rand Port_7_Link_Timers_Control_3_CSR_reg Port_7_Link_Timers_Control_3_CSR; // Link_Timers_Control_3_Register
      rand Port_8_Link_Timers_Control_3_CSR_reg Port_8_Link_Timers_Control_3_CSR; // Link_Timers_Control_3_Register
      rand Port_9_Link_Timers_Control_3_CSR_reg Port_9_Link_Timers_Control_3_CSR; // Link_Timers_Control_3_Register
      rand Port_10_Link_Timers_Control_3_CSR_reg Port_10_Link_Timers_Control_3_CSR; // Link_Timers_Control_3_Register
      rand Port_11_Link_Timers_Control_3_CSR_reg Port_11_Link_Timers_Control_3_CSR; // Link_Timers_Control_3_Register
      rand Port_12_Link_Timers_Control_3_CSR_reg Port_12_Link_Timers_Control_3_CSR; // Link_Timers_Control_3_Register
      rand Port_13_Link_Timers_Control_3_CSR_reg Port_13_Link_Timers_Control_3_CSR; // Link_Timers_Control_3_Register
      rand Port_14_Link_Timers_Control_3_CSR_reg Port_14_Link_Timers_Control_3_CSR; // Link_Timers_Control_3_Register
      rand Port_15_Link_Timers_Control_3_CSR_reg Port_15_Link_Timers_Control_3_CSR; // Link_Timers_Control_3_Register
      rand LP_Serial_Lane_Register_Block_Header_reg LP_Serial_Lane_Register_Block_Header; // Block Header Register
      rand Lane_0_Status_0_CSR_reg Lane_0_Status_0_CSR; // Status 0 Register
      rand Lane_0_Status_1_CSR_reg Lane_0_Status_1_CSR; // Status 1 Register
      rand Lane_0_Status_2_CSR_reg Lane_0_Status_2_CSR; // Status 2 Register
      rand Lane_0_Status_3_CSR_reg Lane_0_Status_3_CSR; // Status 3 Register
      rand Lane_1_Status_0_CSR_reg Lane_1_Status_0_CSR; // Status 0 Register
      rand Lane_1_Status_1_CSR_reg Lane_1_Status_1_CSR; // Status 1 Register
      rand Lane_1_Status_2_CSR_reg Lane_1_Status_2_CSR; // Status 2 Register
      rand Lane_1_Status_3_CSR_reg Lane_1_Status_3_CSR; // Status 3 Register
      rand Lane_2_Status_0_CSR_reg Lane_2_Status_0_CSR; // Status 0 Register
      rand Lane_2_Status_1_CSR_reg Lane_2_Status_1_CSR; // Status 1 Register
      rand Lane_2_Status_2_CSR_reg Lane_2_Status_2_CSR; // Status 2 Register
      rand Lane_2_Status_3_CSR_reg Lane_2_Status_3_CSR; // Status 3 Register
      rand Lane_3_Status_0_CSR_reg Lane_3_Status_0_CSR; // Status 0 Register
      rand Lane_3_Status_1_CSR_reg Lane_3_Status_1_CSR; // Status 1 Register
      rand Lane_3_Status_2_CSR_reg Lane_3_Status_2_CSR; // Status 2 Register
      rand Lane_3_Status_3_CSR_reg Lane_3_Status_3_CSR; // Status 3 Register
      rand Lane_4_Status_0_CSR_reg Lane_4_Status_0_CSR; // Status 0 Register
      rand Lane_4_Status_1_CSR_reg Lane_4_Status_1_CSR; // Status 1 Register
      rand Lane_4_Status_2_CSR_reg Lane_4_Status_2_CSR; // Status 2 Register
      rand Lane_4_Status_3_CSR_reg Lane_4_Status_3_CSR; // Status 3 Register
      rand Lane_5_Status_0_CSR_reg Lane_5_Status_0_CSR; // Status 0 Register
      rand Lane_5_Status_1_CSR_reg Lane_5_Status_1_CSR; // Status 1 Register
      rand Lane_5_Status_2_CSR_reg Lane_5_Status_2_CSR; // Status 2 Register
      rand Lane_5_Status_3_CSR_reg Lane_5_Status_3_CSR; // Status 3 Register
      rand Lane_6_Status_0_CSR_reg Lane_6_Status_0_CSR; // Status 0 Register
      rand Lane_6_Status_1_CSR_reg Lane_6_Status_1_CSR; // Status 1 Register
      rand Lane_6_Status_2_CSR_reg Lane_6_Status_2_CSR; // Status 2 Register
      rand Lane_6_Status_3_CSR_reg Lane_6_Status_3_CSR; // Status 3 Register
      rand Lane_7_Status_0_CSR_reg Lane_7_Status_0_CSR; // Status 0 Register
      rand Lane_7_Status_1_CSR_reg Lane_7_Status_1_CSR; // Status 1 Register
      rand Lane_7_Status_2_CSR_reg Lane_7_Status_2_CSR; // Status 2 Register
      rand Lane_7_Status_3_CSR_reg Lane_7_Status_3_CSR; // Status 3 Register
      rand Lane_8_Status_0_CSR_reg Lane_8_Status_0_CSR; // Status 0 Register
      rand Lane_8_Status_1_CSR_reg Lane_8_Status_1_CSR; // Status 1 Register
      rand Lane_8_Status_2_CSR_reg Lane_8_Status_2_CSR; // Status 2 Register
      rand Lane_8_Status_3_CSR_reg Lane_8_Status_3_CSR; // Status 3 Register
      rand Lane_9_Status_0_CSR_reg Lane_9_Status_0_CSR; // Status 0 Register
      rand Lane_9_Status_1_CSR_reg Lane_9_Status_1_CSR; // Status 1 Register
      rand Lane_9_Status_2_CSR_reg Lane_9_Status_2_CSR; // Status 2 Register
      rand Lane_9_Status_3_CSR_reg Lane_9_Status_3_CSR; // Status 3 Register
      rand Lane_10_Status_0_CSR_reg Lane_10_Status_0_CSR; // Status 0 Register
      rand Lane_10_Status_1_CSR_reg Lane_10_Status_1_CSR; // Status 1 Register
      rand Lane_10_Status_2_CSR_reg Lane_10_Status_2_CSR; // Status 2 Register
      rand Lane_10_Status_3_CSR_reg Lane_10_Status_3_CSR; // Status 3 Register
      rand Lane_11_Status_0_CSR_reg Lane_11_Status_0_CSR; // Status 0 Register
      rand Lane_11_Status_1_CSR_reg Lane_11_Status_1_CSR; // Status 1 Register
      rand Lane_11_Status_2_CSR_reg Lane_11_Status_2_CSR; // Status 2 Register
      rand Lane_11_Status_3_CSR_reg Lane_11_Status_3_CSR; // Status 3 Register
      rand Lane_12_Status_0_CSR_reg Lane_12_Status_0_CSR; // Status 0 Register
      rand Lane_12_Status_1_CSR_reg Lane_12_Status_1_CSR; // Status 1 Register
      rand Lane_12_Status_2_CSR_reg Lane_12_Status_2_CSR; // Status 2 Register
      rand Lane_12_Status_3_CSR_reg Lane_12_Status_3_CSR; // Status 3 Register
      rand Lane_13_Status_0_CSR_reg Lane_13_Status_0_CSR; // Status 0 Register
      rand Lane_13_Status_1_CSR_reg Lane_13_Status_1_CSR; // Status 1 Register
      rand Lane_13_Status_2_CSR_reg Lane_13_Status_2_CSR; // Status 2 Register
      rand Lane_13_Status_3_CSR_reg Lane_13_Status_3_CSR; // Status 3 Register
      rand Lane_14_Status_0_CSR_reg Lane_14_Status_0_CSR; // Status 0 Register
      rand Lane_14_Status_1_CSR_reg Lane_14_Status_1_CSR; // Status 1 Register
      rand Lane_14_Status_2_CSR_reg Lane_14_Status_2_CSR; // Status 2 Register
      rand Lane_14_Status_3_CSR_reg Lane_14_Status_3_CSR; // Status 3 Register
      rand Lane_15_Status_0_CSR_reg Lane_15_Status_0_CSR; // Status 0 Register
      rand Lane_15_Status_1_CSR_reg Lane_15_Status_1_CSR; // Status 1 Register
      rand Lane_15_Status_2_CSR_reg Lane_15_Status_2_CSR; // Status 2 Register
      rand Lane_15_Status_3_CSR_reg Lane_15_Status_3_CSR; // Status 3 Register
      rand VC_Register_Block_Header_reg VC_Register_Block_Header; // Block Header Register
      rand Port_0_VC_Control_and_Status_Register_reg Port_0_VC_Control_and_Status_Register; // CSR Register
      rand Port_1_VC_Control_and_Status_Register_reg Port_1_VC_Control_and_Status_Register; // CSR Register
      rand Port_2_VC_Control_and_Status_Register_reg Port_2_VC_Control_and_Status_Register; // CSR Register
      rand Port_3_VC_Control_and_Status_Register_reg Port_3_VC_Control_and_Status_Register; // CSR Register
      rand Port_4_VC_Control_and_Status_Register_reg Port_4_VC_Control_and_Status_Register; // CSR Register
      rand Port_5_VC_Control_and_Status_Register_reg Port_5_VC_Control_and_Status_Register; // CSR Register
      rand Port_6_VC_Control_and_Status_Register_reg Port_6_VC_Control_and_Status_Register; // CSR Register
      rand Port_7_VC_Control_and_Status_Register_reg Port_7_VC_Control_and_Status_Register; // CSR Register
      rand Port_8_VC_Control_and_Status_Register_reg Port_8_VC_Control_and_Status_Register; // CSR Register
      rand Port_9_VC_Control_and_Status_Register_reg Port_9_VC_Control_and_Status_Register; // CSR Register
      rand Port_10_VC_Control_and_Status_Register_reg Port_10_VC_Control_and_Status_Register; // CSR Register
      rand Port_11_VC_Control_and_Status_Register_reg Port_11_VC_Control_and_Status_Register; // CSR Register
      rand Port_12_VC_Control_and_Status_Register_reg Port_12_VC_Control_and_Status_Register; // CSR Register
      rand Port_13_VC_Control_and_Status_Register_reg Port_13_VC_Control_and_Status_Register; // CSR Register
      rand Port_14_VC_Control_and_Status_Register_reg Port_14_VC_Control_and_Status_Register; // CSR Register
      rand Port_15_VC_Control_and_Status_Register_reg Port_15_VC_Control_and_Status_Register; // CSR Register
      rand Port_0_VC0_BW_Allocation_Register_reg Port_0_VC0_BW_Allocation_Register; // BW Register
      rand Port_1_VC0_BW_Allocation_Register_reg Port_1_VC0_BW_Allocation_Register; // BW Register
      rand Port_2_VC0_BW_Allocation_Register_reg Port_2_VC0_BW_Allocation_Register; // BW Register
      rand Port_3_VC0_BW_Allocation_Register_reg Port_3_VC0_BW_Allocation_Register; // BW Register
      rand Port_4_VC0_BW_Allocation_Register_reg Port_4_VC0_BW_Allocation_Register; // BW Register
      rand Port_5_VC0_BW_Allocation_Register_reg Port_5_VC0_BW_Allocation_Register; // BW Register
      rand Port_6_VC0_BW_Allocation_Register_reg Port_6_VC0_BW_Allocation_Register; // BW Register
      rand Port_7_VC0_BW_Allocation_Register_reg Port_7_VC0_BW_Allocation_Register; // BW Register
      rand Port_8_VC0_BW_Allocation_Register_reg Port_8_VC0_BW_Allocation_Register; // BW Register
      rand Port_9_VC0_BW_Allocation_Register_reg Port_9_VC0_BW_Allocation_Register; // BW Register
      rand Port_10_VC0_BW_Allocation_Register_reg Port_10_VC0_BW_Allocation_Register; // BW Register
      rand Port_11_VC0_BW_Allocation_Register_reg Port_11_VC0_BW_Allocation_Register; // BW Register
      rand Port_12_VC0_BW_Allocation_Register_reg Port_12_VC0_BW_Allocation_Register; // BW Register
      rand Port_13_VC0_BW_Allocation_Register_reg Port_13_VC0_BW_Allocation_Register; // BW Register
      rand Port_14_VC0_BW_Allocation_Register_reg Port_14_VC0_BW_Allocation_Register; // BW Register
      rand Port_15_VC0_BW_Allocation_Register_reg Port_15_VC0_BW_Allocation_Register; // BW Register
      rand Port_0_VC5_VC1_BW_Allocation_Register_reg Port_0_VC5_VC1_BW_Allocation_Register; // BW Allocation Register
      rand Port_1_VC5_VC1_BW_Allocation_Register_reg Port_1_VC5_VC1_BW_Allocation_Register; // BW Allocation Register
      rand Port_2_VC5_VC1_BW_Allocation_Register_reg Port_2_VC5_VC1_BW_Allocation_Register; // BW Allocation Register
      rand Port_3_VC5_VC1_BW_Allocation_Register_reg Port_3_VC5_VC1_BW_Allocation_Register; // BW Allocation Register
      rand Port_4_VC5_VC1_BW_Allocation_Register_reg Port_4_VC5_VC1_BW_Allocation_Register; // BW Allocation Register
      rand Port_5_VC5_VC1_BW_Allocation_Register_reg Port_5_VC5_VC1_BW_Allocation_Register; // BW Allocation Register
      rand Port_6_VC5_VC1_BW_Allocation_Register_reg Port_6_VC5_VC1_BW_Allocation_Register; // BW Allocation Register
      rand Port_7_VC5_VC1_BW_Allocation_Register_reg Port_7_VC5_VC1_BW_Allocation_Register; // BW Allocation Register
      rand Port_8_VC5_VC1_BW_Allocation_Register_reg Port_8_VC5_VC1_BW_Allocation_Register; // BW Allocation Register
      rand Port_9_VC5_VC1_BW_Allocation_Register_reg Port_9_VC5_VC1_BW_Allocation_Register; // BW Allocation Register
      rand Port_10_VC5_VC1_BW_Allocation_Register_reg Port_10_VC5_VC1_BW_Allocation_Register; // BW Allocation Register
      rand Port_11_VC5_VC1_BW_Allocation_Register_reg Port_11_VC5_VC1_BW_Allocation_Register; // BW Allocation Register
      rand Port_12_VC5_VC1_BW_Allocation_Register_reg Port_12_VC5_VC1_BW_Allocation_Register; // BW Allocation Register
      rand Port_13_VC5_VC1_BW_Allocation_Register_reg Port_13_VC5_VC1_BW_Allocation_Register; // BW Allocation Register
      rand Port_14_VC5_VC1_BW_Allocation_Register_reg Port_14_VC5_VC1_BW_Allocation_Register; // BW Allocation Register
      rand Port_15_VC5_VC1_BW_Allocation_Register_reg Port_15_VC5_VC1_BW_Allocation_Register; // BW Allocation Register
      rand Port_0_VC7_VC3_BW_Allocation_Register_reg Port_0_VC7_VC3_BW_Allocation_Register; // BW Allocation Register
      rand Port_1_VC7_VC3_BW_Allocation_Register_reg Port_1_VC7_VC3_BW_Allocation_Register; // BW Allocation Register
      rand Port_2_VC7_VC3_BW_Allocation_Register_reg Port_2_VC7_VC3_BW_Allocation_Register; // BW Allocation Register
      rand Port_3_VC7_VC3_BW_Allocation_Register_reg Port_3_VC7_VC3_BW_Allocation_Register; // BW Allocation Register
      rand Port_4_VC7_VC3_BW_Allocation_Register_reg Port_4_VC7_VC3_BW_Allocation_Register; // BW Allocation Register
      rand Port_5_VC7_VC3_BW_Allocation_Register_reg Port_5_VC7_VC3_BW_Allocation_Register; // BW Allocation Register
      rand Port_6_VC7_VC3_BW_Allocation_Register_reg Port_6_VC7_VC3_BW_Allocation_Register; // BW Allocation Register
      rand Port_7_VC7_VC3_BW_Allocation_Register_reg Port_7_VC7_VC3_BW_Allocation_Register; // BW Allocation Register
      rand Port_8_VC7_VC3_BW_Allocation_Register_reg Port_8_VC7_VC3_BW_Allocation_Register; // BW Allocation Register
      rand Port_9_VC7_VC3_BW_Allocation_Register_reg Port_9_VC7_VC3_BW_Allocation_Register; // BW Allocation Register
      rand Port_10_VC7_VC3_BW_Allocation_Register_reg Port_10_VC7_VC3_BW_Allocation_Register; // BW Allocation Register
      rand Port_11_VC7_VC3_BW_Allocation_Register_reg Port_11_VC7_VC3_BW_Allocation_Register; // BW Allocation Register
      rand Port_12_VC7_VC3_BW_Allocation_Register_reg Port_12_VC7_VC3_BW_Allocation_Register; // BW Allocation Register
      rand Port_13_VC7_VC3_BW_Allocation_Register_reg Port_13_VC7_VC3_BW_Allocation_Register; // BW Allocation Register
      rand Port_14_VC7_VC3_BW_Allocation_Register_reg Port_14_VC7_VC3_BW_Allocation_Register; // BW Allocation Register
      rand Port_15_VC7_VC3_BW_Allocation_Register_reg Port_15_VC7_VC3_BW_Allocation_Register; // BW Allocation Register
      rand Port_0_VC6_VC2_BW_Allocation_Register_reg Port_0_VC6_VC2_BW_Allocation_Register; // BW Allocation Register
      rand Port_1_VC6_VC2_BW_Allocation_Register_reg Port_1_VC6_VC2_BW_Allocation_Register; // BW Allocation Register
      rand Port_2_VC6_VC2_BW_Allocation_Register_reg Port_2_VC6_VC2_BW_Allocation_Register; // BW Allocation Register
      rand Port_3_VC6_VC2_BW_Allocation_Register_reg Port_3_VC6_VC2_BW_Allocation_Register; // BW Allocation Register
      rand Port_4_VC6_VC2_BW_Allocation_Register_reg Port_4_VC6_VC2_BW_Allocation_Register; // BW Allocation Register
      rand Port_5_VC6_VC2_BW_Allocation_Register_reg Port_5_VC6_VC2_BW_Allocation_Register; // BW Allocation Register
      rand Port_6_VC6_VC2_BW_Allocation_Register_reg Port_6_VC6_VC2_BW_Allocation_Register; // BW Allocation Register
      rand Port_7_VC6_VC2_BW_Allocation_Register_reg Port_7_VC6_VC2_BW_Allocation_Register; // BW Allocation Register
      rand Port_8_VC6_VC2_BW_Allocation_Register_reg Port_8_VC6_VC2_BW_Allocation_Register; // BW Allocation Register
      rand Port_9_VC6_VC2_BW_Allocation_Register_reg Port_9_VC6_VC2_BW_Allocation_Register; // BW Allocation Register
      rand Port_10_VC6_VC2_BW_Allocation_Register_reg Port_10_VC6_VC2_BW_Allocation_Register; // BW Allocation Register
      rand Port_11_VC6_VC2_BW_Allocation_Register_reg Port_11_VC6_VC2_BW_Allocation_Register; // BW Allocation Register
      rand Port_12_VC6_VC2_BW_Allocation_Register_reg Port_12_VC6_VC2_BW_Allocation_Register; // BW Allocation Register
      rand Port_13_VC6_VC2_BW_Allocation_Register_reg Port_13_VC6_VC2_BW_Allocation_Register; // BW Allocation Register
      rand Port_14_VC6_VC2_BW_Allocation_Register_reg Port_14_VC6_VC2_BW_Allocation_Register; // BW Allocation Register
      rand Port_15_VC6_VC2_BW_Allocation_Register_reg Port_15_VC6_VC2_BW_Allocation_Register; // BW Allocation Register
      rand Port_0_VC8_VC4_BW_Allocation_Register_reg Port_0_VC8_VC4_BW_Allocation_Register; // BW Allocation Register
      rand Port_1_VC8_VC4_BW_Allocation_Register_reg Port_1_VC8_VC4_BW_Allocation_Register; // BW Allocation Register
      rand Port_2_VC8_VC4_BW_Allocation_Register_reg Port_2_VC8_VC4_BW_Allocation_Register; // BW Allocation Register
      rand Port_3_VC8_VC4_BW_Allocation_Register_reg Port_3_VC8_VC4_BW_Allocation_Register; // BW Allocation Register
      rand Port_4_VC8_VC4_BW_Allocation_Register_reg Port_4_VC8_VC4_BW_Allocation_Register; // BW Allocation Register
      rand Port_5_VC8_VC4_BW_Allocation_Register_reg Port_5_VC8_VC4_BW_Allocation_Register; // BW Allocation Register
      rand Port_6_VC8_VC4_BW_Allocation_Register_reg Port_6_VC8_VC4_BW_Allocation_Register; // BW Allocation Register
      rand Port_7_VC8_VC4_BW_Allocation_Register_reg Port_7_VC8_VC4_BW_Allocation_Register; // BW Allocation Register
      rand Port_8_VC8_VC4_BW_Allocation_Register_reg Port_8_VC8_VC4_BW_Allocation_Register; // BW Allocation Register
      rand Port_9_VC8_VC4_BW_Allocation_Register_reg Port_9_VC8_VC4_BW_Allocation_Register; // BW Allocation Register
      rand Port_10_VC8_VC4_BW_Allocation_Register_reg Port_10_VC8_VC4_BW_Allocation_Register; // BW Allocation Register
      rand Port_11_VC8_VC4_BW_Allocation_Register_reg Port_11_VC8_VC4_BW_Allocation_Register; // BW Allocation Register
      rand Port_12_VC8_VC4_BW_Allocation_Register_reg Port_12_VC8_VC4_BW_Allocation_Register; // BW Allocation Register
      rand Port_13_VC8_VC4_BW_Allocation_Register_reg Port_13_VC8_VC4_BW_Allocation_Register; // BW Allocation Register
      rand Port_14_VC8_VC4_BW_Allocation_Register_reg Port_14_VC8_VC4_BW_Allocation_Register; // BW Allocation Register
      rand Port_15_VC8_VC4_BW_Allocation_Register_reg Port_15_VC8_VC4_BW_Allocation_Register; // BW Allocation Register
      rand Error_Management_Extensions_Block_Header_reg Error_Management_Extensions_Block_Header; // Error Management Header
      rand Error_Management_Hot_Swap_Extensions_Block_CAR_reg Error_Management_Hot_Swap_Extensions_Block_CAR; // Error_Management_Hot_Swap_Extensions_Block_CAR_Register
      rand Logical_Transport_Layer_Error_Detect_CSR_reg Logical_Transport_Layer_Error_Detect_CSR; // Error Detect Register
      rand Logical_Transport_Layer_Error_Enable_CSR_reg Logical_Transport_Layer_Error_Enable_CSR; // Error Enable Register
      rand Logical_Transport_Layer_High_Address_Capture_CSR_reg Logical_Transport_Layer_High_Address_Capture_CSR; // High Address capture register
      rand Logical_Transport_Layer_Address_Capture_CSR_reg Logical_Transport_Layer_Address_Capture_CSR; // Address capture register
      rand Logical_Transport_Layer_Device_ID_Capture_CSR_reg Logical_Transport_Layer_Device_ID_Capture_CSR; // Device ID Register
      rand Logical_Transport_Layer_Control_Capture_CSR_reg Logical_Transport_Layer_Control_Capture_CSR; // Control Register
      rand Logical_Transport_Layer_Dev32_Destination_ID_Capture_CSR_reg Logical_Transport_Layer_Dev32_Destination_ID_Capture_CSR; // Logical_Transport_Layer_Dev32_Destination_ID_Capture_CSR_Register
      rand Logical_Transport_Layer_Dev32_Source_ID_Capture_CSR_reg Logical_Transport_Layer_Dev32_Source_ID_Capture_CSR; // Logical_Transport_Layer_Dev32_Source_ID_Capture_CSR_Register
      rand Port_write_Target_deviceID_CSR_reg Port_write_Target_deviceID_CSR; // Target Device ID Register
      rand Packet_Time_to_live_CSR_reg Packet_Time_to_live_CSR; // Time to Live Register
      rand Port_Write_Dev32_Target_DeviceID_CSR_reg Port_Write_Dev32_Target_DeviceID_CSR; // Port_Write_Dev32_Target_DeviceID_CSR_Register
      rand Port_Write_Transmission_Control_CSR_reg Port_Write_Transmission_Control_CSR; // Port_Write_Transmission_Control_CSR_Register
      rand Port_N_Error_Detect_CSR_reg Port_0_Error_Detect_CSR; // Error Detect Register
      rand Port_N_Error_Detect_CSR_reg Port_1_Error_Detect_CSR; // Error Detect Register
      rand Port_N_Error_Detect_CSR_reg Port_2_Error_Detect_CSR; // Error Detect Register
      rand Port_N_Error_Detect_CSR_reg Port_3_Error_Detect_CSR; // Error Detect Register
      rand Port_N_Error_Detect_CSR_reg Port_4_Error_Detect_CSR; // Error Detect Register
      rand Port_N_Error_Detect_CSR_reg Port_5_Error_Detect_CSR; // Error Detect Register
      rand Port_N_Error_Detect_CSR_reg Port_6_Error_Detect_CSR; // Error Detect Register
      rand Port_N_Error_Detect_CSR_reg Port_7_Error_Detect_CSR; // Error Detect Register
      rand Port_N_Error_Detect_CSR_reg Port_8_Error_Detect_CSR; // Error Detect Register
      rand Port_N_Error_Detect_CSR_reg Port_9_Error_Detect_CSR; // Error Detect Register
      rand Port_N_Error_Detect_CSR_reg Port_10_Error_Detect_CSR; // Error Detect Register
      rand Port_N_Error_Detect_CSR_reg Port_11_Error_Detect_CSR; // Error Detect Register
      rand Port_N_Error_Detect_CSR_reg Port_12_Error_Detect_CSR; // Error Detect Register
      rand Port_N_Error_Detect_CSR_reg Port_13_Error_Detect_CSR; // Error Detect Register
      rand Port_N_Error_Detect_CSR_reg Port_14_Error_Detect_CSR; // Error Detect Register
      rand Port_N_Error_Detect_CSR_reg Port_15_Error_Detect_CSR; // Error Detect Register
      rand Port_N_Error_Rate_Enable_CSR_reg Port_0_Error_Rate_Enable_CSR; // Error Rate Enable Register
      rand Port_N_Error_Rate_Enable_CSR_reg Port_1_Error_Rate_Enable_CSR; // Error Rate Enable Register
      rand Port_N_Error_Rate_Enable_CSR_reg Port_2_Error_Rate_Enable_CSR; // Error Rate Enable Register
      rand Port_N_Error_Rate_Enable_CSR_reg Port_3_Error_Rate_Enable_CSR; // Error Rate Enable Register
      rand Port_N_Error_Rate_Enable_CSR_reg Port_4_Error_Rate_Enable_CSR; // Error Rate Enable Register
      rand Port_N_Error_Rate_Enable_CSR_reg Port_5_Error_Rate_Enable_CSR; // Error Rate Enable Register
      rand Port_N_Error_Rate_Enable_CSR_reg Port_6_Error_Rate_Enable_CSR; // Error Rate Enable Register
      rand Port_N_Error_Rate_Enable_CSR_reg Port_7_Error_Rate_Enable_CSR; // Error Rate Enable Register
      rand Port_N_Error_Rate_Enable_CSR_reg Port_8_Error_Rate_Enable_CSR; // Error Rate Enable Register
      rand Port_N_Error_Rate_Enable_CSR_reg Port_9_Error_Rate_Enable_CSR; // Error Rate Enable Register
      rand Port_N_Error_Rate_Enable_CSR_reg Port_10_Error_Rate_Enable_CSR; // Error Rate Enable Register
      rand Port_N_Error_Rate_Enable_CSR_reg Port_11_Error_Rate_Enable_CSR; // Error Rate Enable Register
      rand Port_N_Error_Rate_Enable_CSR_reg Port_12_Error_Rate_Enable_CSR; // Error Rate Enable Register
      rand Port_N_Error_Rate_Enable_CSR_reg Port_13_Error_Rate_Enable_CSR; // Error Rate Enable Register
      rand Port_N_Error_Rate_Enable_CSR_reg Port_14_Error_Rate_Enable_CSR; // Error Rate Enable Register
      rand Port_N_Error_Rate_Enable_CSR_reg Port_15_Error_Rate_Enable_CSR; // Error Rate Enable Register
      rand Port_0_Attributes_Capture_CSR_reg Port_0_Attributes_Capture_CSR; // Attributes Register
      rand Port_1_Attributes_Capture_CSR_reg Port_1_Attributes_Capture_CSR; // Attributes Register
      rand Port_2_Attributes_Capture_CSR_reg Port_2_Attributes_Capture_CSR; // Attributes Register
      rand Port_3_Attributes_Capture_CSR_reg Port_3_Attributes_Capture_CSR; // Attributes Register
      rand Port_4_Attributes_Capture_CSR_reg Port_4_Attributes_Capture_CSR; // Attributes Register
      rand Port_5_Attributes_Capture_CSR_reg Port_5_Attributes_Capture_CSR; // Attributes Register
      rand Port_6_Attributes_Capture_CSR_reg Port_6_Attributes_Capture_CSR; // Attributes Register
      rand Port_7_Attributes_Capture_CSR_reg Port_7_Attributes_Capture_CSR; // Attributes Register
      rand Port_8_Attributes_Capture_CSR_reg Port_8_Attributes_Capture_CSR; // Attributes Register
      rand Port_9_Attributes_Capture_CSR_reg Port_9_Attributes_Capture_CSR; // Attributes Register
      rand Port_10_Attributes_Capture_CSR_reg Port_10_Attributes_Capture_CSR; // Attributes Register
      rand Port_11_Attributes_Capture_CSR_reg Port_11_Attributes_Capture_CSR; // Attributes Register
      rand Port_12_Attributes_Capture_CSR_reg Port_12_Attributes_Capture_CSR; // Attributes Register
      rand Port_13_Attributes_Capture_CSR_reg Port_13_Attributes_Capture_CSR; // Attributes Register
      rand Port_14_Attributes_Capture_CSR_reg Port_14_Attributes_Capture_CSR; // Attributes Register
      rand Port_15_Attributes_Capture_CSR_reg Port_15_Attributes_Capture_CSR; // Attributes Register
      rand Port_0_Packet_Control_Symbol_Capture_0_CSR_reg Port_0_Packet_Control_Symbol_Capture_0_CSR; // Symbol Capture Register
      rand Port_1_Packet_Control_Symbol_Capture_0_CSR_reg Port_1_Packet_Control_Symbol_Capture_0_CSR; // Symbol Capture Register
      rand Port_2_Packet_Control_Symbol_Capture_0_CSR_reg Port_2_Packet_Control_Symbol_Capture_0_CSR; // Symbol Capture Register
      rand Port_3_Packet_Control_Symbol_Capture_0_CSR_reg Port_3_Packet_Control_Symbol_Capture_0_CSR; // Symbol Capture Register
      rand Port_4_Packet_Control_Symbol_Capture_0_CSR_reg Port_4_Packet_Control_Symbol_Capture_0_CSR; // Symbol Capture Register
      rand Port_5_Packet_Control_Symbol_Capture_0_CSR_reg Port_5_Packet_Control_Symbol_Capture_0_CSR; // Symbol Capture Register
      rand Port_6_Packet_Control_Symbol_Capture_0_CSR_reg Port_6_Packet_Control_Symbol_Capture_0_CSR; // Symbol Capture Register
      rand Port_7_Packet_Control_Symbol_Capture_0_CSR_reg Port_7_Packet_Control_Symbol_Capture_0_CSR; // Symbol Capture Register
      rand Port_8_Packet_Control_Symbol_Capture_0_CSR_reg Port_8_Packet_Control_Symbol_Capture_0_CSR; // Symbol Capture Register
      rand Port_9_Packet_Control_Symbol_Capture_0_CSR_reg Port_9_Packet_Control_Symbol_Capture_0_CSR; // Symbol Capture Register
      rand Port_10_Packet_Control_Symbol_Capture_0_CSR_reg Port_10_Packet_Control_Symbol_Capture_0_CSR; // Symbol Capture Register
      rand Port_11_Packet_Control_Symbol_Capture_0_CSR_reg Port_11_Packet_Control_Symbol_Capture_0_CSR; // Symbol Capture Register
      rand Port_12_Packet_Control_Symbol_Capture_0_CSR_reg Port_12_Packet_Control_Symbol_Capture_0_CSR; // Symbol Capture Register
      rand Port_13_Packet_Control_Symbol_Capture_0_CSR_reg Port_13_Packet_Control_Symbol_Capture_0_CSR; // Symbol Capture Register
      rand Port_14_Packet_Control_Symbol_Capture_0_CSR_reg Port_14_Packet_Control_Symbol_Capture_0_CSR; // Symbol Capture Register
      rand Port_15_Packet_Control_Symbol_Capture_0_CSR_reg Port_15_Packet_Control_Symbol_Capture_0_CSR; // Symbol Capture Register
      rand Port_0_Packet_Capture_1_CSR_reg Port_0_Packet_Capture_1_CSR; // Packet Capture 1 Register
      rand Port_1_Packet_Capture_1_CSR_reg Port_1_Packet_Capture_1_CSR; // Packet Capture 1 Register
      rand Port_2_Packet_Capture_1_CSR_reg Port_2_Packet_Capture_1_CSR; // Packet Capture 1 Register
      rand Port_3_Packet_Capture_1_CSR_reg Port_3_Packet_Capture_1_CSR; // Packet Capture 1 Register
      rand Port_4_Packet_Capture_1_CSR_reg Port_4_Packet_Capture_1_CSR; // Packet Capture 1 Register
      rand Port_5_Packet_Capture_1_CSR_reg Port_5_Packet_Capture_1_CSR; // Packet Capture 1 Register
      rand Port_6_Packet_Capture_1_CSR_reg Port_6_Packet_Capture_1_CSR; // Packet Capture 1 Register
      rand Port_7_Packet_Capture_1_CSR_reg Port_7_Packet_Capture_1_CSR; // Packet Capture 1 Register
      rand Port_8_Packet_Capture_1_CSR_reg Port_8_Packet_Capture_1_CSR; // Packet Capture 1 Register
      rand Port_9_Packet_Capture_1_CSR_reg Port_9_Packet_Capture_1_CSR; // Packet Capture 1 Register
      rand Port_10_Packet_Capture_1_CSR_reg Port_10_Packet_Capture_1_CSR; // Packet Capture 1 Register
      rand Port_11_Packet_Capture_1_CSR_reg Port_11_Packet_Capture_1_CSR; // Packet Capture 1 Register
      rand Port_12_Packet_Capture_1_CSR_reg Port_12_Packet_Capture_1_CSR; // Packet Capture 1 Register
      rand Port_13_Packet_Capture_1_CSR_reg Port_13_Packet_Capture_1_CSR; // Packet Capture 1 Register
      rand Port_14_Packet_Capture_1_CSR_reg Port_14_Packet_Capture_1_CSR; // Packet Capture 1 Register
      rand Port_15_Packet_Capture_1_CSR_reg Port_15_Packet_Capture_1_CSR; // Packet Capture 1 Register
      rand Port_0_Packet_Capture_2_CSR_reg Port_0_Packet_Capture_2_CSR; // Packet Capture 2 Register
      rand Port_1_Packet_Capture_2_CSR_reg Port_1_Packet_Capture_2_CSR; // Packet Capture 2 Register
      rand Port_2_Packet_Capture_2_CSR_reg Port_2_Packet_Capture_2_CSR; // Packet Capture 2 Register
      rand Port_3_Packet_Capture_2_CSR_reg Port_3_Packet_Capture_2_CSR; // Packet Capture 2 Register
      rand Port_4_Packet_Capture_2_CSR_reg Port_4_Packet_Capture_2_CSR; // Packet Capture 2 Register
      rand Port_5_Packet_Capture_2_CSR_reg Port_5_Packet_Capture_2_CSR; // Packet Capture 2 Register
      rand Port_6_Packet_Capture_2_CSR_reg Port_6_Packet_Capture_2_CSR; // Packet Capture 2 Register
      rand Port_7_Packet_Capture_2_CSR_reg Port_7_Packet_Capture_2_CSR; // Packet Capture 2 Register
      rand Port_8_Packet_Capture_2_CSR_reg Port_8_Packet_Capture_2_CSR; // Packet Capture 2 Register
      rand Port_9_Packet_Capture_2_CSR_reg Port_9_Packet_Capture_2_CSR; // Packet Capture 2 Register
      rand Port_10_Packet_Capture_2_CSR_reg Port_10_Packet_Capture_2_CSR; // Packet Capture 2 Register
      rand Port_11_Packet_Capture_2_CSR_reg Port_11_Packet_Capture_2_CSR; // Packet Capture 2 Register
      rand Port_12_Packet_Capture_2_CSR_reg Port_12_Packet_Capture_2_CSR; // Packet Capture 2 Register
      rand Port_13_Packet_Capture_2_CSR_reg Port_13_Packet_Capture_2_CSR; // Packet Capture 2 Register
      rand Port_14_Packet_Capture_2_CSR_reg Port_14_Packet_Capture_2_CSR; // Packet Capture 2 Register
      rand Port_15_Packet_Capture_2_CSR_reg Port_15_Packet_Capture_2_CSR; // Packet Capture 2 Register
      rand Port_0_Packet_Capture_3_CSR_reg Port_0_Packet_Capture_3_CSR; // Packet Capture 3 Register
      rand Port_1_Packet_Capture_3_CSR_reg Port_1_Packet_Capture_3_CSR; // Packet Capture 3 Register
      rand Port_2_Packet_Capture_3_CSR_reg Port_2_Packet_Capture_3_CSR; // Packet Capture 3 Register
      rand Port_3_Packet_Capture_3_CSR_reg Port_3_Packet_Capture_3_CSR; // Packet Capture 3 Register
      rand Port_4_Packet_Capture_3_CSR_reg Port_4_Packet_Capture_3_CSR; // Packet Capture 3 Register
      rand Port_5_Packet_Capture_3_CSR_reg Port_5_Packet_Capture_3_CSR; // Packet Capture 3 Register
      rand Port_6_Packet_Capture_3_CSR_reg Port_6_Packet_Capture_3_CSR; // Packet Capture 3 Register
      rand Port_7_Packet_Capture_3_CSR_reg Port_7_Packet_Capture_3_CSR; // Packet Capture 3 Register
      rand Port_8_Packet_Capture_3_CSR_reg Port_8_Packet_Capture_3_CSR; // Packet Capture 3 Register
      rand Port_9_Packet_Capture_3_CSR_reg Port_9_Packet_Capture_3_CSR; // Packet Capture 3 Register
      rand Port_10_Packet_Capture_3_CSR_reg Port_10_Packet_Capture_3_CSR; // Packet Capture 3 Register
      rand Port_11_Packet_Capture_3_CSR_reg Port_11_Packet_Capture_3_CSR; // Packet Capture 3 Register
      rand Port_12_Packet_Capture_3_CSR_reg Port_12_Packet_Capture_3_CSR; // Packet Capture 3 Register
      rand Port_13_Packet_Capture_3_CSR_reg Port_13_Packet_Capture_3_CSR; // Packet Capture 3 Register
      rand Port_14_Packet_Capture_3_CSR_reg Port_14_Packet_Capture_3_CSR; // Packet Capture 3 Register
      rand Port_15_Packet_Capture_3_CSR_reg Port_15_Packet_Capture_3_CSR; // Packet Capture 3 Register
      rand Port_0_Packet_Capture_4_CSR_reg Port_0_Packet_Capture_4_CSR; // Packet Capture 4 Register
      rand Port_1_Packet_Capture_4_CSR_reg Port_1_Packet_Capture_4_CSR; // Packet Capture 4 Register
      rand Port_2_Packet_Capture_4_CSR_reg Port_2_Packet_Capture_4_CSR; // Packet Capture 4 Register
      rand Port_3_Packet_Capture_4_CSR_reg Port_3_Packet_Capture_4_CSR; // Packet Capture 4 Register
      rand Port_4_Packet_Capture_4_CSR_reg Port_4_Packet_Capture_4_CSR; // Packet Capture 4 Register
      rand Port_5_Packet_Capture_4_CSR_reg Port_5_Packet_Capture_4_CSR; // Packet Capture 4 Register
      rand Port_6_Packet_Capture_4_CSR_reg Port_6_Packet_Capture_4_CSR; // Packet Capture 4 Register
      rand Port_7_Packet_Capture_4_CSR_reg Port_7_Packet_Capture_4_CSR; // Packet Capture 4 Register
      rand Port_8_Packet_Capture_4_CSR_reg Port_8_Packet_Capture_4_CSR; // Packet Capture 4 Register
      rand Port_9_Packet_Capture_4_CSR_reg Port_9_Packet_Capture_4_CSR; // Packet Capture 4 Register
      rand Port_10_Packet_Capture_4_CSR_reg Port_10_Packet_Capture_4_CSR; // Packet Capture 4 Register
      rand Port_11_Packet_Capture_4_CSR_reg Port_11_Packet_Capture_4_CSR; // Packet Capture 4 Register
      rand Port_12_Packet_Capture_4_CSR_reg Port_12_Packet_Capture_4_CSR; // Packet Capture 4 Register
      rand Port_13_Packet_Capture_4_CSR_reg Port_13_Packet_Capture_4_CSR; // Packet Capture 4 Register
      rand Port_14_Packet_Capture_4_CSR_reg Port_14_Packet_Capture_4_CSR; // Packet Capture 4 Register
      rand Port_15_Packet_Capture_4_CSR_reg Port_15_Packet_Capture_4_CSR; // Packet Capture 4 Register
      rand Port_0_Error_Rate_CSR_reg Port_0_Error_Rate_CSR; // Error Rate Register
      rand Port_1_Error_Rate_CSR_reg Port_1_Error_Rate_CSR; // Error Rate Register
      rand Port_2_Error_Rate_CSR_reg Port_2_Error_Rate_CSR; // Error Rate Register
      rand Port_3_Error_Rate_CSR_reg Port_3_Error_Rate_CSR; // Error Rate Register
      rand Port_4_Error_Rate_CSR_reg Port_4_Error_Rate_CSR; // Error Rate Register
      rand Port_5_Error_Rate_CSR_reg Port_5_Error_Rate_CSR; // Error Rate Register
      rand Port_6_Error_Rate_CSR_reg Port_6_Error_Rate_CSR; // Error Rate Register
      rand Port_7_Error_Rate_CSR_reg Port_7_Error_Rate_CSR; // Error Rate Register
      rand Port_8_Error_Rate_CSR_reg Port_8_Error_Rate_CSR; // Error Rate Register
      rand Port_9_Error_Rate_CSR_reg Port_9_Error_Rate_CSR; // Error Rate Register
      rand Port_10_Error_Rate_CSR_reg Port_10_Error_Rate_CSR; // Error Rate Register
      rand Port_11_Error_Rate_CSR_reg Port_11_Error_Rate_CSR; // Error Rate Register
      rand Port_12_Error_Rate_CSR_reg Port_12_Error_Rate_CSR; // Error Rate Register
      rand Port_13_Error_Rate_CSR_reg Port_13_Error_Rate_CSR; // Error Rate Register
      rand Port_14_Error_Rate_CSR_reg Port_14_Error_Rate_CSR; // Error Rate Register
      rand Port_15_Error_Rate_CSR_reg Port_15_Error_Rate_CSR; // Error Rate Register
      rand Port_0_Error_Rate_Threshold_CSR_reg Port_0_Error_Rate_Threshold_CSR; // Error Threshold Register
      rand Port_1_Error_Rate_Threshold_CSR_reg Port_1_Error_Rate_Threshold_CSR; // Error Threshold Register
      rand Port_2_Error_Rate_Threshold_CSR_reg Port_2_Error_Rate_Threshold_CSR; // Error Threshold Register
      rand Port_3_Error_Rate_Threshold_CSR_reg Port_3_Error_Rate_Threshold_CSR; // Error Threshold Register
      rand Port_4_Error_Rate_Threshold_CSR_reg Port_4_Error_Rate_Threshold_CSR; // Error Threshold Register
      rand Port_5_Error_Rate_Threshold_CSR_reg Port_5_Error_Rate_Threshold_CSR; // Error Threshold Register
      rand Port_6_Error_Rate_Threshold_CSR_reg Port_6_Error_Rate_Threshold_CSR; // Error Threshold Register
      rand Port_7_Error_Rate_Threshold_CSR_reg Port_7_Error_Rate_Threshold_CSR; // Error Threshold Register
      rand Port_8_Error_Rate_Threshold_CSR_reg Port_8_Error_Rate_Threshold_CSR; // Error Threshold Register
      rand Port_9_Error_Rate_Threshold_CSR_reg Port_9_Error_Rate_Threshold_CSR; // Error Threshold Register
      rand Port_10_Error_Rate_Threshold_CSR_reg Port_10_Error_Rate_Threshold_CSR; // Error Threshold Register
      rand Port_11_Error_Rate_Threshold_CSR_reg Port_11_Error_Rate_Threshold_CSR; // Error Threshold Register
      rand Port_12_Error_Rate_Threshold_CSR_reg Port_12_Error_Rate_Threshold_CSR; // Error Threshold Register
      rand Port_13_Error_Rate_Threshold_CSR_reg Port_13_Error_Rate_Threshold_CSR; // Error Threshold Register
      rand Port_14_Error_Rate_Threshold_CSR_reg Port_14_Error_Rate_Threshold_CSR; // Error Threshold Register
      rand Port_15_Error_Rate_Threshold_CSR_reg Port_15_Error_Rate_Threshold_CSR; // Error Threshold Register
      rand Port_0_Link_Uninit_Discard_Timer_CSR_reg Port_0_Link_Uninit_Discard_Timer_CSR; // Link_Uninit_Discard_Timer_CSR_Register
      rand Port_1_Link_Uninit_Discard_Timer_CSR_reg Port_1_Link_Uninit_Discard_Timer_CSR; // Link_Uninit_Discard_Timer_CSR_Register
      rand Port_2_Link_Uninit_Discard_Timer_CSR_reg Port_2_Link_Uninit_Discard_Timer_CSR; // Link_Uninit_Discard_Timer_CSR_Register
      rand Port_3_Link_Uninit_Discard_Timer_CSR_reg Port_3_Link_Uninit_Discard_Timer_CSR; // Link_Uninit_Discard_Timer_CSR_Register
      rand Port_4_Link_Uninit_Discard_Timer_CSR_reg Port_4_Link_Uninit_Discard_Timer_CSR; // Link_Uninit_Discard_Timer_CSR_Register
      rand Port_5_Link_Uninit_Discard_Timer_CSR_reg Port_5_Link_Uninit_Discard_Timer_CSR; // Link_Uninit_Discard_Timer_CSR_Register
      rand Port_6_Link_Uninit_Discard_Timer_CSR_reg Port_6_Link_Uninit_Discard_Timer_CSR; // Link_Uninit_Discard_Timer_CSR_Register
      rand Port_7_Link_Uninit_Discard_Timer_CSR_reg Port_7_Link_Uninit_Discard_Timer_CSR; // Link_Uninit_Discard_Timer_CSR_Register
      rand Port_8_Link_Uninit_Discard_Timer_CSR_reg Port_8_Link_Uninit_Discard_Timer_CSR; // Link_Uninit_Discard_Timer_CSR_Register
      rand Port_9_Link_Uninit_Discard_Timer_CSR_reg Port_9_Link_Uninit_Discard_Timer_CSR; // Link_Uninit_Discard_Timer_CSR_Register
      rand Port_10_Link_Uninit_Discard_Timer_CSR_reg Port_10_Link_Uninit_Discard_Timer_CSR; // Link_Uninit_Discard_Timer_CSR_Register
      rand Port_11_Link_Uninit_Discard_Timer_CSR_reg Port_11_Link_Uninit_Discard_Timer_CSR; // Link_Uninit_Discard_Timer_CSR_Register
      rand Port_12_Link_Uninit_Discard_Timer_CSR_reg Port_12_Link_Uninit_Discard_Timer_CSR; // Link_Uninit_Discard_Timer_CSR_Register
      rand Port_13_Link_Uninit_Discard_Timer_CSR_reg Port_13_Link_Uninit_Discard_Timer_CSR; // Link_Uninit_Discard_Timer_CSR_Register
      rand Port_14_Link_Uninit_Discard_Timer_CSR_reg Port_14_Link_Uninit_Discard_Timer_CSR; // Link_Uninit_Discard_Timer_CSR_Register
      rand Port_15_Link_Uninit_Discard_Timer_CSR_reg Port_15_Link_Uninit_Discard_Timer_CSR; // Link_Uninit_Discard_Timer_CSR_Register
      rand Timestamp_Generation_Extension_Block_Header_reg Timestamp_Generation_Extension_Block_Header; // Timestamp_Generation_Extension_Register
      rand Timestamp_CAR_reg Timestamp_CAR; // Timestamp_CAR_Register
      rand Timestamp_Generator_Status_CSR_reg Timestamp_Generator_Status_CSR; // Timestamp_Generator_Status_Register
      rand Timestamp_Generator_MSW_CSR_reg Timestamp_Generator_MSW_CSR; // Timestamp_Generator_MSW_Register
      rand Timestamp_Generator_LSW_CSR_reg Timestamp_Generator_LSW_CSR; // Timestamp_Generator_LSW_Register
      rand Port_0_Timestamp_0_MSW_CSR_reg Port_0_Timestamp_0_MSW_CSR; // Timestamp_0_MSW_Register
      rand Port_1_Timestamp_0_MSW_CSR_reg Port_1_Timestamp_0_MSW_CSR; // Timestamp_0_MSW_Register
      rand Port_2_Timestamp_0_MSW_CSR_reg Port_2_Timestamp_0_MSW_CSR; // Timestamp_0_MSW_Register
      rand Port_3_Timestamp_0_MSW_CSR_reg Port_3_Timestamp_0_MSW_CSR; // Timestamp_0_MSW_Register
      rand Port_4_Timestamp_0_MSW_CSR_reg Port_4_Timestamp_0_MSW_CSR; // Timestamp_0_MSW_Register
      rand Port_5_Timestamp_0_MSW_CSR_reg Port_5_Timestamp_0_MSW_CSR; // Timestamp_0_MSW_Register
      rand Port_6_Timestamp_0_MSW_CSR_reg Port_6_Timestamp_0_MSW_CSR; // Timestamp_0_MSW_Register
      rand Port_7_Timestamp_0_MSW_CSR_reg Port_7_Timestamp_0_MSW_CSR; // Timestamp_0_MSW_Register
      rand Port_8_Timestamp_0_MSW_CSR_reg Port_8_Timestamp_0_MSW_CSR; // Timestamp_0_MSW_Register
      rand Port_9_Timestamp_0_MSW_CSR_reg Port_9_Timestamp_0_MSW_CSR; // Timestamp_0_MSW_Register
      rand Port_10_Timestamp_0_MSW_CSR_reg Port_10_Timestamp_0_MSW_CSR; // Timestamp_0_MSW_Register
      rand Port_11_Timestamp_0_MSW_CSR_reg Port_11_Timestamp_0_MSW_CSR; // Timestamp_0_MSW_Register
      rand Port_12_Timestamp_0_MSW_CSR_reg Port_12_Timestamp_0_MSW_CSR; // Timestamp_0_MSW_Register
      rand Port_13_Timestamp_0_MSW_CSR_reg Port_13_Timestamp_0_MSW_CSR; // Timestamp_0_MSW_Register
      rand Port_14_Timestamp_0_MSW_CSR_reg Port_14_Timestamp_0_MSW_CSR; // Timestamp_0_MSW_Register
      rand Port_15_Timestamp_0_MSW_CSR_reg Port_15_Timestamp_0_MSW_CSR; // Timestamp_0_MSW_Register
      rand Port_0_Timestamp_0_LSW_CSR_reg Port_0_Timestamp_0_LSW_CSR; // Timestamp_0_LSW_Register
      rand Port_1_Timestamp_0_LSW_CSR_reg Port_1_Timestamp_0_LSW_CSR; // Timestamp_0_LSW_Register
      rand Port_2_Timestamp_0_LSW_CSR_reg Port_2_Timestamp_0_LSW_CSR; // Timestamp_0_LSW_Register
      rand Port_3_Timestamp_0_LSW_CSR_reg Port_3_Timestamp_0_LSW_CSR; // Timestamp_0_LSW_Register
      rand Port_4_Timestamp_0_LSW_CSR_reg Port_4_Timestamp_0_LSW_CSR; // Timestamp_0_LSW_Register
      rand Port_5_Timestamp_0_LSW_CSR_reg Port_5_Timestamp_0_LSW_CSR; // Timestamp_0_LSW_Register
      rand Port_6_Timestamp_0_LSW_CSR_reg Port_6_Timestamp_0_LSW_CSR; // Timestamp_0_LSW_Register
      rand Port_7_Timestamp_0_LSW_CSR_reg Port_7_Timestamp_0_LSW_CSR; // Timestamp_0_LSW_Register
      rand Port_8_Timestamp_0_LSW_CSR_reg Port_8_Timestamp_0_LSW_CSR; // Timestamp_0_LSW_Register
      rand Port_9_Timestamp_0_LSW_CSR_reg Port_9_Timestamp_0_LSW_CSR; // Timestamp_0_LSW_Register
      rand Port_10_Timestamp_0_LSW_CSR_reg Port_10_Timestamp_0_LSW_CSR; // Timestamp_0_LSW_Register
      rand Port_11_Timestamp_0_LSW_CSR_reg Port_11_Timestamp_0_LSW_CSR; // Timestamp_0_LSW_Register
      rand Port_12_Timestamp_0_LSW_CSR_reg Port_12_Timestamp_0_LSW_CSR; // Timestamp_0_LSW_Register
      rand Port_13_Timestamp_0_LSW_CSR_reg Port_13_Timestamp_0_LSW_CSR; // Timestamp_0_LSW_Register
      rand Port_14_Timestamp_0_LSW_CSR_reg Port_14_Timestamp_0_LSW_CSR; // Timestamp_0_LSW_Register
      rand Port_15_Timestamp_0_LSW_CSR_reg Port_15_Timestamp_0_LSW_CSR; // Timestamp_0_LSW_Register
      rand Port_0_Timestamp_1_MSW_CSR_reg Port_0_Timestamp_1_MSW_CSR; // Timestamp_1_MSW_Register
      rand Port_1_Timestamp_1_MSW_CSR_reg Port_1_Timestamp_1_MSW_CSR; // Timestamp_1_MSW_Register
      rand Port_2_Timestamp_1_MSW_CSR_reg Port_2_Timestamp_1_MSW_CSR; // Timestamp_1_MSW_Register
      rand Port_3_Timestamp_1_MSW_CSR_reg Port_3_Timestamp_1_MSW_CSR; // Timestamp_1_MSW_Register
      rand Port_4_Timestamp_1_MSW_CSR_reg Port_4_Timestamp_1_MSW_CSR; // Timestamp_1_MSW_Register
      rand Port_5_Timestamp_1_MSW_CSR_reg Port_5_Timestamp_1_MSW_CSR; // Timestamp_1_MSW_Register
      rand Port_6_Timestamp_1_MSW_CSR_reg Port_6_Timestamp_1_MSW_CSR; // Timestamp_1_MSW_Register
      rand Port_7_Timestamp_1_MSW_CSR_reg Port_7_Timestamp_1_MSW_CSR; // Timestamp_1_MSW_Register
      rand Port_8_Timestamp_1_MSW_CSR_reg Port_8_Timestamp_1_MSW_CSR; // Timestamp_1_MSW_Register
      rand Port_9_Timestamp_1_MSW_CSR_reg Port_9_Timestamp_1_MSW_CSR; // Timestamp_1_MSW_Register
      rand Port_10_Timestamp_1_MSW_CSR_reg Port_10_Timestamp_1_MSW_CSR; // Timestamp_1_MSW_Register
      rand Port_11_Timestamp_1_MSW_CSR_reg Port_11_Timestamp_1_MSW_CSR; // Timestamp_1_MSW_Register
      rand Port_12_Timestamp_1_MSW_CSR_reg Port_12_Timestamp_1_MSW_CSR; // Timestamp_1_MSW_Register
      rand Port_13_Timestamp_1_MSW_CSR_reg Port_13_Timestamp_1_MSW_CSR; // Timestamp_1_MSW_Register
      rand Port_14_Timestamp_1_MSW_CSR_reg Port_14_Timestamp_1_MSW_CSR; // Timestamp_1_MSW_Register
      rand Port_15_Timestamp_1_MSW_CSR_reg Port_15_Timestamp_1_MSW_CSR; // Timestamp_1_MSW_Register
      rand Port_0_Timestamp_1_LSW_CSR_reg Port_0_Timestamp_1_LSW_CSR; // Timestamp_1_LSW_Register
      rand Port_1_Timestamp_1_LSW_CSR_reg Port_1_Timestamp_1_LSW_CSR; // Timestamp_1_LSW_Register
      rand Port_2_Timestamp_1_LSW_CSR_reg Port_2_Timestamp_1_LSW_CSR; // Timestamp_1_LSW_Register
      rand Port_3_Timestamp_1_LSW_CSR_reg Port_3_Timestamp_1_LSW_CSR; // Timestamp_1_LSW_Register
      rand Port_4_Timestamp_1_LSW_CSR_reg Port_4_Timestamp_1_LSW_CSR; // Timestamp_1_LSW_Register
      rand Port_5_Timestamp_1_LSW_CSR_reg Port_5_Timestamp_1_LSW_CSR; // Timestamp_1_LSW_Register
      rand Port_6_Timestamp_1_LSW_CSR_reg Port_6_Timestamp_1_LSW_CSR; // Timestamp_1_LSW_Register
      rand Port_7_Timestamp_1_LSW_CSR_reg Port_7_Timestamp_1_LSW_CSR; // Timestamp_1_LSW_Register
      rand Port_8_Timestamp_1_LSW_CSR_reg Port_8_Timestamp_1_LSW_CSR; // Timestamp_1_LSW_Register
      rand Port_9_Timestamp_1_LSW_CSR_reg Port_9_Timestamp_1_LSW_CSR; // Timestamp_1_LSW_Register
      rand Port_10_Timestamp_1_LSW_CSR_reg Port_10_Timestamp_1_LSW_CSR; // Timestamp_1_LSW_Register
      rand Port_11_Timestamp_1_LSW_CSR_reg Port_11_Timestamp_1_LSW_CSR; // Timestamp_1_LSW_Register
      rand Port_12_Timestamp_1_LSW_CSR_reg Port_12_Timestamp_1_LSW_CSR; // Timestamp_1_LSW_Register
      rand Port_13_Timestamp_1_LSW_CSR_reg Port_13_Timestamp_1_LSW_CSR; // Timestamp_1_LSW_Register
      rand Port_14_Timestamp_1_LSW_CSR_reg Port_14_Timestamp_1_LSW_CSR; // Timestamp_1_LSW_Register
      rand Port_15_Timestamp_1_LSW_CSR_reg Port_15_Timestamp_1_LSW_CSR; // Timestamp_1_LSW_Register
      rand Port_0_Timestamp_Generator_Synchronization_CSR_reg Port_0_Timestamp_Generator_Synchronization_CSR; // Timestamp_Generator_Synchronization_Register
      rand Port_1_Timestamp_Generator_Synchronization_CSR_reg Port_1_Timestamp_Generator_Synchronization_CSR; // Timestamp_Generator_Synchronization_Register
      rand Port_2_Timestamp_Generator_Synchronization_CSR_reg Port_2_Timestamp_Generator_Synchronization_CSR; // Timestamp_Generator_Synchronization_Register
      rand Port_3_Timestamp_Generator_Synchronization_CSR_reg Port_3_Timestamp_Generator_Synchronization_CSR; // Timestamp_Generator_Synchronization_Register
      rand Port_4_Timestamp_Generator_Synchronization_CSR_reg Port_4_Timestamp_Generator_Synchronization_CSR; // Timestamp_Generator_Synchronization_Register
      rand Port_5_Timestamp_Generator_Synchronization_CSR_reg Port_5_Timestamp_Generator_Synchronization_CSR; // Timestamp_Generator_Synchronization_Register
      rand Port_6_Timestamp_Generator_Synchronization_CSR_reg Port_6_Timestamp_Generator_Synchronization_CSR; // Timestamp_Generator_Synchronization_Register
      rand Port_7_Timestamp_Generator_Synchronization_CSR_reg Port_7_Timestamp_Generator_Synchronization_CSR; // Timestamp_Generator_Synchronization_Register
      rand Port_8_Timestamp_Generator_Synchronization_CSR_reg Port_8_Timestamp_Generator_Synchronization_CSR; // Timestamp_Generator_Synchronization_Register
      rand Port_9_Timestamp_Generator_Synchronization_CSR_reg Port_9_Timestamp_Generator_Synchronization_CSR; // Timestamp_Generator_Synchronization_Register
      rand Port_10_Timestamp_Generator_Synchronization_CSR_reg Port_10_Timestamp_Generator_Synchronization_CSR; // Timestamp_Generator_Synchronization_Register
      rand Port_11_Timestamp_Generator_Synchronization_CSR_reg Port_11_Timestamp_Generator_Synchronization_CSR; // Timestamp_Generator_Synchronization_Register
      rand Port_12_Timestamp_Generator_Synchronization_CSR_reg Port_12_Timestamp_Generator_Synchronization_CSR; // Timestamp_Generator_Synchronization_Register
      rand Port_13_Timestamp_Generator_Synchronization_CSR_reg Port_13_Timestamp_Generator_Synchronization_CSR; // Timestamp_Generator_Synchronization_Register
      rand Port_14_Timestamp_Generator_Synchronization_CSR_reg Port_14_Timestamp_Generator_Synchronization_CSR; // Timestamp_Generator_Synchronization_Register
      rand Port_15_Timestamp_Generator_Synchronization_CSR_reg Port_15_Timestamp_Generator_Synchronization_CSR; // Timestamp_Generator_Synchronization_Register
      rand Port_0_Auto_Update_Counter_CSR_reg Port_0_Auto_Update_Counter_CSR; // Auto_Update_Counter_CSR_Register
      rand Port_1_Auto_Update_Counter_CSR_reg Port_1_Auto_Update_Counter_CSR; // Auto_Update_Counter_CSR_Register
      rand Port_2_Auto_Update_Counter_CSR_reg Port_2_Auto_Update_Counter_CSR; // Auto_Update_Counter_CSR_Register
      rand Port_3_Auto_Update_Counter_CSR_reg Port_3_Auto_Update_Counter_CSR; // Auto_Update_Counter_CSR_Register
      rand Port_4_Auto_Update_Counter_CSR_reg Port_4_Auto_Update_Counter_CSR; // Auto_Update_Counter_CSR_Register
      rand Port_5_Auto_Update_Counter_CSR_reg Port_5_Auto_Update_Counter_CSR; // Auto_Update_Counter_CSR_Register
      rand Port_6_Auto_Update_Counter_CSR_reg Port_6_Auto_Update_Counter_CSR; // Auto_Update_Counter_CSR_Register
      rand Port_7_Auto_Update_Counter_CSR_reg Port_7_Auto_Update_Counter_CSR; // Auto_Update_Counter_CSR_Register
      rand Port_8_Auto_Update_Counter_CSR_reg Port_8_Auto_Update_Counter_CSR; // Auto_Update_Counter_CSR_Register
      rand Port_9_Auto_Update_Counter_CSR_reg Port_9_Auto_Update_Counter_CSR; // Auto_Update_Counter_CSR_Register
      rand Port_10_Auto_Update_Counter_CSR_reg Port_10_Auto_Update_Counter_CSR; // Auto_Update_Counter_CSR_Register
      rand Port_11_Auto_Update_Counter_CSR_reg Port_11_Auto_Update_Counter_CSR; // Auto_Update_Counter_CSR_Register
      rand Port_12_Auto_Update_Counter_CSR_reg Port_12_Auto_Update_Counter_CSR; // Auto_Update_Counter_CSR_Register
      rand Port_13_Auto_Update_Counter_CSR_reg Port_13_Auto_Update_Counter_CSR; // Auto_Update_Counter_CSR_Register
      rand Port_14_Auto_Update_Counter_CSR_reg Port_14_Auto_Update_Counter_CSR; // Auto_Update_Counter_CSR_Register
      rand Port_15_Auto_Update_Counter_CSR_reg Port_15_Auto_Update_Counter_CSR; // Auto_Update_Counter_CSR_Register
      rand Port_0_Timestamp_Synchronization_Command_CSR_reg Port_0_Timestamp_Synchronization_Command_CSR; // Timestamp_Synchronization_Command_CSR_Register
      rand Port_1_Timestamp_Synchronization_Command_CSR_reg Port_1_Timestamp_Synchronization_Command_CSR; // Timestamp_Synchronization_Command_CSR_Register
      rand Port_2_Timestamp_Synchronization_Command_CSR_reg Port_2_Timestamp_Synchronization_Command_CSR; // Timestamp_Synchronization_Command_CSR_Register
      rand Port_3_Timestamp_Synchronization_Command_CSR_reg Port_3_Timestamp_Synchronization_Command_CSR; // Timestamp_Synchronization_Command_CSR_Register
      rand Port_4_Timestamp_Synchronization_Command_CSR_reg Port_4_Timestamp_Synchronization_Command_CSR; // Timestamp_Synchronization_Command_CSR_Register
      rand Port_5_Timestamp_Synchronization_Command_CSR_reg Port_5_Timestamp_Synchronization_Command_CSR; // Timestamp_Synchronization_Command_CSR_Register
      rand Port_6_Timestamp_Synchronization_Command_CSR_reg Port_6_Timestamp_Synchronization_Command_CSR; // Timestamp_Synchronization_Command_CSR_Register
      rand Port_7_Timestamp_Synchronization_Command_CSR_reg Port_7_Timestamp_Synchronization_Command_CSR; // Timestamp_Synchronization_Command_CSR_Register
      rand Port_8_Timestamp_Synchronization_Command_CSR_reg Port_8_Timestamp_Synchronization_Command_CSR; // Timestamp_Synchronization_Command_CSR_Register
      rand Port_9_Timestamp_Synchronization_Command_CSR_reg Port_9_Timestamp_Synchronization_Command_CSR; // Timestamp_Synchronization_Command_CSR_Register
      rand Port_10_Timestamp_Synchronization_Command_CSR_reg Port_10_Timestamp_Synchronization_Command_CSR; // Timestamp_Synchronization_Command_CSR_Register
      rand Port_11_Timestamp_Synchronization_Command_CSR_reg Port_11_Timestamp_Synchronization_Command_CSR; // Timestamp_Synchronization_Command_CSR_Register
      rand Port_12_Timestamp_Synchronization_Command_CSR_reg Port_12_Timestamp_Synchronization_Command_CSR; // Timestamp_Synchronization_Command_CSR_Register
      rand Port_13_Timestamp_Synchronization_Command_CSR_reg Port_13_Timestamp_Synchronization_Command_CSR; // Timestamp_Synchronization_Command_CSR_Register
      rand Port_14_Timestamp_Synchronization_Command_CSR_reg Port_14_Timestamp_Synchronization_Command_CSR; // Timestamp_Synchronization_Command_CSR_Register
      rand Port_15_Timestamp_Synchronization_Command_CSR_reg Port_15_Timestamp_Synchronization_Command_CSR; // Timestamp_Synchronization_Command_CSR_Register
      rand Port_0_Timestamp_Synchronization_Status_CSR_reg Port_0_Timestamp_Synchronization_Status_CSR; // Timestamp_Synchronization_Status_CSR_Register
      rand Port_1_Timestamp_Synchronization_Status_CSR_reg Port_1_Timestamp_Synchronization_Status_CSR; // Timestamp_Synchronization_Status_CSR_Register
      rand Port_2_Timestamp_Synchronization_Status_CSR_reg Port_2_Timestamp_Synchronization_Status_CSR; // Timestamp_Synchronization_Status_CSR_Register
      rand Port_3_Timestamp_Synchronization_Status_CSR_reg Port_3_Timestamp_Synchronization_Status_CSR; // Timestamp_Synchronization_Status_CSR_Register
      rand Port_4_Timestamp_Synchronization_Status_CSR_reg Port_4_Timestamp_Synchronization_Status_CSR; // Timestamp_Synchronization_Status_CSR_Register
      rand Port_5_Timestamp_Synchronization_Status_CSR_reg Port_5_Timestamp_Synchronization_Status_CSR; // Timestamp_Synchronization_Status_CSR_Register
      rand Port_6_Timestamp_Synchronization_Status_CSR_reg Port_6_Timestamp_Synchronization_Status_CSR; // Timestamp_Synchronization_Status_CSR_Register
      rand Port_7_Timestamp_Synchronization_Status_CSR_reg Port_7_Timestamp_Synchronization_Status_CSR; // Timestamp_Synchronization_Status_CSR_Register
      rand Port_8_Timestamp_Synchronization_Status_CSR_reg Port_8_Timestamp_Synchronization_Status_CSR; // Timestamp_Synchronization_Status_CSR_Register
      rand Port_9_Timestamp_Synchronization_Status_CSR_reg Port_9_Timestamp_Synchronization_Status_CSR; // Timestamp_Synchronization_Status_CSR_Register
      rand Port_10_Timestamp_Synchronization_Status_CSR_reg Port_10_Timestamp_Synchronization_Status_CSR; // Timestamp_Synchronization_Status_CSR_Register
      rand Port_11_Timestamp_Synchronization_Status_CSR_reg Port_11_Timestamp_Synchronization_Status_CSR; // Timestamp_Synchronization_Status_CSR_Register
      rand Port_12_Timestamp_Synchronization_Status_CSR_reg Port_12_Timestamp_Synchronization_Status_CSR; // Timestamp_Synchronization_Status_CSR_Register
      rand Port_13_Timestamp_Synchronization_Status_CSR_reg Port_13_Timestamp_Synchronization_Status_CSR; // Timestamp_Synchronization_Status_CSR_Register
      rand Port_14_Timestamp_Synchronization_Status_CSR_reg Port_14_Timestamp_Synchronization_Status_CSR; // Timestamp_Synchronization_Status_CSR_Register
      rand Port_15_Timestamp_Synchronization_Status_CSR_reg Port_15_Timestamp_Synchronization_Status_CSR; // Timestamp_Synchronization_Status_CSR_Register
      rand Port_0_Timestamp_Offset_CSR_reg Port_0_Timestamp_Offset_CSR; // Timestamp_Offset_CSR_Register
      rand Port_1_Timestamp_Offset_CSR_reg Port_1_Timestamp_Offset_CSR; // Timestamp_Offset_CSR_Register
      rand Port_2_Timestamp_Offset_CSR_reg Port_2_Timestamp_Offset_CSR; // Timestamp_Offset_CSR_Register
      rand Port_3_Timestamp_Offset_CSR_reg Port_3_Timestamp_Offset_CSR; // Timestamp_Offset_CSR_Register
      rand Port_4_Timestamp_Offset_CSR_reg Port_4_Timestamp_Offset_CSR; // Timestamp_Offset_CSR_Register
      rand Port_5_Timestamp_Offset_CSR_reg Port_5_Timestamp_Offset_CSR; // Timestamp_Offset_CSR_Register
      rand Port_6_Timestamp_Offset_CSR_reg Port_6_Timestamp_Offset_CSR; // Timestamp_Offset_CSR_Register
      rand Port_7_Timestamp_Offset_CSR_reg Port_7_Timestamp_Offset_CSR; // Timestamp_Offset_CSR_Register
      rand Port_8_Timestamp_Offset_CSR_reg Port_8_Timestamp_Offset_CSR; // Timestamp_Offset_CSR_Register
      rand Port_9_Timestamp_Offset_CSR_reg Port_9_Timestamp_Offset_CSR; // Timestamp_Offset_CSR_Register
      rand Port_10_Timestamp_Offset_CSR_reg Port_10_Timestamp_Offset_CSR; // Timestamp_Offset_CSR_Register
      rand Port_11_Timestamp_Offset_CSR_reg Port_11_Timestamp_Offset_CSR; // Timestamp_Offset_CSR_Register
      rand Port_12_Timestamp_Offset_CSR_reg Port_12_Timestamp_Offset_CSR; // Timestamp_Offset_CSR_Register
      rand Port_13_Timestamp_Offset_CSR_reg Port_13_Timestamp_Offset_CSR; // Timestamp_Offset_CSR_Register
      rand Port_14_Timestamp_Offset_CSR_reg Port_14_Timestamp_Offset_CSR; // Timestamp_Offset_CSR_Register
      rand Port_15_Timestamp_Offset_CSR_reg Port_15_Timestamp_Offset_CSR; // Timestamp_Offset_CSR_Register
      rand LP_Serial_VC_Register_Block_Header_reg LP_Serial_VC_Register_Block_Header; // VC_Register_Block_Header
      rand Port_0_VoQ_Control_Status_Register_reg Port_0_VoQ_Control_Status_Register; // VoQ_Control_Status_Register
      rand Port_1_VoQ_Control_Status_Register_reg Port_1_VoQ_Control_Status_Register; // VoQ_Control_Status_Register
      rand Port_2_VoQ_Control_Status_Register_reg Port_2_VoQ_Control_Status_Register; // VoQ_Control_Status_Register
      rand Port_3_VoQ_Control_Status_Register_reg Port_3_VoQ_Control_Status_Register; // VoQ_Control_Status_Register
      rand Port_4_VoQ_Control_Status_Register_reg Port_4_VoQ_Control_Status_Register; // VoQ_Control_Status_Register
      rand Port_5_VoQ_Control_Status_Register_reg Port_5_VoQ_Control_Status_Register; // VoQ_Control_Status_Register
      rand Port_6_VoQ_Control_Status_Register_reg Port_6_VoQ_Control_Status_Register; // VoQ_Control_Status_Register
      rand Port_7_VoQ_Control_Status_Register_reg Port_7_VoQ_Control_Status_Register; // VoQ_Control_Status_Register
      rand Port_8_VoQ_Control_Status_Register_reg Port_8_VoQ_Control_Status_Register; // VoQ_Control_Status_Register
      rand Port_9_VoQ_Control_Status_Register_reg Port_9_VoQ_Control_Status_Register; // VoQ_Control_Status_Register
      rand Port_10_VoQ_Control_Status_Register_reg Port_10_VoQ_Control_Status_Register; // VoQ_Control_Status_Register
      rand Port_11_VoQ_Control_Status_Register_reg Port_11_VoQ_Control_Status_Register; // VoQ_Control_Status_Register
      rand Port_12_VoQ_Control_Status_Register_reg Port_12_VoQ_Control_Status_Register; // VoQ_Control_Status_Register
      rand Port_13_VoQ_Control_Status_Register_reg Port_13_VoQ_Control_Status_Register; // VoQ_Control_Status_Register
      rand Port_14_VoQ_Control_Status_Register_reg Port_14_VoQ_Control_Status_Register; // VoQ_Control_Status_Register
      rand Port_15_VoQ_Control_Status_Register_reg Port_15_VoQ_Control_Status_Register; // VoQ_Control_Status_Register

      uvm_reg_map srio_reg_block_map; 


      // Function: new
      // 
      function new(string name = "srio_reg_block");
         super.new(name, build_coverage(UVM_CVR_ALL));
      endfunction


      // Function: build
      // 
      virtual function void build();
         Device_Identity_CAR = Device_Identity_CAR_reg::type_id::create("Device_Identity_CAR");
         Device_Identity_CAR.configure(this);
         Device_Identity_CAR.build();

         Device_Information_CAR = Device_Information_CAR_reg::type_id::create("Device_Information_CAR");
         Device_Information_CAR.configure(this);
         Device_Information_CAR.build();

         Assembly_Identity_CAR = Assembly_Identity_CAR_reg::type_id::create("Assembly_Identity_CAR");
         Assembly_Identity_CAR.configure(this);
         Assembly_Identity_CAR.build();

         Assembly_Information_CAR = Assembly_Information_CAR_reg::type_id::create("Assembly_Information_CAR");
         Assembly_Information_CAR.configure(this);
         Assembly_Information_CAR.build();

         Processing_Element_Features_CAR = Processing_Element_Features_CAR_reg::type_id::create("Processing_Element_Features_CAR");
         Processing_Element_Features_CAR.configure(this);
         Processing_Element_Features_CAR.build();

         Switch_Port_Information_CAR = Switch_Port_Information_CAR_reg::type_id::create("Switch_Port_Information_CAR");
         Switch_Port_Information_CAR.configure(this);
         Switch_Port_Information_CAR.build();

         Source_Operations_CAR = Source_Operations_CAR_reg::type_id::create("Source_Operations_CAR");
         Source_Operations_CAR.configure(this);
         Source_Operations_CAR.build();

         Destination_Operations_CAR = Destination_Operations_CAR_reg::type_id::create("Destination_Operations_CAR");
         Destination_Operations_CAR.configure(this);
         Destination_Operations_CAR.build();

         Switch_Route_Table_Destination_ID_Limit_CAR = Switch_Route_Table_Destination_ID_Limit_CAR_reg::type_id::create("Switch_Route_Table_Destination_ID_Limit_CAR");
         Switch_Route_Table_Destination_ID_Limit_CAR.configure(this);
         Switch_Route_Table_Destination_ID_Limit_CAR.build();

         Data_Streaming_Information_CAR = Data_Streaming_Information_CAR_reg::type_id::create("Data_Streaming_Information_CAR");
         Data_Streaming_Information_CAR.configure(this);
         Data_Streaming_Information_CAR.build();

         Data_Streaming_Logical_Layer_Control_CSR = Data_Streaming_Logical_Layer_Control_CSR_reg::type_id::create("Data_Streaming_Logical_Layer_Control_CSR");
         Data_Streaming_Logical_Layer_Control_CSR.configure(this);
         Data_Streaming_Logical_Layer_Control_CSR.build();

         Processing_Element_Logical_Layer_Control_CSR = Processing_Element_Logical_Layer_Control_CSR_reg::type_id::create("Processing_Element_Logical_Layer_Control_CSR");
         Processing_Element_Logical_Layer_Control_CSR.configure(this);
         Processing_Element_Logical_Layer_Control_CSR.build();

         Local_Configuration_Space_Base_Address_0_CSR = Local_Configuration_Space_Base_Address_0_CSR_reg::type_id::create("Local_Configuration_Space_Base_Address_0_CSR");
         Local_Configuration_Space_Base_Address_0_CSR.configure(this);
         Local_Configuration_Space_Base_Address_0_CSR.build();

         Local_Configuration_Space_Base_Address_1_CSR = Local_Configuration_Space_Base_Address_1_CSR_reg::type_id::create("Local_Configuration_Space_Base_Address_1_CSR");
         Local_Configuration_Space_Base_Address_1_CSR.configure(this);
         Local_Configuration_Space_Base_Address_1_CSR.build();

         Base_Device_ID_CSR = Base_Device_ID_CSR_reg::type_id::create("Base_Device_ID_CSR");
         Base_Device_ID_CSR.configure(this);
         Base_Device_ID_CSR.build();

         Dev32_Base_Device_ID_CSR = Dev32_Base_Device_ID_CSR_reg::type_id::create("Dev32_Base_Device_ID_CSR");
         Dev32_Base_Device_ID_CSR.configure(this);
         Dev32_Base_Device_ID_CSR.build();

         Host_Base_Device_ID_Lock_CSR = Host_Base_Device_ID_Lock_CSR_reg::type_id::create("Host_Base_Device_ID_Lock_CSR");
         Host_Base_Device_ID_Lock_CSR.configure(this);
         Host_Base_Device_ID_Lock_CSR.build();

         Component_Tag_CSR = Component_Tag_CSR_reg::type_id::create("Component_Tag_CSR");
         Component_Tag_CSR.configure(this);
         Component_Tag_CSR.build();

         Standard_Route_Configuration_Destination_ID_Select_CSR = Standard_Route_Configuration_Destination_ID_Select_CSR_reg::type_id::create("Standard_Route_Configuration_Destination_ID_Select_CSR");
         Standard_Route_Configuration_Destination_ID_Select_CSR.configure(this);
         Standard_Route_Configuration_Destination_ID_Select_CSR.build();

         Standard_Route_Configuration_Port_Select_CSR = Standard_Route_Configuration_Port_Select_CSR_reg::type_id::create("Standard_Route_Configuration_Port_Select_CSR");
         Standard_Route_Configuration_Port_Select_CSR.configure(this);
         Standard_Route_Configuration_Port_Select_CSR.build();

         Standard_Route_Default_Port_CSR = Standard_Route_Default_Port_CSR_reg::type_id::create("Standard_Route_Default_Port_CSR");
         Standard_Route_Default_Port_CSR.configure(this);
         Standard_Route_Default_Port_CSR.build();

         LP_Serial_Register_Block_Header = LP_Serial_Register_Block_Header_reg::type_id::create("LP_Serial_Register_Block_Header");
         LP_Serial_Register_Block_Header.configure(this);
         LP_Serial_Register_Block_Header.build();

         Port_Link_Timeout_Control_CSR = Port_Link_Timeout_Control_CSR_reg::type_id::create("Port_Link_Timeout_Control_CSR");
         Port_Link_Timeout_Control_CSR.configure(this);
         Port_Link_Timeout_Control_CSR.build();

         Port_Response_Timeout_Control_CSR = Port_Response_Timeout_Control_CSR_reg::type_id::create("Port_Response_Timeout_Control_CSR");
         Port_Response_Timeout_Control_CSR.configure(this);
         Port_Response_Timeout_Control_CSR.build();

         Port_General_Control_CSR = Port_General_Control_CSR_reg::type_id::create("Port_General_Control_CSR");
         Port_General_Control_CSR.configure(this);
         Port_General_Control_CSR.build();

         Port_0_Link_Maintenance_Request_CSR = Port_0_Link_Maintenance_Request_CSR_reg::type_id::create("Port_0_Link_Maintenance_Request_CSR");
         Port_0_Link_Maintenance_Request_CSR.configure(this);
         Port_0_Link_Maintenance_Request_CSR.build();

         Port_1_Link_Maintenance_Request_CSR = Port_1_Link_Maintenance_Request_CSR_reg::type_id::create("Port_1_Link_Maintenance_Request_CSR");
         Port_1_Link_Maintenance_Request_CSR.configure(this);
         Port_1_Link_Maintenance_Request_CSR.build();

         Port_2_Link_Maintenance_Request_CSR = Port_2_Link_Maintenance_Request_CSR_reg::type_id::create("Port_2_Link_Maintenance_Request_CSR");
         Port_2_Link_Maintenance_Request_CSR.configure(this);
         Port_2_Link_Maintenance_Request_CSR.build();

         Port_3_Link_Maintenance_Request_CSR = Port_3_Link_Maintenance_Request_CSR_reg::type_id::create("Port_3_Link_Maintenance_Request_CSR");
         Port_3_Link_Maintenance_Request_CSR.configure(this);
         Port_3_Link_Maintenance_Request_CSR.build();

         Port_4_Link_Maintenance_Request_CSR = Port_4_Link_Maintenance_Request_CSR_reg::type_id::create("Port_4_Link_Maintenance_Request_CSR");
         Port_4_Link_Maintenance_Request_CSR.configure(this);
         Port_4_Link_Maintenance_Request_CSR.build();

         Port_5_Link_Maintenance_Request_CSR = Port_5_Link_Maintenance_Request_CSR_reg::type_id::create("Port_5_Link_Maintenance_Request_CSR");
         Port_5_Link_Maintenance_Request_CSR.configure(this);
         Port_5_Link_Maintenance_Request_CSR.build();

         Port_6_Link_Maintenance_Request_CSR = Port_6_Link_Maintenance_Request_CSR_reg::type_id::create("Port_6_Link_Maintenance_Request_CSR");
         Port_6_Link_Maintenance_Request_CSR.configure(this);
         Port_6_Link_Maintenance_Request_CSR.build();

         Port_7_Link_Maintenance_Request_CSR = Port_7_Link_Maintenance_Request_CSR_reg::type_id::create("Port_7_Link_Maintenance_Request_CSR");
         Port_7_Link_Maintenance_Request_CSR.configure(this);
         Port_7_Link_Maintenance_Request_CSR.build();

         Port_8_Link_Maintenance_Request_CSR = Port_8_Link_Maintenance_Request_CSR_reg::type_id::create("Port_8_Link_Maintenance_Request_CSR");
         Port_8_Link_Maintenance_Request_CSR.configure(this);
         Port_8_Link_Maintenance_Request_CSR.build();

         Port_9_Link_Maintenance_Request_CSR = Port_9_Link_Maintenance_Request_CSR_reg::type_id::create("Port_9_Link_Maintenance_Request_CSR");
         Port_9_Link_Maintenance_Request_CSR.configure(this);
         Port_9_Link_Maintenance_Request_CSR.build();

         Port_10_Link_Maintenance_Request_CSR = Port_10_Link_Maintenance_Request_CSR_reg::type_id::create("Port_10_Link_Maintenance_Request_CSR");
         Port_10_Link_Maintenance_Request_CSR.configure(this);
         Port_10_Link_Maintenance_Request_CSR.build();

         Port_11_Link_Maintenance_Request_CSR = Port_11_Link_Maintenance_Request_CSR_reg::type_id::create("Port_11_Link_Maintenance_Request_CSR");
         Port_11_Link_Maintenance_Request_CSR.configure(this);
         Port_11_Link_Maintenance_Request_CSR.build();

         Port_12_Link_Maintenance_Request_CSR = Port_12_Link_Maintenance_Request_CSR_reg::type_id::create("Port_12_Link_Maintenance_Request_CSR");
         Port_12_Link_Maintenance_Request_CSR.configure(this);
         Port_12_Link_Maintenance_Request_CSR.build();

         Port_13_Link_Maintenance_Request_CSR = Port_13_Link_Maintenance_Request_CSR_reg::type_id::create("Port_13_Link_Maintenance_Request_CSR");
         Port_13_Link_Maintenance_Request_CSR.configure(this);
         Port_13_Link_Maintenance_Request_CSR.build();

         Port_14_Link_Maintenance_Request_CSR = Port_14_Link_Maintenance_Request_CSR_reg::type_id::create("Port_14_Link_Maintenance_Request_CSR");
         Port_14_Link_Maintenance_Request_CSR.configure(this);
         Port_14_Link_Maintenance_Request_CSR.build();

         Port_15_Link_Maintenance_Request_CSR = Port_15_Link_Maintenance_Request_CSR_reg::type_id::create("Port_15_Link_Maintenance_Request_CSR");
         Port_15_Link_Maintenance_Request_CSR.configure(this);
         Port_15_Link_Maintenance_Request_CSR.build();

         Port_0_Link_Maintenance_Response_CSR = Port_0_Link_Maintenance_Response_CSR_reg::type_id::create("Port_0_Link_Maintenance_Response_CSR");
         Port_0_Link_Maintenance_Response_CSR.configure(this);
         Port_0_Link_Maintenance_Response_CSR.build();

         Port_1_Link_Maintenance_Response_CSR = Port_1_Link_Maintenance_Response_CSR_reg::type_id::create("Port_1_Link_Maintenance_Response_CSR");
         Port_1_Link_Maintenance_Response_CSR.configure(this);
         Port_1_Link_Maintenance_Response_CSR.build();

         Port_2_Link_Maintenance_Response_CSR = Port_2_Link_Maintenance_Response_CSR_reg::type_id::create("Port_2_Link_Maintenance_Response_CSR");
         Port_2_Link_Maintenance_Response_CSR.configure(this);
         Port_2_Link_Maintenance_Response_CSR.build();

         Port_3_Link_Maintenance_Response_CSR = Port_3_Link_Maintenance_Response_CSR_reg::type_id::create("Port_3_Link_Maintenance_Response_CSR");
         Port_3_Link_Maintenance_Response_CSR.configure(this);
         Port_3_Link_Maintenance_Response_CSR.build();

         Port_4_Link_Maintenance_Response_CSR = Port_4_Link_Maintenance_Response_CSR_reg::type_id::create("Port_4_Link_Maintenance_Response_CSR");
         Port_4_Link_Maintenance_Response_CSR.configure(this);
         Port_4_Link_Maintenance_Response_CSR.build();

         Port_5_Link_Maintenance_Response_CSR = Port_5_Link_Maintenance_Response_CSR_reg::type_id::create("Port_5_Link_Maintenance_Response_CSR");
         Port_5_Link_Maintenance_Response_CSR.configure(this);
         Port_5_Link_Maintenance_Response_CSR.build();

         Port_6_Link_Maintenance_Response_CSR = Port_6_Link_Maintenance_Response_CSR_reg::type_id::create("Port_6_Link_Maintenance_Response_CSR");
         Port_6_Link_Maintenance_Response_CSR.configure(this);
         Port_6_Link_Maintenance_Response_CSR.build();

         Port_7_Link_Maintenance_Response_CSR = Port_7_Link_Maintenance_Response_CSR_reg::type_id::create("Port_7_Link_Maintenance_Response_CSR");
         Port_7_Link_Maintenance_Response_CSR.configure(this);
         Port_7_Link_Maintenance_Response_CSR.build();

         Port_8_Link_Maintenance_Response_CSR = Port_8_Link_Maintenance_Response_CSR_reg::type_id::create("Port_8_Link_Maintenance_Response_CSR");
         Port_8_Link_Maintenance_Response_CSR.configure(this);
         Port_8_Link_Maintenance_Response_CSR.build();

         Port_9_Link_Maintenance_Response_CSR = Port_9_Link_Maintenance_Response_CSR_reg::type_id::create("Port_9_Link_Maintenance_Response_CSR");
         Port_9_Link_Maintenance_Response_CSR.configure(this);
         Port_9_Link_Maintenance_Response_CSR.build();

         Port_10_Link_Maintenance_Response_CSR = Port_10_Link_Maintenance_Response_CSR_reg::type_id::create("Port_10_Link_Maintenance_Response_CSR");
         Port_10_Link_Maintenance_Response_CSR.configure(this);
         Port_10_Link_Maintenance_Response_CSR.build();

         Port_11_Link_Maintenance_Response_CSR = Port_11_Link_Maintenance_Response_CSR_reg::type_id::create("Port_11_Link_Maintenance_Response_CSR");
         Port_11_Link_Maintenance_Response_CSR.configure(this);
         Port_11_Link_Maintenance_Response_CSR.build();

         Port_12_Link_Maintenance_Response_CSR = Port_12_Link_Maintenance_Response_CSR_reg::type_id::create("Port_12_Link_Maintenance_Response_CSR");
         Port_12_Link_Maintenance_Response_CSR.configure(this);
         Port_12_Link_Maintenance_Response_CSR.build();

         Port_13_Link_Maintenance_Response_CSR = Port_13_Link_Maintenance_Response_CSR_reg::type_id::create("Port_13_Link_Maintenance_Response_CSR");
         Port_13_Link_Maintenance_Response_CSR.configure(this);
         Port_13_Link_Maintenance_Response_CSR.build();

         Port_14_Link_Maintenance_Response_CSR = Port_14_Link_Maintenance_Response_CSR_reg::type_id::create("Port_14_Link_Maintenance_Response_CSR");
         Port_14_Link_Maintenance_Response_CSR.configure(this);
         Port_14_Link_Maintenance_Response_CSR.build();

         Port_15_Link_Maintenance_Response_CSR = Port_15_Link_Maintenance_Response_CSR_reg::type_id::create("Port_15_Link_Maintenance_Response_CSR");
         Port_15_Link_Maintenance_Response_CSR.configure(this);
         Port_15_Link_Maintenance_Response_CSR.build();
         Port_0_Local_ackID_CSR = Port_0_Local_ackID_CSR_reg::type_id::create("Port_0_Local_ackID_CSR");
         Port_0_Local_ackID_CSR.configure(this);
         Port_0_Local_ackID_CSR.build();

         Port_1_Local_ackID_CSR = Port_1_Local_ackID_CSR_reg::type_id::create("Port_1_Local_ackID_CSR");
         Port_1_Local_ackID_CSR.configure(this);
         Port_1_Local_ackID_CSR.build();

         Port_2_Local_ackID_CSR = Port_2_Local_ackID_CSR_reg::type_id::create("Port_2_Local_ackID_CSR");
         Port_2_Local_ackID_CSR.configure(this);
         Port_2_Local_ackID_CSR.build();

         Port_3_Local_ackID_CSR = Port_3_Local_ackID_CSR_reg::type_id::create("Port_3_Local_ackID_CSR");
         Port_3_Local_ackID_CSR.configure(this);
         Port_3_Local_ackID_CSR.build();

         Port_4_Local_ackID_CSR = Port_4_Local_ackID_CSR_reg::type_id::create("Port_4_Local_ackID_CSR");
         Port_4_Local_ackID_CSR.configure(this);
         Port_4_Local_ackID_CSR.build();

         Port_5_Local_ackID_CSR = Port_5_Local_ackID_CSR_reg::type_id::create("Port_5_Local_ackID_CSR");
         Port_5_Local_ackID_CSR.configure(this);
         Port_5_Local_ackID_CSR.build();

         Port_6_Local_ackID_CSR = Port_6_Local_ackID_CSR_reg::type_id::create("Port_6_Local_ackID_CSR");
         Port_6_Local_ackID_CSR.configure(this);
         Port_6_Local_ackID_CSR.build();

         Port_7_Local_ackID_CSR = Port_7_Local_ackID_CSR_reg::type_id::create("Port_7_Local_ackID_CSR");
         Port_7_Local_ackID_CSR.configure(this);
         Port_7_Local_ackID_CSR.build();

         Port_8_Local_ackID_CSR = Port_8_Local_ackID_CSR_reg::type_id::create("Port_8_Local_ackID_CSR");
         Port_8_Local_ackID_CSR.configure(this);
         Port_8_Local_ackID_CSR.build();

         Port_9_Local_ackID_CSR = Port_9_Local_ackID_CSR_reg::type_id::create("Port_9_Local_ackID_CSR");
         Port_9_Local_ackID_CSR.configure(this);
         Port_9_Local_ackID_CSR.build();

         Port_10_Local_ackID_CSR = Port_10_Local_ackID_CSR_reg::type_id::create("Port_10_Local_ackID_CSR");
         Port_10_Local_ackID_CSR.configure(this);
         Port_10_Local_ackID_CSR.build();

         Port_11_Local_ackID_CSR = Port_11_Local_ackID_CSR_reg::type_id::create("Port_11_Local_ackID_CSR");
         Port_11_Local_ackID_CSR.configure(this);
         Port_11_Local_ackID_CSR.build();

         Port_12_Local_ackID_CSR = Port_12_Local_ackID_CSR_reg::type_id::create("Port_12_Local_ackID_CSR");
         Port_12_Local_ackID_CSR.configure(this);
         Port_12_Local_ackID_CSR.build();

         Port_13_Local_ackID_CSR = Port_13_Local_ackID_CSR_reg::type_id::create("Port_13_Local_ackID_CSR");
         Port_13_Local_ackID_CSR.configure(this);
         Port_13_Local_ackID_CSR.build();

         Port_14_Local_ackID_CSR = Port_14_Local_ackID_CSR_reg::type_id::create("Port_14_Local_ackID_CSR");
         Port_14_Local_ackID_CSR.configure(this);
         Port_14_Local_ackID_CSR.build();

         Port_15_Local_ackID_CSR = Port_15_Local_ackID_CSR_reg::type_id::create("Port_15_Local_ackID_CSR");
         Port_15_Local_ackID_CSR.configure(this);
         Port_15_Local_ackID_CSR.build();

         Port_0_Initialization_Status_CSR = Port_0_Initialization_Status_CSR_reg::type_id::create("Port_0_Initialization_Status_CSR");
         Port_0_Initialization_Status_CSR.configure(this);
         Port_0_Initialization_Status_CSR.build();

         Port_1_Initialization_Status_CSR = Port_1_Initialization_Status_CSR_reg::type_id::create("Port_1_Initialization_Status_CSR");
         Port_1_Initialization_Status_CSR.configure(this);
         Port_1_Initialization_Status_CSR.build();

         Port_2_Initialization_Status_CSR = Port_2_Initialization_Status_CSR_reg::type_id::create("Port_2_Initialization_Status_CSR");
         Port_2_Initialization_Status_CSR.configure(this);
         Port_2_Initialization_Status_CSR.build();

         Port_3_Initialization_Status_CSR = Port_3_Initialization_Status_CSR_reg::type_id::create("Port_3_Initialization_Status_CSR");
         Port_3_Initialization_Status_CSR.configure(this);
         Port_3_Initialization_Status_CSR.build();

         Port_4_Initialization_Status_CSR = Port_4_Initialization_Status_CSR_reg::type_id::create("Port_4_Initialization_Status_CSR");
         Port_4_Initialization_Status_CSR.configure(this);
         Port_4_Initialization_Status_CSR.build();

         Port_5_Initialization_Status_CSR = Port_5_Initialization_Status_CSR_reg::type_id::create("Port_5_Initialization_Status_CSR");
         Port_5_Initialization_Status_CSR.configure(this);
         Port_5_Initialization_Status_CSR.build();

         Port_6_Initialization_Status_CSR = Port_6_Initialization_Status_CSR_reg::type_id::create("Port_6_Initialization_Status_CSR");
         Port_6_Initialization_Status_CSR.configure(this);
         Port_6_Initialization_Status_CSR.build();

         Port_7_Initialization_Status_CSR = Port_7_Initialization_Status_CSR_reg::type_id::create("Port_7_Initialization_Status_CSR");
         Port_7_Initialization_Status_CSR.configure(this);
         Port_7_Initialization_Status_CSR.build();

         Port_8_Initialization_Status_CSR = Port_8_Initialization_Status_CSR_reg::type_id::create("Port_8_Initialization_Status_CSR");
         Port_8_Initialization_Status_CSR.configure(this);
         Port_8_Initialization_Status_CSR.build();

         Port_9_Initialization_Status_CSR = Port_9_Initialization_Status_CSR_reg::type_id::create("Port_9_Initialization_Status_CSR");
         Port_9_Initialization_Status_CSR.configure(this);
         Port_9_Initialization_Status_CSR.build();

         Port_10_Initialization_Status_CSR = Port_10_Initialization_Status_CSR_reg::type_id::create("Port_10_Initialization_Status_CSR");
         Port_10_Initialization_Status_CSR.configure(this);
         Port_10_Initialization_Status_CSR.build();

         Port_11_Initialization_Status_CSR = Port_11_Initialization_Status_CSR_reg::type_id::create("Port_11_Initialization_Status_CSR");
         Port_11_Initialization_Status_CSR.configure(this);
         Port_11_Initialization_Status_CSR.build();

         Port_12_Initialization_Status_CSR = Port_12_Initialization_Status_CSR_reg::type_id::create("Port_12_Initialization_Status_CSR");
         Port_12_Initialization_Status_CSR.configure(this);
         Port_12_Initialization_Status_CSR.build();

         Port_13_Initialization_Status_CSR = Port_13_Initialization_Status_CSR_reg::type_id::create("Port_13_Initialization_Status_CSR");
         Port_13_Initialization_Status_CSR.configure(this);
         Port_13_Initialization_Status_CSR.build();

         Port_14_Initialization_Status_CSR = Port_14_Initialization_Status_CSR_reg::type_id::create("Port_14_Initialization_Status_CSR");
         Port_14_Initialization_Status_CSR.configure(this);
         Port_14_Initialization_Status_CSR.build();

         Port_15_Initialization_Status_CSR = Port_15_Initialization_Status_CSR_reg::type_id::create("Port_15_Initialization_Status_CSR");
         Port_15_Initialization_Status_CSR.configure(this);
         Port_15_Initialization_Status_CSR.build();

         Port_0_Control_2_CSR = Port_N_Control_2_CSR_reg::type_id::create("Port_0_Control_2_CSR");
         Port_0_Control_2_CSR.configure(this);
         Port_0_Control_2_CSR.build();

         Port_1_Control_2_CSR = Port_N_Control_2_CSR_reg::type_id::create("Port_1_Control_2_CSR");
         Port_1_Control_2_CSR.configure(this);
         Port_1_Control_2_CSR.build();

         Port_2_Control_2_CSR = Port_N_Control_2_CSR_reg::type_id::create("Port_2_Control_2_CSR");
         Port_2_Control_2_CSR.configure(this);
         Port_2_Control_2_CSR.build();

         Port_3_Control_2_CSR = Port_N_Control_2_CSR_reg::type_id::create("Port_3_Control_2_CSR");
         Port_3_Control_2_CSR.configure(this);
         Port_3_Control_2_CSR.build();

         Port_4_Control_2_CSR = Port_N_Control_2_CSR_reg::type_id::create("Port_4_Control_2_CSR");
         Port_4_Control_2_CSR.configure(this);
         Port_4_Control_2_CSR.build();

         Port_5_Control_2_CSR = Port_N_Control_2_CSR_reg::type_id::create("Port_5_Control_2_CSR");
         Port_5_Control_2_CSR.configure(this);
         Port_5_Control_2_CSR.build();

         Port_6_Control_2_CSR = Port_N_Control_2_CSR_reg::type_id::create("Port_6_Control_2_CSR");
         Port_6_Control_2_CSR.configure(this);
         Port_6_Control_2_CSR.build();

         Port_7_Control_2_CSR = Port_N_Control_2_CSR_reg::type_id::create("Port_7_Control_2_CSR");
         Port_7_Control_2_CSR.configure(this);
         Port_7_Control_2_CSR.build();

         Port_8_Control_2_CSR = Port_N_Control_2_CSR_reg::type_id::create("Port_8_Control_2_CSR");
         Port_8_Control_2_CSR.configure(this);
         Port_8_Control_2_CSR.build();

         Port_9_Control_2_CSR = Port_N_Control_2_CSR_reg::type_id::create("Port_9_Control_2_CSR");
         Port_9_Control_2_CSR.configure(this);
         Port_9_Control_2_CSR.build();

         Port_10_Control_2_CSR = Port_N_Control_2_CSR_reg::type_id::create("Port_10_Control_2_CSR");
         Port_10_Control_2_CSR.configure(this);
         Port_10_Control_2_CSR.build();

         Port_11_Control_2_CSR = Port_N_Control_2_CSR_reg::type_id::create("Port_11_Control_2_CSR");
         Port_11_Control_2_CSR.configure(this);
         Port_11_Control_2_CSR.build();

         Port_12_Control_2_CSR = Port_N_Control_2_CSR_reg::type_id::create("Port_12_Control_2_CSR");
         Port_12_Control_2_CSR.configure(this);
         Port_12_Control_2_CSR.build();

         Port_13_Control_2_CSR = Port_N_Control_2_CSR_reg::type_id::create("Port_13_Control_2_CSR");
         Port_13_Control_2_CSR.configure(this);
         Port_13_Control_2_CSR.build();

         Port_14_Control_2_CSR = Port_N_Control_2_CSR_reg::type_id::create("Port_14_Control_2_CSR");
         Port_14_Control_2_CSR.configure(this);
         Port_14_Control_2_CSR.build();

         Port_15_Control_2_CSR = Port_N_Control_2_CSR_reg::type_id::create("Port_15_Control_2_CSR");
         Port_15_Control_2_CSR.configure(this);
         Port_15_Control_2_CSR.build();

         Port_0_Control_2_CSR.brc3 = brc3;
         Port_1_Control_2_CSR.brc3 = brc3;
         Port_2_Control_2_CSR.brc3 = brc3;
         Port_3_Control_2_CSR.brc3 = brc3;
         Port_4_Control_2_CSR.brc3 = brc3;
         Port_5_Control_2_CSR.brc3 = brc3;
         Port_6_Control_2_CSR.brc3 = brc3;
         Port_7_Control_2_CSR.brc3 = brc3;
         Port_8_Control_2_CSR.brc3 = brc3;
         Port_9_Control_2_CSR.brc3 = brc3;
         Port_10_Control_2_CSR.brc3 = brc3;
         Port_11_Control_2_CSR.brc3 = brc3;
         Port_12_Control_2_CSR.brc3 = brc3;
         Port_13_Control_2_CSR.brc3 = brc3;
         Port_14_Control_2_CSR.brc3 = brc3;
         Port_15_Control_2_CSR.brc3 = brc3;

         Port_0_Error_and_Status_CSR = Port_N_Error_and_Status_CSR_reg::type_id::create("Port_0_Error_and_Status_CSR");
         Port_0_Error_and_Status_CSR.configure(this);
         Port_0_Error_and_Status_CSR.build();

         Port_1_Error_and_Status_CSR = Port_N_Error_and_Status_CSR_reg::type_id::create("Port_1_Error_and_Status_CSR");
         Port_1_Error_and_Status_CSR.configure(this);
         Port_1_Error_and_Status_CSR.build();

         Port_2_Error_and_Status_CSR = Port_N_Error_and_Status_CSR_reg::type_id::create("Port_2_Error_and_Status_CSR");
         Port_2_Error_and_Status_CSR.configure(this);
         Port_2_Error_and_Status_CSR.build();

         Port_3_Error_and_Status_CSR = Port_N_Error_and_Status_CSR_reg::type_id::create("Port_3_Error_and_Status_CSR");
         Port_3_Error_and_Status_CSR.configure(this);
         Port_3_Error_and_Status_CSR.build();

         Port_4_Error_and_Status_CSR = Port_N_Error_and_Status_CSR_reg::type_id::create("Port_4_Error_and_Status_CSR");
         Port_4_Error_and_Status_CSR.configure(this);
         Port_4_Error_and_Status_CSR.build();

         Port_5_Error_and_Status_CSR = Port_N_Error_and_Status_CSR_reg::type_id::create("Port_5_Error_and_Status_CSR");
         Port_5_Error_and_Status_CSR.configure(this);
         Port_5_Error_and_Status_CSR.build();

         Port_6_Error_and_Status_CSR = Port_N_Error_and_Status_CSR_reg::type_id::create("Port_6_Error_and_Status_CSR");
         Port_6_Error_and_Status_CSR.configure(this);
         Port_6_Error_and_Status_CSR.build();

         Port_7_Error_and_Status_CSR = Port_N_Error_and_Status_CSR_reg::type_id::create("Port_7_Error_and_Status_CSR");
         Port_7_Error_and_Status_CSR.configure(this);
         Port_7_Error_and_Status_CSR.build();

         Port_8_Error_and_Status_CSR = Port_N_Error_and_Status_CSR_reg::type_id::create("Port_8_Error_and_Status_CSR");
         Port_8_Error_and_Status_CSR.configure(this);
         Port_8_Error_and_Status_CSR.build();

         Port_9_Error_and_Status_CSR = Port_N_Error_and_Status_CSR_reg::type_id::create("Port_9_Error_and_Status_CSR");
         Port_9_Error_and_Status_CSR.configure(this);
         Port_9_Error_and_Status_CSR.build();

         Port_10_Error_and_Status_CSR = Port_N_Error_and_Status_CSR_reg::type_id::create("Port_10_Error_and_Status_CSR");
         Port_10_Error_and_Status_CSR.configure(this);
         Port_10_Error_and_Status_CSR.build();

         Port_11_Error_and_Status_CSR = Port_N_Error_and_Status_CSR_reg::type_id::create("Port_11_Error_and_Status_CSR");
         Port_11_Error_and_Status_CSR.configure(this);
         Port_11_Error_and_Status_CSR.build();

         Port_12_Error_and_Status_CSR = Port_N_Error_and_Status_CSR_reg::type_id::create("Port_12_Error_and_Status_CSR");
         Port_12_Error_and_Status_CSR.configure(this);
         Port_12_Error_and_Status_CSR.build();

         Port_13_Error_and_Status_CSR = Port_N_Error_and_Status_CSR_reg::type_id::create("Port_13_Error_and_Status_CSR");
         Port_13_Error_and_Status_CSR.configure(this);
         Port_13_Error_and_Status_CSR.build();

         Port_14_Error_and_Status_CSR = Port_N_Error_and_Status_CSR_reg::type_id::create("Port_14_Error_and_Status_CSR");
         Port_14_Error_and_Status_CSR.configure(this);
         Port_14_Error_and_Status_CSR.build();

         Port_15_Error_and_Status_CSR = Port_N_Error_and_Status_CSR_reg::type_id::create("Port_15_Error_and_Status_CSR");
         Port_15_Error_and_Status_CSR.configure(this);
         Port_15_Error_and_Status_CSR.build();
         Port_0_Error_and_Status_CSR.brc3 = brc3;
         Port_1_Error_and_Status_CSR.brc3 = brc3;
         Port_2_Error_and_Status_CSR.brc3 = brc3;
         Port_3_Error_and_Status_CSR.brc3 = brc3;
         Port_4_Error_and_Status_CSR.brc3 = brc3;
         Port_5_Error_and_Status_CSR.brc3 = brc3;
         Port_6_Error_and_Status_CSR.brc3 = brc3;
         Port_7_Error_and_Status_CSR.brc3 = brc3;
         Port_8_Error_and_Status_CSR.brc3 = brc3;
         Port_9_Error_and_Status_CSR.brc3 = brc3;
         Port_10_Error_and_Status_CSR.brc3 = brc3;
         Port_11_Error_and_Status_CSR.brc3 = brc3;
         Port_12_Error_and_Status_CSR.brc3 = brc3;
         Port_13_Error_and_Status_CSR.brc3 = brc3;
         Port_14_Error_and_Status_CSR.brc3 = brc3;
         Port_15_Error_and_Status_CSR.brc3 = brc3;

         Port_0_Control_CSR = Port_0_Control_CSR_reg::type_id::create("Port_0_Control_CSR");
         Port_0_Control_CSR.configure(this);
         Port_0_Control_CSR.build();

         Port_1_Control_CSR = Port_1_Control_CSR_reg::type_id::create("Port_1_Control_CSR");
         Port_1_Control_CSR.configure(this);
         Port_1_Control_CSR.build();

         Port_2_Control_CSR = Port_2_Control_CSR_reg::type_id::create("Port_2_Control_CSR");
         Port_2_Control_CSR.configure(this);
         Port_2_Control_CSR.build();

         Port_3_Control_CSR = Port_3_Control_CSR_reg::type_id::create("Port_3_Control_CSR");
         Port_3_Control_CSR.configure(this);
         Port_3_Control_CSR.build();

         Port_4_Control_CSR = Port_4_Control_CSR_reg::type_id::create("Port_4_Control_CSR");
         Port_4_Control_CSR.configure(this);
         Port_4_Control_CSR.build();

         Port_5_Control_CSR = Port_5_Control_CSR_reg::type_id::create("Port_5_Control_CSR");
         Port_5_Control_CSR.configure(this);
         Port_5_Control_CSR.build();

         Port_6_Control_CSR = Port_6_Control_CSR_reg::type_id::create("Port_6_Control_CSR");
         Port_6_Control_CSR.configure(this);
         Port_6_Control_CSR.build();

         Port_7_Control_CSR = Port_7_Control_CSR_reg::type_id::create("Port_7_Control_CSR");
         Port_7_Control_CSR.configure(this);
         Port_7_Control_CSR.build();

         Port_8_Control_CSR = Port_8_Control_CSR_reg::type_id::create("Port_8_Control_CSR");
         Port_8_Control_CSR.configure(this);
         Port_8_Control_CSR.build();

         Port_9_Control_CSR = Port_9_Control_CSR_reg::type_id::create("Port_9_Control_CSR");
         Port_9_Control_CSR.configure(this);
         Port_9_Control_CSR.build();

         Port_10_Control_CSR = Port_10_Control_CSR_reg::type_id::create("Port_10_Control_CSR");
         Port_10_Control_CSR.configure(this);
         Port_10_Control_CSR.build();

         Port_11_Control_CSR = Port_11_Control_CSR_reg::type_id::create("Port_11_Control_CSR");
         Port_11_Control_CSR.configure(this);
         Port_11_Control_CSR.build();

         Port_12_Control_CSR = Port_12_Control_CSR_reg::type_id::create("Port_12_Control_CSR");
         Port_12_Control_CSR.configure(this);
         Port_12_Control_CSR.build();

         Port_13_Control_CSR = Port_13_Control_CSR_reg::type_id::create("Port_13_Control_CSR");
         Port_13_Control_CSR.configure(this);
         Port_13_Control_CSR.build();

         Port_14_Control_CSR = Port_14_Control_CSR_reg::type_id::create("Port_14_Control_CSR");
         Port_14_Control_CSR.configure(this);
         Port_14_Control_CSR.build();

         Port_15_Control_CSR = Port_15_Control_CSR_reg::type_id::create("Port_15_Control_CSR");
         Port_15_Control_CSR.configure(this);
         Port_15_Control_CSR.build();

         Port_0_Outbound_ackID_CSR = Port_0_Outbound_ackID_CSR_reg::type_id::create("Port_0_Outbound_ackID_CSR");
         Port_0_Outbound_ackID_CSR.configure(this);
         Port_0_Outbound_ackID_CSR.build();

         Port_1_Outbound_ackID_CSR = Port_1_Outbound_ackID_CSR_reg::type_id::create("Port_1_Outbound_ackID_CSR");
         Port_1_Outbound_ackID_CSR.configure(this);
         Port_1_Outbound_ackID_CSR.build();

         Port_2_Outbound_ackID_CSR = Port_2_Outbound_ackID_CSR_reg::type_id::create("Port_2_Outbound_ackID_CSR");
         Port_2_Outbound_ackID_CSR.configure(this);
         Port_2_Outbound_ackID_CSR.build();

         Port_3_Outbound_ackID_CSR = Port_3_Outbound_ackID_CSR_reg::type_id::create("Port_3_Outbound_ackID_CSR");
         Port_3_Outbound_ackID_CSR.configure(this);
         Port_3_Outbound_ackID_CSR.build();

         Port_4_Outbound_ackID_CSR = Port_4_Outbound_ackID_CSR_reg::type_id::create("Port_4_Outbound_ackID_CSR");
         Port_4_Outbound_ackID_CSR.configure(this);
         Port_4_Outbound_ackID_CSR.build();

         Port_5_Outbound_ackID_CSR = Port_5_Outbound_ackID_CSR_reg::type_id::create("Port_5_Outbound_ackID_CSR");
         Port_5_Outbound_ackID_CSR.configure(this);
         Port_5_Outbound_ackID_CSR.build();

         Port_6_Outbound_ackID_CSR = Port_6_Outbound_ackID_CSR_reg::type_id::create("Port_6_Outbound_ackID_CSR");
         Port_6_Outbound_ackID_CSR.configure(this);
         Port_6_Outbound_ackID_CSR.build();

         Port_7_Outbound_ackID_CSR = Port_7_Outbound_ackID_CSR_reg::type_id::create("Port_7_Outbound_ackID_CSR");
         Port_7_Outbound_ackID_CSR.configure(this);
         Port_7_Outbound_ackID_CSR.build();

         Port_8_Outbound_ackID_CSR = Port_8_Outbound_ackID_CSR_reg::type_id::create("Port_8_Outbound_ackID_CSR");
         Port_8_Outbound_ackID_CSR.configure(this);
         Port_8_Outbound_ackID_CSR.build();

         Port_9_Outbound_ackID_CSR = Port_9_Outbound_ackID_CSR_reg::type_id::create("Port_9_Outbound_ackID_CSR");
         Port_9_Outbound_ackID_CSR.configure(this);
         Port_9_Outbound_ackID_CSR.build();

         Port_10_Outbound_ackID_CSR = Port_10_Outbound_ackID_CSR_reg::type_id::create("Port_10_Outbound_ackID_CSR");
         Port_10_Outbound_ackID_CSR.configure(this);
         Port_10_Outbound_ackID_CSR.build();

         Port_11_Outbound_ackID_CSR = Port_11_Outbound_ackID_CSR_reg::type_id::create("Port_11_Outbound_ackID_CSR");
         Port_11_Outbound_ackID_CSR.configure(this);
         Port_11_Outbound_ackID_CSR.build();

         Port_12_Outbound_ackID_CSR = Port_12_Outbound_ackID_CSR_reg::type_id::create("Port_12_Outbound_ackID_CSR");
         Port_12_Outbound_ackID_CSR.configure(this);
         Port_12_Outbound_ackID_CSR.build();

         Port_13_Outbound_ackID_CSR = Port_13_Outbound_ackID_CSR_reg::type_id::create("Port_13_Outbound_ackID_CSR");
         Port_13_Outbound_ackID_CSR.configure(this);
         Port_13_Outbound_ackID_CSR.build();

         Port_14_Outbound_ackID_CSR = Port_14_Outbound_ackID_CSR_reg::type_id::create("Port_14_Outbound_ackID_CSR");
         Port_14_Outbound_ackID_CSR.configure(this);
         Port_14_Outbound_ackID_CSR.build();

         Port_15_Outbound_ackID_CSR = Port_15_Outbound_ackID_CSR_reg::type_id::create("Port_15_Outbound_ackID_CSR");
         Port_15_Outbound_ackID_CSR.configure(this);
         Port_15_Outbound_ackID_CSR.build();

         Port_0_Inbound_ackID_CSR = Port_0_Inbound_ackID_CSR_reg::type_id::create("Port_0_Inbound_ackID_CSR");
         Port_0_Inbound_ackID_CSR.configure(this);
         Port_0_Inbound_ackID_CSR.build();

         Port_1_Inbound_ackID_CSR = Port_1_Inbound_ackID_CSR_reg::type_id::create("Port_1_Inbound_ackID_CSR");
         Port_1_Inbound_ackID_CSR.configure(this);
         Port_1_Inbound_ackID_CSR.build();

         Port_2_Inbound_ackID_CSR = Port_2_Inbound_ackID_CSR_reg::type_id::create("Port_2_Inbound_ackID_CSR");
         Port_2_Inbound_ackID_CSR.configure(this);
         Port_2_Inbound_ackID_CSR.build();

         Port_3_Inbound_ackID_CSR = Port_3_Inbound_ackID_CSR_reg::type_id::create("Port_3_Inbound_ackID_CSR");
         Port_3_Inbound_ackID_CSR.configure(this);
         Port_3_Inbound_ackID_CSR.build();

         Port_4_Inbound_ackID_CSR = Port_4_Inbound_ackID_CSR_reg::type_id::create("Port_4_Inbound_ackID_CSR");
         Port_4_Inbound_ackID_CSR.configure(this);
         Port_4_Inbound_ackID_CSR.build();

         Port_5_Inbound_ackID_CSR = Port_5_Inbound_ackID_CSR_reg::type_id::create("Port_5_Inbound_ackID_CSR");
         Port_5_Inbound_ackID_CSR.configure(this);
         Port_5_Inbound_ackID_CSR.build();

         Port_6_Inbound_ackID_CSR = Port_6_Inbound_ackID_CSR_reg::type_id::create("Port_6_Inbound_ackID_CSR");
         Port_6_Inbound_ackID_CSR.configure(this);
         Port_6_Inbound_ackID_CSR.build();

         Port_7_Inbound_ackID_CSR = Port_7_Inbound_ackID_CSR_reg::type_id::create("Port_7_Inbound_ackID_CSR");
         Port_7_Inbound_ackID_CSR.configure(this);
         Port_7_Inbound_ackID_CSR.build();

         Port_8_Inbound_ackID_CSR = Port_8_Inbound_ackID_CSR_reg::type_id::create("Port_8_Inbound_ackID_CSR");
         Port_8_Inbound_ackID_CSR.configure(this);
         Port_8_Inbound_ackID_CSR.build();

         Port_9_Inbound_ackID_CSR = Port_9_Inbound_ackID_CSR_reg::type_id::create("Port_9_Inbound_ackID_CSR");
         Port_9_Inbound_ackID_CSR.configure(this);
         Port_9_Inbound_ackID_CSR.build();

         Port_10_Inbound_ackID_CSR = Port_10_Inbound_ackID_CSR_reg::type_id::create("Port_10_Inbound_ackID_CSR");
         Port_10_Inbound_ackID_CSR.configure(this);
         Port_10_Inbound_ackID_CSR.build();

         Port_11_Inbound_ackID_CSR = Port_11_Inbound_ackID_CSR_reg::type_id::create("Port_11_Inbound_ackID_CSR");
         Port_11_Inbound_ackID_CSR.configure(this);
         Port_11_Inbound_ackID_CSR.build();

         Port_12_Inbound_ackID_CSR = Port_12_Inbound_ackID_CSR_reg::type_id::create("Port_12_Inbound_ackID_CSR");
         Port_12_Inbound_ackID_CSR.configure(this);
         Port_12_Inbound_ackID_CSR.build();

         Port_13_Inbound_ackID_CSR = Port_13_Inbound_ackID_CSR_reg::type_id::create("Port_13_Inbound_ackID_CSR");
         Port_13_Inbound_ackID_CSR.configure(this);
         Port_13_Inbound_ackID_CSR.build();

         Port_14_Inbound_ackID_CSR = Port_14_Inbound_ackID_CSR_reg::type_id::create("Port_14_Inbound_ackID_CSR");
         Port_14_Inbound_ackID_CSR.configure(this);
         Port_14_Inbound_ackID_CSR.build();

         Port_15_Inbound_ackID_CSR = Port_15_Inbound_ackID_CSR_reg::type_id::create("Port_15_Inbound_ackID_CSR");
         Port_15_Inbound_ackID_CSR.configure(this);
         Port_15_Inbound_ackID_CSR.build();

         Port_0_Power_Management_CSR = Port_0_Power_Management_CSR_reg::type_id::create("Port_0_Power_Management_CSR");
         Port_0_Power_Management_CSR.configure(this);
         Port_0_Power_Management_CSR.build();

         Port_1_Power_Management_CSR = Port_1_Power_Management_CSR_reg::type_id::create("Port_1_Power_Management_CSR");
         Port_1_Power_Management_CSR.configure(this);
         Port_1_Power_Management_CSR.build();

         Port_2_Power_Management_CSR = Port_2_Power_Management_CSR_reg::type_id::create("Port_2_Power_Management_CSR");
         Port_2_Power_Management_CSR.configure(this);
         Port_2_Power_Management_CSR.build();

         Port_3_Power_Management_CSR = Port_3_Power_Management_CSR_reg::type_id::create("Port_3_Power_Management_CSR");
         Port_3_Power_Management_CSR.configure(this);
         Port_3_Power_Management_CSR.build();

         Port_4_Power_Management_CSR = Port_4_Power_Management_CSR_reg::type_id::create("Port_4_Power_Management_CSR");
         Port_4_Power_Management_CSR.configure(this);
         Port_4_Power_Management_CSR.build();

         Port_5_Power_Management_CSR = Port_5_Power_Management_CSR_reg::type_id::create("Port_5_Power_Management_CSR");
         Port_5_Power_Management_CSR.configure(this);
         Port_5_Power_Management_CSR.build();

         Port_6_Power_Management_CSR = Port_6_Power_Management_CSR_reg::type_id::create("Port_6_Power_Management_CSR");
         Port_6_Power_Management_CSR.configure(this);
         Port_6_Power_Management_CSR.build();

         Port_7_Power_Management_CSR = Port_7_Power_Management_CSR_reg::type_id::create("Port_7_Power_Management_CSR");
         Port_7_Power_Management_CSR.configure(this);
         Port_7_Power_Management_CSR.build();

         Port_8_Power_Management_CSR = Port_8_Power_Management_CSR_reg::type_id::create("Port_8_Power_Management_CSR");
         Port_8_Power_Management_CSR.configure(this);
         Port_8_Power_Management_CSR.build();

         Port_9_Power_Management_CSR = Port_9_Power_Management_CSR_reg::type_id::create("Port_9_Power_Management_CSR");
         Port_9_Power_Management_CSR.configure(this);
         Port_9_Power_Management_CSR.build();

         Port_10_Power_Management_CSR = Port_10_Power_Management_CSR_reg::type_id::create("Port_10_Power_Management_CSR");
         Port_10_Power_Management_CSR.configure(this);
         Port_10_Power_Management_CSR.build();

         Port_11_Power_Management_CSR = Port_11_Power_Management_CSR_reg::type_id::create("Port_11_Power_Management_CSR");
         Port_11_Power_Management_CSR.configure(this);
         Port_11_Power_Management_CSR.build();

         Port_12_Power_Management_CSR = Port_12_Power_Management_CSR_reg::type_id::create("Port_12_Power_Management_CSR");
         Port_12_Power_Management_CSR.configure(this);
         Port_12_Power_Management_CSR.build();

         Port_13_Power_Management_CSR = Port_13_Power_Management_CSR_reg::type_id::create("Port_13_Power_Management_CSR");
         Port_13_Power_Management_CSR.configure(this);
         Port_13_Power_Management_CSR.build();

         Port_14_Power_Management_CSR = Port_14_Power_Management_CSR_reg::type_id::create("Port_14_Power_Management_CSR");
         Port_14_Power_Management_CSR.configure(this);
         Port_14_Power_Management_CSR.build();

         Port_15_Power_Management_CSR = Port_15_Power_Management_CSR_reg::type_id::create("Port_15_Power_Management_CSR");
         Port_15_Power_Management_CSR.configure(this);
         Port_15_Power_Management_CSR.build();

         Port_0_Latency_Optimization_CSR = Port_N_Latency_Optimization_CSR_reg::type_id::create("Port_0_Latency_Optimization_CSR");
         Port_0_Latency_Optimization_CSR.configure(this);
         Port_0_Latency_Optimization_CSR.build();

         Port_1_Latency_Optimization_CSR = Port_N_Latency_Optimization_CSR_reg::type_id::create("Port_1_Latency_Optimization_CSR");
         Port_1_Latency_Optimization_CSR.configure(this);
         Port_1_Latency_Optimization_CSR.build();

         Port_2_Latency_Optimization_CSR = Port_N_Latency_Optimization_CSR_reg::type_id::create("Port_2_Latency_Optimization_CSR");
         Port_2_Latency_Optimization_CSR.configure(this);
         Port_2_Latency_Optimization_CSR.build();

         Port_3_Latency_Optimization_CSR = Port_N_Latency_Optimization_CSR_reg::type_id::create("Port_3_Latency_Optimization_CSR");
         Port_3_Latency_Optimization_CSR.configure(this);
         Port_3_Latency_Optimization_CSR.build();

         Port_4_Latency_Optimization_CSR = Port_N_Latency_Optimization_CSR_reg::type_id::create("Port_4_Latency_Optimization_CSR");
         Port_4_Latency_Optimization_CSR.configure(this);
         Port_4_Latency_Optimization_CSR.build();

         Port_5_Latency_Optimization_CSR = Port_N_Latency_Optimization_CSR_reg::type_id::create("Port_5_Latency_Optimization_CSR");
         Port_5_Latency_Optimization_CSR.configure(this);
         Port_5_Latency_Optimization_CSR.build();

         Port_6_Latency_Optimization_CSR = Port_N_Latency_Optimization_CSR_reg::type_id::create("Port_6_Latency_Optimization_CSR");
         Port_6_Latency_Optimization_CSR.configure(this);
         Port_6_Latency_Optimization_CSR.build();

         Port_7_Latency_Optimization_CSR = Port_N_Latency_Optimization_CSR_reg::type_id::create("Port_7_Latency_Optimization_CSR");
         Port_7_Latency_Optimization_CSR.configure(this);
         Port_7_Latency_Optimization_CSR.build();

         Port_8_Latency_Optimization_CSR = Port_N_Latency_Optimization_CSR_reg::type_id::create("Port_8_Latency_Optimization_CSR");
         Port_8_Latency_Optimization_CSR.configure(this);
         Port_8_Latency_Optimization_CSR.build();

         Port_9_Latency_Optimization_CSR = Port_N_Latency_Optimization_CSR_reg::type_id::create("Port_9_Latency_Optimization_CSR");
         Port_9_Latency_Optimization_CSR.configure(this);
         Port_9_Latency_Optimization_CSR.build();

         Port_10_Latency_Optimization_CSR = Port_N_Latency_Optimization_CSR_reg::type_id::create("Port_10_Latency_Optimization_CSR");
         Port_10_Latency_Optimization_CSR.configure(this);
         Port_10_Latency_Optimization_CSR.build();

         Port_11_Latency_Optimization_CSR = Port_N_Latency_Optimization_CSR_reg::type_id::create("Port_11_Latency_Optimization_CSR");
         Port_11_Latency_Optimization_CSR.configure(this);
         Port_11_Latency_Optimization_CSR.build();

         Port_12_Latency_Optimization_CSR = Port_N_Latency_Optimization_CSR_reg::type_id::create("Port_12_Latency_Optimization_CSR");
         Port_12_Latency_Optimization_CSR.configure(this);
         Port_12_Latency_Optimization_CSR.build();

         Port_13_Latency_Optimization_CSR = Port_N_Latency_Optimization_CSR_reg::type_id::create("Port_13_Latency_Optimization_CSR");
         Port_13_Latency_Optimization_CSR.configure(this);
         Port_13_Latency_Optimization_CSR.build();

         Port_14_Latency_Optimization_CSR = Port_N_Latency_Optimization_CSR_reg::type_id::create("Port_14_Latency_Optimization_CSR");
         Port_14_Latency_Optimization_CSR.configure(this);
         Port_14_Latency_Optimization_CSR.build();

         Port_15_Latency_Optimization_CSR = Port_N_Latency_Optimization_CSR_reg::type_id::create("Port_15_Latency_Optimization_CSR");
         Port_15_Latency_Optimization_CSR.configure(this);
         Port_15_Latency_Optimization_CSR.build();

         Port_0_Link_Timers_Control_CSR = Port_0_Link_Timers_Control_CSR_reg::type_id::create("Port_0_Link_Timers_Control_CSR");
         Port_0_Link_Timers_Control_CSR.configure(this);
         Port_0_Link_Timers_Control_CSR.build();

         Port_1_Link_Timers_Control_CSR = Port_1_Link_Timers_Control_CSR_reg::type_id::create("Port_1_Link_Timers_Control_CSR");
         Port_1_Link_Timers_Control_CSR.configure(this);
         Port_1_Link_Timers_Control_CSR.build();

         Port_2_Link_Timers_Control_CSR = Port_2_Link_Timers_Control_CSR_reg::type_id::create("Port_2_Link_Timers_Control_CSR");
         Port_2_Link_Timers_Control_CSR.configure(this);
         Port_2_Link_Timers_Control_CSR.build();

         Port_3_Link_Timers_Control_CSR = Port_3_Link_Timers_Control_CSR_reg::type_id::create("Port_3_Link_Timers_Control_CSR");
         Port_3_Link_Timers_Control_CSR.configure(this);
         Port_3_Link_Timers_Control_CSR.build();

         Port_4_Link_Timers_Control_CSR = Port_4_Link_Timers_Control_CSR_reg::type_id::create("Port_4_Link_Timers_Control_CSR");
         Port_4_Link_Timers_Control_CSR.configure(this);
         Port_4_Link_Timers_Control_CSR.build();

         Port_5_Link_Timers_Control_CSR = Port_5_Link_Timers_Control_CSR_reg::type_id::create("Port_5_Link_Timers_Control_CSR");
         Port_5_Link_Timers_Control_CSR.configure(this);
         Port_5_Link_Timers_Control_CSR.build();

         Port_6_Link_Timers_Control_CSR = Port_6_Link_Timers_Control_CSR_reg::type_id::create("Port_6_Link_Timers_Control_CSR");
         Port_6_Link_Timers_Control_CSR.configure(this);
         Port_6_Link_Timers_Control_CSR.build();

         Port_7_Link_Timers_Control_CSR = Port_7_Link_Timers_Control_CSR_reg::type_id::create("Port_7_Link_Timers_Control_CSR");
         Port_7_Link_Timers_Control_CSR.configure(this);
         Port_7_Link_Timers_Control_CSR.build();

         Port_8_Link_Timers_Control_CSR = Port_8_Link_Timers_Control_CSR_reg::type_id::create("Port_8_Link_Timers_Control_CSR");
         Port_8_Link_Timers_Control_CSR.configure(this);
         Port_8_Link_Timers_Control_CSR.build();

         Port_9_Link_Timers_Control_CSR = Port_9_Link_Timers_Control_CSR_reg::type_id::create("Port_9_Link_Timers_Control_CSR");
         Port_9_Link_Timers_Control_CSR.configure(this);
         Port_9_Link_Timers_Control_CSR.build();

         Port_10_Link_Timers_Control_CSR = Port_10_Link_Timers_Control_CSR_reg::type_id::create("Port_10_Link_Timers_Control_CSR");
         Port_10_Link_Timers_Control_CSR.configure(this);
         Port_10_Link_Timers_Control_CSR.build();

         Port_11_Link_Timers_Control_CSR = Port_11_Link_Timers_Control_CSR_reg::type_id::create("Port_11_Link_Timers_Control_CSR");
         Port_11_Link_Timers_Control_CSR.configure(this);
         Port_11_Link_Timers_Control_CSR.build();

         Port_12_Link_Timers_Control_CSR = Port_12_Link_Timers_Control_CSR_reg::type_id::create("Port_12_Link_Timers_Control_CSR");
         Port_12_Link_Timers_Control_CSR.configure(this);
         Port_12_Link_Timers_Control_CSR.build();

         Port_13_Link_Timers_Control_CSR = Port_13_Link_Timers_Control_CSR_reg::type_id::create("Port_13_Link_Timers_Control_CSR");
         Port_13_Link_Timers_Control_CSR.configure(this);
         Port_13_Link_Timers_Control_CSR.build();

         Port_14_Link_Timers_Control_CSR = Port_14_Link_Timers_Control_CSR_reg::type_id::create("Port_14_Link_Timers_Control_CSR");
         Port_14_Link_Timers_Control_CSR.configure(this);
         Port_14_Link_Timers_Control_CSR.build();

         Port_15_Link_Timers_Control_CSR = Port_15_Link_Timers_Control_CSR_reg::type_id::create("Port_15_Link_Timers_Control_CSR");
         Port_15_Link_Timers_Control_CSR.configure(this);
         Port_15_Link_Timers_Control_CSR.build();

         Port_0_Link_Timers_Control_2_CSR = Port_0_Link_Timers_Control_2_CSR_reg::type_id::create("Port_0_Link_Timers_Control_2_CSR");
         Port_0_Link_Timers_Control_2_CSR.configure(this);
         Port_0_Link_Timers_Control_2_CSR.build();

         Port_1_Link_Timers_Control_2_CSR = Port_1_Link_Timers_Control_2_CSR_reg::type_id::create("Port_1_Link_Timers_Control_2_CSR");
         Port_1_Link_Timers_Control_2_CSR.configure(this);
         Port_1_Link_Timers_Control_2_CSR.build();

         Port_2_Link_Timers_Control_2_CSR = Port_2_Link_Timers_Control_2_CSR_reg::type_id::create("Port_2_Link_Timers_Control_2_CSR");
         Port_2_Link_Timers_Control_2_CSR.configure(this);
         Port_2_Link_Timers_Control_2_CSR.build();

         Port_3_Link_Timers_Control_2_CSR = Port_3_Link_Timers_Control_2_CSR_reg::type_id::create("Port_3_Link_Timers_Control_2_CSR");
         Port_3_Link_Timers_Control_2_CSR.configure(this);
         Port_3_Link_Timers_Control_2_CSR.build();

         Port_4_Link_Timers_Control_2_CSR = Port_4_Link_Timers_Control_2_CSR_reg::type_id::create("Port_4_Link_Timers_Control_2_CSR");
         Port_4_Link_Timers_Control_2_CSR.configure(this);
         Port_4_Link_Timers_Control_2_CSR.build();

         Port_5_Link_Timers_Control_2_CSR = Port_5_Link_Timers_Control_2_CSR_reg::type_id::create("Port_5_Link_Timers_Control_2_CSR");
         Port_5_Link_Timers_Control_2_CSR.configure(this);
         Port_5_Link_Timers_Control_2_CSR.build();

         Port_6_Link_Timers_Control_2_CSR = Port_6_Link_Timers_Control_2_CSR_reg::type_id::create("Port_6_Link_Timers_Control_2_CSR");
         Port_6_Link_Timers_Control_2_CSR.configure(this);
         Port_6_Link_Timers_Control_2_CSR.build();

         Port_7_Link_Timers_Control_2_CSR = Port_7_Link_Timers_Control_2_CSR_reg::type_id::create("Port_7_Link_Timers_Control_2_CSR");
         Port_7_Link_Timers_Control_2_CSR.configure(this);
         Port_7_Link_Timers_Control_2_CSR.build();

         Port_8_Link_Timers_Control_2_CSR = Port_8_Link_Timers_Control_2_CSR_reg::type_id::create("Port_8_Link_Timers_Control_2_CSR");
         Port_8_Link_Timers_Control_2_CSR.configure(this);
         Port_8_Link_Timers_Control_2_CSR.build();

         Port_9_Link_Timers_Control_2_CSR = Port_9_Link_Timers_Control_2_CSR_reg::type_id::create("Port_9_Link_Timers_Control_2_CSR");
         Port_9_Link_Timers_Control_2_CSR.configure(this);
         Port_9_Link_Timers_Control_2_CSR.build();

         Port_10_Link_Timers_Control_2_CSR = Port_10_Link_Timers_Control_2_CSR_reg::type_id::create("Port_10_Link_Timers_Control_2_CSR");
         Port_10_Link_Timers_Control_2_CSR.configure(this);
         Port_10_Link_Timers_Control_2_CSR.build();

         Port_11_Link_Timers_Control_2_CSR = Port_11_Link_Timers_Control_2_CSR_reg::type_id::create("Port_11_Link_Timers_Control_2_CSR");
         Port_11_Link_Timers_Control_2_CSR.configure(this);
         Port_11_Link_Timers_Control_2_CSR.build();

         Port_12_Link_Timers_Control_2_CSR = Port_12_Link_Timers_Control_2_CSR_reg::type_id::create("Port_12_Link_Timers_Control_2_CSR");
         Port_12_Link_Timers_Control_2_CSR.configure(this);
         Port_12_Link_Timers_Control_2_CSR.build();

         Port_13_Link_Timers_Control_2_CSR = Port_13_Link_Timers_Control_2_CSR_reg::type_id::create("Port_13_Link_Timers_Control_2_CSR");
         Port_13_Link_Timers_Control_2_CSR.configure(this);
         Port_13_Link_Timers_Control_2_CSR.build();

         Port_14_Link_Timers_Control_2_CSR = Port_14_Link_Timers_Control_2_CSR_reg::type_id::create("Port_14_Link_Timers_Control_2_CSR");
         Port_14_Link_Timers_Control_2_CSR.configure(this);
         Port_14_Link_Timers_Control_2_CSR.build();

         Port_15_Link_Timers_Control_2_CSR = Port_15_Link_Timers_Control_2_CSR_reg::type_id::create("Port_15_Link_Timers_Control_2_CSR");
         Port_15_Link_Timers_Control_2_CSR.configure(this);
         Port_15_Link_Timers_Control_2_CSR.build();

         Port_0_Link_Timers_Control_3_CSR = Port_0_Link_Timers_Control_3_CSR_reg::type_id::create("Port_0_Link_Timers_Control_3_CSR");
         Port_0_Link_Timers_Control_3_CSR.configure(this);
         Port_0_Link_Timers_Control_3_CSR.build();

         Port_1_Link_Timers_Control_3_CSR = Port_1_Link_Timers_Control_3_CSR_reg::type_id::create("Port_1_Link_Timers_Control_3_CSR");
         Port_1_Link_Timers_Control_3_CSR.configure(this);
         Port_1_Link_Timers_Control_3_CSR.build();

         Port_2_Link_Timers_Control_3_CSR = Port_2_Link_Timers_Control_3_CSR_reg::type_id::create("Port_2_Link_Timers_Control_3_CSR");
         Port_2_Link_Timers_Control_3_CSR.configure(this);
         Port_2_Link_Timers_Control_3_CSR.build();

         Port_3_Link_Timers_Control_3_CSR = Port_3_Link_Timers_Control_3_CSR_reg::type_id::create("Port_3_Link_Timers_Control_3_CSR");
         Port_3_Link_Timers_Control_3_CSR.configure(this);
         Port_3_Link_Timers_Control_3_CSR.build();

         Port_4_Link_Timers_Control_3_CSR = Port_4_Link_Timers_Control_3_CSR_reg::type_id::create("Port_4_Link_Timers_Control_3_CSR");
         Port_4_Link_Timers_Control_3_CSR.configure(this);
         Port_4_Link_Timers_Control_3_CSR.build();

         Port_5_Link_Timers_Control_3_CSR = Port_5_Link_Timers_Control_3_CSR_reg::type_id::create("Port_5_Link_Timers_Control_3_CSR");
         Port_5_Link_Timers_Control_3_CSR.configure(this);
         Port_5_Link_Timers_Control_3_CSR.build();

         Port_6_Link_Timers_Control_3_CSR = Port_6_Link_Timers_Control_3_CSR_reg::type_id::create("Port_6_Link_Timers_Control_3_CSR");
         Port_6_Link_Timers_Control_3_CSR.configure(this);
         Port_6_Link_Timers_Control_3_CSR.build();

         Port_7_Link_Timers_Control_3_CSR = Port_7_Link_Timers_Control_3_CSR_reg::type_id::create("Port_7_Link_Timers_Control_3_CSR");
         Port_7_Link_Timers_Control_3_CSR.configure(this);
         Port_7_Link_Timers_Control_3_CSR.build();

         Port_8_Link_Timers_Control_3_CSR = Port_8_Link_Timers_Control_3_CSR_reg::type_id::create("Port_8_Link_Timers_Control_3_CSR");
         Port_8_Link_Timers_Control_3_CSR.configure(this);
         Port_8_Link_Timers_Control_3_CSR.build();

         Port_9_Link_Timers_Control_3_CSR = Port_9_Link_Timers_Control_3_CSR_reg::type_id::create("Port_9_Link_Timers_Control_3_CSR");
         Port_9_Link_Timers_Control_3_CSR.configure(this);
         Port_9_Link_Timers_Control_3_CSR.build();

         Port_10_Link_Timers_Control_3_CSR = Port_10_Link_Timers_Control_3_CSR_reg::type_id::create("Port_10_Link_Timers_Control_3_CSR");
         Port_10_Link_Timers_Control_3_CSR.configure(this);
         Port_10_Link_Timers_Control_3_CSR.build();

         Port_11_Link_Timers_Control_3_CSR = Port_11_Link_Timers_Control_3_CSR_reg::type_id::create("Port_11_Link_Timers_Control_3_CSR");
         Port_11_Link_Timers_Control_3_CSR.configure(this);
         Port_11_Link_Timers_Control_3_CSR.build();

         Port_12_Link_Timers_Control_3_CSR = Port_12_Link_Timers_Control_3_CSR_reg::type_id::create("Port_12_Link_Timers_Control_3_CSR");
         Port_12_Link_Timers_Control_3_CSR.configure(this);
         Port_12_Link_Timers_Control_3_CSR.build();

         Port_13_Link_Timers_Control_3_CSR = Port_13_Link_Timers_Control_3_CSR_reg::type_id::create("Port_13_Link_Timers_Control_3_CSR");
         Port_13_Link_Timers_Control_3_CSR.configure(this);
         Port_13_Link_Timers_Control_3_CSR.build();

         Port_14_Link_Timers_Control_3_CSR = Port_14_Link_Timers_Control_3_CSR_reg::type_id::create("Port_14_Link_Timers_Control_3_CSR");
         Port_14_Link_Timers_Control_3_CSR.configure(this);
         Port_14_Link_Timers_Control_3_CSR.build();

         Port_15_Link_Timers_Control_3_CSR = Port_15_Link_Timers_Control_3_CSR_reg::type_id::create("Port_15_Link_Timers_Control_3_CSR");
         Port_15_Link_Timers_Control_3_CSR.configure(this);
         Port_15_Link_Timers_Control_3_CSR.build();

         LP_Serial_Lane_Register_Block_Header = LP_Serial_Lane_Register_Block_Header_reg::type_id::create("LP_Serial_Lane_Register_Block_Header");
         LP_Serial_Lane_Register_Block_Header.configure(this);
         LP_Serial_Lane_Register_Block_Header.build();

         Lane_0_Status_0_CSR = Lane_0_Status_0_CSR_reg::type_id::create("Lane_0_Status_0_CSR");
         Lane_0_Status_0_CSR.configure(this);
         Lane_0_Status_0_CSR.build();

         Lane_0_Status_1_CSR = Lane_0_Status_1_CSR_reg::type_id::create("Lane_0_Status_1_CSR");
         Lane_0_Status_1_CSR.configure(this);
         Lane_0_Status_1_CSR.build();

         Lane_0_Status_2_CSR = Lane_0_Status_2_CSR_reg::type_id::create("Lane_0_Status_2_CSR");
         Lane_0_Status_2_CSR.configure(this);
         Lane_0_Status_2_CSR.build();

         Lane_0_Status_3_CSR = Lane_0_Status_3_CSR_reg::type_id::create("Lane_0_Status_3_CSR");
         Lane_0_Status_3_CSR.configure(this);
         Lane_0_Status_3_CSR.build();

         Lane_1_Status_0_CSR = Lane_1_Status_0_CSR_reg::type_id::create("Lane_1_Status_0_CSR");
         Lane_1_Status_0_CSR.configure(this);
         Lane_1_Status_0_CSR.build();

         Lane_1_Status_1_CSR = Lane_1_Status_1_CSR_reg::type_id::create("Lane_1_Status_1_CSR");
         Lane_1_Status_1_CSR.configure(this);
         Lane_1_Status_1_CSR.build();

         Lane_1_Status_2_CSR = Lane_1_Status_2_CSR_reg::type_id::create("Lane_1_Status_2_CSR");
         Lane_1_Status_2_CSR.configure(this);
         Lane_1_Status_2_CSR.build();

         Lane_1_Status_3_CSR = Lane_1_Status_3_CSR_reg::type_id::create("Lane_1_Status_3_CSR");
         Lane_1_Status_3_CSR.configure(this);
         Lane_1_Status_3_CSR.build();

         Lane_2_Status_0_CSR = Lane_2_Status_0_CSR_reg::type_id::create("Lane_2_Status_0_CSR");
         Lane_2_Status_0_CSR.configure(this);
         Lane_2_Status_0_CSR.build();

         Lane_2_Status_1_CSR = Lane_2_Status_1_CSR_reg::type_id::create("Lane_2_Status_1_CSR");
         Lane_2_Status_1_CSR.configure(this);
         Lane_2_Status_1_CSR.build();

         Lane_2_Status_2_CSR = Lane_2_Status_2_CSR_reg::type_id::create("Lane_2_Status_2_CSR");
         Lane_2_Status_2_CSR.configure(this);
         Lane_2_Status_2_CSR.build();

         Lane_2_Status_3_CSR = Lane_2_Status_3_CSR_reg::type_id::create("Lane_2_Status_3_CSR");
         Lane_2_Status_3_CSR.configure(this);
         Lane_2_Status_3_CSR.build();

         Lane_3_Status_0_CSR = Lane_3_Status_0_CSR_reg::type_id::create("Lane_3_Status_0_CSR");
         Lane_3_Status_0_CSR.configure(this);
         Lane_3_Status_0_CSR.build();

         Lane_3_Status_1_CSR = Lane_3_Status_1_CSR_reg::type_id::create("Lane_3_Status_1_CSR");
         Lane_3_Status_1_CSR.configure(this);
         Lane_3_Status_1_CSR.build();

         Lane_3_Status_2_CSR = Lane_3_Status_2_CSR_reg::type_id::create("Lane_3_Status_2_CSR");
         Lane_3_Status_2_CSR.configure(this);
         Lane_3_Status_2_CSR.build();

         Lane_3_Status_3_CSR = Lane_3_Status_3_CSR_reg::type_id::create("Lane_3_Status_3_CSR");
         Lane_3_Status_3_CSR.configure(this);
         Lane_3_Status_3_CSR.build();

         Lane_4_Status_0_CSR = Lane_4_Status_0_CSR_reg::type_id::create("Lane_4_Status_0_CSR");
         Lane_4_Status_0_CSR.configure(this);
         Lane_4_Status_0_CSR.build();

         Lane_4_Status_1_CSR = Lane_4_Status_1_CSR_reg::type_id::create("Lane_4_Status_1_CSR");
         Lane_4_Status_1_CSR.configure(this);
         Lane_4_Status_1_CSR.build();

         Lane_4_Status_2_CSR = Lane_4_Status_2_CSR_reg::type_id::create("Lane_4_Status_2_CSR");
         Lane_4_Status_2_CSR.configure(this);
         Lane_4_Status_2_CSR.build();

         Lane_4_Status_3_CSR = Lane_4_Status_3_CSR_reg::type_id::create("Lane_4_Status_3_CSR");
         Lane_4_Status_3_CSR.configure(this);
         Lane_4_Status_3_CSR.build();

         Lane_5_Status_0_CSR = Lane_5_Status_0_CSR_reg::type_id::create("Lane_5_Status_0_CSR");
         Lane_5_Status_0_CSR.configure(this);
         Lane_5_Status_0_CSR.build();

         Lane_5_Status_1_CSR = Lane_5_Status_1_CSR_reg::type_id::create("Lane_5_Status_1_CSR");
         Lane_5_Status_1_CSR.configure(this);
         Lane_5_Status_1_CSR.build();

         Lane_5_Status_2_CSR = Lane_5_Status_2_CSR_reg::type_id::create("Lane_5_Status_2_CSR");
         Lane_5_Status_2_CSR.configure(this);
         Lane_5_Status_2_CSR.build();

         Lane_5_Status_3_CSR = Lane_5_Status_3_CSR_reg::type_id::create("Lane_5_Status_3_CSR");
         Lane_5_Status_3_CSR.configure(this);
         Lane_5_Status_3_CSR.build();

         Lane_6_Status_0_CSR = Lane_6_Status_0_CSR_reg::type_id::create("Lane_6_Status_0_CSR");
         Lane_6_Status_0_CSR.configure(this);
         Lane_6_Status_0_CSR.build();

         Lane_6_Status_1_CSR = Lane_6_Status_1_CSR_reg::type_id::create("Lane_6_Status_1_CSR");
         Lane_6_Status_1_CSR.configure(this);
         Lane_6_Status_1_CSR.build();

         Lane_6_Status_2_CSR = Lane_6_Status_2_CSR_reg::type_id::create("Lane_6_Status_2_CSR");
         Lane_6_Status_2_CSR.configure(this);
         Lane_6_Status_2_CSR.build();

         Lane_6_Status_3_CSR = Lane_6_Status_3_CSR_reg::type_id::create("Lane_6_Status_3_CSR");
         Lane_6_Status_3_CSR.configure(this);
         Lane_6_Status_3_CSR.build();

         Lane_7_Status_0_CSR = Lane_7_Status_0_CSR_reg::type_id::create("Lane_7_Status_0_CSR");
         Lane_7_Status_0_CSR.configure(this);
         Lane_7_Status_0_CSR.build();

         Lane_7_Status_1_CSR = Lane_7_Status_1_CSR_reg::type_id::create("Lane_7_Status_1_CSR");
         Lane_7_Status_1_CSR.configure(this);
         Lane_7_Status_1_CSR.build();

         Lane_7_Status_2_CSR = Lane_7_Status_2_CSR_reg::type_id::create("Lane_7_Status_2_CSR");
         Lane_7_Status_2_CSR.configure(this);
         Lane_7_Status_2_CSR.build();

         Lane_7_Status_3_CSR = Lane_7_Status_3_CSR_reg::type_id::create("Lane_7_Status_3_CSR");
         Lane_7_Status_3_CSR.configure(this);
         Lane_7_Status_3_CSR.build();

         Lane_8_Status_0_CSR = Lane_8_Status_0_CSR_reg::type_id::create("Lane_8_Status_0_CSR");
         Lane_8_Status_0_CSR.configure(this);
         Lane_8_Status_0_CSR.build();

         Lane_8_Status_1_CSR = Lane_8_Status_1_CSR_reg::type_id::create("Lane_8_Status_1_CSR");
         Lane_8_Status_1_CSR.configure(this);
         Lane_8_Status_1_CSR.build();

         Lane_8_Status_2_CSR = Lane_8_Status_2_CSR_reg::type_id::create("Lane_8_Status_2_CSR");
         Lane_8_Status_2_CSR.configure(this);
         Lane_8_Status_2_CSR.build();

         Lane_8_Status_3_CSR = Lane_8_Status_3_CSR_reg::type_id::create("Lane_8_Status_3_CSR");
         Lane_8_Status_3_CSR.configure(this);
         Lane_8_Status_3_CSR.build();

         Lane_9_Status_0_CSR = Lane_9_Status_0_CSR_reg::type_id::create("Lane_9_Status_0_CSR");
         Lane_9_Status_0_CSR.configure(this);
         Lane_9_Status_0_CSR.build();

         Lane_9_Status_1_CSR = Lane_9_Status_1_CSR_reg::type_id::create("Lane_9_Status_1_CSR");
         Lane_9_Status_1_CSR.configure(this);
         Lane_9_Status_1_CSR.build();

         Lane_9_Status_2_CSR = Lane_9_Status_2_CSR_reg::type_id::create("Lane_9_Status_2_CSR");
         Lane_9_Status_2_CSR.configure(this);
         Lane_9_Status_2_CSR.build();

         Lane_9_Status_3_CSR = Lane_9_Status_3_CSR_reg::type_id::create("Lane_9_Status_3_CSR");
         Lane_9_Status_3_CSR.configure(this);
         Lane_9_Status_3_CSR.build();

         Lane_10_Status_0_CSR = Lane_10_Status_0_CSR_reg::type_id::create("Lane_10_Status_0_CSR");
         Lane_10_Status_0_CSR.configure(this);
         Lane_10_Status_0_CSR.build();

         Lane_10_Status_1_CSR = Lane_10_Status_1_CSR_reg::type_id::create("Lane_10_Status_1_CSR");
         Lane_10_Status_1_CSR.configure(this);
         Lane_10_Status_1_CSR.build();

         Lane_10_Status_2_CSR = Lane_10_Status_2_CSR_reg::type_id::create("Lane_10_Status_2_CSR");
         Lane_10_Status_2_CSR.configure(this);
         Lane_10_Status_2_CSR.build();

         Lane_10_Status_3_CSR = Lane_10_Status_3_CSR_reg::type_id::create("Lane_10_Status_3_CSR");
         Lane_10_Status_3_CSR.configure(this);
         Lane_10_Status_3_CSR.build();

         Lane_11_Status_0_CSR = Lane_11_Status_0_CSR_reg::type_id::create("Lane_11_Status_0_CSR");
         Lane_11_Status_0_CSR.configure(this);
         Lane_11_Status_0_CSR.build();

         Lane_11_Status_1_CSR = Lane_11_Status_1_CSR_reg::type_id::create("Lane_11_Status_1_CSR");
         Lane_11_Status_1_CSR.configure(this);
         Lane_11_Status_1_CSR.build();

         Lane_11_Status_2_CSR = Lane_11_Status_2_CSR_reg::type_id::create("Lane_11_Status_2_CSR");
         Lane_11_Status_2_CSR.configure(this);
         Lane_11_Status_2_CSR.build();

         Lane_11_Status_3_CSR = Lane_11_Status_3_CSR_reg::type_id::create("Lane_11_Status_3_CSR");
         Lane_11_Status_3_CSR.configure(this);
         Lane_11_Status_3_CSR.build();

         Lane_12_Status_0_CSR = Lane_12_Status_0_CSR_reg::type_id::create("Lane_12_Status_0_CSR");
         Lane_12_Status_0_CSR.configure(this);
         Lane_12_Status_0_CSR.build();

         Lane_12_Status_1_CSR = Lane_12_Status_1_CSR_reg::type_id::create("Lane_12_Status_1_CSR");
         Lane_12_Status_1_CSR.configure(this);
         Lane_12_Status_1_CSR.build();

         Lane_12_Status_2_CSR = Lane_12_Status_2_CSR_reg::type_id::create("Lane_12_Status_2_CSR");
         Lane_12_Status_2_CSR.configure(this);
         Lane_12_Status_2_CSR.build();

         Lane_12_Status_3_CSR = Lane_12_Status_3_CSR_reg::type_id::create("Lane_12_Status_3_CSR");
         Lane_12_Status_3_CSR.configure(this);
         Lane_12_Status_3_CSR.build();

         Lane_13_Status_0_CSR = Lane_13_Status_0_CSR_reg::type_id::create("Lane_13_Status_0_CSR");
         Lane_13_Status_0_CSR.configure(this);
         Lane_13_Status_0_CSR.build();

         Lane_13_Status_1_CSR = Lane_13_Status_1_CSR_reg::type_id::create("Lane_13_Status_1_CSR");
         Lane_13_Status_1_CSR.configure(this);
         Lane_13_Status_1_CSR.build();

         Lane_13_Status_2_CSR = Lane_13_Status_2_CSR_reg::type_id::create("Lane_13_Status_2_CSR");
         Lane_13_Status_2_CSR.configure(this);
         Lane_13_Status_2_CSR.build();

         Lane_13_Status_3_CSR = Lane_13_Status_3_CSR_reg::type_id::create("Lane_13_Status_3_CSR");
         Lane_13_Status_3_CSR.configure(this);
         Lane_13_Status_3_CSR.build();

         Lane_14_Status_0_CSR = Lane_14_Status_0_CSR_reg::type_id::create("Lane_14_Status_0_CSR");
         Lane_14_Status_0_CSR.configure(this);
         Lane_14_Status_0_CSR.build();

         Lane_14_Status_1_CSR = Lane_14_Status_1_CSR_reg::type_id::create("Lane_14_Status_1_CSR");
         Lane_14_Status_1_CSR.configure(this);
         Lane_14_Status_1_CSR.build();

         Lane_14_Status_2_CSR = Lane_14_Status_2_CSR_reg::type_id::create("Lane_14_Status_2_CSR");
         Lane_14_Status_2_CSR.configure(this);
         Lane_14_Status_2_CSR.build();

         Lane_14_Status_3_CSR = Lane_14_Status_3_CSR_reg::type_id::create("Lane_14_Status_3_CSR");
         Lane_14_Status_3_CSR.configure(this);
         Lane_14_Status_3_CSR.build();

         Lane_15_Status_0_CSR = Lane_15_Status_0_CSR_reg::type_id::create("Lane_15_Status_0_CSR");
         Lane_15_Status_0_CSR.configure(this);
         Lane_15_Status_0_CSR.build();

         Lane_15_Status_1_CSR = Lane_15_Status_1_CSR_reg::type_id::create("Lane_15_Status_1_CSR");
         Lane_15_Status_1_CSR.configure(this);
         Lane_15_Status_1_CSR.build();

         Lane_15_Status_2_CSR = Lane_15_Status_2_CSR_reg::type_id::create("Lane_15_Status_2_CSR");
         Lane_15_Status_2_CSR.configure(this);
         Lane_15_Status_2_CSR.build();

         Lane_15_Status_3_CSR = Lane_15_Status_3_CSR_reg::type_id::create("Lane_15_Status_3_CSR");
         Lane_15_Status_3_CSR.configure(this);
         Lane_15_Status_3_CSR.build();

         VC_Register_Block_Header = VC_Register_Block_Header_reg::type_id::create("VC_Register_Block_Header");
         VC_Register_Block_Header.configure(this);
         VC_Register_Block_Header.build();

         Port_0_VC_Control_and_Status_Register = Port_0_VC_Control_and_Status_Register_reg::type_id::create("Port_0_VC_Control_and_Status_Register");
         Port_0_VC_Control_and_Status_Register.configure(this);
         Port_0_VC_Control_and_Status_Register.build();

         Port_1_VC_Control_and_Status_Register = Port_1_VC_Control_and_Status_Register_reg::type_id::create("Port_1_VC_Control_and_Status_Register");
         Port_1_VC_Control_and_Status_Register.configure(this);
         Port_1_VC_Control_and_Status_Register.build();

         Port_2_VC_Control_and_Status_Register = Port_2_VC_Control_and_Status_Register_reg::type_id::create("Port_2_VC_Control_and_Status_Register");
         Port_2_VC_Control_and_Status_Register.configure(this);
         Port_2_VC_Control_and_Status_Register.build();

         Port_3_VC_Control_and_Status_Register = Port_3_VC_Control_and_Status_Register_reg::type_id::create("Port_3_VC_Control_and_Status_Register");
         Port_3_VC_Control_and_Status_Register.configure(this);
         Port_3_VC_Control_and_Status_Register.build();

         Port_4_VC_Control_and_Status_Register = Port_4_VC_Control_and_Status_Register_reg::type_id::create("Port_4_VC_Control_and_Status_Register");
         Port_4_VC_Control_and_Status_Register.configure(this);
         Port_4_VC_Control_and_Status_Register.build();

         Port_5_VC_Control_and_Status_Register = Port_5_VC_Control_and_Status_Register_reg::type_id::create("Port_5_VC_Control_and_Status_Register");
         Port_5_VC_Control_and_Status_Register.configure(this);
         Port_5_VC_Control_and_Status_Register.build();

         Port_6_VC_Control_and_Status_Register = Port_6_VC_Control_and_Status_Register_reg::type_id::create("Port_6_VC_Control_and_Status_Register");
         Port_6_VC_Control_and_Status_Register.configure(this);
         Port_6_VC_Control_and_Status_Register.build();

         Port_7_VC_Control_and_Status_Register = Port_7_VC_Control_and_Status_Register_reg::type_id::create("Port_7_VC_Control_and_Status_Register");
         Port_7_VC_Control_and_Status_Register.configure(this);
         Port_7_VC_Control_and_Status_Register.build();

         Port_8_VC_Control_and_Status_Register = Port_8_VC_Control_and_Status_Register_reg::type_id::create("Port_8_VC_Control_and_Status_Register");
         Port_8_VC_Control_and_Status_Register.configure(this);
         Port_8_VC_Control_and_Status_Register.build();

         Port_9_VC_Control_and_Status_Register = Port_9_VC_Control_and_Status_Register_reg::type_id::create("Port_9_VC_Control_and_Status_Register");
         Port_9_VC_Control_and_Status_Register.configure(this);
         Port_9_VC_Control_and_Status_Register.build();

         Port_10_VC_Control_and_Status_Register = Port_10_VC_Control_and_Status_Register_reg::type_id::create("Port_10_VC_Control_and_Status_Register");
         Port_10_VC_Control_and_Status_Register.configure(this);
         Port_10_VC_Control_and_Status_Register.build();

         Port_11_VC_Control_and_Status_Register = Port_11_VC_Control_and_Status_Register_reg::type_id::create("Port_11_VC_Control_and_Status_Register");
         Port_11_VC_Control_and_Status_Register.configure(this);
         Port_11_VC_Control_and_Status_Register.build();

         Port_12_VC_Control_and_Status_Register = Port_12_VC_Control_and_Status_Register_reg::type_id::create("Port_12_VC_Control_and_Status_Register");
         Port_12_VC_Control_and_Status_Register.configure(this);
         Port_12_VC_Control_and_Status_Register.build();

         Port_13_VC_Control_and_Status_Register = Port_13_VC_Control_and_Status_Register_reg::type_id::create("Port_13_VC_Control_and_Status_Register");
         Port_13_VC_Control_and_Status_Register.configure(this);
         Port_13_VC_Control_and_Status_Register.build();

         Port_14_VC_Control_and_Status_Register = Port_14_VC_Control_and_Status_Register_reg::type_id::create("Port_14_VC_Control_and_Status_Register");
         Port_14_VC_Control_and_Status_Register.configure(this);
         Port_14_VC_Control_and_Status_Register.build();

         Port_15_VC_Control_and_Status_Register = Port_15_VC_Control_and_Status_Register_reg::type_id::create("Port_15_VC_Control_and_Status_Register");
         Port_15_VC_Control_and_Status_Register.configure(this);
         Port_15_VC_Control_and_Status_Register.build();

         Port_0_VC0_BW_Allocation_Register = Port_0_VC0_BW_Allocation_Register_reg::type_id::create("Port_0_VC0_BW_Allocation_Register");
         Port_0_VC0_BW_Allocation_Register.configure(this);
         Port_0_VC0_BW_Allocation_Register.build();

         Port_1_VC0_BW_Allocation_Register = Port_1_VC0_BW_Allocation_Register_reg::type_id::create("Port_1_VC0_BW_Allocation_Register");
         Port_1_VC0_BW_Allocation_Register.configure(this);
         Port_1_VC0_BW_Allocation_Register.build();

         Port_2_VC0_BW_Allocation_Register = Port_2_VC0_BW_Allocation_Register_reg::type_id::create("Port_2_VC0_BW_Allocation_Register");
         Port_2_VC0_BW_Allocation_Register.configure(this);
         Port_2_VC0_BW_Allocation_Register.build();

         Port_3_VC0_BW_Allocation_Register = Port_3_VC0_BW_Allocation_Register_reg::type_id::create("Port_3_VC0_BW_Allocation_Register");
         Port_3_VC0_BW_Allocation_Register.configure(this);
         Port_3_VC0_BW_Allocation_Register.build();

         Port_4_VC0_BW_Allocation_Register = Port_4_VC0_BW_Allocation_Register_reg::type_id::create("Port_4_VC0_BW_Allocation_Register");
         Port_4_VC0_BW_Allocation_Register.configure(this);
         Port_4_VC0_BW_Allocation_Register.build();

         Port_5_VC0_BW_Allocation_Register = Port_5_VC0_BW_Allocation_Register_reg::type_id::create("Port_5_VC0_BW_Allocation_Register");
         Port_5_VC0_BW_Allocation_Register.configure(this);
         Port_5_VC0_BW_Allocation_Register.build();

         Port_6_VC0_BW_Allocation_Register = Port_6_VC0_BW_Allocation_Register_reg::type_id::create("Port_6_VC0_BW_Allocation_Register");
         Port_6_VC0_BW_Allocation_Register.configure(this);
         Port_6_VC0_BW_Allocation_Register.build();

         Port_7_VC0_BW_Allocation_Register = Port_7_VC0_BW_Allocation_Register_reg::type_id::create("Port_7_VC0_BW_Allocation_Register");
         Port_7_VC0_BW_Allocation_Register.configure(this);
         Port_7_VC0_BW_Allocation_Register.build();

         Port_8_VC0_BW_Allocation_Register = Port_8_VC0_BW_Allocation_Register_reg::type_id::create("Port_8_VC0_BW_Allocation_Register");
         Port_8_VC0_BW_Allocation_Register.configure(this);
         Port_8_VC0_BW_Allocation_Register.build();

         Port_9_VC0_BW_Allocation_Register = Port_9_VC0_BW_Allocation_Register_reg::type_id::create("Port_9_VC0_BW_Allocation_Register");
         Port_9_VC0_BW_Allocation_Register.configure(this);
         Port_9_VC0_BW_Allocation_Register.build();

         Port_10_VC0_BW_Allocation_Register = Port_10_VC0_BW_Allocation_Register_reg::type_id::create("Port_10_VC0_BW_Allocation_Register");
         Port_10_VC0_BW_Allocation_Register.configure(this);
         Port_10_VC0_BW_Allocation_Register.build();

         Port_11_VC0_BW_Allocation_Register = Port_11_VC0_BW_Allocation_Register_reg::type_id::create("Port_11_VC0_BW_Allocation_Register");
         Port_11_VC0_BW_Allocation_Register.configure(this);
         Port_11_VC0_BW_Allocation_Register.build();

         Port_12_VC0_BW_Allocation_Register = Port_12_VC0_BW_Allocation_Register_reg::type_id::create("Port_12_VC0_BW_Allocation_Register");
         Port_12_VC0_BW_Allocation_Register.configure(this);
         Port_12_VC0_BW_Allocation_Register.build();

         Port_13_VC0_BW_Allocation_Register = Port_13_VC0_BW_Allocation_Register_reg::type_id::create("Port_13_VC0_BW_Allocation_Register");
         Port_13_VC0_BW_Allocation_Register.configure(this);
         Port_13_VC0_BW_Allocation_Register.build();

         Port_14_VC0_BW_Allocation_Register = Port_14_VC0_BW_Allocation_Register_reg::type_id::create("Port_14_VC0_BW_Allocation_Register");
         Port_14_VC0_BW_Allocation_Register.configure(this);
         Port_14_VC0_BW_Allocation_Register.build();

         Port_15_VC0_BW_Allocation_Register = Port_15_VC0_BW_Allocation_Register_reg::type_id::create("Port_15_VC0_BW_Allocation_Register");
         Port_15_VC0_BW_Allocation_Register.configure(this);
         Port_15_VC0_BW_Allocation_Register.build();

         Port_0_VC5_VC1_BW_Allocation_Register = Port_0_VC5_VC1_BW_Allocation_Register_reg::type_id::create("Port_0_VC5_VC1_BW_Allocation_Register");
         Port_0_VC5_VC1_BW_Allocation_Register.configure(this);
         Port_0_VC5_VC1_BW_Allocation_Register.build();

         Port_1_VC5_VC1_BW_Allocation_Register = Port_1_VC5_VC1_BW_Allocation_Register_reg::type_id::create("Port_1_VC5_VC1_BW_Allocation_Register");
         Port_1_VC5_VC1_BW_Allocation_Register.configure(this);
         Port_1_VC5_VC1_BW_Allocation_Register.build();

         Port_2_VC5_VC1_BW_Allocation_Register = Port_2_VC5_VC1_BW_Allocation_Register_reg::type_id::create("Port_2_VC5_VC1_BW_Allocation_Register");
         Port_2_VC5_VC1_BW_Allocation_Register.configure(this);
         Port_2_VC5_VC1_BW_Allocation_Register.build();

         Port_3_VC5_VC1_BW_Allocation_Register = Port_3_VC5_VC1_BW_Allocation_Register_reg::type_id::create("Port_3_VC5_VC1_BW_Allocation_Register");
         Port_3_VC5_VC1_BW_Allocation_Register.configure(this);
         Port_3_VC5_VC1_BW_Allocation_Register.build();

         Port_4_VC5_VC1_BW_Allocation_Register = Port_4_VC5_VC1_BW_Allocation_Register_reg::type_id::create("Port_4_VC5_VC1_BW_Allocation_Register");
         Port_4_VC5_VC1_BW_Allocation_Register.configure(this);
         Port_4_VC5_VC1_BW_Allocation_Register.build();

         Port_5_VC5_VC1_BW_Allocation_Register = Port_5_VC5_VC1_BW_Allocation_Register_reg::type_id::create("Port_5_VC5_VC1_BW_Allocation_Register");
         Port_5_VC5_VC1_BW_Allocation_Register.configure(this);
         Port_5_VC5_VC1_BW_Allocation_Register.build();

         Port_6_VC5_VC1_BW_Allocation_Register = Port_6_VC5_VC1_BW_Allocation_Register_reg::type_id::create("Port_6_VC5_VC1_BW_Allocation_Register");
         Port_6_VC5_VC1_BW_Allocation_Register.configure(this);
         Port_6_VC5_VC1_BW_Allocation_Register.build();

         Port_7_VC5_VC1_BW_Allocation_Register = Port_7_VC5_VC1_BW_Allocation_Register_reg::type_id::create("Port_7_VC5_VC1_BW_Allocation_Register");
         Port_7_VC5_VC1_BW_Allocation_Register.configure(this);
         Port_7_VC5_VC1_BW_Allocation_Register.build();

         Port_8_VC5_VC1_BW_Allocation_Register = Port_8_VC5_VC1_BW_Allocation_Register_reg::type_id::create("Port_8_VC5_VC1_BW_Allocation_Register");
         Port_8_VC5_VC1_BW_Allocation_Register.configure(this);
         Port_8_VC5_VC1_BW_Allocation_Register.build();

         Port_9_VC5_VC1_BW_Allocation_Register = Port_9_VC5_VC1_BW_Allocation_Register_reg::type_id::create("Port_9_VC5_VC1_BW_Allocation_Register");
         Port_9_VC5_VC1_BW_Allocation_Register.configure(this);
         Port_9_VC5_VC1_BW_Allocation_Register.build();

         Port_10_VC5_VC1_BW_Allocation_Register = Port_10_VC5_VC1_BW_Allocation_Register_reg::type_id::create("Port_10_VC5_VC1_BW_Allocation_Register");
         Port_10_VC5_VC1_BW_Allocation_Register.configure(this);
         Port_10_VC5_VC1_BW_Allocation_Register.build();

         Port_11_VC5_VC1_BW_Allocation_Register = Port_11_VC5_VC1_BW_Allocation_Register_reg::type_id::create("Port_11_VC5_VC1_BW_Allocation_Register");
         Port_11_VC5_VC1_BW_Allocation_Register.configure(this);
         Port_11_VC5_VC1_BW_Allocation_Register.build();

         Port_12_VC5_VC1_BW_Allocation_Register = Port_12_VC5_VC1_BW_Allocation_Register_reg::type_id::create("Port_12_VC5_VC1_BW_Allocation_Register");
         Port_12_VC5_VC1_BW_Allocation_Register.configure(this);
         Port_12_VC5_VC1_BW_Allocation_Register.build();

         Port_13_VC5_VC1_BW_Allocation_Register = Port_13_VC5_VC1_BW_Allocation_Register_reg::type_id::create("Port_13_VC5_VC1_BW_Allocation_Register");
         Port_13_VC5_VC1_BW_Allocation_Register.configure(this);
         Port_13_VC5_VC1_BW_Allocation_Register.build();

         Port_14_VC5_VC1_BW_Allocation_Register = Port_14_VC5_VC1_BW_Allocation_Register_reg::type_id::create("Port_14_VC5_VC1_BW_Allocation_Register");
         Port_14_VC5_VC1_BW_Allocation_Register.configure(this);
         Port_14_VC5_VC1_BW_Allocation_Register.build();

         Port_15_VC5_VC1_BW_Allocation_Register = Port_15_VC5_VC1_BW_Allocation_Register_reg::type_id::create("Port_15_VC5_VC1_BW_Allocation_Register");
         Port_15_VC5_VC1_BW_Allocation_Register.configure(this);
         Port_15_VC5_VC1_BW_Allocation_Register.build();

         Port_0_VC7_VC3_BW_Allocation_Register = Port_0_VC7_VC3_BW_Allocation_Register_reg::type_id::create("Port_0_VC7_VC3_BW_Allocation_Register");
         Port_0_VC7_VC3_BW_Allocation_Register.configure(this);
         Port_0_VC7_VC3_BW_Allocation_Register.build();

         Port_1_VC7_VC3_BW_Allocation_Register = Port_1_VC7_VC3_BW_Allocation_Register_reg::type_id::create("Port_1_VC7_VC3_BW_Allocation_Register");
         Port_1_VC7_VC3_BW_Allocation_Register.configure(this);
         Port_1_VC7_VC3_BW_Allocation_Register.build();

         Port_2_VC7_VC3_BW_Allocation_Register = Port_2_VC7_VC3_BW_Allocation_Register_reg::type_id::create("Port_2_VC7_VC3_BW_Allocation_Register");
         Port_2_VC7_VC3_BW_Allocation_Register.configure(this);
         Port_2_VC7_VC3_BW_Allocation_Register.build();

         Port_3_VC7_VC3_BW_Allocation_Register = Port_3_VC7_VC3_BW_Allocation_Register_reg::type_id::create("Port_3_VC7_VC3_BW_Allocation_Register");
         Port_3_VC7_VC3_BW_Allocation_Register.configure(this);
         Port_3_VC7_VC3_BW_Allocation_Register.build();

         Port_4_VC7_VC3_BW_Allocation_Register = Port_4_VC7_VC3_BW_Allocation_Register_reg::type_id::create("Port_4_VC7_VC3_BW_Allocation_Register");
         Port_4_VC7_VC3_BW_Allocation_Register.configure(this);
         Port_4_VC7_VC3_BW_Allocation_Register.build();

         Port_5_VC7_VC3_BW_Allocation_Register = Port_5_VC7_VC3_BW_Allocation_Register_reg::type_id::create("Port_5_VC7_VC3_BW_Allocation_Register");
         Port_5_VC7_VC3_BW_Allocation_Register.configure(this);
         Port_5_VC7_VC3_BW_Allocation_Register.build();

         Port_6_VC7_VC3_BW_Allocation_Register = Port_6_VC7_VC3_BW_Allocation_Register_reg::type_id::create("Port_6_VC7_VC3_BW_Allocation_Register");
         Port_6_VC7_VC3_BW_Allocation_Register.configure(this);
         Port_6_VC7_VC3_BW_Allocation_Register.build();

         Port_7_VC7_VC3_BW_Allocation_Register = Port_7_VC7_VC3_BW_Allocation_Register_reg::type_id::create("Port_7_VC7_VC3_BW_Allocation_Register");
         Port_7_VC7_VC3_BW_Allocation_Register.configure(this);
         Port_7_VC7_VC3_BW_Allocation_Register.build();

         Port_8_VC7_VC3_BW_Allocation_Register = Port_8_VC7_VC3_BW_Allocation_Register_reg::type_id::create("Port_8_VC7_VC3_BW_Allocation_Register");
         Port_8_VC7_VC3_BW_Allocation_Register.configure(this);
         Port_8_VC7_VC3_BW_Allocation_Register.build();

         Port_9_VC7_VC3_BW_Allocation_Register = Port_9_VC7_VC3_BW_Allocation_Register_reg::type_id::create("Port_9_VC7_VC3_BW_Allocation_Register");
         Port_9_VC7_VC3_BW_Allocation_Register.configure(this);
         Port_9_VC7_VC3_BW_Allocation_Register.build();

         Port_10_VC7_VC3_BW_Allocation_Register = Port_10_VC7_VC3_BW_Allocation_Register_reg::type_id::create("Port_10_VC7_VC3_BW_Allocation_Register");
         Port_10_VC7_VC3_BW_Allocation_Register.configure(this);
         Port_10_VC7_VC3_BW_Allocation_Register.build();

         Port_11_VC7_VC3_BW_Allocation_Register = Port_11_VC7_VC3_BW_Allocation_Register_reg::type_id::create("Port_11_VC7_VC3_BW_Allocation_Register");
         Port_11_VC7_VC3_BW_Allocation_Register.configure(this);
         Port_11_VC7_VC3_BW_Allocation_Register.build();

         Port_12_VC7_VC3_BW_Allocation_Register = Port_12_VC7_VC3_BW_Allocation_Register_reg::type_id::create("Port_12_VC7_VC3_BW_Allocation_Register");
         Port_12_VC7_VC3_BW_Allocation_Register.configure(this);
         Port_12_VC7_VC3_BW_Allocation_Register.build();

         Port_13_VC7_VC3_BW_Allocation_Register = Port_13_VC7_VC3_BW_Allocation_Register_reg::type_id::create("Port_13_VC7_VC3_BW_Allocation_Register");
         Port_13_VC7_VC3_BW_Allocation_Register.configure(this);
         Port_13_VC7_VC3_BW_Allocation_Register.build();

         Port_14_VC7_VC3_BW_Allocation_Register = Port_14_VC7_VC3_BW_Allocation_Register_reg::type_id::create("Port_14_VC7_VC3_BW_Allocation_Register");
         Port_14_VC7_VC3_BW_Allocation_Register.configure(this);
         Port_14_VC7_VC3_BW_Allocation_Register.build();

         Port_15_VC7_VC3_BW_Allocation_Register = Port_15_VC7_VC3_BW_Allocation_Register_reg::type_id::create("Port_15_VC7_VC3_BW_Allocation_Register");
         Port_15_VC7_VC3_BW_Allocation_Register.configure(this);
         Port_15_VC7_VC3_BW_Allocation_Register.build();

         Port_0_VC6_VC2_BW_Allocation_Register = Port_0_VC6_VC2_BW_Allocation_Register_reg::type_id::create("Port_0_VC6_VC2_BW_Allocation_Register");
         Port_0_VC6_VC2_BW_Allocation_Register.configure(this);
         Port_0_VC6_VC2_BW_Allocation_Register.build();

         Port_1_VC6_VC2_BW_Allocation_Register = Port_1_VC6_VC2_BW_Allocation_Register_reg::type_id::create("Port_1_VC6_VC2_BW_Allocation_Register");
         Port_1_VC6_VC2_BW_Allocation_Register.configure(this);
         Port_1_VC6_VC2_BW_Allocation_Register.build();

         Port_2_VC6_VC2_BW_Allocation_Register = Port_2_VC6_VC2_BW_Allocation_Register_reg::type_id::create("Port_2_VC6_VC2_BW_Allocation_Register");
         Port_2_VC6_VC2_BW_Allocation_Register.configure(this);
         Port_2_VC6_VC2_BW_Allocation_Register.build();

         Port_3_VC6_VC2_BW_Allocation_Register = Port_3_VC6_VC2_BW_Allocation_Register_reg::type_id::create("Port_3_VC6_VC2_BW_Allocation_Register");
         Port_3_VC6_VC2_BW_Allocation_Register.configure(this);
         Port_3_VC6_VC2_BW_Allocation_Register.build();

         Port_4_VC6_VC2_BW_Allocation_Register = Port_4_VC6_VC2_BW_Allocation_Register_reg::type_id::create("Port_4_VC6_VC2_BW_Allocation_Register");
         Port_4_VC6_VC2_BW_Allocation_Register.configure(this);
         Port_4_VC6_VC2_BW_Allocation_Register.build();

         Port_5_VC6_VC2_BW_Allocation_Register = Port_5_VC6_VC2_BW_Allocation_Register_reg::type_id::create("Port_5_VC6_VC2_BW_Allocation_Register");
         Port_5_VC6_VC2_BW_Allocation_Register.configure(this);
         Port_5_VC6_VC2_BW_Allocation_Register.build();

         Port_6_VC6_VC2_BW_Allocation_Register = Port_6_VC6_VC2_BW_Allocation_Register_reg::type_id::create("Port_6_VC6_VC2_BW_Allocation_Register");
         Port_6_VC6_VC2_BW_Allocation_Register.configure(this);
         Port_6_VC6_VC2_BW_Allocation_Register.build();

         Port_7_VC6_VC2_BW_Allocation_Register = Port_7_VC6_VC2_BW_Allocation_Register_reg::type_id::create("Port_7_VC6_VC2_BW_Allocation_Register");
         Port_7_VC6_VC2_BW_Allocation_Register.configure(this);
         Port_7_VC6_VC2_BW_Allocation_Register.build();

         Port_8_VC6_VC2_BW_Allocation_Register = Port_8_VC6_VC2_BW_Allocation_Register_reg::type_id::create("Port_8_VC6_VC2_BW_Allocation_Register");
         Port_8_VC6_VC2_BW_Allocation_Register.configure(this);
         Port_8_VC6_VC2_BW_Allocation_Register.build();

         Port_9_VC6_VC2_BW_Allocation_Register = Port_9_VC6_VC2_BW_Allocation_Register_reg::type_id::create("Port_9_VC6_VC2_BW_Allocation_Register");
         Port_9_VC6_VC2_BW_Allocation_Register.configure(this);
         Port_9_VC6_VC2_BW_Allocation_Register.build();

         Port_10_VC6_VC2_BW_Allocation_Register = Port_10_VC6_VC2_BW_Allocation_Register_reg::type_id::create("Port_10_VC6_VC2_BW_Allocation_Register");
         Port_10_VC6_VC2_BW_Allocation_Register.configure(this);
         Port_10_VC6_VC2_BW_Allocation_Register.build();

         Port_11_VC6_VC2_BW_Allocation_Register = Port_11_VC6_VC2_BW_Allocation_Register_reg::type_id::create("Port_11_VC6_VC2_BW_Allocation_Register");
         Port_11_VC6_VC2_BW_Allocation_Register.configure(this);
         Port_11_VC6_VC2_BW_Allocation_Register.build();

         Port_12_VC6_VC2_BW_Allocation_Register = Port_12_VC6_VC2_BW_Allocation_Register_reg::type_id::create("Port_12_VC6_VC2_BW_Allocation_Register");
         Port_12_VC6_VC2_BW_Allocation_Register.configure(this);
         Port_12_VC6_VC2_BW_Allocation_Register.build();

         Port_13_VC6_VC2_BW_Allocation_Register = Port_13_VC6_VC2_BW_Allocation_Register_reg::type_id::create("Port_13_VC6_VC2_BW_Allocation_Register");
         Port_13_VC6_VC2_BW_Allocation_Register.configure(this);
         Port_13_VC6_VC2_BW_Allocation_Register.build();

         Port_14_VC6_VC2_BW_Allocation_Register = Port_14_VC6_VC2_BW_Allocation_Register_reg::type_id::create("Port_14_VC6_VC2_BW_Allocation_Register");
         Port_14_VC6_VC2_BW_Allocation_Register.configure(this);
         Port_14_VC6_VC2_BW_Allocation_Register.build();

         Port_15_VC6_VC2_BW_Allocation_Register = Port_15_VC6_VC2_BW_Allocation_Register_reg::type_id::create("Port_15_VC6_VC2_BW_Allocation_Register");
         Port_15_VC6_VC2_BW_Allocation_Register.configure(this);
         Port_15_VC6_VC2_BW_Allocation_Register.build();

         Port_0_VC8_VC4_BW_Allocation_Register = Port_0_VC8_VC4_BW_Allocation_Register_reg::type_id::create("Port_0_VC8_VC4_BW_Allocation_Register");
         Port_0_VC8_VC4_BW_Allocation_Register.configure(this);
         Port_0_VC8_VC4_BW_Allocation_Register.build();

         Port_1_VC8_VC4_BW_Allocation_Register = Port_1_VC8_VC4_BW_Allocation_Register_reg::type_id::create("Port_1_VC8_VC4_BW_Allocation_Register");
         Port_1_VC8_VC4_BW_Allocation_Register.configure(this);
         Port_1_VC8_VC4_BW_Allocation_Register.build();

         Port_2_VC8_VC4_BW_Allocation_Register = Port_2_VC8_VC4_BW_Allocation_Register_reg::type_id::create("Port_2_VC8_VC4_BW_Allocation_Register");
         Port_2_VC8_VC4_BW_Allocation_Register.configure(this);
         Port_2_VC8_VC4_BW_Allocation_Register.build();

         Port_3_VC8_VC4_BW_Allocation_Register = Port_3_VC8_VC4_BW_Allocation_Register_reg::type_id::create("Port_3_VC8_VC4_BW_Allocation_Register");
         Port_3_VC8_VC4_BW_Allocation_Register.configure(this);
         Port_3_VC8_VC4_BW_Allocation_Register.build();

         Port_4_VC8_VC4_BW_Allocation_Register = Port_4_VC8_VC4_BW_Allocation_Register_reg::type_id::create("Port_4_VC8_VC4_BW_Allocation_Register");
         Port_4_VC8_VC4_BW_Allocation_Register.configure(this);
         Port_4_VC8_VC4_BW_Allocation_Register.build();

         Port_5_VC8_VC4_BW_Allocation_Register = Port_5_VC8_VC4_BW_Allocation_Register_reg::type_id::create("Port_5_VC8_VC4_BW_Allocation_Register");
         Port_5_VC8_VC4_BW_Allocation_Register.configure(this);
         Port_5_VC8_VC4_BW_Allocation_Register.build();

         Port_6_VC8_VC4_BW_Allocation_Register = Port_6_VC8_VC4_BW_Allocation_Register_reg::type_id::create("Port_6_VC8_VC4_BW_Allocation_Register");
         Port_6_VC8_VC4_BW_Allocation_Register.configure(this);
         Port_6_VC8_VC4_BW_Allocation_Register.build();

         Port_7_VC8_VC4_BW_Allocation_Register = Port_7_VC8_VC4_BW_Allocation_Register_reg::type_id::create("Port_7_VC8_VC4_BW_Allocation_Register");
         Port_7_VC8_VC4_BW_Allocation_Register.configure(this);
         Port_7_VC8_VC4_BW_Allocation_Register.build();

         Port_8_VC8_VC4_BW_Allocation_Register = Port_8_VC8_VC4_BW_Allocation_Register_reg::type_id::create("Port_8_VC8_VC4_BW_Allocation_Register");
         Port_8_VC8_VC4_BW_Allocation_Register.configure(this);
         Port_8_VC8_VC4_BW_Allocation_Register.build();

         Port_9_VC8_VC4_BW_Allocation_Register = Port_9_VC8_VC4_BW_Allocation_Register_reg::type_id::create("Port_9_VC8_VC4_BW_Allocation_Register");
         Port_9_VC8_VC4_BW_Allocation_Register.configure(this);
         Port_9_VC8_VC4_BW_Allocation_Register.build();

         Port_10_VC8_VC4_BW_Allocation_Register = Port_10_VC8_VC4_BW_Allocation_Register_reg::type_id::create("Port_10_VC8_VC4_BW_Allocation_Register");
         Port_10_VC8_VC4_BW_Allocation_Register.configure(this);
         Port_10_VC8_VC4_BW_Allocation_Register.build();

         Port_11_VC8_VC4_BW_Allocation_Register = Port_11_VC8_VC4_BW_Allocation_Register_reg::type_id::create("Port_11_VC8_VC4_BW_Allocation_Register");
         Port_11_VC8_VC4_BW_Allocation_Register.configure(this);
         Port_11_VC8_VC4_BW_Allocation_Register.build();

         Port_12_VC8_VC4_BW_Allocation_Register = Port_12_VC8_VC4_BW_Allocation_Register_reg::type_id::create("Port_12_VC8_VC4_BW_Allocation_Register");
         Port_12_VC8_VC4_BW_Allocation_Register.configure(this);
         Port_12_VC8_VC4_BW_Allocation_Register.build();

         Port_13_VC8_VC4_BW_Allocation_Register = Port_13_VC8_VC4_BW_Allocation_Register_reg::type_id::create("Port_13_VC8_VC4_BW_Allocation_Register");
         Port_13_VC8_VC4_BW_Allocation_Register.configure(this);
         Port_13_VC8_VC4_BW_Allocation_Register.build();

         Port_14_VC8_VC4_BW_Allocation_Register = Port_14_VC8_VC4_BW_Allocation_Register_reg::type_id::create("Port_14_VC8_VC4_BW_Allocation_Register");
         Port_14_VC8_VC4_BW_Allocation_Register.configure(this);
         Port_14_VC8_VC4_BW_Allocation_Register.build();

         Port_15_VC8_VC4_BW_Allocation_Register = Port_15_VC8_VC4_BW_Allocation_Register_reg::type_id::create("Port_15_VC8_VC4_BW_Allocation_Register");
         Port_15_VC8_VC4_BW_Allocation_Register.configure(this);
         Port_15_VC8_VC4_BW_Allocation_Register.build();

         Error_Management_Extensions_Block_Header = Error_Management_Extensions_Block_Header_reg::type_id::create("Error_Management_Extensions_Block_Header");
         Error_Management_Extensions_Block_Header.configure(this);
         Error_Management_Extensions_Block_Header.build();

         Error_Management_Hot_Swap_Extensions_Block_CAR = Error_Management_Hot_Swap_Extensions_Block_CAR_reg::type_id::create("Error_Management_Hot_Swap_Extensions_Block_CAR");
         Error_Management_Hot_Swap_Extensions_Block_CAR.configure(this);
         Error_Management_Hot_Swap_Extensions_Block_CAR.build();

         Logical_Transport_Layer_Error_Detect_CSR = Logical_Transport_Layer_Error_Detect_CSR_reg::type_id::create("Logical_Transport_Layer_Error_Detect_CSR");
         Logical_Transport_Layer_Error_Detect_CSR.configure(this);
         Logical_Transport_Layer_Error_Detect_CSR.build();

         Logical_Transport_Layer_Error_Enable_CSR = Logical_Transport_Layer_Error_Enable_CSR_reg::type_id::create("Logical_Transport_Layer_Error_Enable_CSR");
         Logical_Transport_Layer_Error_Enable_CSR.configure(this);
         Logical_Transport_Layer_Error_Enable_CSR.build();

         Logical_Transport_Layer_High_Address_Capture_CSR = Logical_Transport_Layer_High_Address_Capture_CSR_reg::type_id::create("Logical_Transport_Layer_High_Address_Capture_CSR");
         Logical_Transport_Layer_High_Address_Capture_CSR.configure(this);
         Logical_Transport_Layer_High_Address_Capture_CSR.build();

         Logical_Transport_Layer_Address_Capture_CSR = Logical_Transport_Layer_Address_Capture_CSR_reg::type_id::create("Logical_Transport_Layer_Address_Capture_CSR");
         Logical_Transport_Layer_Address_Capture_CSR.configure(this);
         Logical_Transport_Layer_Address_Capture_CSR.build();

         Logical_Transport_Layer_Device_ID_Capture_CSR = Logical_Transport_Layer_Device_ID_Capture_CSR_reg::type_id::create("Logical_Transport_Layer_Device_ID_Capture_CSR");
         Logical_Transport_Layer_Device_ID_Capture_CSR.configure(this);
         Logical_Transport_Layer_Device_ID_Capture_CSR.build();

         Logical_Transport_Layer_Control_Capture_CSR = Logical_Transport_Layer_Control_Capture_CSR_reg::type_id::create("Logical_Transport_Layer_Control_Capture_CSR");
         Logical_Transport_Layer_Control_Capture_CSR.configure(this);
         Logical_Transport_Layer_Control_Capture_CSR.build();

         Logical_Transport_Layer_Dev32_Destination_ID_Capture_CSR = Logical_Transport_Layer_Dev32_Destination_ID_Capture_CSR_reg::type_id::create("Logical_Transport_Layer_Dev32_Destination_ID_Capture_CSR");
         Logical_Transport_Layer_Dev32_Destination_ID_Capture_CSR.configure(this);
         Logical_Transport_Layer_Dev32_Destination_ID_Capture_CSR.build();

         Logical_Transport_Layer_Dev32_Source_ID_Capture_CSR = Logical_Transport_Layer_Dev32_Source_ID_Capture_CSR_reg::type_id::create("Logical_Transport_Layer_Dev32_Source_ID_Capture_CSR");
         Logical_Transport_Layer_Dev32_Source_ID_Capture_CSR.configure(this);
         Logical_Transport_Layer_Dev32_Source_ID_Capture_CSR.build();

         Port_write_Target_deviceID_CSR = Port_write_Target_deviceID_CSR_reg::type_id::create("Port_write_Target_deviceID_CSR");
         Port_write_Target_deviceID_CSR.configure(this);
         Port_write_Target_deviceID_CSR.build();

         Packet_Time_to_live_CSR = Packet_Time_to_live_CSR_reg::type_id::create("Packet_Time_to_live_CSR");
         Packet_Time_to_live_CSR.configure(this);
         Packet_Time_to_live_CSR.build();

         Port_Write_Dev32_Target_DeviceID_CSR = Port_Write_Dev32_Target_DeviceID_CSR_reg::type_id::create("Port_Write_Dev32_Target_DeviceID_CSR");
         Port_Write_Dev32_Target_DeviceID_CSR.configure(this);
         Port_Write_Dev32_Target_DeviceID_CSR.build();

         Port_Write_Transmission_Control_CSR = Port_Write_Transmission_Control_CSR_reg::type_id::create("Port_Write_Transmission_Control_CSR");
         Port_Write_Transmission_Control_CSR.configure(this);
         Port_Write_Transmission_Control_CSR.build();

         Port_0_Error_Detect_CSR = Port_N_Error_Detect_CSR_reg::type_id::create("Port_0_Error_Detect_CSR");
         Port_0_Error_Detect_CSR.configure(this);
         Port_0_Error_Detect_CSR.build();

         Port_1_Error_Detect_CSR = Port_N_Error_Detect_CSR_reg::type_id::create("Port_1_Error_Detect_CSR");
         Port_1_Error_Detect_CSR.configure(this);
         Port_1_Error_Detect_CSR.build();

         Port_2_Error_Detect_CSR = Port_N_Error_Detect_CSR_reg::type_id::create("Port_2_Error_Detect_CSR");
         Port_2_Error_Detect_CSR.configure(this);
         Port_2_Error_Detect_CSR.build();

         Port_3_Error_Detect_CSR = Port_N_Error_Detect_CSR_reg::type_id::create("Port_3_Error_Detect_CSR");
         Port_3_Error_Detect_CSR.configure(this);
         Port_3_Error_Detect_CSR.build();

         Port_4_Error_Detect_CSR = Port_N_Error_Detect_CSR_reg::type_id::create("Port_4_Error_Detect_CSR");
         Port_4_Error_Detect_CSR.configure(this);
         Port_4_Error_Detect_CSR.build();

         Port_5_Error_Detect_CSR = Port_N_Error_Detect_CSR_reg::type_id::create("Port_5_Error_Detect_CSR");
         Port_5_Error_Detect_CSR.configure(this);
         Port_5_Error_Detect_CSR.build();

         Port_6_Error_Detect_CSR = Port_N_Error_Detect_CSR_reg::type_id::create("Port_6_Error_Detect_CSR");
         Port_6_Error_Detect_CSR.configure(this);
         Port_6_Error_Detect_CSR.build();

         Port_7_Error_Detect_CSR = Port_N_Error_Detect_CSR_reg::type_id::create("Port_7_Error_Detect_CSR");
         Port_7_Error_Detect_CSR.configure(this);
         Port_7_Error_Detect_CSR.build();

         Port_8_Error_Detect_CSR = Port_N_Error_Detect_CSR_reg::type_id::create("Port_8_Error_Detect_CSR");
         Port_8_Error_Detect_CSR.configure(this);
         Port_8_Error_Detect_CSR.build();

         Port_9_Error_Detect_CSR = Port_N_Error_Detect_CSR_reg::type_id::create("Port_9_Error_Detect_CSR");
         Port_9_Error_Detect_CSR.configure(this);
         Port_9_Error_Detect_CSR.build();

         Port_10_Error_Detect_CSR = Port_N_Error_Detect_CSR_reg::type_id::create("Port_10_Error_Detect_CSR");
         Port_10_Error_Detect_CSR.configure(this);
         Port_10_Error_Detect_CSR.build();

         Port_11_Error_Detect_CSR = Port_N_Error_Detect_CSR_reg::type_id::create("Port_11_Error_Detect_CSR");
         Port_11_Error_Detect_CSR.configure(this);
         Port_11_Error_Detect_CSR.build();

         Port_12_Error_Detect_CSR = Port_N_Error_Detect_CSR_reg::type_id::create("Port_12_Error_Detect_CSR");
         Port_12_Error_Detect_CSR.configure(this);
         Port_12_Error_Detect_CSR.build();

         Port_13_Error_Detect_CSR = Port_N_Error_Detect_CSR_reg::type_id::create("Port_13_Error_Detect_CSR");
         Port_13_Error_Detect_CSR.configure(this);
         Port_13_Error_Detect_CSR.build();

         Port_14_Error_Detect_CSR = Port_N_Error_Detect_CSR_reg::type_id::create("Port_14_Error_Detect_CSR");
         Port_14_Error_Detect_CSR.configure(this);
         Port_14_Error_Detect_CSR.build();

         Port_15_Error_Detect_CSR = Port_N_Error_Detect_CSR_reg::type_id::create("Port_15_Error_Detect_CSR");
         Port_15_Error_Detect_CSR.configure(this);
         Port_15_Error_Detect_CSR.build();

         Port_0_Error_Rate_Enable_CSR = Port_N_Error_Rate_Enable_CSR_reg::type_id::create("Port_0_Error_Rate_Enable_CSR");
         Port_0_Error_Rate_Enable_CSR.configure(this);
         Port_0_Error_Rate_Enable_CSR.build();

         Port_1_Error_Rate_Enable_CSR = Port_N_Error_Rate_Enable_CSR_reg::type_id::create("Port_1_Error_Rate_Enable_CSR");
         Port_1_Error_Rate_Enable_CSR.configure(this);
         Port_1_Error_Rate_Enable_CSR.build();

         Port_2_Error_Rate_Enable_CSR = Port_N_Error_Rate_Enable_CSR_reg::type_id::create("Port_2_Error_Rate_Enable_CSR");
         Port_2_Error_Rate_Enable_CSR.configure(this);
         Port_2_Error_Rate_Enable_CSR.build();

         Port_3_Error_Rate_Enable_CSR = Port_N_Error_Rate_Enable_CSR_reg::type_id::create("Port_3_Error_Rate_Enable_CSR");
         Port_3_Error_Rate_Enable_CSR.configure(this);
         Port_3_Error_Rate_Enable_CSR.build();

         Port_4_Error_Rate_Enable_CSR = Port_N_Error_Rate_Enable_CSR_reg::type_id::create("Port_4_Error_Rate_Enable_CSR");
         Port_4_Error_Rate_Enable_CSR.configure(this);
         Port_4_Error_Rate_Enable_CSR.build();

         Port_5_Error_Rate_Enable_CSR = Port_N_Error_Rate_Enable_CSR_reg::type_id::create("Port_5_Error_Rate_Enable_CSR");
         Port_5_Error_Rate_Enable_CSR.configure(this);
         Port_5_Error_Rate_Enable_CSR.build();

         Port_6_Error_Rate_Enable_CSR = Port_N_Error_Rate_Enable_CSR_reg::type_id::create("Port_6_Error_Rate_Enable_CSR");
         Port_6_Error_Rate_Enable_CSR.configure(this);
         Port_6_Error_Rate_Enable_CSR.build();

         Port_7_Error_Rate_Enable_CSR = Port_N_Error_Rate_Enable_CSR_reg::type_id::create("Port_7_Error_Rate_Enable_CSR");
         Port_7_Error_Rate_Enable_CSR.configure(this);
         Port_7_Error_Rate_Enable_CSR.build();

         Port_8_Error_Rate_Enable_CSR = Port_N_Error_Rate_Enable_CSR_reg::type_id::create("Port_8_Error_Rate_Enable_CSR");
         Port_8_Error_Rate_Enable_CSR.configure(this);
         Port_8_Error_Rate_Enable_CSR.build();

         Port_9_Error_Rate_Enable_CSR = Port_N_Error_Rate_Enable_CSR_reg::type_id::create("Port_9_Error_Rate_Enable_CSR");
         Port_9_Error_Rate_Enable_CSR.configure(this);
         Port_9_Error_Rate_Enable_CSR.build();

         Port_10_Error_Rate_Enable_CSR = Port_N_Error_Rate_Enable_CSR_reg::type_id::create("Port_10_Error_Rate_Enable_CSR");
         Port_10_Error_Rate_Enable_CSR.configure(this);
         Port_10_Error_Rate_Enable_CSR.build();

         Port_11_Error_Rate_Enable_CSR = Port_N_Error_Rate_Enable_CSR_reg::type_id::create("Port_11_Error_Rate_Enable_CSR");
         Port_11_Error_Rate_Enable_CSR.configure(this);
         Port_11_Error_Rate_Enable_CSR.build();

         Port_12_Error_Rate_Enable_CSR = Port_N_Error_Rate_Enable_CSR_reg::type_id::create("Port_12_Error_Rate_Enable_CSR");
         Port_12_Error_Rate_Enable_CSR.configure(this);
         Port_12_Error_Rate_Enable_CSR.build();

         Port_13_Error_Rate_Enable_CSR = Port_N_Error_Rate_Enable_CSR_reg::type_id::create("Port_13_Error_Rate_Enable_CSR");
         Port_13_Error_Rate_Enable_CSR.configure(this);
         Port_13_Error_Rate_Enable_CSR.build();

         Port_14_Error_Rate_Enable_CSR = Port_N_Error_Rate_Enable_CSR_reg::type_id::create("Port_14_Error_Rate_Enable_CSR");
         Port_14_Error_Rate_Enable_CSR.configure(this);
         Port_14_Error_Rate_Enable_CSR.build();

         Port_15_Error_Rate_Enable_CSR = Port_N_Error_Rate_Enable_CSR_reg::type_id::create("Port_15_Error_Rate_Enable_CSR");
         Port_15_Error_Rate_Enable_CSR.configure(this);
         Port_15_Error_Rate_Enable_CSR.build();


         Port_0_Attributes_Capture_CSR = Port_0_Attributes_Capture_CSR_reg::type_id::create("Port_0_Attributes_Capture_CSR");
         Port_0_Attributes_Capture_CSR.configure(this);
         Port_0_Attributes_Capture_CSR.build();

         Port_1_Attributes_Capture_CSR = Port_1_Attributes_Capture_CSR_reg::type_id::create("Port_1_Attributes_Capture_CSR");
         Port_1_Attributes_Capture_CSR.configure(this);
         Port_1_Attributes_Capture_CSR.build();

         Port_2_Attributes_Capture_CSR = Port_2_Attributes_Capture_CSR_reg::type_id::create("Port_2_Attributes_Capture_CSR");
         Port_2_Attributes_Capture_CSR.configure(this);
         Port_2_Attributes_Capture_CSR.build();

         Port_3_Attributes_Capture_CSR = Port_3_Attributes_Capture_CSR_reg::type_id::create("Port_3_Attributes_Capture_CSR");
         Port_3_Attributes_Capture_CSR.configure(this);
         Port_3_Attributes_Capture_CSR.build();

         Port_4_Attributes_Capture_CSR = Port_4_Attributes_Capture_CSR_reg::type_id::create("Port_4_Attributes_Capture_CSR");
         Port_4_Attributes_Capture_CSR.configure(this);
         Port_4_Attributes_Capture_CSR.build();

         Port_5_Attributes_Capture_CSR = Port_5_Attributes_Capture_CSR_reg::type_id::create("Port_5_Attributes_Capture_CSR");
         Port_5_Attributes_Capture_CSR.configure(this);
         Port_5_Attributes_Capture_CSR.build();

         Port_6_Attributes_Capture_CSR = Port_6_Attributes_Capture_CSR_reg::type_id::create("Port_6_Attributes_Capture_CSR");
         Port_6_Attributes_Capture_CSR.configure(this);
         Port_6_Attributes_Capture_CSR.build();

         Port_7_Attributes_Capture_CSR = Port_7_Attributes_Capture_CSR_reg::type_id::create("Port_7_Attributes_Capture_CSR");
         Port_7_Attributes_Capture_CSR.configure(this);
         Port_7_Attributes_Capture_CSR.build();

         Port_8_Attributes_Capture_CSR = Port_8_Attributes_Capture_CSR_reg::type_id::create("Port_8_Attributes_Capture_CSR");
         Port_8_Attributes_Capture_CSR.configure(this);
         Port_8_Attributes_Capture_CSR.build();

         Port_9_Attributes_Capture_CSR = Port_9_Attributes_Capture_CSR_reg::type_id::create("Port_9_Attributes_Capture_CSR");
         Port_9_Attributes_Capture_CSR.configure(this);
         Port_9_Attributes_Capture_CSR.build();

         Port_10_Attributes_Capture_CSR = Port_10_Attributes_Capture_CSR_reg::type_id::create("Port_10_Attributes_Capture_CSR");
         Port_10_Attributes_Capture_CSR.configure(this);
         Port_10_Attributes_Capture_CSR.build();

         Port_11_Attributes_Capture_CSR = Port_11_Attributes_Capture_CSR_reg::type_id::create("Port_11_Attributes_Capture_CSR");
         Port_11_Attributes_Capture_CSR.configure(this);
         Port_11_Attributes_Capture_CSR.build();

         Port_12_Attributes_Capture_CSR = Port_12_Attributes_Capture_CSR_reg::type_id::create("Port_12_Attributes_Capture_CSR");
         Port_12_Attributes_Capture_CSR.configure(this);
         Port_12_Attributes_Capture_CSR.build();

         Port_13_Attributes_Capture_CSR = Port_13_Attributes_Capture_CSR_reg::type_id::create("Port_13_Attributes_Capture_CSR");
         Port_13_Attributes_Capture_CSR.configure(this);
         Port_13_Attributes_Capture_CSR.build();

         Port_14_Attributes_Capture_CSR = Port_14_Attributes_Capture_CSR_reg::type_id::create("Port_14_Attributes_Capture_CSR");
         Port_14_Attributes_Capture_CSR.configure(this);
         Port_14_Attributes_Capture_CSR.build();

         Port_15_Attributes_Capture_CSR = Port_15_Attributes_Capture_CSR_reg::type_id::create("Port_15_Attributes_Capture_CSR");
         Port_15_Attributes_Capture_CSR.configure(this);
         Port_15_Attributes_Capture_CSR.build();

         Port_0_Packet_Control_Symbol_Capture_0_CSR = Port_0_Packet_Control_Symbol_Capture_0_CSR_reg::type_id::create("Port_0_Packet_Control_Symbol_Capture_0_CSR");
         Port_0_Packet_Control_Symbol_Capture_0_CSR.configure(this);
         Port_0_Packet_Control_Symbol_Capture_0_CSR.build();

         Port_1_Packet_Control_Symbol_Capture_0_CSR = Port_1_Packet_Control_Symbol_Capture_0_CSR_reg::type_id::create("Port_1_Packet_Control_Symbol_Capture_0_CSR");
         Port_1_Packet_Control_Symbol_Capture_0_CSR.configure(this);
         Port_1_Packet_Control_Symbol_Capture_0_CSR.build();

         Port_2_Packet_Control_Symbol_Capture_0_CSR = Port_2_Packet_Control_Symbol_Capture_0_CSR_reg::type_id::create("Port_2_Packet_Control_Symbol_Capture_0_CSR");
         Port_2_Packet_Control_Symbol_Capture_0_CSR.configure(this);
         Port_2_Packet_Control_Symbol_Capture_0_CSR.build();

         Port_3_Packet_Control_Symbol_Capture_0_CSR = Port_3_Packet_Control_Symbol_Capture_0_CSR_reg::type_id::create("Port_3_Packet_Control_Symbol_Capture_0_CSR");
         Port_3_Packet_Control_Symbol_Capture_0_CSR.configure(this);
         Port_3_Packet_Control_Symbol_Capture_0_CSR.build();

         Port_4_Packet_Control_Symbol_Capture_0_CSR = Port_4_Packet_Control_Symbol_Capture_0_CSR_reg::type_id::create("Port_4_Packet_Control_Symbol_Capture_0_CSR");
         Port_4_Packet_Control_Symbol_Capture_0_CSR.configure(this);
         Port_4_Packet_Control_Symbol_Capture_0_CSR.build();

         Port_5_Packet_Control_Symbol_Capture_0_CSR = Port_5_Packet_Control_Symbol_Capture_0_CSR_reg::type_id::create("Port_5_Packet_Control_Symbol_Capture_0_CSR");
         Port_5_Packet_Control_Symbol_Capture_0_CSR.configure(this);
         Port_5_Packet_Control_Symbol_Capture_0_CSR.build();

         Port_6_Packet_Control_Symbol_Capture_0_CSR = Port_6_Packet_Control_Symbol_Capture_0_CSR_reg::type_id::create("Port_6_Packet_Control_Symbol_Capture_0_CSR");
         Port_6_Packet_Control_Symbol_Capture_0_CSR.configure(this);
         Port_6_Packet_Control_Symbol_Capture_0_CSR.build();

         Port_7_Packet_Control_Symbol_Capture_0_CSR = Port_7_Packet_Control_Symbol_Capture_0_CSR_reg::type_id::create("Port_7_Packet_Control_Symbol_Capture_0_CSR");
         Port_7_Packet_Control_Symbol_Capture_0_CSR.configure(this);
         Port_7_Packet_Control_Symbol_Capture_0_CSR.build();

         Port_8_Packet_Control_Symbol_Capture_0_CSR = Port_8_Packet_Control_Symbol_Capture_0_CSR_reg::type_id::create("Port_8_Packet_Control_Symbol_Capture_0_CSR");
         Port_8_Packet_Control_Symbol_Capture_0_CSR.configure(this);
         Port_8_Packet_Control_Symbol_Capture_0_CSR.build();

         Port_9_Packet_Control_Symbol_Capture_0_CSR = Port_9_Packet_Control_Symbol_Capture_0_CSR_reg::type_id::create("Port_9_Packet_Control_Symbol_Capture_0_CSR");
         Port_9_Packet_Control_Symbol_Capture_0_CSR.configure(this);
         Port_9_Packet_Control_Symbol_Capture_0_CSR.build();

         Port_10_Packet_Control_Symbol_Capture_0_CSR = Port_10_Packet_Control_Symbol_Capture_0_CSR_reg::type_id::create("Port_10_Packet_Control_Symbol_Capture_0_CSR");
         Port_10_Packet_Control_Symbol_Capture_0_CSR.configure(this);
         Port_10_Packet_Control_Symbol_Capture_0_CSR.build();

         Port_11_Packet_Control_Symbol_Capture_0_CSR = Port_11_Packet_Control_Symbol_Capture_0_CSR_reg::type_id::create("Port_11_Packet_Control_Symbol_Capture_0_CSR");
         Port_11_Packet_Control_Symbol_Capture_0_CSR.configure(this);
         Port_11_Packet_Control_Symbol_Capture_0_CSR.build();

         Port_12_Packet_Control_Symbol_Capture_0_CSR = Port_12_Packet_Control_Symbol_Capture_0_CSR_reg::type_id::create("Port_12_Packet_Control_Symbol_Capture_0_CSR");
         Port_12_Packet_Control_Symbol_Capture_0_CSR.configure(this);
         Port_12_Packet_Control_Symbol_Capture_0_CSR.build();

         Port_13_Packet_Control_Symbol_Capture_0_CSR = Port_13_Packet_Control_Symbol_Capture_0_CSR_reg::type_id::create("Port_13_Packet_Control_Symbol_Capture_0_CSR");
         Port_13_Packet_Control_Symbol_Capture_0_CSR.configure(this);
         Port_13_Packet_Control_Symbol_Capture_0_CSR.build();

         Port_14_Packet_Control_Symbol_Capture_0_CSR = Port_14_Packet_Control_Symbol_Capture_0_CSR_reg::type_id::create("Port_14_Packet_Control_Symbol_Capture_0_CSR");
         Port_14_Packet_Control_Symbol_Capture_0_CSR.configure(this);
         Port_14_Packet_Control_Symbol_Capture_0_CSR.build();

         Port_15_Packet_Control_Symbol_Capture_0_CSR = Port_15_Packet_Control_Symbol_Capture_0_CSR_reg::type_id::create("Port_15_Packet_Control_Symbol_Capture_0_CSR");
         Port_15_Packet_Control_Symbol_Capture_0_CSR.configure(this);
         Port_15_Packet_Control_Symbol_Capture_0_CSR.build();

         Port_0_Packet_Capture_1_CSR = Port_0_Packet_Capture_1_CSR_reg::type_id::create("Port_0_Packet_Capture_1_CSR");
         Port_0_Packet_Capture_1_CSR.configure(this);
         Port_0_Packet_Capture_1_CSR.build();

         Port_1_Packet_Capture_1_CSR = Port_1_Packet_Capture_1_CSR_reg::type_id::create("Port_1_Packet_Capture_1_CSR");
         Port_1_Packet_Capture_1_CSR.configure(this);
         Port_1_Packet_Capture_1_CSR.build();

         Port_2_Packet_Capture_1_CSR = Port_2_Packet_Capture_1_CSR_reg::type_id::create("Port_2_Packet_Capture_1_CSR");
         Port_2_Packet_Capture_1_CSR.configure(this);
         Port_2_Packet_Capture_1_CSR.build();

         Port_3_Packet_Capture_1_CSR = Port_3_Packet_Capture_1_CSR_reg::type_id::create("Port_3_Packet_Capture_1_CSR");
         Port_3_Packet_Capture_1_CSR.configure(this);
         Port_3_Packet_Capture_1_CSR.build();

         Port_4_Packet_Capture_1_CSR = Port_4_Packet_Capture_1_CSR_reg::type_id::create("Port_4_Packet_Capture_1_CSR");
         Port_4_Packet_Capture_1_CSR.configure(this);
         Port_4_Packet_Capture_1_CSR.build();

         Port_5_Packet_Capture_1_CSR = Port_5_Packet_Capture_1_CSR_reg::type_id::create("Port_5_Packet_Capture_1_CSR");
         Port_5_Packet_Capture_1_CSR.configure(this);
         Port_5_Packet_Capture_1_CSR.build();

         Port_6_Packet_Capture_1_CSR = Port_6_Packet_Capture_1_CSR_reg::type_id::create("Port_6_Packet_Capture_1_CSR");
         Port_6_Packet_Capture_1_CSR.configure(this);
         Port_6_Packet_Capture_1_CSR.build();

         Port_7_Packet_Capture_1_CSR = Port_7_Packet_Capture_1_CSR_reg::type_id::create("Port_7_Packet_Capture_1_CSR");
         Port_7_Packet_Capture_1_CSR.configure(this);
         Port_7_Packet_Capture_1_CSR.build();

         Port_8_Packet_Capture_1_CSR = Port_8_Packet_Capture_1_CSR_reg::type_id::create("Port_8_Packet_Capture_1_CSR");
         Port_8_Packet_Capture_1_CSR.configure(this);
         Port_8_Packet_Capture_1_CSR.build();

         Port_9_Packet_Capture_1_CSR = Port_9_Packet_Capture_1_CSR_reg::type_id::create("Port_9_Packet_Capture_1_CSR");
         Port_9_Packet_Capture_1_CSR.configure(this);
         Port_9_Packet_Capture_1_CSR.build();

         Port_10_Packet_Capture_1_CSR = Port_10_Packet_Capture_1_CSR_reg::type_id::create("Port_10_Packet_Capture_1_CSR");
         Port_10_Packet_Capture_1_CSR.configure(this);
         Port_10_Packet_Capture_1_CSR.build();

         Port_11_Packet_Capture_1_CSR = Port_11_Packet_Capture_1_CSR_reg::type_id::create("Port_11_Packet_Capture_1_CSR");
         Port_11_Packet_Capture_1_CSR.configure(this);
         Port_11_Packet_Capture_1_CSR.build();

         Port_12_Packet_Capture_1_CSR = Port_12_Packet_Capture_1_CSR_reg::type_id::create("Port_12_Packet_Capture_1_CSR");
         Port_12_Packet_Capture_1_CSR.configure(this);
         Port_12_Packet_Capture_1_CSR.build();

         Port_13_Packet_Capture_1_CSR = Port_13_Packet_Capture_1_CSR_reg::type_id::create("Port_13_Packet_Capture_1_CSR");
         Port_13_Packet_Capture_1_CSR.configure(this);
         Port_13_Packet_Capture_1_CSR.build();

         Port_14_Packet_Capture_1_CSR = Port_14_Packet_Capture_1_CSR_reg::type_id::create("Port_14_Packet_Capture_1_CSR");
         Port_14_Packet_Capture_1_CSR.configure(this);
         Port_14_Packet_Capture_1_CSR.build();

         Port_15_Packet_Capture_1_CSR = Port_15_Packet_Capture_1_CSR_reg::type_id::create("Port_15_Packet_Capture_1_CSR");
         Port_15_Packet_Capture_1_CSR.configure(this);
         Port_15_Packet_Capture_1_CSR.build();

         Port_0_Packet_Capture_2_CSR = Port_0_Packet_Capture_2_CSR_reg::type_id::create("Port_0_Packet_Capture_2_CSR");
         Port_0_Packet_Capture_2_CSR.configure(this);
         Port_0_Packet_Capture_2_CSR.build();

         Port_1_Packet_Capture_2_CSR = Port_1_Packet_Capture_2_CSR_reg::type_id::create("Port_1_Packet_Capture_2_CSR");
         Port_1_Packet_Capture_2_CSR.configure(this);
         Port_1_Packet_Capture_2_CSR.build();

         Port_2_Packet_Capture_2_CSR = Port_2_Packet_Capture_2_CSR_reg::type_id::create("Port_2_Packet_Capture_2_CSR");
         Port_2_Packet_Capture_2_CSR.configure(this);
         Port_2_Packet_Capture_2_CSR.build();

         Port_3_Packet_Capture_2_CSR = Port_3_Packet_Capture_2_CSR_reg::type_id::create("Port_3_Packet_Capture_2_CSR");
         Port_3_Packet_Capture_2_CSR.configure(this);
         Port_3_Packet_Capture_2_CSR.build();

         Port_4_Packet_Capture_2_CSR = Port_4_Packet_Capture_2_CSR_reg::type_id::create("Port_4_Packet_Capture_2_CSR");
         Port_4_Packet_Capture_2_CSR.configure(this);
         Port_4_Packet_Capture_2_CSR.build();

         Port_5_Packet_Capture_2_CSR = Port_5_Packet_Capture_2_CSR_reg::type_id::create("Port_5_Packet_Capture_2_CSR");
         Port_5_Packet_Capture_2_CSR.configure(this);
         Port_5_Packet_Capture_2_CSR.build();

         Port_6_Packet_Capture_2_CSR = Port_6_Packet_Capture_2_CSR_reg::type_id::create("Port_6_Packet_Capture_2_CSR");
         Port_6_Packet_Capture_2_CSR.configure(this);
         Port_6_Packet_Capture_2_CSR.build();

         Port_7_Packet_Capture_2_CSR = Port_7_Packet_Capture_2_CSR_reg::type_id::create("Port_7_Packet_Capture_2_CSR");
         Port_7_Packet_Capture_2_CSR.configure(this);
         Port_7_Packet_Capture_2_CSR.build();

         Port_8_Packet_Capture_2_CSR = Port_8_Packet_Capture_2_CSR_reg::type_id::create("Port_8_Packet_Capture_2_CSR");
         Port_8_Packet_Capture_2_CSR.configure(this);
         Port_8_Packet_Capture_2_CSR.build();

         Port_9_Packet_Capture_2_CSR = Port_9_Packet_Capture_2_CSR_reg::type_id::create("Port_9_Packet_Capture_2_CSR");
         Port_9_Packet_Capture_2_CSR.configure(this);
         Port_9_Packet_Capture_2_CSR.build();

         Port_10_Packet_Capture_2_CSR = Port_10_Packet_Capture_2_CSR_reg::type_id::create("Port_10_Packet_Capture_2_CSR");
         Port_10_Packet_Capture_2_CSR.configure(this);
         Port_10_Packet_Capture_2_CSR.build();

         Port_11_Packet_Capture_2_CSR = Port_11_Packet_Capture_2_CSR_reg::type_id::create("Port_11_Packet_Capture_2_CSR");
         Port_11_Packet_Capture_2_CSR.configure(this);
         Port_11_Packet_Capture_2_CSR.build();

         Port_12_Packet_Capture_2_CSR = Port_12_Packet_Capture_2_CSR_reg::type_id::create("Port_12_Packet_Capture_2_CSR");
         Port_12_Packet_Capture_2_CSR.configure(this);
         Port_12_Packet_Capture_2_CSR.build();

         Port_13_Packet_Capture_2_CSR = Port_13_Packet_Capture_2_CSR_reg::type_id::create("Port_13_Packet_Capture_2_CSR");
         Port_13_Packet_Capture_2_CSR.configure(this);
         Port_13_Packet_Capture_2_CSR.build();

         Port_14_Packet_Capture_2_CSR = Port_14_Packet_Capture_2_CSR_reg::type_id::create("Port_14_Packet_Capture_2_CSR");
         Port_14_Packet_Capture_2_CSR.configure(this);
         Port_14_Packet_Capture_2_CSR.build();

         Port_15_Packet_Capture_2_CSR = Port_15_Packet_Capture_2_CSR_reg::type_id::create("Port_15_Packet_Capture_2_CSR");
         Port_15_Packet_Capture_2_CSR.configure(this);
         Port_15_Packet_Capture_2_CSR.build();

         Port_0_Packet_Capture_3_CSR = Port_0_Packet_Capture_3_CSR_reg::type_id::create("Port_0_Packet_Capture_3_CSR");
         Port_0_Packet_Capture_3_CSR.configure(this);
         Port_0_Packet_Capture_3_CSR.build();

         Port_1_Packet_Capture_3_CSR = Port_1_Packet_Capture_3_CSR_reg::type_id::create("Port_1_Packet_Capture_3_CSR");
         Port_1_Packet_Capture_3_CSR.configure(this);
         Port_1_Packet_Capture_3_CSR.build();

         Port_2_Packet_Capture_3_CSR = Port_2_Packet_Capture_3_CSR_reg::type_id::create("Port_2_Packet_Capture_3_CSR");
         Port_2_Packet_Capture_3_CSR.configure(this);
         Port_2_Packet_Capture_3_CSR.build();

         Port_3_Packet_Capture_3_CSR = Port_3_Packet_Capture_3_CSR_reg::type_id::create("Port_3_Packet_Capture_3_CSR");
         Port_3_Packet_Capture_3_CSR.configure(this);
         Port_3_Packet_Capture_3_CSR.build();

         Port_4_Packet_Capture_3_CSR = Port_4_Packet_Capture_3_CSR_reg::type_id::create("Port_4_Packet_Capture_3_CSR");
         Port_4_Packet_Capture_3_CSR.configure(this);
         Port_4_Packet_Capture_3_CSR.build();

         Port_5_Packet_Capture_3_CSR = Port_5_Packet_Capture_3_CSR_reg::type_id::create("Port_5_Packet_Capture_3_CSR");
         Port_5_Packet_Capture_3_CSR.configure(this);
         Port_5_Packet_Capture_3_CSR.build();

         Port_6_Packet_Capture_3_CSR = Port_6_Packet_Capture_3_CSR_reg::type_id::create("Port_6_Packet_Capture_3_CSR");
         Port_6_Packet_Capture_3_CSR.configure(this);
         Port_6_Packet_Capture_3_CSR.build();

         Port_7_Packet_Capture_3_CSR = Port_7_Packet_Capture_3_CSR_reg::type_id::create("Port_7_Packet_Capture_3_CSR");
         Port_7_Packet_Capture_3_CSR.configure(this);
         Port_7_Packet_Capture_3_CSR.build();

         Port_8_Packet_Capture_3_CSR = Port_8_Packet_Capture_3_CSR_reg::type_id::create("Port_8_Packet_Capture_3_CSR");
         Port_8_Packet_Capture_3_CSR.configure(this);
         Port_8_Packet_Capture_3_CSR.build();

         Port_9_Packet_Capture_3_CSR = Port_9_Packet_Capture_3_CSR_reg::type_id::create("Port_9_Packet_Capture_3_CSR");
         Port_9_Packet_Capture_3_CSR.configure(this);
         Port_9_Packet_Capture_3_CSR.build();

         Port_10_Packet_Capture_3_CSR = Port_10_Packet_Capture_3_CSR_reg::type_id::create("Port_10_Packet_Capture_3_CSR");
         Port_10_Packet_Capture_3_CSR.configure(this);
         Port_10_Packet_Capture_3_CSR.build();

         Port_11_Packet_Capture_3_CSR = Port_11_Packet_Capture_3_CSR_reg::type_id::create("Port_11_Packet_Capture_3_CSR");
         Port_11_Packet_Capture_3_CSR.configure(this);
         Port_11_Packet_Capture_3_CSR.build();

         Port_12_Packet_Capture_3_CSR = Port_12_Packet_Capture_3_CSR_reg::type_id::create("Port_12_Packet_Capture_3_CSR");
         Port_12_Packet_Capture_3_CSR.configure(this);
         Port_12_Packet_Capture_3_CSR.build();

         Port_13_Packet_Capture_3_CSR = Port_13_Packet_Capture_3_CSR_reg::type_id::create("Port_13_Packet_Capture_3_CSR");
         Port_13_Packet_Capture_3_CSR.configure(this);
         Port_13_Packet_Capture_3_CSR.build();

         Port_14_Packet_Capture_3_CSR = Port_14_Packet_Capture_3_CSR_reg::type_id::create("Port_14_Packet_Capture_3_CSR");
         Port_14_Packet_Capture_3_CSR.configure(this);
         Port_14_Packet_Capture_3_CSR.build();

         Port_15_Packet_Capture_3_CSR = Port_15_Packet_Capture_3_CSR_reg::type_id::create("Port_15_Packet_Capture_3_CSR");
         Port_15_Packet_Capture_3_CSR.configure(this);
         Port_15_Packet_Capture_3_CSR.build();

         Port_0_Packet_Capture_4_CSR = Port_0_Packet_Capture_4_CSR_reg::type_id::create("Port_0_Packet_Capture_4_CSR");
         Port_0_Packet_Capture_4_CSR.configure(this);
         Port_0_Packet_Capture_4_CSR.build();

         Port_1_Packet_Capture_4_CSR = Port_1_Packet_Capture_4_CSR_reg::type_id::create("Port_1_Packet_Capture_4_CSR");
         Port_1_Packet_Capture_4_CSR.configure(this);
         Port_1_Packet_Capture_4_CSR.build();

         Port_2_Packet_Capture_4_CSR = Port_2_Packet_Capture_4_CSR_reg::type_id::create("Port_2_Packet_Capture_4_CSR");
         Port_2_Packet_Capture_4_CSR.configure(this);
         Port_2_Packet_Capture_4_CSR.build();

         Port_3_Packet_Capture_4_CSR = Port_3_Packet_Capture_4_CSR_reg::type_id::create("Port_3_Packet_Capture_4_CSR");
         Port_3_Packet_Capture_4_CSR.configure(this);
         Port_3_Packet_Capture_4_CSR.build();

         Port_4_Packet_Capture_4_CSR = Port_4_Packet_Capture_4_CSR_reg::type_id::create("Port_4_Packet_Capture_4_CSR");
         Port_4_Packet_Capture_4_CSR.configure(this);
         Port_4_Packet_Capture_4_CSR.build();

         Port_5_Packet_Capture_4_CSR = Port_5_Packet_Capture_4_CSR_reg::type_id::create("Port_5_Packet_Capture_4_CSR");
         Port_5_Packet_Capture_4_CSR.configure(this);
         Port_5_Packet_Capture_4_CSR.build();

         Port_6_Packet_Capture_4_CSR = Port_6_Packet_Capture_4_CSR_reg::type_id::create("Port_6_Packet_Capture_4_CSR");
         Port_6_Packet_Capture_4_CSR.configure(this);
         Port_6_Packet_Capture_4_CSR.build();

         Port_7_Packet_Capture_4_CSR = Port_7_Packet_Capture_4_CSR_reg::type_id::create("Port_7_Packet_Capture_4_CSR");
         Port_7_Packet_Capture_4_CSR.configure(this);
         Port_7_Packet_Capture_4_CSR.build();

         Port_8_Packet_Capture_4_CSR = Port_8_Packet_Capture_4_CSR_reg::type_id::create("Port_8_Packet_Capture_4_CSR");
         Port_8_Packet_Capture_4_CSR.configure(this);
         Port_8_Packet_Capture_4_CSR.build();

         Port_9_Packet_Capture_4_CSR = Port_9_Packet_Capture_4_CSR_reg::type_id::create("Port_9_Packet_Capture_4_CSR");
         Port_9_Packet_Capture_4_CSR.configure(this);
         Port_9_Packet_Capture_4_CSR.build();

         Port_10_Packet_Capture_4_CSR = Port_10_Packet_Capture_4_CSR_reg::type_id::create("Port_10_Packet_Capture_4_CSR");
         Port_10_Packet_Capture_4_CSR.configure(this);
         Port_10_Packet_Capture_4_CSR.build();

         Port_11_Packet_Capture_4_CSR = Port_11_Packet_Capture_4_CSR_reg::type_id::create("Port_11_Packet_Capture_4_CSR");
         Port_11_Packet_Capture_4_CSR.configure(this);
         Port_11_Packet_Capture_4_CSR.build();

         Port_12_Packet_Capture_4_CSR = Port_12_Packet_Capture_4_CSR_reg::type_id::create("Port_12_Packet_Capture_4_CSR");
         Port_12_Packet_Capture_4_CSR.configure(this);
         Port_12_Packet_Capture_4_CSR.build();

         Port_13_Packet_Capture_4_CSR = Port_13_Packet_Capture_4_CSR_reg::type_id::create("Port_13_Packet_Capture_4_CSR");
         Port_13_Packet_Capture_4_CSR.configure(this);
         Port_13_Packet_Capture_4_CSR.build();

         Port_14_Packet_Capture_4_CSR = Port_14_Packet_Capture_4_CSR_reg::type_id::create("Port_14_Packet_Capture_4_CSR");
         Port_14_Packet_Capture_4_CSR.configure(this);
         Port_14_Packet_Capture_4_CSR.build();

         Port_15_Packet_Capture_4_CSR = Port_15_Packet_Capture_4_CSR_reg::type_id::create("Port_15_Packet_Capture_4_CSR");
         Port_15_Packet_Capture_4_CSR.configure(this);
         Port_15_Packet_Capture_4_CSR.build();

         Port_0_Error_Rate_CSR = Port_0_Error_Rate_CSR_reg::type_id::create("Port_0_Error_Rate_CSR");
         Port_0_Error_Rate_CSR.configure(this);
         Port_0_Error_Rate_CSR.build();

         Port_1_Error_Rate_CSR = Port_1_Error_Rate_CSR_reg::type_id::create("Port_1_Error_Rate_CSR");
         Port_1_Error_Rate_CSR.configure(this);
         Port_1_Error_Rate_CSR.build();

         Port_2_Error_Rate_CSR = Port_2_Error_Rate_CSR_reg::type_id::create("Port_2_Error_Rate_CSR");
         Port_2_Error_Rate_CSR.configure(this);
         Port_2_Error_Rate_CSR.build();

         Port_3_Error_Rate_CSR = Port_3_Error_Rate_CSR_reg::type_id::create("Port_3_Error_Rate_CSR");
         Port_3_Error_Rate_CSR.configure(this);
         Port_3_Error_Rate_CSR.build();

         Port_4_Error_Rate_CSR = Port_4_Error_Rate_CSR_reg::type_id::create("Port_4_Error_Rate_CSR");
         Port_4_Error_Rate_CSR.configure(this);
         Port_4_Error_Rate_CSR.build();

         Port_5_Error_Rate_CSR = Port_5_Error_Rate_CSR_reg::type_id::create("Port_5_Error_Rate_CSR");
         Port_5_Error_Rate_CSR.configure(this);
         Port_5_Error_Rate_CSR.build();

         Port_6_Error_Rate_CSR = Port_6_Error_Rate_CSR_reg::type_id::create("Port_6_Error_Rate_CSR");
         Port_6_Error_Rate_CSR.configure(this);
         Port_6_Error_Rate_CSR.build();

         Port_7_Error_Rate_CSR = Port_7_Error_Rate_CSR_reg::type_id::create("Port_7_Error_Rate_CSR");
         Port_7_Error_Rate_CSR.configure(this);
         Port_7_Error_Rate_CSR.build();

         Port_8_Error_Rate_CSR = Port_8_Error_Rate_CSR_reg::type_id::create("Port_8_Error_Rate_CSR");
         Port_8_Error_Rate_CSR.configure(this);
         Port_8_Error_Rate_CSR.build();

         Port_9_Error_Rate_CSR = Port_9_Error_Rate_CSR_reg::type_id::create("Port_9_Error_Rate_CSR");
         Port_9_Error_Rate_CSR.configure(this);
         Port_9_Error_Rate_CSR.build();

         Port_10_Error_Rate_CSR = Port_10_Error_Rate_CSR_reg::type_id::create("Port_10_Error_Rate_CSR");
         Port_10_Error_Rate_CSR.configure(this);
         Port_10_Error_Rate_CSR.build();

         Port_11_Error_Rate_CSR = Port_11_Error_Rate_CSR_reg::type_id::create("Port_11_Error_Rate_CSR");
         Port_11_Error_Rate_CSR.configure(this);
         Port_11_Error_Rate_CSR.build();

         Port_12_Error_Rate_CSR = Port_12_Error_Rate_CSR_reg::type_id::create("Port_12_Error_Rate_CSR");
         Port_12_Error_Rate_CSR.configure(this);
         Port_12_Error_Rate_CSR.build();

         Port_13_Error_Rate_CSR = Port_13_Error_Rate_CSR_reg::type_id::create("Port_13_Error_Rate_CSR");
         Port_13_Error_Rate_CSR.configure(this);
         Port_13_Error_Rate_CSR.build();

         Port_14_Error_Rate_CSR = Port_14_Error_Rate_CSR_reg::type_id::create("Port_14_Error_Rate_CSR");
         Port_14_Error_Rate_CSR.configure(this);
         Port_14_Error_Rate_CSR.build();

         Port_15_Error_Rate_CSR = Port_15_Error_Rate_CSR_reg::type_id::create("Port_15_Error_Rate_CSR");
         Port_15_Error_Rate_CSR.configure(this);
         Port_15_Error_Rate_CSR.build();

         Port_0_Error_Rate_Threshold_CSR = Port_0_Error_Rate_Threshold_CSR_reg::type_id::create("Port_0_Error_Rate_Threshold_CSR");
         Port_0_Error_Rate_Threshold_CSR.configure(this);
         Port_0_Error_Rate_Threshold_CSR.build();

         Port_1_Error_Rate_Threshold_CSR = Port_1_Error_Rate_Threshold_CSR_reg::type_id::create("Port_1_Error_Rate_Threshold_CSR");
         Port_1_Error_Rate_Threshold_CSR.configure(this);
         Port_1_Error_Rate_Threshold_CSR.build();

         Port_2_Error_Rate_Threshold_CSR = Port_2_Error_Rate_Threshold_CSR_reg::type_id::create("Port_2_Error_Rate_Threshold_CSR");
         Port_2_Error_Rate_Threshold_CSR.configure(this);
         Port_2_Error_Rate_Threshold_CSR.build();

         Port_3_Error_Rate_Threshold_CSR = Port_3_Error_Rate_Threshold_CSR_reg::type_id::create("Port_3_Error_Rate_Threshold_CSR");
         Port_3_Error_Rate_Threshold_CSR.configure(this);
         Port_3_Error_Rate_Threshold_CSR.build();

         Port_4_Error_Rate_Threshold_CSR = Port_4_Error_Rate_Threshold_CSR_reg::type_id::create("Port_4_Error_Rate_Threshold_CSR");
         Port_4_Error_Rate_Threshold_CSR.configure(this);
         Port_4_Error_Rate_Threshold_CSR.build();

         Port_5_Error_Rate_Threshold_CSR = Port_5_Error_Rate_Threshold_CSR_reg::type_id::create("Port_5_Error_Rate_Threshold_CSR");
         Port_5_Error_Rate_Threshold_CSR.configure(this);
         Port_5_Error_Rate_Threshold_CSR.build();

         Port_6_Error_Rate_Threshold_CSR = Port_6_Error_Rate_Threshold_CSR_reg::type_id::create("Port_6_Error_Rate_Threshold_CSR");
         Port_6_Error_Rate_Threshold_CSR.configure(this);
         Port_6_Error_Rate_Threshold_CSR.build();

         Port_7_Error_Rate_Threshold_CSR = Port_7_Error_Rate_Threshold_CSR_reg::type_id::create("Port_7_Error_Rate_Threshold_CSR");
         Port_7_Error_Rate_Threshold_CSR.configure(this);
         Port_7_Error_Rate_Threshold_CSR.build();

         Port_8_Error_Rate_Threshold_CSR = Port_8_Error_Rate_Threshold_CSR_reg::type_id::create("Port_8_Error_Rate_Threshold_CSR");
         Port_8_Error_Rate_Threshold_CSR.configure(this);
         Port_8_Error_Rate_Threshold_CSR.build();

         Port_9_Error_Rate_Threshold_CSR = Port_9_Error_Rate_Threshold_CSR_reg::type_id::create("Port_9_Error_Rate_Threshold_CSR");
         Port_9_Error_Rate_Threshold_CSR.configure(this);
         Port_9_Error_Rate_Threshold_CSR.build();

         Port_10_Error_Rate_Threshold_CSR = Port_10_Error_Rate_Threshold_CSR_reg::type_id::create("Port_10_Error_Rate_Threshold_CSR");
         Port_10_Error_Rate_Threshold_CSR.configure(this);
         Port_10_Error_Rate_Threshold_CSR.build();

         Port_11_Error_Rate_Threshold_CSR = Port_11_Error_Rate_Threshold_CSR_reg::type_id::create("Port_11_Error_Rate_Threshold_CSR");
         Port_11_Error_Rate_Threshold_CSR.configure(this);
         Port_11_Error_Rate_Threshold_CSR.build();

         Port_12_Error_Rate_Threshold_CSR = Port_12_Error_Rate_Threshold_CSR_reg::type_id::create("Port_12_Error_Rate_Threshold_CSR");
         Port_12_Error_Rate_Threshold_CSR.configure(this);
         Port_12_Error_Rate_Threshold_CSR.build();

         Port_13_Error_Rate_Threshold_CSR = Port_13_Error_Rate_Threshold_CSR_reg::type_id::create("Port_13_Error_Rate_Threshold_CSR");
         Port_13_Error_Rate_Threshold_CSR.configure(this);
         Port_13_Error_Rate_Threshold_CSR.build();

         Port_14_Error_Rate_Threshold_CSR = Port_14_Error_Rate_Threshold_CSR_reg::type_id::create("Port_14_Error_Rate_Threshold_CSR");
         Port_14_Error_Rate_Threshold_CSR.configure(this);
         Port_14_Error_Rate_Threshold_CSR.build();

         Port_15_Error_Rate_Threshold_CSR = Port_15_Error_Rate_Threshold_CSR_reg::type_id::create("Port_15_Error_Rate_Threshold_CSR");
         Port_15_Error_Rate_Threshold_CSR.configure(this);
         Port_15_Error_Rate_Threshold_CSR.build();

         Port_0_Link_Uninit_Discard_Timer_CSR = Port_0_Link_Uninit_Discard_Timer_CSR_reg::type_id::create("Port_0_Link_Uninit_Discard_Timer_CSR");
         Port_0_Link_Uninit_Discard_Timer_CSR.configure(this);
         Port_0_Link_Uninit_Discard_Timer_CSR.build();

         Port_1_Link_Uninit_Discard_Timer_CSR = Port_1_Link_Uninit_Discard_Timer_CSR_reg::type_id::create("Port_1_Link_Uninit_Discard_Timer_CSR");
         Port_1_Link_Uninit_Discard_Timer_CSR.configure(this);
         Port_1_Link_Uninit_Discard_Timer_CSR.build();

         Port_2_Link_Uninit_Discard_Timer_CSR = Port_2_Link_Uninit_Discard_Timer_CSR_reg::type_id::create("Port_2_Link_Uninit_Discard_Timer_CSR");
         Port_2_Link_Uninit_Discard_Timer_CSR.configure(this);
         Port_2_Link_Uninit_Discard_Timer_CSR.build();

         Port_3_Link_Uninit_Discard_Timer_CSR = Port_3_Link_Uninit_Discard_Timer_CSR_reg::type_id::create("Port_3_Link_Uninit_Discard_Timer_CSR");
         Port_3_Link_Uninit_Discard_Timer_CSR.configure(this);
         Port_3_Link_Uninit_Discard_Timer_CSR.build();

         Port_4_Link_Uninit_Discard_Timer_CSR = Port_4_Link_Uninit_Discard_Timer_CSR_reg::type_id::create("Port_4_Link_Uninit_Discard_Timer_CSR");
         Port_4_Link_Uninit_Discard_Timer_CSR.configure(this);
         Port_4_Link_Uninit_Discard_Timer_CSR.build();

         Port_5_Link_Uninit_Discard_Timer_CSR = Port_5_Link_Uninit_Discard_Timer_CSR_reg::type_id::create("Port_5_Link_Uninit_Discard_Timer_CSR");
         Port_5_Link_Uninit_Discard_Timer_CSR.configure(this);
         Port_5_Link_Uninit_Discard_Timer_CSR.build();

         Port_6_Link_Uninit_Discard_Timer_CSR = Port_6_Link_Uninit_Discard_Timer_CSR_reg::type_id::create("Port_6_Link_Uninit_Discard_Timer_CSR");
         Port_6_Link_Uninit_Discard_Timer_CSR.configure(this);
         Port_6_Link_Uninit_Discard_Timer_CSR.build();

         Port_7_Link_Uninit_Discard_Timer_CSR = Port_7_Link_Uninit_Discard_Timer_CSR_reg::type_id::create("Port_7_Link_Uninit_Discard_Timer_CSR");
         Port_7_Link_Uninit_Discard_Timer_CSR.configure(this);
         Port_7_Link_Uninit_Discard_Timer_CSR.build();

         Port_8_Link_Uninit_Discard_Timer_CSR = Port_8_Link_Uninit_Discard_Timer_CSR_reg::type_id::create("Port_8_Link_Uninit_Discard_Timer_CSR");
         Port_8_Link_Uninit_Discard_Timer_CSR.configure(this);
         Port_8_Link_Uninit_Discard_Timer_CSR.build();

         Port_9_Link_Uninit_Discard_Timer_CSR = Port_9_Link_Uninit_Discard_Timer_CSR_reg::type_id::create("Port_9_Link_Uninit_Discard_Timer_CSR");
         Port_9_Link_Uninit_Discard_Timer_CSR.configure(this);
         Port_9_Link_Uninit_Discard_Timer_CSR.build();

         Port_10_Link_Uninit_Discard_Timer_CSR = Port_10_Link_Uninit_Discard_Timer_CSR_reg::type_id::create("Port_10_Link_Uninit_Discard_Timer_CSR");
         Port_10_Link_Uninit_Discard_Timer_CSR.configure(this);
         Port_10_Link_Uninit_Discard_Timer_CSR.build();

         Port_11_Link_Uninit_Discard_Timer_CSR = Port_11_Link_Uninit_Discard_Timer_CSR_reg::type_id::create("Port_11_Link_Uninit_Discard_Timer_CSR");
         Port_11_Link_Uninit_Discard_Timer_CSR.configure(this);
         Port_11_Link_Uninit_Discard_Timer_CSR.build();

         Port_12_Link_Uninit_Discard_Timer_CSR = Port_12_Link_Uninit_Discard_Timer_CSR_reg::type_id::create("Port_12_Link_Uninit_Discard_Timer_CSR");
         Port_12_Link_Uninit_Discard_Timer_CSR.configure(this);
         Port_12_Link_Uninit_Discard_Timer_CSR.build();

         Port_13_Link_Uninit_Discard_Timer_CSR = Port_13_Link_Uninit_Discard_Timer_CSR_reg::type_id::create("Port_13_Link_Uninit_Discard_Timer_CSR");
         Port_13_Link_Uninit_Discard_Timer_CSR.configure(this);
         Port_13_Link_Uninit_Discard_Timer_CSR.build();

         Port_14_Link_Uninit_Discard_Timer_CSR = Port_14_Link_Uninit_Discard_Timer_CSR_reg::type_id::create("Port_14_Link_Uninit_Discard_Timer_CSR");
         Port_14_Link_Uninit_Discard_Timer_CSR.configure(this);
         Port_14_Link_Uninit_Discard_Timer_CSR.build();

         Port_15_Link_Uninit_Discard_Timer_CSR = Port_15_Link_Uninit_Discard_Timer_CSR_reg::type_id::create("Port_15_Link_Uninit_Discard_Timer_CSR");
         Port_15_Link_Uninit_Discard_Timer_CSR.configure(this);
         Port_15_Link_Uninit_Discard_Timer_CSR.build();

         Timestamp_Generation_Extension_Block_Header = Timestamp_Generation_Extension_Block_Header_reg::type_id::create("Timestamp_Generation_Extension_Block_Header");
         Timestamp_Generation_Extension_Block_Header.configure(this);
         Timestamp_Generation_Extension_Block_Header.build();

         Timestamp_CAR = Timestamp_CAR_reg::type_id::create("Timestamp_CAR");
         Timestamp_CAR.configure(this);
         Timestamp_CAR.build();

         Timestamp_Generator_Status_CSR = Timestamp_Generator_Status_CSR_reg::type_id::create("Timestamp_Generator_Status_CSR");
         Timestamp_Generator_Status_CSR.configure(this);
         Timestamp_Generator_Status_CSR.build();

         Timestamp_Generator_MSW_CSR = Timestamp_Generator_MSW_CSR_reg::type_id::create("Timestamp_Generator_MSW_CSR");
         Timestamp_Generator_MSW_CSR.configure(this);
         Timestamp_Generator_MSW_CSR.build();

         Timestamp_Generator_LSW_CSR = Timestamp_Generator_LSW_CSR_reg::type_id::create("Timestamp_Generator_LSW_CSR");
         Timestamp_Generator_LSW_CSR.configure(this);
         Timestamp_Generator_LSW_CSR.build();

         Port_0_Timestamp_0_MSW_CSR = Port_0_Timestamp_0_MSW_CSR_reg::type_id::create("Port_0_Timestamp_0_MSW_CSR");
         Port_0_Timestamp_0_MSW_CSR.configure(this);
         Port_0_Timestamp_0_MSW_CSR.build();

         Port_1_Timestamp_0_MSW_CSR = Port_1_Timestamp_0_MSW_CSR_reg::type_id::create("Port_1_Timestamp_0_MSW_CSR");
         Port_1_Timestamp_0_MSW_CSR.configure(this);
         Port_1_Timestamp_0_MSW_CSR.build();

         Port_2_Timestamp_0_MSW_CSR = Port_2_Timestamp_0_MSW_CSR_reg::type_id::create("Port_2_Timestamp_0_MSW_CSR");
         Port_2_Timestamp_0_MSW_CSR.configure(this);
         Port_2_Timestamp_0_MSW_CSR.build();

         Port_3_Timestamp_0_MSW_CSR = Port_3_Timestamp_0_MSW_CSR_reg::type_id::create("Port_3_Timestamp_0_MSW_CSR");
         Port_3_Timestamp_0_MSW_CSR.configure(this);
         Port_3_Timestamp_0_MSW_CSR.build();

         Port_4_Timestamp_0_MSW_CSR = Port_4_Timestamp_0_MSW_CSR_reg::type_id::create("Port_4_Timestamp_0_MSW_CSR");
         Port_4_Timestamp_0_MSW_CSR.configure(this);
         Port_4_Timestamp_0_MSW_CSR.build();

         Port_5_Timestamp_0_MSW_CSR = Port_5_Timestamp_0_MSW_CSR_reg::type_id::create("Port_5_Timestamp_0_MSW_CSR");
         Port_5_Timestamp_0_MSW_CSR.configure(this);
         Port_5_Timestamp_0_MSW_CSR.build();

         Port_6_Timestamp_0_MSW_CSR = Port_6_Timestamp_0_MSW_CSR_reg::type_id::create("Port_6_Timestamp_0_MSW_CSR");
         Port_6_Timestamp_0_MSW_CSR.configure(this);
         Port_6_Timestamp_0_MSW_CSR.build();

         Port_7_Timestamp_0_MSW_CSR = Port_7_Timestamp_0_MSW_CSR_reg::type_id::create("Port_7_Timestamp_0_MSW_CSR");
         Port_7_Timestamp_0_MSW_CSR.configure(this);
         Port_7_Timestamp_0_MSW_CSR.build();

         Port_8_Timestamp_0_MSW_CSR = Port_8_Timestamp_0_MSW_CSR_reg::type_id::create("Port_8_Timestamp_0_MSW_CSR");
         Port_8_Timestamp_0_MSW_CSR.configure(this);
         Port_8_Timestamp_0_MSW_CSR.build();

         Port_9_Timestamp_0_MSW_CSR = Port_9_Timestamp_0_MSW_CSR_reg::type_id::create("Port_9_Timestamp_0_MSW_CSR");
         Port_9_Timestamp_0_MSW_CSR.configure(this);
         Port_9_Timestamp_0_MSW_CSR.build();

         Port_10_Timestamp_0_MSW_CSR = Port_10_Timestamp_0_MSW_CSR_reg::type_id::create("Port_10_Timestamp_0_MSW_CSR");
         Port_10_Timestamp_0_MSW_CSR.configure(this);
         Port_10_Timestamp_0_MSW_CSR.build();

         Port_11_Timestamp_0_MSW_CSR = Port_11_Timestamp_0_MSW_CSR_reg::type_id::create("Port_11_Timestamp_0_MSW_CSR");
         Port_11_Timestamp_0_MSW_CSR.configure(this);
         Port_11_Timestamp_0_MSW_CSR.build();

         Port_12_Timestamp_0_MSW_CSR = Port_12_Timestamp_0_MSW_CSR_reg::type_id::create("Port_12_Timestamp_0_MSW_CSR");
         Port_12_Timestamp_0_MSW_CSR.configure(this);
         Port_12_Timestamp_0_MSW_CSR.build();

         Port_13_Timestamp_0_MSW_CSR = Port_13_Timestamp_0_MSW_CSR_reg::type_id::create("Port_13_Timestamp_0_MSW_CSR");
         Port_13_Timestamp_0_MSW_CSR.configure(this);
         Port_13_Timestamp_0_MSW_CSR.build();

         Port_14_Timestamp_0_MSW_CSR = Port_14_Timestamp_0_MSW_CSR_reg::type_id::create("Port_14_Timestamp_0_MSW_CSR");
         Port_14_Timestamp_0_MSW_CSR.configure(this);
         Port_14_Timestamp_0_MSW_CSR.build();

         Port_15_Timestamp_0_MSW_CSR = Port_15_Timestamp_0_MSW_CSR_reg::type_id::create("Port_15_Timestamp_0_MSW_CSR");
         Port_15_Timestamp_0_MSW_CSR.configure(this);
         Port_15_Timestamp_0_MSW_CSR.build();

         Port_0_Timestamp_0_LSW_CSR = Port_0_Timestamp_0_LSW_CSR_reg::type_id::create("Port_0_Timestamp_0_LSW_CSR");
         Port_0_Timestamp_0_LSW_CSR.configure(this);
         Port_0_Timestamp_0_LSW_CSR.build();

         Port_1_Timestamp_0_LSW_CSR = Port_1_Timestamp_0_LSW_CSR_reg::type_id::create("Port_1_Timestamp_0_LSW_CSR");
         Port_1_Timestamp_0_LSW_CSR.configure(this);
         Port_1_Timestamp_0_LSW_CSR.build();

         Port_2_Timestamp_0_LSW_CSR = Port_2_Timestamp_0_LSW_CSR_reg::type_id::create("Port_2_Timestamp_0_LSW_CSR");
         Port_2_Timestamp_0_LSW_CSR.configure(this);
         Port_2_Timestamp_0_LSW_CSR.build();

         Port_3_Timestamp_0_LSW_CSR = Port_3_Timestamp_0_LSW_CSR_reg::type_id::create("Port_3_Timestamp_0_LSW_CSR");
         Port_3_Timestamp_0_LSW_CSR.configure(this);
         Port_3_Timestamp_0_LSW_CSR.build();

         Port_4_Timestamp_0_LSW_CSR = Port_4_Timestamp_0_LSW_CSR_reg::type_id::create("Port_4_Timestamp_0_LSW_CSR");
         Port_4_Timestamp_0_LSW_CSR.configure(this);
         Port_4_Timestamp_0_LSW_CSR.build();

         Port_5_Timestamp_0_LSW_CSR = Port_5_Timestamp_0_LSW_CSR_reg::type_id::create("Port_5_Timestamp_0_LSW_CSR");
         Port_5_Timestamp_0_LSW_CSR.configure(this);
         Port_5_Timestamp_0_LSW_CSR.build();

         Port_6_Timestamp_0_LSW_CSR = Port_6_Timestamp_0_LSW_CSR_reg::type_id::create("Port_6_Timestamp_0_LSW_CSR");
         Port_6_Timestamp_0_LSW_CSR.configure(this);
         Port_6_Timestamp_0_LSW_CSR.build();

         Port_7_Timestamp_0_LSW_CSR = Port_7_Timestamp_0_LSW_CSR_reg::type_id::create("Port_7_Timestamp_0_LSW_CSR");
         Port_7_Timestamp_0_LSW_CSR.configure(this);
         Port_7_Timestamp_0_LSW_CSR.build();

         Port_8_Timestamp_0_LSW_CSR = Port_8_Timestamp_0_LSW_CSR_reg::type_id::create("Port_8_Timestamp_0_LSW_CSR");
         Port_8_Timestamp_0_LSW_CSR.configure(this);
         Port_8_Timestamp_0_LSW_CSR.build();

         Port_9_Timestamp_0_LSW_CSR = Port_9_Timestamp_0_LSW_CSR_reg::type_id::create("Port_9_Timestamp_0_LSW_CSR");
         Port_9_Timestamp_0_LSW_CSR.configure(this);
         Port_9_Timestamp_0_LSW_CSR.build();

         Port_10_Timestamp_0_LSW_CSR = Port_10_Timestamp_0_LSW_CSR_reg::type_id::create("Port_10_Timestamp_0_LSW_CSR");
         Port_10_Timestamp_0_LSW_CSR.configure(this);
         Port_10_Timestamp_0_LSW_CSR.build();

         Port_11_Timestamp_0_LSW_CSR = Port_11_Timestamp_0_LSW_CSR_reg::type_id::create("Port_11_Timestamp_0_LSW_CSR");
         Port_11_Timestamp_0_LSW_CSR.configure(this);
         Port_11_Timestamp_0_LSW_CSR.build();

         Port_12_Timestamp_0_LSW_CSR = Port_12_Timestamp_0_LSW_CSR_reg::type_id::create("Port_12_Timestamp_0_LSW_CSR");
         Port_12_Timestamp_0_LSW_CSR.configure(this);
         Port_12_Timestamp_0_LSW_CSR.build();

         Port_13_Timestamp_0_LSW_CSR = Port_13_Timestamp_0_LSW_CSR_reg::type_id::create("Port_13_Timestamp_0_LSW_CSR");
         Port_13_Timestamp_0_LSW_CSR.configure(this);
         Port_13_Timestamp_0_LSW_CSR.build();

         Port_14_Timestamp_0_LSW_CSR = Port_14_Timestamp_0_LSW_CSR_reg::type_id::create("Port_14_Timestamp_0_LSW_CSR");
         Port_14_Timestamp_0_LSW_CSR.configure(this);
         Port_14_Timestamp_0_LSW_CSR.build();

         Port_15_Timestamp_0_LSW_CSR = Port_15_Timestamp_0_LSW_CSR_reg::type_id::create("Port_15_Timestamp_0_LSW_CSR");
         Port_15_Timestamp_0_LSW_CSR.configure(this);
         Port_15_Timestamp_0_LSW_CSR.build();

         Port_0_Timestamp_1_MSW_CSR = Port_0_Timestamp_1_MSW_CSR_reg::type_id::create("Port_0_Timestamp_1_MSW_CSR");
         Port_0_Timestamp_1_MSW_CSR.configure(this);
         Port_0_Timestamp_1_MSW_CSR.build();

         Port_1_Timestamp_1_MSW_CSR = Port_1_Timestamp_1_MSW_CSR_reg::type_id::create("Port_1_Timestamp_1_MSW_CSR");
         Port_1_Timestamp_1_MSW_CSR.configure(this);
         Port_1_Timestamp_1_MSW_CSR.build();

         Port_2_Timestamp_1_MSW_CSR = Port_2_Timestamp_1_MSW_CSR_reg::type_id::create("Port_2_Timestamp_1_MSW_CSR");
         Port_2_Timestamp_1_MSW_CSR.configure(this);
         Port_2_Timestamp_1_MSW_CSR.build();

         Port_3_Timestamp_1_MSW_CSR = Port_3_Timestamp_1_MSW_CSR_reg::type_id::create("Port_3_Timestamp_1_MSW_CSR");
         Port_3_Timestamp_1_MSW_CSR.configure(this);
         Port_3_Timestamp_1_MSW_CSR.build();

         Port_4_Timestamp_1_MSW_CSR = Port_4_Timestamp_1_MSW_CSR_reg::type_id::create("Port_4_Timestamp_1_MSW_CSR");
         Port_4_Timestamp_1_MSW_CSR.configure(this);
         Port_4_Timestamp_1_MSW_CSR.build();

         Port_5_Timestamp_1_MSW_CSR = Port_5_Timestamp_1_MSW_CSR_reg::type_id::create("Port_5_Timestamp_1_MSW_CSR");
         Port_5_Timestamp_1_MSW_CSR.configure(this);
         Port_5_Timestamp_1_MSW_CSR.build();

         Port_6_Timestamp_1_MSW_CSR = Port_6_Timestamp_1_MSW_CSR_reg::type_id::create("Port_6_Timestamp_1_MSW_CSR");
         Port_6_Timestamp_1_MSW_CSR.configure(this);
         Port_6_Timestamp_1_MSW_CSR.build();

         Port_7_Timestamp_1_MSW_CSR = Port_7_Timestamp_1_MSW_CSR_reg::type_id::create("Port_7_Timestamp_1_MSW_CSR");
         Port_7_Timestamp_1_MSW_CSR.configure(this);
         Port_7_Timestamp_1_MSW_CSR.build();

         Port_8_Timestamp_1_MSW_CSR = Port_8_Timestamp_1_MSW_CSR_reg::type_id::create("Port_8_Timestamp_1_MSW_CSR");
         Port_8_Timestamp_1_MSW_CSR.configure(this);
         Port_8_Timestamp_1_MSW_CSR.build();

         Port_9_Timestamp_1_MSW_CSR = Port_9_Timestamp_1_MSW_CSR_reg::type_id::create("Port_9_Timestamp_1_MSW_CSR");
         Port_9_Timestamp_1_MSW_CSR.configure(this);
         Port_9_Timestamp_1_MSW_CSR.build();

         Port_10_Timestamp_1_MSW_CSR = Port_10_Timestamp_1_MSW_CSR_reg::type_id::create("Port_10_Timestamp_1_MSW_CSR");
         Port_10_Timestamp_1_MSW_CSR.configure(this);
         Port_10_Timestamp_1_MSW_CSR.build();

         Port_11_Timestamp_1_MSW_CSR = Port_11_Timestamp_1_MSW_CSR_reg::type_id::create("Port_11_Timestamp_1_MSW_CSR");
         Port_11_Timestamp_1_MSW_CSR.configure(this);
         Port_11_Timestamp_1_MSW_CSR.build();

         Port_12_Timestamp_1_MSW_CSR = Port_12_Timestamp_1_MSW_CSR_reg::type_id::create("Port_12_Timestamp_1_MSW_CSR");
         Port_12_Timestamp_1_MSW_CSR.configure(this);
         Port_12_Timestamp_1_MSW_CSR.build();

         Port_13_Timestamp_1_MSW_CSR = Port_13_Timestamp_1_MSW_CSR_reg::type_id::create("Port_13_Timestamp_1_MSW_CSR");
         Port_13_Timestamp_1_MSW_CSR.configure(this);
         Port_13_Timestamp_1_MSW_CSR.build();

         Port_14_Timestamp_1_MSW_CSR = Port_14_Timestamp_1_MSW_CSR_reg::type_id::create("Port_14_Timestamp_1_MSW_CSR");
         Port_14_Timestamp_1_MSW_CSR.configure(this);
         Port_14_Timestamp_1_MSW_CSR.build();

         Port_15_Timestamp_1_MSW_CSR = Port_15_Timestamp_1_MSW_CSR_reg::type_id::create("Port_15_Timestamp_1_MSW_CSR");
         Port_15_Timestamp_1_MSW_CSR.configure(this);
         Port_15_Timestamp_1_MSW_CSR.build();

         Port_0_Timestamp_1_LSW_CSR = Port_0_Timestamp_1_LSW_CSR_reg::type_id::create("Port_0_Timestamp_1_LSW_CSR");
         Port_0_Timestamp_1_LSW_CSR.configure(this);
         Port_0_Timestamp_1_LSW_CSR.build();

         Port_1_Timestamp_1_LSW_CSR = Port_1_Timestamp_1_LSW_CSR_reg::type_id::create("Port_1_Timestamp_1_LSW_CSR");
         Port_1_Timestamp_1_LSW_CSR.configure(this);
         Port_1_Timestamp_1_LSW_CSR.build();

         Port_2_Timestamp_1_LSW_CSR = Port_2_Timestamp_1_LSW_CSR_reg::type_id::create("Port_2_Timestamp_1_LSW_CSR");
         Port_2_Timestamp_1_LSW_CSR.configure(this);
         Port_2_Timestamp_1_LSW_CSR.build();

         Port_3_Timestamp_1_LSW_CSR = Port_3_Timestamp_1_LSW_CSR_reg::type_id::create("Port_3_Timestamp_1_LSW_CSR");
         Port_3_Timestamp_1_LSW_CSR.configure(this);
         Port_3_Timestamp_1_LSW_CSR.build();

         Port_4_Timestamp_1_LSW_CSR = Port_4_Timestamp_1_LSW_CSR_reg::type_id::create("Port_4_Timestamp_1_LSW_CSR");
         Port_4_Timestamp_1_LSW_CSR.configure(this);
         Port_4_Timestamp_1_LSW_CSR.build();

         Port_5_Timestamp_1_LSW_CSR = Port_5_Timestamp_1_LSW_CSR_reg::type_id::create("Port_5_Timestamp_1_LSW_CSR");
         Port_5_Timestamp_1_LSW_CSR.configure(this);
         Port_5_Timestamp_1_LSW_CSR.build();

         Port_6_Timestamp_1_LSW_CSR = Port_6_Timestamp_1_LSW_CSR_reg::type_id::create("Port_6_Timestamp_1_LSW_CSR");
         Port_6_Timestamp_1_LSW_CSR.configure(this);
         Port_6_Timestamp_1_LSW_CSR.build();

         Port_7_Timestamp_1_LSW_CSR = Port_7_Timestamp_1_LSW_CSR_reg::type_id::create("Port_7_Timestamp_1_LSW_CSR");
         Port_7_Timestamp_1_LSW_CSR.configure(this);
         Port_7_Timestamp_1_LSW_CSR.build();

         Port_8_Timestamp_1_LSW_CSR = Port_8_Timestamp_1_LSW_CSR_reg::type_id::create("Port_8_Timestamp_1_LSW_CSR");
         Port_8_Timestamp_1_LSW_CSR.configure(this);
         Port_8_Timestamp_1_LSW_CSR.build();

         Port_9_Timestamp_1_LSW_CSR = Port_9_Timestamp_1_LSW_CSR_reg::type_id::create("Port_9_Timestamp_1_LSW_CSR");
         Port_9_Timestamp_1_LSW_CSR.configure(this);
         Port_9_Timestamp_1_LSW_CSR.build();

         Port_10_Timestamp_1_LSW_CSR = Port_10_Timestamp_1_LSW_CSR_reg::type_id::create("Port_10_Timestamp_1_LSW_CSR");
         Port_10_Timestamp_1_LSW_CSR.configure(this);
         Port_10_Timestamp_1_LSW_CSR.build();

         Port_11_Timestamp_1_LSW_CSR = Port_11_Timestamp_1_LSW_CSR_reg::type_id::create("Port_11_Timestamp_1_LSW_CSR");
         Port_11_Timestamp_1_LSW_CSR.configure(this);
         Port_11_Timestamp_1_LSW_CSR.build();

         Port_12_Timestamp_1_LSW_CSR = Port_12_Timestamp_1_LSW_CSR_reg::type_id::create("Port_12_Timestamp_1_LSW_CSR");
         Port_12_Timestamp_1_LSW_CSR.configure(this);
         Port_12_Timestamp_1_LSW_CSR.build();

         Port_13_Timestamp_1_LSW_CSR = Port_13_Timestamp_1_LSW_CSR_reg::type_id::create("Port_13_Timestamp_1_LSW_CSR");
         Port_13_Timestamp_1_LSW_CSR.configure(this);
         Port_13_Timestamp_1_LSW_CSR.build();

         Port_14_Timestamp_1_LSW_CSR = Port_14_Timestamp_1_LSW_CSR_reg::type_id::create("Port_14_Timestamp_1_LSW_CSR");
         Port_14_Timestamp_1_LSW_CSR.configure(this);
         Port_14_Timestamp_1_LSW_CSR.build();

         Port_15_Timestamp_1_LSW_CSR = Port_15_Timestamp_1_LSW_CSR_reg::type_id::create("Port_15_Timestamp_1_LSW_CSR");
         Port_15_Timestamp_1_LSW_CSR.configure(this);
         Port_15_Timestamp_1_LSW_CSR.build();

         Port_0_Timestamp_Generator_Synchronization_CSR = Port_0_Timestamp_Generator_Synchronization_CSR_reg::type_id::create("Port_0_Timestamp_Generator_Synchronization_CSR");
         Port_0_Timestamp_Generator_Synchronization_CSR.configure(this);
         Port_0_Timestamp_Generator_Synchronization_CSR.build();

         Port_1_Timestamp_Generator_Synchronization_CSR = Port_1_Timestamp_Generator_Synchronization_CSR_reg::type_id::create("Port_1_Timestamp_Generator_Synchronization_CSR");
         Port_1_Timestamp_Generator_Synchronization_CSR.configure(this);
         Port_1_Timestamp_Generator_Synchronization_CSR.build();

         Port_2_Timestamp_Generator_Synchronization_CSR = Port_2_Timestamp_Generator_Synchronization_CSR_reg::type_id::create("Port_2_Timestamp_Generator_Synchronization_CSR");
         Port_2_Timestamp_Generator_Synchronization_CSR.configure(this);
         Port_2_Timestamp_Generator_Synchronization_CSR.build();

         Port_3_Timestamp_Generator_Synchronization_CSR = Port_3_Timestamp_Generator_Synchronization_CSR_reg::type_id::create("Port_3_Timestamp_Generator_Synchronization_CSR");
         Port_3_Timestamp_Generator_Synchronization_CSR.configure(this);
         Port_3_Timestamp_Generator_Synchronization_CSR.build();

         Port_4_Timestamp_Generator_Synchronization_CSR = Port_4_Timestamp_Generator_Synchronization_CSR_reg::type_id::create("Port_4_Timestamp_Generator_Synchronization_CSR");
         Port_4_Timestamp_Generator_Synchronization_CSR.configure(this);
         Port_4_Timestamp_Generator_Synchronization_CSR.build();

         Port_5_Timestamp_Generator_Synchronization_CSR = Port_5_Timestamp_Generator_Synchronization_CSR_reg::type_id::create("Port_5_Timestamp_Generator_Synchronization_CSR");
         Port_5_Timestamp_Generator_Synchronization_CSR.configure(this);
         Port_5_Timestamp_Generator_Synchronization_CSR.build();

         Port_6_Timestamp_Generator_Synchronization_CSR = Port_6_Timestamp_Generator_Synchronization_CSR_reg::type_id::create("Port_6_Timestamp_Generator_Synchronization_CSR");
         Port_6_Timestamp_Generator_Synchronization_CSR.configure(this);
         Port_6_Timestamp_Generator_Synchronization_CSR.build();

         Port_7_Timestamp_Generator_Synchronization_CSR = Port_7_Timestamp_Generator_Synchronization_CSR_reg::type_id::create("Port_7_Timestamp_Generator_Synchronization_CSR");
         Port_7_Timestamp_Generator_Synchronization_CSR.configure(this);
         Port_7_Timestamp_Generator_Synchronization_CSR.build();

         Port_8_Timestamp_Generator_Synchronization_CSR = Port_8_Timestamp_Generator_Synchronization_CSR_reg::type_id::create("Port_8_Timestamp_Generator_Synchronization_CSR");
         Port_8_Timestamp_Generator_Synchronization_CSR.configure(this);
         Port_8_Timestamp_Generator_Synchronization_CSR.build();

         Port_9_Timestamp_Generator_Synchronization_CSR = Port_9_Timestamp_Generator_Synchronization_CSR_reg::type_id::create("Port_9_Timestamp_Generator_Synchronization_CSR");
         Port_9_Timestamp_Generator_Synchronization_CSR.configure(this);
         Port_9_Timestamp_Generator_Synchronization_CSR.build();

         Port_10_Timestamp_Generator_Synchronization_CSR = Port_10_Timestamp_Generator_Synchronization_CSR_reg::type_id::create("Port_10_Timestamp_Generator_Synchronization_CSR");
         Port_10_Timestamp_Generator_Synchronization_CSR.configure(this);
         Port_10_Timestamp_Generator_Synchronization_CSR.build();

         Port_11_Timestamp_Generator_Synchronization_CSR = Port_11_Timestamp_Generator_Synchronization_CSR_reg::type_id::create("Port_11_Timestamp_Generator_Synchronization_CSR");
         Port_11_Timestamp_Generator_Synchronization_CSR.configure(this);
         Port_11_Timestamp_Generator_Synchronization_CSR.build();

         Port_12_Timestamp_Generator_Synchronization_CSR = Port_12_Timestamp_Generator_Synchronization_CSR_reg::type_id::create("Port_12_Timestamp_Generator_Synchronization_CSR");
         Port_12_Timestamp_Generator_Synchronization_CSR.configure(this);
         Port_12_Timestamp_Generator_Synchronization_CSR.build();

         Port_13_Timestamp_Generator_Synchronization_CSR = Port_13_Timestamp_Generator_Synchronization_CSR_reg::type_id::create("Port_13_Timestamp_Generator_Synchronization_CSR");
         Port_13_Timestamp_Generator_Synchronization_CSR.configure(this);
         Port_13_Timestamp_Generator_Synchronization_CSR.build();

         Port_14_Timestamp_Generator_Synchronization_CSR = Port_14_Timestamp_Generator_Synchronization_CSR_reg::type_id::create("Port_14_Timestamp_Generator_Synchronization_CSR");
         Port_14_Timestamp_Generator_Synchronization_CSR.configure(this);
         Port_14_Timestamp_Generator_Synchronization_CSR.build();

         Port_15_Timestamp_Generator_Synchronization_CSR = Port_15_Timestamp_Generator_Synchronization_CSR_reg::type_id::create("Port_15_Timestamp_Generator_Synchronization_CSR");
         Port_15_Timestamp_Generator_Synchronization_CSR.configure(this);
         Port_15_Timestamp_Generator_Synchronization_CSR.build();

         Port_0_Auto_Update_Counter_CSR = Port_0_Auto_Update_Counter_CSR_reg::type_id::create("Port_0_Auto_Update_Counter_CSR");
         Port_0_Auto_Update_Counter_CSR.configure(this);
         Port_0_Auto_Update_Counter_CSR.build();

         Port_1_Auto_Update_Counter_CSR = Port_1_Auto_Update_Counter_CSR_reg::type_id::create("Port_1_Auto_Update_Counter_CSR");
         Port_1_Auto_Update_Counter_CSR.configure(this);
         Port_1_Auto_Update_Counter_CSR.build();

         Port_2_Auto_Update_Counter_CSR = Port_2_Auto_Update_Counter_CSR_reg::type_id::create("Port_2_Auto_Update_Counter_CSR");
         Port_2_Auto_Update_Counter_CSR.configure(this);
         Port_2_Auto_Update_Counter_CSR.build();

         Port_3_Auto_Update_Counter_CSR = Port_3_Auto_Update_Counter_CSR_reg::type_id::create("Port_3_Auto_Update_Counter_CSR");
         Port_3_Auto_Update_Counter_CSR.configure(this);
         Port_3_Auto_Update_Counter_CSR.build();

         Port_4_Auto_Update_Counter_CSR = Port_4_Auto_Update_Counter_CSR_reg::type_id::create("Port_4_Auto_Update_Counter_CSR");
         Port_4_Auto_Update_Counter_CSR.configure(this);
         Port_4_Auto_Update_Counter_CSR.build();

         Port_5_Auto_Update_Counter_CSR = Port_5_Auto_Update_Counter_CSR_reg::type_id::create("Port_5_Auto_Update_Counter_CSR");
         Port_5_Auto_Update_Counter_CSR.configure(this);
         Port_5_Auto_Update_Counter_CSR.build();

         Port_6_Auto_Update_Counter_CSR = Port_6_Auto_Update_Counter_CSR_reg::type_id::create("Port_6_Auto_Update_Counter_CSR");
         Port_6_Auto_Update_Counter_CSR.configure(this);
         Port_6_Auto_Update_Counter_CSR.build();

         Port_7_Auto_Update_Counter_CSR = Port_7_Auto_Update_Counter_CSR_reg::type_id::create("Port_7_Auto_Update_Counter_CSR");
         Port_7_Auto_Update_Counter_CSR.configure(this);
         Port_7_Auto_Update_Counter_CSR.build();

         Port_8_Auto_Update_Counter_CSR = Port_8_Auto_Update_Counter_CSR_reg::type_id::create("Port_8_Auto_Update_Counter_CSR");
         Port_8_Auto_Update_Counter_CSR.configure(this);
         Port_8_Auto_Update_Counter_CSR.build();

         Port_9_Auto_Update_Counter_CSR = Port_9_Auto_Update_Counter_CSR_reg::type_id::create("Port_9_Auto_Update_Counter_CSR");
         Port_9_Auto_Update_Counter_CSR.configure(this);
         Port_9_Auto_Update_Counter_CSR.build();

         Port_10_Auto_Update_Counter_CSR = Port_10_Auto_Update_Counter_CSR_reg::type_id::create("Port_10_Auto_Update_Counter_CSR");
         Port_10_Auto_Update_Counter_CSR.configure(this);
         Port_10_Auto_Update_Counter_CSR.build();

         Port_11_Auto_Update_Counter_CSR = Port_11_Auto_Update_Counter_CSR_reg::type_id::create("Port_11_Auto_Update_Counter_CSR");
         Port_11_Auto_Update_Counter_CSR.configure(this);
         Port_11_Auto_Update_Counter_CSR.build();

         Port_12_Auto_Update_Counter_CSR = Port_12_Auto_Update_Counter_CSR_reg::type_id::create("Port_12_Auto_Update_Counter_CSR");
         Port_12_Auto_Update_Counter_CSR.configure(this);
         Port_12_Auto_Update_Counter_CSR.build();

         Port_13_Auto_Update_Counter_CSR = Port_13_Auto_Update_Counter_CSR_reg::type_id::create("Port_13_Auto_Update_Counter_CSR");
         Port_13_Auto_Update_Counter_CSR.configure(this);
         Port_13_Auto_Update_Counter_CSR.build();

         Port_14_Auto_Update_Counter_CSR = Port_14_Auto_Update_Counter_CSR_reg::type_id::create("Port_14_Auto_Update_Counter_CSR");
         Port_14_Auto_Update_Counter_CSR.configure(this);
         Port_14_Auto_Update_Counter_CSR.build();

         Port_15_Auto_Update_Counter_CSR = Port_15_Auto_Update_Counter_CSR_reg::type_id::create("Port_15_Auto_Update_Counter_CSR");
         Port_15_Auto_Update_Counter_CSR.configure(this);
         Port_15_Auto_Update_Counter_CSR.build();

         Port_0_Timestamp_Synchronization_Command_CSR = Port_0_Timestamp_Synchronization_Command_CSR_reg::type_id::create("Port_0_Timestamp_Synchronization_Command_CSR");
         Port_0_Timestamp_Synchronization_Command_CSR.configure(this);
         Port_0_Timestamp_Synchronization_Command_CSR.build();

         Port_1_Timestamp_Synchronization_Command_CSR = Port_1_Timestamp_Synchronization_Command_CSR_reg::type_id::create("Port_1_Timestamp_Synchronization_Command_CSR");
         Port_1_Timestamp_Synchronization_Command_CSR.configure(this);
         Port_1_Timestamp_Synchronization_Command_CSR.build();

         Port_2_Timestamp_Synchronization_Command_CSR = Port_2_Timestamp_Synchronization_Command_CSR_reg::type_id::create("Port_2_Timestamp_Synchronization_Command_CSR");
         Port_2_Timestamp_Synchronization_Command_CSR.configure(this);
         Port_2_Timestamp_Synchronization_Command_CSR.build();

         Port_3_Timestamp_Synchronization_Command_CSR = Port_3_Timestamp_Synchronization_Command_CSR_reg::type_id::create("Port_3_Timestamp_Synchronization_Command_CSR");
         Port_3_Timestamp_Synchronization_Command_CSR.configure(this);
         Port_3_Timestamp_Synchronization_Command_CSR.build();

         Port_4_Timestamp_Synchronization_Command_CSR = Port_4_Timestamp_Synchronization_Command_CSR_reg::type_id::create("Port_4_Timestamp_Synchronization_Command_CSR");
         Port_4_Timestamp_Synchronization_Command_CSR.configure(this);
         Port_4_Timestamp_Synchronization_Command_CSR.build();

         Port_5_Timestamp_Synchronization_Command_CSR = Port_5_Timestamp_Synchronization_Command_CSR_reg::type_id::create("Port_5_Timestamp_Synchronization_Command_CSR");
         Port_5_Timestamp_Synchronization_Command_CSR.configure(this);
         Port_5_Timestamp_Synchronization_Command_CSR.build();

         Port_6_Timestamp_Synchronization_Command_CSR = Port_6_Timestamp_Synchronization_Command_CSR_reg::type_id::create("Port_6_Timestamp_Synchronization_Command_CSR");
         Port_6_Timestamp_Synchronization_Command_CSR.configure(this);
         Port_6_Timestamp_Synchronization_Command_CSR.build();

         Port_7_Timestamp_Synchronization_Command_CSR = Port_7_Timestamp_Synchronization_Command_CSR_reg::type_id::create("Port_7_Timestamp_Synchronization_Command_CSR");
         Port_7_Timestamp_Synchronization_Command_CSR.configure(this);
         Port_7_Timestamp_Synchronization_Command_CSR.build();

         Port_8_Timestamp_Synchronization_Command_CSR = Port_8_Timestamp_Synchronization_Command_CSR_reg::type_id::create("Port_8_Timestamp_Synchronization_Command_CSR");
         Port_8_Timestamp_Synchronization_Command_CSR.configure(this);
         Port_8_Timestamp_Synchronization_Command_CSR.build();

         Port_9_Timestamp_Synchronization_Command_CSR = Port_9_Timestamp_Synchronization_Command_CSR_reg::type_id::create("Port_9_Timestamp_Synchronization_Command_CSR");
         Port_9_Timestamp_Synchronization_Command_CSR.configure(this);
         Port_9_Timestamp_Synchronization_Command_CSR.build();

         Port_10_Timestamp_Synchronization_Command_CSR = Port_10_Timestamp_Synchronization_Command_CSR_reg::type_id::create("Port_10_Timestamp_Synchronization_Command_CSR");
         Port_10_Timestamp_Synchronization_Command_CSR.configure(this);
         Port_10_Timestamp_Synchronization_Command_CSR.build();

         Port_11_Timestamp_Synchronization_Command_CSR = Port_11_Timestamp_Synchronization_Command_CSR_reg::type_id::create("Port_11_Timestamp_Synchronization_Command_CSR");
         Port_11_Timestamp_Synchronization_Command_CSR.configure(this);
         Port_11_Timestamp_Synchronization_Command_CSR.build();

         Port_12_Timestamp_Synchronization_Command_CSR = Port_12_Timestamp_Synchronization_Command_CSR_reg::type_id::create("Port_12_Timestamp_Synchronization_Command_CSR");
         Port_12_Timestamp_Synchronization_Command_CSR.configure(this);
         Port_12_Timestamp_Synchronization_Command_CSR.build();

         Port_13_Timestamp_Synchronization_Command_CSR = Port_13_Timestamp_Synchronization_Command_CSR_reg::type_id::create("Port_13_Timestamp_Synchronization_Command_CSR");
         Port_13_Timestamp_Synchronization_Command_CSR.configure(this);
         Port_13_Timestamp_Synchronization_Command_CSR.build();

         Port_14_Timestamp_Synchronization_Command_CSR = Port_14_Timestamp_Synchronization_Command_CSR_reg::type_id::create("Port_14_Timestamp_Synchronization_Command_CSR");
         Port_14_Timestamp_Synchronization_Command_CSR.configure(this);
         Port_14_Timestamp_Synchronization_Command_CSR.build();

         Port_15_Timestamp_Synchronization_Command_CSR = Port_15_Timestamp_Synchronization_Command_CSR_reg::type_id::create("Port_15_Timestamp_Synchronization_Command_CSR");
         Port_15_Timestamp_Synchronization_Command_CSR.configure(this);
         Port_15_Timestamp_Synchronization_Command_CSR.build();

         Port_0_Timestamp_Synchronization_Status_CSR = Port_0_Timestamp_Synchronization_Status_CSR_reg::type_id::create("Port_0_Timestamp_Synchronization_Status_CSR");
         Port_0_Timestamp_Synchronization_Status_CSR.configure(this);
         Port_0_Timestamp_Synchronization_Status_CSR.build();

         Port_1_Timestamp_Synchronization_Status_CSR = Port_1_Timestamp_Synchronization_Status_CSR_reg::type_id::create("Port_1_Timestamp_Synchronization_Status_CSR");
         Port_1_Timestamp_Synchronization_Status_CSR.configure(this);
         Port_1_Timestamp_Synchronization_Status_CSR.build();

         Port_2_Timestamp_Synchronization_Status_CSR = Port_2_Timestamp_Synchronization_Status_CSR_reg::type_id::create("Port_2_Timestamp_Synchronization_Status_CSR");
         Port_2_Timestamp_Synchronization_Status_CSR.configure(this);
         Port_2_Timestamp_Synchronization_Status_CSR.build();

         Port_3_Timestamp_Synchronization_Status_CSR = Port_3_Timestamp_Synchronization_Status_CSR_reg::type_id::create("Port_3_Timestamp_Synchronization_Status_CSR");
         Port_3_Timestamp_Synchronization_Status_CSR.configure(this);
         Port_3_Timestamp_Synchronization_Status_CSR.build();

         Port_4_Timestamp_Synchronization_Status_CSR = Port_4_Timestamp_Synchronization_Status_CSR_reg::type_id::create("Port_4_Timestamp_Synchronization_Status_CSR");
         Port_4_Timestamp_Synchronization_Status_CSR.configure(this);
         Port_4_Timestamp_Synchronization_Status_CSR.build();

         Port_5_Timestamp_Synchronization_Status_CSR = Port_5_Timestamp_Synchronization_Status_CSR_reg::type_id::create("Port_5_Timestamp_Synchronization_Status_CSR");
         Port_5_Timestamp_Synchronization_Status_CSR.configure(this);
         Port_5_Timestamp_Synchronization_Status_CSR.build();

         Port_6_Timestamp_Synchronization_Status_CSR = Port_6_Timestamp_Synchronization_Status_CSR_reg::type_id::create("Port_6_Timestamp_Synchronization_Status_CSR");
         Port_6_Timestamp_Synchronization_Status_CSR.configure(this);
         Port_6_Timestamp_Synchronization_Status_CSR.build();

         Port_7_Timestamp_Synchronization_Status_CSR = Port_7_Timestamp_Synchronization_Status_CSR_reg::type_id::create("Port_7_Timestamp_Synchronization_Status_CSR");
         Port_7_Timestamp_Synchronization_Status_CSR.configure(this);
         Port_7_Timestamp_Synchronization_Status_CSR.build();

         Port_8_Timestamp_Synchronization_Status_CSR = Port_8_Timestamp_Synchronization_Status_CSR_reg::type_id::create("Port_8_Timestamp_Synchronization_Status_CSR");
         Port_8_Timestamp_Synchronization_Status_CSR.configure(this);
         Port_8_Timestamp_Synchronization_Status_CSR.build();

         Port_9_Timestamp_Synchronization_Status_CSR = Port_9_Timestamp_Synchronization_Status_CSR_reg::type_id::create("Port_9_Timestamp_Synchronization_Status_CSR");
         Port_9_Timestamp_Synchronization_Status_CSR.configure(this);
         Port_9_Timestamp_Synchronization_Status_CSR.build();

         Port_10_Timestamp_Synchronization_Status_CSR = Port_10_Timestamp_Synchronization_Status_CSR_reg::type_id::create("Port_10_Timestamp_Synchronization_Status_CSR");
         Port_10_Timestamp_Synchronization_Status_CSR.configure(this);
         Port_10_Timestamp_Synchronization_Status_CSR.build();

         Port_11_Timestamp_Synchronization_Status_CSR = Port_11_Timestamp_Synchronization_Status_CSR_reg::type_id::create("Port_11_Timestamp_Synchronization_Status_CSR");
         Port_11_Timestamp_Synchronization_Status_CSR.configure(this);
         Port_11_Timestamp_Synchronization_Status_CSR.build();

         Port_12_Timestamp_Synchronization_Status_CSR = Port_12_Timestamp_Synchronization_Status_CSR_reg::type_id::create("Port_12_Timestamp_Synchronization_Status_CSR");
         Port_12_Timestamp_Synchronization_Status_CSR.configure(this);
         Port_12_Timestamp_Synchronization_Status_CSR.build();

         Port_13_Timestamp_Synchronization_Status_CSR = Port_13_Timestamp_Synchronization_Status_CSR_reg::type_id::create("Port_13_Timestamp_Synchronization_Status_CSR");
         Port_13_Timestamp_Synchronization_Status_CSR.configure(this);
         Port_13_Timestamp_Synchronization_Status_CSR.build();

         Port_14_Timestamp_Synchronization_Status_CSR = Port_14_Timestamp_Synchronization_Status_CSR_reg::type_id::create("Port_14_Timestamp_Synchronization_Status_CSR");
         Port_14_Timestamp_Synchronization_Status_CSR.configure(this);
         Port_14_Timestamp_Synchronization_Status_CSR.build();

         Port_15_Timestamp_Synchronization_Status_CSR = Port_15_Timestamp_Synchronization_Status_CSR_reg::type_id::create("Port_15_Timestamp_Synchronization_Status_CSR");
         Port_15_Timestamp_Synchronization_Status_CSR.configure(this);
         Port_15_Timestamp_Synchronization_Status_CSR.build();

         Port_0_Timestamp_Offset_CSR = Port_0_Timestamp_Offset_CSR_reg::type_id::create("Port_0_Timestamp_Offset_CSR");
         Port_0_Timestamp_Offset_CSR.configure(this);
         Port_0_Timestamp_Offset_CSR.build();

         Port_1_Timestamp_Offset_CSR = Port_1_Timestamp_Offset_CSR_reg::type_id::create("Port_1_Timestamp_Offset_CSR");
         Port_1_Timestamp_Offset_CSR.configure(this);
         Port_1_Timestamp_Offset_CSR.build();

         Port_2_Timestamp_Offset_CSR = Port_2_Timestamp_Offset_CSR_reg::type_id::create("Port_2_Timestamp_Offset_CSR");
         Port_2_Timestamp_Offset_CSR.configure(this);
         Port_2_Timestamp_Offset_CSR.build();

         Port_3_Timestamp_Offset_CSR = Port_3_Timestamp_Offset_CSR_reg::type_id::create("Port_3_Timestamp_Offset_CSR");
         Port_3_Timestamp_Offset_CSR.configure(this);
         Port_3_Timestamp_Offset_CSR.build();

         Port_4_Timestamp_Offset_CSR = Port_4_Timestamp_Offset_CSR_reg::type_id::create("Port_4_Timestamp_Offset_CSR");
         Port_4_Timestamp_Offset_CSR.configure(this);
         Port_4_Timestamp_Offset_CSR.build();

         Port_5_Timestamp_Offset_CSR = Port_5_Timestamp_Offset_CSR_reg::type_id::create("Port_5_Timestamp_Offset_CSR");
         Port_5_Timestamp_Offset_CSR.configure(this);
         Port_5_Timestamp_Offset_CSR.build();

         Port_6_Timestamp_Offset_CSR = Port_6_Timestamp_Offset_CSR_reg::type_id::create("Port_6_Timestamp_Offset_CSR");
         Port_6_Timestamp_Offset_CSR.configure(this);
         Port_6_Timestamp_Offset_CSR.build();

         Port_7_Timestamp_Offset_CSR = Port_7_Timestamp_Offset_CSR_reg::type_id::create("Port_7_Timestamp_Offset_CSR");
         Port_7_Timestamp_Offset_CSR.configure(this);
         Port_7_Timestamp_Offset_CSR.build();

         Port_8_Timestamp_Offset_CSR = Port_8_Timestamp_Offset_CSR_reg::type_id::create("Port_8_Timestamp_Offset_CSR");
         Port_8_Timestamp_Offset_CSR.configure(this);
         Port_8_Timestamp_Offset_CSR.build();

         Port_9_Timestamp_Offset_CSR = Port_9_Timestamp_Offset_CSR_reg::type_id::create("Port_9_Timestamp_Offset_CSR");
         Port_9_Timestamp_Offset_CSR.configure(this);
         Port_9_Timestamp_Offset_CSR.build();

         Port_10_Timestamp_Offset_CSR = Port_10_Timestamp_Offset_CSR_reg::type_id::create("Port_10_Timestamp_Offset_CSR");
         Port_10_Timestamp_Offset_CSR.configure(this);
         Port_10_Timestamp_Offset_CSR.build();

         Port_11_Timestamp_Offset_CSR = Port_11_Timestamp_Offset_CSR_reg::type_id::create("Port_11_Timestamp_Offset_CSR");
         Port_11_Timestamp_Offset_CSR.configure(this);
         Port_11_Timestamp_Offset_CSR.build();

         Port_12_Timestamp_Offset_CSR = Port_12_Timestamp_Offset_CSR_reg::type_id::create("Port_12_Timestamp_Offset_CSR");
         Port_12_Timestamp_Offset_CSR.configure(this);
         Port_12_Timestamp_Offset_CSR.build();

         Port_13_Timestamp_Offset_CSR = Port_13_Timestamp_Offset_CSR_reg::type_id::create("Port_13_Timestamp_Offset_CSR");
         Port_13_Timestamp_Offset_CSR.configure(this);
         Port_13_Timestamp_Offset_CSR.build();

         Port_14_Timestamp_Offset_CSR = Port_14_Timestamp_Offset_CSR_reg::type_id::create("Port_14_Timestamp_Offset_CSR");
         Port_14_Timestamp_Offset_CSR.configure(this);
         Port_14_Timestamp_Offset_CSR.build();

         Port_15_Timestamp_Offset_CSR = Port_15_Timestamp_Offset_CSR_reg::type_id::create("Port_15_Timestamp_Offset_CSR");
         Port_15_Timestamp_Offset_CSR.configure(this);
         Port_15_Timestamp_Offset_CSR.build();

         LP_Serial_VC_Register_Block_Header = LP_Serial_VC_Register_Block_Header_reg::type_id::create("LP_Serial_VC_Register_Block_Header");
         LP_Serial_VC_Register_Block_Header.configure(this);
         LP_Serial_VC_Register_Block_Header.build();

         Port_0_VoQ_Control_Status_Register = Port_0_VoQ_Control_Status_Register_reg::type_id::create("Port_0_VoQ_Control_Status_Register");
         Port_0_VoQ_Control_Status_Register.configure(this);
         Port_0_VoQ_Control_Status_Register.build();

         Port_1_VoQ_Control_Status_Register = Port_1_VoQ_Control_Status_Register_reg::type_id::create("Port_1_VoQ_Control_Status_Register");
         Port_1_VoQ_Control_Status_Register.configure(this);
         Port_1_VoQ_Control_Status_Register.build();

         Port_2_VoQ_Control_Status_Register = Port_2_VoQ_Control_Status_Register_reg::type_id::create("Port_2_VoQ_Control_Status_Register");
         Port_2_VoQ_Control_Status_Register.configure(this);
         Port_2_VoQ_Control_Status_Register.build();

         Port_3_VoQ_Control_Status_Register = Port_3_VoQ_Control_Status_Register_reg::type_id::create("Port_3_VoQ_Control_Status_Register");
         Port_3_VoQ_Control_Status_Register.configure(this);
         Port_3_VoQ_Control_Status_Register.build();

         Port_4_VoQ_Control_Status_Register = Port_4_VoQ_Control_Status_Register_reg::type_id::create("Port_4_VoQ_Control_Status_Register");
         Port_4_VoQ_Control_Status_Register.configure(this);
         Port_4_VoQ_Control_Status_Register.build();

         Port_5_VoQ_Control_Status_Register = Port_5_VoQ_Control_Status_Register_reg::type_id::create("Port_5_VoQ_Control_Status_Register");
         Port_5_VoQ_Control_Status_Register.configure(this);
         Port_5_VoQ_Control_Status_Register.build();

         Port_6_VoQ_Control_Status_Register = Port_6_VoQ_Control_Status_Register_reg::type_id::create("Port_6_VoQ_Control_Status_Register");
         Port_6_VoQ_Control_Status_Register.configure(this);
         Port_6_VoQ_Control_Status_Register.build();

         Port_7_VoQ_Control_Status_Register = Port_7_VoQ_Control_Status_Register_reg::type_id::create("Port_7_VoQ_Control_Status_Register");
         Port_7_VoQ_Control_Status_Register.configure(this);
         Port_7_VoQ_Control_Status_Register.build();

         Port_8_VoQ_Control_Status_Register = Port_8_VoQ_Control_Status_Register_reg::type_id::create("Port_8_VoQ_Control_Status_Register");
         Port_8_VoQ_Control_Status_Register.configure(this);
         Port_8_VoQ_Control_Status_Register.build();

         Port_9_VoQ_Control_Status_Register = Port_9_VoQ_Control_Status_Register_reg::type_id::create("Port_9_VoQ_Control_Status_Register");
         Port_9_VoQ_Control_Status_Register.configure(this);
         Port_9_VoQ_Control_Status_Register.build();

         Port_10_VoQ_Control_Status_Register = Port_10_VoQ_Control_Status_Register_reg::type_id::create("Port_10_VoQ_Control_Status_Register");
         Port_10_VoQ_Control_Status_Register.configure(this);
         Port_10_VoQ_Control_Status_Register.build();

         Port_11_VoQ_Control_Status_Register = Port_11_VoQ_Control_Status_Register_reg::type_id::create("Port_11_VoQ_Control_Status_Register");
         Port_11_VoQ_Control_Status_Register.configure(this);
         Port_11_VoQ_Control_Status_Register.build();

         Port_12_VoQ_Control_Status_Register = Port_12_VoQ_Control_Status_Register_reg::type_id::create("Port_12_VoQ_Control_Status_Register");
         Port_12_VoQ_Control_Status_Register.configure(this);
         Port_12_VoQ_Control_Status_Register.build();

         Port_13_VoQ_Control_Status_Register = Port_13_VoQ_Control_Status_Register_reg::type_id::create("Port_13_VoQ_Control_Status_Register");
         Port_13_VoQ_Control_Status_Register.configure(this);
         Port_13_VoQ_Control_Status_Register.build();

         Port_14_VoQ_Control_Status_Register = Port_14_VoQ_Control_Status_Register_reg::type_id::create("Port_14_VoQ_Control_Status_Register");
         Port_14_VoQ_Control_Status_Register.configure(this);
         Port_14_VoQ_Control_Status_Register.build();

         Port_15_VoQ_Control_Status_Register = Port_15_VoQ_Control_Status_Register_reg::type_id::create("Port_15_VoQ_Control_Status_Register");
         Port_15_VoQ_Control_Status_Register.configure(this);
         Port_15_VoQ_Control_Status_Register.build();

         srio_reg_block_map = create_map("srio_reg_block_map", 'h0, 4, UVM_LITTLE_ENDIAN);
         default_map = srio_reg_block_map;

         srio_reg_block_map.add_reg(Device_Identity_CAR, 32'h00000000, "RO");
         srio_reg_block_map.add_reg(Device_Information_CAR, 32'h00000004, "RO");
         srio_reg_block_map.add_reg(Assembly_Identity_CAR, 32'h00000008, "RO");
         srio_reg_block_map.add_reg(Assembly_Information_CAR, 32'h0000000c, "RO");
         srio_reg_block_map.add_reg(Processing_Element_Features_CAR, 32'h00000010, "RO");
         srio_reg_block_map.add_reg(Switch_Port_Information_CAR, 32'h00000014, "RO");
         srio_reg_block_map.add_reg(Source_Operations_CAR, 32'h00000018, "RO");
         srio_reg_block_map.add_reg(Destination_Operations_CAR, 32'h0000001c, "RO");
         srio_reg_block_map.add_reg(Switch_Route_Table_Destination_ID_Limit_CAR, 32'h00000034, "RO");
         srio_reg_block_map.add_reg(Data_Streaming_Information_CAR, 32'h0000003c, "RO");
         srio_reg_block_map.add_reg(Data_Streaming_Logical_Layer_Control_CSR, 32'h00000048, "RW");
         srio_reg_block_map.add_reg(Processing_Element_Logical_Layer_Control_CSR, 32'h0000004c, "RW");
         srio_reg_block_map.add_reg(Local_Configuration_Space_Base_Address_0_CSR, 32'h00000058, "RW");
         srio_reg_block_map.add_reg(Local_Configuration_Space_Base_Address_1_CSR, 32'h0000005c, "RW");
         srio_reg_block_map.add_reg(Base_Device_ID_CSR, 32'h00000060, "RW");
         srio_reg_block_map.add_reg(Dev32_Base_Device_ID_CSR, 32'h00000064, "RW");
         srio_reg_block_map.add_reg(Host_Base_Device_ID_Lock_CSR, 32'h00000068, "RW");
         srio_reg_block_map.add_reg(Component_Tag_CSR, 32'h0000006c, "RW");
         srio_reg_block_map.add_reg(Standard_Route_Configuration_Destination_ID_Select_CSR, 32'h00000070, "RW");
         srio_reg_block_map.add_reg(Standard_Route_Configuration_Port_Select_CSR, 32'h00000074, "RW");
         srio_reg_block_map.add_reg(Standard_Route_Default_Port_CSR, 32'h00000078, "RW");
         srio_reg_block_map.add_reg(LP_Serial_Register_Block_Header, EXT1_BASE_ADDR+32'h00000000, "RO");
  if(brc3)
      begin
         srio_reg_block_map.add_reg(Port_Link_Timeout_Control_CSR, EXT1_BASE_ADDR+32'h00000020, "RW");
         srio_reg_block_map.add_reg(Port_Response_Timeout_Control_CSR, EXT1_BASE_ADDR+32'h00000024, "RW");
         srio_reg_block_map.add_reg(Port_General_Control_CSR, EXT1_BASE_ADDR+32'h0000003C, "RW");
         srio_reg_block_map.add_reg(Port_0_Link_Maintenance_Request_CSR, EXT1_BASE_ADDR+32'h00000040, "RW");
         srio_reg_block_map.add_reg(Port_1_Link_Maintenance_Request_CSR, EXT1_BASE_ADDR+32'h00000080, "RW");
         srio_reg_block_map.add_reg(Port_2_Link_Maintenance_Request_CSR, EXT1_BASE_ADDR+32'h000000C0, "RW");
         srio_reg_block_map.add_reg(Port_3_Link_Maintenance_Request_CSR, EXT1_BASE_ADDR+32'h00000100, "RW");
         srio_reg_block_map.add_reg(Port_4_Link_Maintenance_Request_CSR, EXT1_BASE_ADDR+32'h00000140, "RW");
         srio_reg_block_map.add_reg(Port_5_Link_Maintenance_Request_CSR, EXT1_BASE_ADDR+32'h00000180, "RW");
         srio_reg_block_map.add_reg(Port_6_Link_Maintenance_Request_CSR, EXT1_BASE_ADDR+32'h000001C0, "RW");
         srio_reg_block_map.add_reg(Port_7_Link_Maintenance_Request_CSR, EXT1_BASE_ADDR+32'h00000200, "RW");
         srio_reg_block_map.add_reg(Port_8_Link_Maintenance_Request_CSR, EXT1_BASE_ADDR+32'h00000240, "RW");
         srio_reg_block_map.add_reg(Port_9_Link_Maintenance_Request_CSR, EXT1_BASE_ADDR+32'h00000280, "RW");
         srio_reg_block_map.add_reg(Port_10_Link_Maintenance_Request_CSR, EXT1_BASE_ADDR+32'h000002C0, "RW");
         srio_reg_block_map.add_reg(Port_11_Link_Maintenance_Request_CSR, EXT1_BASE_ADDR+32'h00000300, "RW");
         srio_reg_block_map.add_reg(Port_12_Link_Maintenance_Request_CSR, EXT1_BASE_ADDR+32'h00000340, "RW");
         srio_reg_block_map.add_reg(Port_13_Link_Maintenance_Request_CSR, EXT1_BASE_ADDR+32'h00000380, "RW");
         srio_reg_block_map.add_reg(Port_14_Link_Maintenance_Request_CSR, EXT1_BASE_ADDR+32'h000003C0, "RW");
         srio_reg_block_map.add_reg(Port_15_Link_Maintenance_Request_CSR, EXT1_BASE_ADDR+32'h00000400, "RW");
         srio_reg_block_map.add_reg(Port_0_Link_Maintenance_Response_CSR, EXT1_BASE_ADDR+32'h00000044, "RO");
         srio_reg_block_map.add_reg(Port_1_Link_Maintenance_Response_CSR, EXT1_BASE_ADDR+32'h00000084, "RO");
         srio_reg_block_map.add_reg(Port_2_Link_Maintenance_Response_CSR, EXT1_BASE_ADDR+32'h000000C4, "RO");
         srio_reg_block_map.add_reg(Port_3_Link_Maintenance_Response_CSR, EXT1_BASE_ADDR+32'h00000104, "RO");
         srio_reg_block_map.add_reg(Port_4_Link_Maintenance_Response_CSR, EXT1_BASE_ADDR+32'h00000144, "RO");
         srio_reg_block_map.add_reg(Port_5_Link_Maintenance_Response_CSR, EXT1_BASE_ADDR+32'h00000184, "RO");
         srio_reg_block_map.add_reg(Port_6_Link_Maintenance_Response_CSR, EXT1_BASE_ADDR+32'h000001C4, "RO");
         srio_reg_block_map.add_reg(Port_7_Link_Maintenance_Response_CSR, EXT1_BASE_ADDR+32'h00000204, "RO");
         srio_reg_block_map.add_reg(Port_8_Link_Maintenance_Response_CSR, EXT1_BASE_ADDR+32'h00000244, "RO");
         srio_reg_block_map.add_reg(Port_9_Link_Maintenance_Response_CSR, EXT1_BASE_ADDR+32'h00000284, "RO");
         srio_reg_block_map.add_reg(Port_10_Link_Maintenance_Response_CSR, EXT1_BASE_ADDR+32'h000002C4, "RO");
         srio_reg_block_map.add_reg(Port_11_Link_Maintenance_Response_CSR, EXT1_BASE_ADDR+32'h00000304, "RO");
         srio_reg_block_map.add_reg(Port_12_Link_Maintenance_Response_CSR, EXT1_BASE_ADDR+32'h00000344, "RO");
         srio_reg_block_map.add_reg(Port_13_Link_Maintenance_Response_CSR, EXT1_BASE_ADDR+32'h00000384, "RO");
         srio_reg_block_map.add_reg(Port_14_Link_Maintenance_Response_CSR, EXT1_BASE_ADDR+32'h000003C4, "RO");
         srio_reg_block_map.add_reg(Port_15_Link_Maintenance_Response_CSR, EXT1_BASE_ADDR+32'h00000404, "RO");
         srio_reg_block_map.add_reg(Port_0_Local_ackID_CSR, EXT1_BASE_ADDR+32'h00000048, "RW");
         srio_reg_block_map.add_reg(Port_1_Local_ackID_CSR, EXT1_BASE_ADDR+32'h00000088, "RW");
         srio_reg_block_map.add_reg(Port_2_Local_ackID_CSR, EXT1_BASE_ADDR+32'h000000C8, "RW");
         srio_reg_block_map.add_reg(Port_3_Local_ackID_CSR, EXT1_BASE_ADDR+32'h00000108, "RW");
         srio_reg_block_map.add_reg(Port_4_Local_ackID_CSR, EXT1_BASE_ADDR+32'h00000148, "RW");
         srio_reg_block_map.add_reg(Port_5_Local_ackID_CSR, EXT1_BASE_ADDR+32'h00000188, "RW");
         srio_reg_block_map.add_reg(Port_6_Local_ackID_CSR, EXT1_BASE_ADDR+32'h000001C8, "RW");
         srio_reg_block_map.add_reg(Port_7_Local_ackID_CSR, EXT1_BASE_ADDR+32'h00000208, "RW");
         srio_reg_block_map.add_reg(Port_8_Local_ackID_CSR, EXT1_BASE_ADDR+32'h00000248, "RW");
         srio_reg_block_map.add_reg(Port_9_Local_ackID_CSR, EXT1_BASE_ADDR+32'h00000288, "RW");
         srio_reg_block_map.add_reg(Port_10_Local_ackID_CSR, EXT1_BASE_ADDR+32'h000002C8, "RW");
         srio_reg_block_map.add_reg(Port_11_Local_ackID_CSR, EXT1_BASE_ADDR+32'h00000308, "RW");
         srio_reg_block_map.add_reg(Port_12_Local_ackID_CSR, EXT1_BASE_ADDR+32'h00000348, "RW");
         srio_reg_block_map.add_reg(Port_13_Local_ackID_CSR, EXT1_BASE_ADDR+32'h00000388, "RW");
         srio_reg_block_map.add_reg(Port_14_Local_ackID_CSR, EXT1_BASE_ADDR+32'h000003C8, "RW");
         srio_reg_block_map.add_reg(Port_15_Local_ackID_CSR, EXT1_BASE_ADDR+32'h00000408, "RW");
         srio_reg_block_map.add_reg(Port_0_Initialization_Status_CSR, EXT1_BASE_ADDR+32'h0000004C, "RO");
         srio_reg_block_map.add_reg(Port_1_Initialization_Status_CSR, EXT1_BASE_ADDR+32'h0000008C, "RO");
         srio_reg_block_map.add_reg(Port_2_Initialization_Status_CSR, EXT1_BASE_ADDR+32'h000000CC, "RO");
         srio_reg_block_map.add_reg(Port_3_Initialization_Status_CSR, EXT1_BASE_ADDR+32'h0000010C, "RO");
         srio_reg_block_map.add_reg(Port_4_Initialization_Status_CSR, EXT1_BASE_ADDR+32'h0000014C, "RO");
         srio_reg_block_map.add_reg(Port_5_Initialization_Status_CSR, EXT1_BASE_ADDR+32'h0000018C, "RO");
         srio_reg_block_map.add_reg(Port_6_Initialization_Status_CSR, EXT1_BASE_ADDR+32'h000001CC, "RO");
         srio_reg_block_map.add_reg(Port_7_Initialization_Status_CSR, EXT1_BASE_ADDR+32'h0000020C, "RO");
         srio_reg_block_map.add_reg(Port_8_Initialization_Status_CSR, EXT1_BASE_ADDR+32'h0000024C, "RO");
         srio_reg_block_map.add_reg(Port_9_Initialization_Status_CSR, EXT1_BASE_ADDR+32'h0000028C, "RO");
         srio_reg_block_map.add_reg(Port_10_Initialization_Status_CSR, EXT1_BASE_ADDR+32'h000002CC, "RO");
         srio_reg_block_map.add_reg(Port_11_Initialization_Status_CSR, EXT1_BASE_ADDR+32'h0000030C, "RO");
         srio_reg_block_map.add_reg(Port_12_Initialization_Status_CSR, EXT1_BASE_ADDR+32'h0000034C, "RO");
         srio_reg_block_map.add_reg(Port_13_Initialization_Status_CSR, EXT1_BASE_ADDR+32'h0000038C, "RO");
         srio_reg_block_map.add_reg(Port_14_Initialization_Status_CSR, EXT1_BASE_ADDR+32'h000003CC, "RO");
         srio_reg_block_map.add_reg(Port_15_Initialization_Status_CSR, EXT1_BASE_ADDR+32'h0000040C, "RO");
         srio_reg_block_map.add_reg(Port_0_Control_2_CSR, EXT1_BASE_ADDR+32'h00000054, "RW");
         srio_reg_block_map.add_reg(Port_1_Control_2_CSR, EXT1_BASE_ADDR+32'h00000094, "RW");
         srio_reg_block_map.add_reg(Port_2_Control_2_CSR, EXT1_BASE_ADDR+32'h000000D4, "RW");
         srio_reg_block_map.add_reg(Port_3_Control_2_CSR, EXT1_BASE_ADDR+32'h00000114, "RW");
         srio_reg_block_map.add_reg(Port_4_Control_2_CSR, EXT1_BASE_ADDR+32'h00000154, "RW");
         srio_reg_block_map.add_reg(Port_5_Control_2_CSR, EXT1_BASE_ADDR+32'h00000194, "RW");
         srio_reg_block_map.add_reg(Port_6_Control_2_CSR, EXT1_BASE_ADDR+32'h000001D4, "RW");
         srio_reg_block_map.add_reg(Port_7_Control_2_CSR, EXT1_BASE_ADDR+32'h00000214, "RW");
         srio_reg_block_map.add_reg(Port_8_Control_2_CSR, EXT1_BASE_ADDR+32'h00000254, "RW");
         srio_reg_block_map.add_reg(Port_9_Control_2_CSR, EXT1_BASE_ADDR+32'h00000294, "RW");
         srio_reg_block_map.add_reg(Port_10_Control_2_CSR, EXT1_BASE_ADDR+32'h000002D4, "RW");
         srio_reg_block_map.add_reg(Port_11_Control_2_CSR, EXT1_BASE_ADDR+32'h00000314, "RW");
         srio_reg_block_map.add_reg(Port_12_Control_2_CSR, EXT1_BASE_ADDR+32'h00000354, "RW");
         srio_reg_block_map.add_reg(Port_13_Control_2_CSR, EXT1_BASE_ADDR+32'h00000394, "RW");
         srio_reg_block_map.add_reg(Port_14_Control_2_CSR, EXT1_BASE_ADDR+32'h000003D4, "RW");
         srio_reg_block_map.add_reg(Port_15_Control_2_CSR, EXT1_BASE_ADDR+32'h00000414, "RW");
         srio_reg_block_map.add_reg(Port_0_Error_and_Status_CSR, EXT1_BASE_ADDR+32'h00000058, "RW");
         srio_reg_block_map.add_reg(Port_1_Error_and_Status_CSR, EXT1_BASE_ADDR+32'h00000098, "RW");
         srio_reg_block_map.add_reg(Port_2_Error_and_Status_CSR, EXT1_BASE_ADDR+32'h000000D8, "RW");
         srio_reg_block_map.add_reg(Port_3_Error_and_Status_CSR, EXT1_BASE_ADDR+32'h00000118, "RW");
         srio_reg_block_map.add_reg(Port_4_Error_and_Status_CSR, EXT1_BASE_ADDR+32'h00000158, "RW");
         srio_reg_block_map.add_reg(Port_5_Error_and_Status_CSR, EXT1_BASE_ADDR+32'h00000198, "RW");
         srio_reg_block_map.add_reg(Port_6_Error_and_Status_CSR, EXT1_BASE_ADDR+32'h000001D8, "RW");
         srio_reg_block_map.add_reg(Port_7_Error_and_Status_CSR, EXT1_BASE_ADDR+32'h00000218, "RW");
         srio_reg_block_map.add_reg(Port_8_Error_and_Status_CSR, EXT1_BASE_ADDR+32'h00000258, "RW");
         srio_reg_block_map.add_reg(Port_9_Error_and_Status_CSR, EXT1_BASE_ADDR+32'h00000298, "RW");
         srio_reg_block_map.add_reg(Port_10_Error_and_Status_CSR, EXT1_BASE_ADDR+32'h000002D8, "RW");
         srio_reg_block_map.add_reg(Port_11_Error_and_Status_CSR, EXT1_BASE_ADDR+32'h00000318, "RW");
         srio_reg_block_map.add_reg(Port_12_Error_and_Status_CSR, EXT1_BASE_ADDR+32'h00000358, "RW");
         srio_reg_block_map.add_reg(Port_13_Error_and_Status_CSR, EXT1_BASE_ADDR+32'h00000398, "RW");
         srio_reg_block_map.add_reg(Port_14_Error_and_Status_CSR, EXT1_BASE_ADDR+32'h000003D8, "RW");
         srio_reg_block_map.add_reg(Port_15_Error_and_Status_CSR, EXT1_BASE_ADDR+32'h00000418, "RW");
         srio_reg_block_map.add_reg(Port_0_Control_CSR, EXT1_BASE_ADDR+32'h0000005C, "RW");
         srio_reg_block_map.add_reg(Port_1_Control_CSR, EXT1_BASE_ADDR+32'h0000009C, "RW");
         srio_reg_block_map.add_reg(Port_2_Control_CSR, EXT1_BASE_ADDR+32'h000000DC, "RW");
         srio_reg_block_map.add_reg(Port_3_Control_CSR, EXT1_BASE_ADDR+32'h0000011C, "RW");
         srio_reg_block_map.add_reg(Port_4_Control_CSR, EXT1_BASE_ADDR+32'h0000015C, "RW");
         srio_reg_block_map.add_reg(Port_5_Control_CSR, EXT1_BASE_ADDR+32'h0000019C, "RW");
         srio_reg_block_map.add_reg(Port_6_Control_CSR, EXT1_BASE_ADDR+32'h000001DC, "RW");
         srio_reg_block_map.add_reg(Port_7_Control_CSR, EXT1_BASE_ADDR+32'h0000021C, "RW");
         srio_reg_block_map.add_reg(Port_8_Control_CSR, EXT1_BASE_ADDR+32'h0000025C, "RW");
         srio_reg_block_map.add_reg(Port_9_Control_CSR, EXT1_BASE_ADDR+32'h0000029C, "RW");
         srio_reg_block_map.add_reg(Port_10_Control_CSR, EXT1_BASE_ADDR+32'h000002DC, "RW");
         srio_reg_block_map.add_reg(Port_11_Control_CSR, EXT1_BASE_ADDR+32'h0000031C, "RW");
         srio_reg_block_map.add_reg(Port_12_Control_CSR, EXT1_BASE_ADDR+32'h0000035C, "RW");
         srio_reg_block_map.add_reg(Port_13_Control_CSR, EXT1_BASE_ADDR+32'h0000039C, "RW");
         srio_reg_block_map.add_reg(Port_14_Control_CSR, EXT1_BASE_ADDR+32'h000003DC, "RW");
         srio_reg_block_map.add_reg(Port_15_Control_CSR, EXT1_BASE_ADDR+32'h0000041C, "RW");
         srio_reg_block_map.add_reg(Port_0_Outbound_ackID_CSR, EXT1_BASE_ADDR+32'h00000060, "RW");
         srio_reg_block_map.add_reg(Port_1_Outbound_ackID_CSR, EXT1_BASE_ADDR+32'h000000A0, "RW");
         srio_reg_block_map.add_reg(Port_2_Outbound_ackID_CSR, EXT1_BASE_ADDR+32'h000000E0, "RW");
         srio_reg_block_map.add_reg(Port_3_Outbound_ackID_CSR, EXT1_BASE_ADDR+32'h00000120, "RW");
         srio_reg_block_map.add_reg(Port_4_Outbound_ackID_CSR, EXT1_BASE_ADDR+32'h00000160, "RW");
         srio_reg_block_map.add_reg(Port_5_Outbound_ackID_CSR, EXT1_BASE_ADDR+32'h000001A0, "RW");
         srio_reg_block_map.add_reg(Port_6_Outbound_ackID_CSR, EXT1_BASE_ADDR+32'h000001E0, "RW");
         srio_reg_block_map.add_reg(Port_7_Outbound_ackID_CSR, EXT1_BASE_ADDR+32'h00000220, "RW");
         srio_reg_block_map.add_reg(Port_8_Outbound_ackID_CSR, EXT1_BASE_ADDR+32'h00000260, "RW");
         srio_reg_block_map.add_reg(Port_9_Outbound_ackID_CSR, EXT1_BASE_ADDR+32'h000002A0, "RW");
         srio_reg_block_map.add_reg(Port_10_Outbound_ackID_CSR, EXT1_BASE_ADDR+32'h000002E0, "RW");
         srio_reg_block_map.add_reg(Port_11_Outbound_ackID_CSR, EXT1_BASE_ADDR+32'h00000320, "RW");
         srio_reg_block_map.add_reg(Port_12_Outbound_ackID_CSR, EXT1_BASE_ADDR+32'h00000360, "RW");
         srio_reg_block_map.add_reg(Port_13_Outbound_ackID_CSR, EXT1_BASE_ADDR+32'h000003A0, "RW");
         srio_reg_block_map.add_reg(Port_14_Outbound_ackID_CSR, EXT1_BASE_ADDR+32'h000003E0, "RW");
         srio_reg_block_map.add_reg(Port_15_Outbound_ackID_CSR, EXT1_BASE_ADDR+32'h00000420, "RW");
         srio_reg_block_map.add_reg(Port_0_Inbound_ackID_CSR, EXT1_BASE_ADDR+32'h00000064, "RW");
         srio_reg_block_map.add_reg(Port_1_Inbound_ackID_CSR, EXT1_BASE_ADDR+32'h000000A4, "RW");
         srio_reg_block_map.add_reg(Port_2_Inbound_ackID_CSR, EXT1_BASE_ADDR+32'h000000E4, "RW");
         srio_reg_block_map.add_reg(Port_3_Inbound_ackID_CSR, EXT1_BASE_ADDR+32'h00000124, "RW");
         srio_reg_block_map.add_reg(Port_4_Inbound_ackID_CSR, EXT1_BASE_ADDR+32'h00000164, "RW");
         srio_reg_block_map.add_reg(Port_5_Inbound_ackID_CSR, EXT1_BASE_ADDR+32'h000001A4, "RW");
         srio_reg_block_map.add_reg(Port_6_Inbound_ackID_CSR, EXT1_BASE_ADDR+32'h000001E4, "RW");
         srio_reg_block_map.add_reg(Port_7_Inbound_ackID_CSR, EXT1_BASE_ADDR+32'h00000224, "RW");
         srio_reg_block_map.add_reg(Port_8_Inbound_ackID_CSR, EXT1_BASE_ADDR+32'h00000264, "RW");
         srio_reg_block_map.add_reg(Port_9_Inbound_ackID_CSR, EXT1_BASE_ADDR+32'h000002A4, "RW");
         srio_reg_block_map.add_reg(Port_10_Inbound_ackID_CSR, EXT1_BASE_ADDR+32'h000002E4, "RW");
         srio_reg_block_map.add_reg(Port_11_Inbound_ackID_CSR, EXT1_BASE_ADDR+32'h00000324, "RW");
         srio_reg_block_map.add_reg(Port_12_Inbound_ackID_CSR, EXT1_BASE_ADDR+32'h00000364, "RW");
         srio_reg_block_map.add_reg(Port_13_Inbound_ackID_CSR, EXT1_BASE_ADDR+32'h000003A4, "RW");
         srio_reg_block_map.add_reg(Port_14_Inbound_ackID_CSR, EXT1_BASE_ADDR+32'h000003E4, "RW");
         srio_reg_block_map.add_reg(Port_15_Inbound_ackID_CSR, EXT1_BASE_ADDR+32'h00000424, "RW");
         srio_reg_block_map.add_reg(Port_0_Power_Management_CSR, EXT1_BASE_ADDR+32'h00000068, "RW");
         srio_reg_block_map.add_reg(Port_1_Power_Management_CSR, EXT1_BASE_ADDR+32'h000000A8, "RW");
         srio_reg_block_map.add_reg(Port_2_Power_Management_CSR, EXT1_BASE_ADDR+32'h000000E8, "RW");
         srio_reg_block_map.add_reg(Port_3_Power_Management_CSR, EXT1_BASE_ADDR+32'h00000128, "RW");
         srio_reg_block_map.add_reg(Port_4_Power_Management_CSR, EXT1_BASE_ADDR+32'h00000168, "RW");
         srio_reg_block_map.add_reg(Port_5_Power_Management_CSR, EXT1_BASE_ADDR+32'h000001A8, "RW");
         srio_reg_block_map.add_reg(Port_6_Power_Management_CSR, EXT1_BASE_ADDR+32'h000001E8, "RW");
         srio_reg_block_map.add_reg(Port_7_Power_Management_CSR, EXT1_BASE_ADDR+32'h00000228, "RW");
         srio_reg_block_map.add_reg(Port_8_Power_Management_CSR, EXT1_BASE_ADDR+32'h00000268, "RW");
         srio_reg_block_map.add_reg(Port_9_Power_Management_CSR, EXT1_BASE_ADDR+32'h000002A8, "RW");
         srio_reg_block_map.add_reg(Port_10_Power_Management_CSR, EXT1_BASE_ADDR+32'h000002E8, "RW");
         srio_reg_block_map.add_reg(Port_11_Power_Management_CSR, EXT1_BASE_ADDR+32'h00000328, "RW");
         srio_reg_block_map.add_reg(Port_12_Power_Management_CSR, EXT1_BASE_ADDR+32'h00000368, "RW");
         srio_reg_block_map.add_reg(Port_13_Power_Management_CSR, EXT1_BASE_ADDR+32'h000003A8, "RW");
         srio_reg_block_map.add_reg(Port_14_Power_Management_CSR, EXT1_BASE_ADDR+32'h000003E8, "RW");
         srio_reg_block_map.add_reg(Port_15_Power_Management_CSR, EXT1_BASE_ADDR+32'h00000428, "RW");
         srio_reg_block_map.add_reg(Port_0_Latency_Optimization_CSR, EXT1_BASE_ADDR+32'h0000006C, "RW");
         srio_reg_block_map.add_reg(Port_1_Latency_Optimization_CSR, EXT1_BASE_ADDR+32'h000000AC, "RW");
         srio_reg_block_map.add_reg(Port_2_Latency_Optimization_CSR, EXT1_BASE_ADDR+32'h000000EC, "RW");
         srio_reg_block_map.add_reg(Port_3_Latency_Optimization_CSR, EXT1_BASE_ADDR+32'h0000012C, "RW");
         srio_reg_block_map.add_reg(Port_4_Latency_Optimization_CSR, EXT1_BASE_ADDR+32'h0000016C, "RW");
         srio_reg_block_map.add_reg(Port_5_Latency_Optimization_CSR, EXT1_BASE_ADDR+32'h000001AC, "RW");
         srio_reg_block_map.add_reg(Port_6_Latency_Optimization_CSR, EXT1_BASE_ADDR+32'h000001EC, "RW");
         srio_reg_block_map.add_reg(Port_7_Latency_Optimization_CSR, EXT1_BASE_ADDR+32'h0000022C, "RW");
         srio_reg_block_map.add_reg(Port_8_Latency_Optimization_CSR, EXT1_BASE_ADDR+32'h0000026C, "RW");
         srio_reg_block_map.add_reg(Port_9_Latency_Optimization_CSR, EXT1_BASE_ADDR+32'h000002AC, "RW");
         srio_reg_block_map.add_reg(Port_10_Latency_Optimization_CSR, EXT1_BASE_ADDR+32'h000002EC, "RW");
         srio_reg_block_map.add_reg(Port_11_Latency_Optimization_CSR, EXT1_BASE_ADDR+32'h0000032C, "RW");
         srio_reg_block_map.add_reg(Port_12_Latency_Optimization_CSR, EXT1_BASE_ADDR+32'h0000036C, "RW");
         srio_reg_block_map.add_reg(Port_13_Latency_Optimization_CSR, EXT1_BASE_ADDR+32'h000003AC, "RW");
         srio_reg_block_map.add_reg(Port_14_Latency_Optimization_CSR, EXT1_BASE_ADDR+32'h000003EC, "RW");
         srio_reg_block_map.add_reg(Port_15_Latency_Optimization_CSR, EXT1_BASE_ADDR+32'h0000042C, "RW");
         srio_reg_block_map.add_reg(Port_0_Link_Timers_Control_CSR, EXT1_BASE_ADDR+32'h00000070, "RW");
         srio_reg_block_map.add_reg(Port_1_Link_Timers_Control_CSR, EXT1_BASE_ADDR+32'h000000B0, "RW");
         srio_reg_block_map.add_reg(Port_2_Link_Timers_Control_CSR, EXT1_BASE_ADDR+32'h000000F0, "RW");
         srio_reg_block_map.add_reg(Port_3_Link_Timers_Control_CSR, EXT1_BASE_ADDR+32'h00000130, "RW");
         srio_reg_block_map.add_reg(Port_4_Link_Timers_Control_CSR, EXT1_BASE_ADDR+32'h00000170, "RW");
         srio_reg_block_map.add_reg(Port_5_Link_Timers_Control_CSR, EXT1_BASE_ADDR+32'h000001B0, "RW");
         srio_reg_block_map.add_reg(Port_6_Link_Timers_Control_CSR, EXT1_BASE_ADDR+32'h000001F0, "RW");
         srio_reg_block_map.add_reg(Port_7_Link_Timers_Control_CSR, EXT1_BASE_ADDR+32'h00000230, "RW");
         srio_reg_block_map.add_reg(Port_8_Link_Timers_Control_CSR, EXT1_BASE_ADDR+32'h00000270, "RW");
         srio_reg_block_map.add_reg(Port_9_Link_Timers_Control_CSR, EXT1_BASE_ADDR+32'h000002B0, "RW");
         srio_reg_block_map.add_reg(Port_10_Link_Timers_Control_CSR, EXT1_BASE_ADDR+32'h000002F0, "RW");
         srio_reg_block_map.add_reg(Port_11_Link_Timers_Control_CSR, EXT1_BASE_ADDR+32'h00000330, "RW");
         srio_reg_block_map.add_reg(Port_12_Link_Timers_Control_CSR, EXT1_BASE_ADDR+32'h00000370, "RW");
         srio_reg_block_map.add_reg(Port_13_Link_Timers_Control_CSR, EXT1_BASE_ADDR+32'h000003B0, "RW");
         srio_reg_block_map.add_reg(Port_14_Link_Timers_Control_CSR, EXT1_BASE_ADDR+32'h000003F0, "RW");
         srio_reg_block_map.add_reg(Port_15_Link_Timers_Control_CSR, EXT1_BASE_ADDR+32'h00000430, "RW");
         srio_reg_block_map.add_reg(Port_0_Link_Timers_Control_2_CSR, EXT1_BASE_ADDR+32'h00000074, "RW");
         srio_reg_block_map.add_reg(Port_1_Link_Timers_Control_2_CSR, EXT1_BASE_ADDR+32'h000000B4, "RW");
         srio_reg_block_map.add_reg(Port_2_Link_Timers_Control_2_CSR, EXT1_BASE_ADDR+32'h000000F4, "RW");
         srio_reg_block_map.add_reg(Port_3_Link_Timers_Control_2_CSR, EXT1_BASE_ADDR+32'h00000134, "RW");
         srio_reg_block_map.add_reg(Port_4_Link_Timers_Control_2_CSR, EXT1_BASE_ADDR+32'h00000174, "RW");
         srio_reg_block_map.add_reg(Port_5_Link_Timers_Control_2_CSR, EXT1_BASE_ADDR+32'h000001B4, "RW");
         srio_reg_block_map.add_reg(Port_6_Link_Timers_Control_2_CSR, EXT1_BASE_ADDR+32'h000001F4, "RW");
         srio_reg_block_map.add_reg(Port_7_Link_Timers_Control_2_CSR, EXT1_BASE_ADDR+32'h00000234, "RW");
         srio_reg_block_map.add_reg(Port_8_Link_Timers_Control_2_CSR, EXT1_BASE_ADDR+32'h00000274, "RW");
         srio_reg_block_map.add_reg(Port_9_Link_Timers_Control_2_CSR, EXT1_BASE_ADDR+32'h000002B4, "RW");
         srio_reg_block_map.add_reg(Port_10_Link_Timers_Control_2_CSR, EXT1_BASE_ADDR+32'h000002F4, "RW");
         srio_reg_block_map.add_reg(Port_11_Link_Timers_Control_2_CSR, EXT1_BASE_ADDR+32'h00000334, "RW");
         srio_reg_block_map.add_reg(Port_12_Link_Timers_Control_2_CSR, EXT1_BASE_ADDR+32'h00000374, "RW");
         srio_reg_block_map.add_reg(Port_13_Link_Timers_Control_2_CSR, EXT1_BASE_ADDR+32'h000003B4, "RW");
         srio_reg_block_map.add_reg(Port_14_Link_Timers_Control_2_CSR, EXT1_BASE_ADDR+32'h000003F4, "RW");
         srio_reg_block_map.add_reg(Port_15_Link_Timers_Control_2_CSR, EXT1_BASE_ADDR+32'h00000434, "RW");
         srio_reg_block_map.add_reg(Port_0_Link_Timers_Control_3_CSR, EXT1_BASE_ADDR+32'h00000078, "RW");
         srio_reg_block_map.add_reg(Port_1_Link_Timers_Control_3_CSR, EXT1_BASE_ADDR+32'h000000B8, "RW");
         srio_reg_block_map.add_reg(Port_2_Link_Timers_Control_3_CSR, EXT1_BASE_ADDR+32'h000000F8, "RW");
         srio_reg_block_map.add_reg(Port_3_Link_Timers_Control_3_CSR, EXT1_BASE_ADDR+32'h00000138, "RW");
         srio_reg_block_map.add_reg(Port_4_Link_Timers_Control_3_CSR, EXT1_BASE_ADDR+32'h00000178, "RW");
         srio_reg_block_map.add_reg(Port_5_Link_Timers_Control_3_CSR, EXT1_BASE_ADDR+32'h000001B8, "RW");
         srio_reg_block_map.add_reg(Port_6_Link_Timers_Control_3_CSR, EXT1_BASE_ADDR+32'h000001F8, "RW");
         srio_reg_block_map.add_reg(Port_7_Link_Timers_Control_3_CSR, EXT1_BASE_ADDR+32'h00000238, "RW");
         srio_reg_block_map.add_reg(Port_8_Link_Timers_Control_3_CSR, EXT1_BASE_ADDR+32'h00000278, "RW");
         srio_reg_block_map.add_reg(Port_9_Link_Timers_Control_3_CSR, EXT1_BASE_ADDR+32'h000002B8, "RW");
         srio_reg_block_map.add_reg(Port_10_Link_Timers_Control_3_CSR, EXT1_BASE_ADDR+32'h000002F8, "RW");
         srio_reg_block_map.add_reg(Port_11_Link_Timers_Control_3_CSR, EXT1_BASE_ADDR+32'h00000338, "RW");
         srio_reg_block_map.add_reg(Port_12_Link_Timers_Control_3_CSR, EXT1_BASE_ADDR+32'h00000378, "RW");
         srio_reg_block_map.add_reg(Port_13_Link_Timers_Control_3_CSR, EXT1_BASE_ADDR+32'h000003B8, "RW");
         srio_reg_block_map.add_reg(Port_14_Link_Timers_Control_3_CSR, EXT1_BASE_ADDR+32'h000003F8, "RW");
         srio_reg_block_map.add_reg(Port_15_Link_Timers_Control_3_CSR, EXT1_BASE_ADDR+32'h00000438, "RW");
    end
  else
    begin
         srio_reg_block_map.add_reg(Port_Link_Timeout_Control_CSR, EXT1_BASE_ADDR+32'h00000020, "RW");
         srio_reg_block_map.add_reg(Port_Response_Timeout_Control_CSR, EXT1_BASE_ADDR+32'h00000024, "RW");
         srio_reg_block_map.add_reg(Port_General_Control_CSR, EXT1_BASE_ADDR+32'h0000003C, "RW");
         srio_reg_block_map.add_reg(Port_0_Link_Maintenance_Request_CSR, EXT1_BASE_ADDR+32'h00000040, "RW");
         srio_reg_block_map.add_reg(Port_1_Link_Maintenance_Request_CSR, EXT1_BASE_ADDR+32'h00000060, "RW");
         srio_reg_block_map.add_reg(Port_2_Link_Maintenance_Request_CSR, EXT1_BASE_ADDR+32'h00000080, "RW");
         srio_reg_block_map.add_reg(Port_3_Link_Maintenance_Request_CSR, EXT1_BASE_ADDR+32'h000000A0, "RW");
         srio_reg_block_map.add_reg(Port_4_Link_Maintenance_Request_CSR, EXT1_BASE_ADDR+32'h000000C0, "RW");
         srio_reg_block_map.add_reg(Port_5_Link_Maintenance_Request_CSR, EXT1_BASE_ADDR+32'h000000E0, "RW");
         srio_reg_block_map.add_reg(Port_6_Link_Maintenance_Request_CSR, EXT1_BASE_ADDR+32'h00000100, "RW");
         srio_reg_block_map.add_reg(Port_7_Link_Maintenance_Request_CSR, EXT1_BASE_ADDR+32'h00000120, "RW");
         srio_reg_block_map.add_reg(Port_8_Link_Maintenance_Request_CSR, EXT1_BASE_ADDR+32'h00000140, "RW");
         srio_reg_block_map.add_reg(Port_9_Link_Maintenance_Request_CSR, EXT1_BASE_ADDR+32'h00000160, "RW");
         srio_reg_block_map.add_reg(Port_10_Link_Maintenance_Request_CSR, EXT1_BASE_ADDR+32'h00000180, "RW");
         srio_reg_block_map.add_reg(Port_11_Link_Maintenance_Request_CSR, EXT1_BASE_ADDR+32'h000001A0, "RW");
         srio_reg_block_map.add_reg(Port_12_Link_Maintenance_Request_CSR, EXT1_BASE_ADDR+32'h000001C0, "RW");
         srio_reg_block_map.add_reg(Port_13_Link_Maintenance_Request_CSR, EXT1_BASE_ADDR+32'h000001E0, "RW");
         srio_reg_block_map.add_reg(Port_14_Link_Maintenance_Request_CSR, EXT1_BASE_ADDR+32'h00000200, "RW");
         srio_reg_block_map.add_reg(Port_15_Link_Maintenance_Request_CSR, EXT1_BASE_ADDR+32'h00000220, "RW");
         srio_reg_block_map.add_reg(Port_0_Link_Maintenance_Response_CSR, EXT1_BASE_ADDR+32'h00000044, "RO");
         srio_reg_block_map.add_reg(Port_1_Link_Maintenance_Response_CSR, EXT1_BASE_ADDR+32'h00000064, "RO");
         srio_reg_block_map.add_reg(Port_2_Link_Maintenance_Response_CSR, EXT1_BASE_ADDR+32'h00000084, "RO");
         srio_reg_block_map.add_reg(Port_3_Link_Maintenance_Response_CSR, EXT1_BASE_ADDR+32'h000000A4, "RO");
         srio_reg_block_map.add_reg(Port_4_Link_Maintenance_Response_CSR, EXT1_BASE_ADDR+32'h000000C4, "RO");
         srio_reg_block_map.add_reg(Port_5_Link_Maintenance_Response_CSR, EXT1_BASE_ADDR+32'h000000E4, "RO");
         srio_reg_block_map.add_reg(Port_6_Link_Maintenance_Response_CSR, EXT1_BASE_ADDR+32'h00000104, "RO");
         srio_reg_block_map.add_reg(Port_7_Link_Maintenance_Response_CSR, EXT1_BASE_ADDR+32'h00000124, "RO");
         srio_reg_block_map.add_reg(Port_8_Link_Maintenance_Response_CSR, EXT1_BASE_ADDR+32'h00000144, "RO");
         srio_reg_block_map.add_reg(Port_9_Link_Maintenance_Response_CSR, EXT1_BASE_ADDR+32'h00000164, "RO");
         srio_reg_block_map.add_reg(Port_10_Link_Maintenance_Response_CSR, EXT1_BASE_ADDR+32'h00000184, "RO");
         srio_reg_block_map.add_reg(Port_11_Link_Maintenance_Response_CSR, EXT1_BASE_ADDR+32'h000001A4, "RO");
         srio_reg_block_map.add_reg(Port_12_Link_Maintenance_Response_CSR, EXT1_BASE_ADDR+32'h000001C4, "RO");
         srio_reg_block_map.add_reg(Port_13_Link_Maintenance_Response_CSR, EXT1_BASE_ADDR+32'h000001E4, "RO");
         srio_reg_block_map.add_reg(Port_14_Link_Maintenance_Response_CSR, EXT1_BASE_ADDR+32'h00000204, "RO");
         srio_reg_block_map.add_reg(Port_15_Link_Maintenance_Response_CSR, EXT1_BASE_ADDR+32'h00000224, "RO");
         srio_reg_block_map.add_reg(Port_0_Local_ackID_CSR, EXT1_BASE_ADDR+32'h00000048, "RW");
         srio_reg_block_map.add_reg(Port_1_Local_ackID_CSR, EXT1_BASE_ADDR+32'h00000068, "RW");
         srio_reg_block_map.add_reg(Port_2_Local_ackID_CSR, EXT1_BASE_ADDR+32'h00000088, "RW");
         srio_reg_block_map.add_reg(Port_3_Local_ackID_CSR, EXT1_BASE_ADDR+32'h000000A8, "RW");
         srio_reg_block_map.add_reg(Port_4_Local_ackID_CSR, EXT1_BASE_ADDR+32'h000000C8, "RW");
         srio_reg_block_map.add_reg(Port_5_Local_ackID_CSR, EXT1_BASE_ADDR+32'h000000E8, "RW");
         srio_reg_block_map.add_reg(Port_6_Local_ackID_CSR, EXT1_BASE_ADDR+32'h00000108, "RW");
         srio_reg_block_map.add_reg(Port_7_Local_ackID_CSR, EXT1_BASE_ADDR+32'h00000128, "RW");
         srio_reg_block_map.add_reg(Port_8_Local_ackID_CSR, EXT1_BASE_ADDR+32'h00000148, "RW");
         srio_reg_block_map.add_reg(Port_9_Local_ackID_CSR, EXT1_BASE_ADDR+32'h00000168, "RW");
         srio_reg_block_map.add_reg(Port_10_Local_ackID_CSR, EXT1_BASE_ADDR+32'h00000188, "RW");
         srio_reg_block_map.add_reg(Port_11_Local_ackID_CSR, EXT1_BASE_ADDR+32'h000001A8, "RW");
         srio_reg_block_map.add_reg(Port_12_Local_ackID_CSR, EXT1_BASE_ADDR+32'h000001C8, "RW");
         srio_reg_block_map.add_reg(Port_13_Local_ackID_CSR, EXT1_BASE_ADDR+32'h000001E8, "RW");
         srio_reg_block_map.add_reg(Port_14_Local_ackID_CSR, EXT1_BASE_ADDR+32'h00000208, "RW");
         srio_reg_block_map.add_reg(Port_15_Local_ackID_CSR, EXT1_BASE_ADDR+32'h00000228, "RW");
         srio_reg_block_map.add_reg(Port_0_Initialization_Status_CSR, EXT1_BASE_ADDR+32'h0000004C, "RO");
         srio_reg_block_map.add_reg(Port_1_Initialization_Status_CSR, EXT1_BASE_ADDR+32'h0000006C, "RO");
         srio_reg_block_map.add_reg(Port_2_Initialization_Status_CSR, EXT1_BASE_ADDR+32'h0000008C, "RO");
         srio_reg_block_map.add_reg(Port_3_Initialization_Status_CSR, EXT1_BASE_ADDR+32'h000000AC, "RO");
         srio_reg_block_map.add_reg(Port_4_Initialization_Status_CSR, EXT1_BASE_ADDR+32'h000000CC, "RO");
         srio_reg_block_map.add_reg(Port_5_Initialization_Status_CSR, EXT1_BASE_ADDR+32'h000000EC, "RO");
         srio_reg_block_map.add_reg(Port_6_Initialization_Status_CSR, EXT1_BASE_ADDR+32'h0000010C, "RO");
         srio_reg_block_map.add_reg(Port_7_Initialization_Status_CSR, EXT1_BASE_ADDR+32'h0000012C, "RO");
         srio_reg_block_map.add_reg(Port_8_Initialization_Status_CSR, EXT1_BASE_ADDR+32'h0000014C, "RO");
         srio_reg_block_map.add_reg(Port_9_Initialization_Status_CSR, EXT1_BASE_ADDR+32'h0000016C, "RO");
         srio_reg_block_map.add_reg(Port_10_Initialization_Status_CSR, EXT1_BASE_ADDR+32'h0000018C, "RO");
         srio_reg_block_map.add_reg(Port_11_Initialization_Status_CSR, EXT1_BASE_ADDR+32'h000001AC, "RO");
         srio_reg_block_map.add_reg(Port_12_Initialization_Status_CSR, EXT1_BASE_ADDR+32'h000001CC, "RO");
         srio_reg_block_map.add_reg(Port_13_Initialization_Status_CSR, EXT1_BASE_ADDR+32'h000001EC, "RO");
         srio_reg_block_map.add_reg(Port_14_Initialization_Status_CSR, EXT1_BASE_ADDR+32'h0000020C, "RO");
         srio_reg_block_map.add_reg(Port_15_Initialization_Status_CSR, EXT1_BASE_ADDR+32'h0000022C, "RO");
         srio_reg_block_map.add_reg(Port_0_Control_2_CSR, EXT1_BASE_ADDR+32'h00000054, "RW");
         srio_reg_block_map.add_reg(Port_1_Control_2_CSR, EXT1_BASE_ADDR+32'h00000074, "RW");
         srio_reg_block_map.add_reg(Port_2_Control_2_CSR, EXT1_BASE_ADDR+32'h00000094, "RW");
         srio_reg_block_map.add_reg(Port_3_Control_2_CSR, EXT1_BASE_ADDR+32'h000000B4, "RW");
         srio_reg_block_map.add_reg(Port_4_Control_2_CSR, EXT1_BASE_ADDR+32'h000000D4, "RW");
         srio_reg_block_map.add_reg(Port_5_Control_2_CSR, EXT1_BASE_ADDR+32'h000000F4, "RW");
         srio_reg_block_map.add_reg(Port_6_Control_2_CSR, EXT1_BASE_ADDR+32'h00000114, "RW");
         srio_reg_block_map.add_reg(Port_7_Control_2_CSR, EXT1_BASE_ADDR+32'h00000134, "RW");
         srio_reg_block_map.add_reg(Port_8_Control_2_CSR, EXT1_BASE_ADDR+32'h00000154, "RW");
         srio_reg_block_map.add_reg(Port_9_Control_2_CSR, EXT1_BASE_ADDR+32'h00000174, "RW");
         srio_reg_block_map.add_reg(Port_10_Control_2_CSR, EXT1_BASE_ADDR+32'h00000194, "RW");
         srio_reg_block_map.add_reg(Port_11_Control_2_CSR, EXT1_BASE_ADDR+32'h000001B4, "RW");
         srio_reg_block_map.add_reg(Port_12_Control_2_CSR, EXT1_BASE_ADDR+32'h000001D4, "RW");
         srio_reg_block_map.add_reg(Port_13_Control_2_CSR, EXT1_BASE_ADDR+32'h000001F4, "RW");
         srio_reg_block_map.add_reg(Port_14_Control_2_CSR, EXT1_BASE_ADDR+32'h00000214, "RW");
         srio_reg_block_map.add_reg(Port_15_Control_2_CSR, EXT1_BASE_ADDR+32'h00000234, "RW");
         srio_reg_block_map.add_reg(Port_0_Error_and_Status_CSR, EXT1_BASE_ADDR+32'h00000058, "RW");
         srio_reg_block_map.add_reg(Port_1_Error_and_Status_CSR, EXT1_BASE_ADDR+32'h00000078, "RW");
         srio_reg_block_map.add_reg(Port_2_Error_and_Status_CSR, EXT1_BASE_ADDR+32'h00000098, "RW");
         srio_reg_block_map.add_reg(Port_3_Error_and_Status_CSR, EXT1_BASE_ADDR+32'h000000B8, "RW");
         srio_reg_block_map.add_reg(Port_4_Error_and_Status_CSR, EXT1_BASE_ADDR+32'h000000D8, "RW");
         srio_reg_block_map.add_reg(Port_5_Error_and_Status_CSR, EXT1_BASE_ADDR+32'h000000F8, "RW");
         srio_reg_block_map.add_reg(Port_6_Error_and_Status_CSR, EXT1_BASE_ADDR+32'h00000118, "RW");
         srio_reg_block_map.add_reg(Port_7_Error_and_Status_CSR, EXT1_BASE_ADDR+32'h00000138, "RW");
         srio_reg_block_map.add_reg(Port_8_Error_and_Status_CSR, EXT1_BASE_ADDR+32'h00000158, "RW");
         srio_reg_block_map.add_reg(Port_9_Error_and_Status_CSR, EXT1_BASE_ADDR+32'h00000178, "RW");
         srio_reg_block_map.add_reg(Port_10_Error_and_Status_CSR, EXT1_BASE_ADDR+32'h00000198, "RW");
         srio_reg_block_map.add_reg(Port_11_Error_and_Status_CSR, EXT1_BASE_ADDR+32'h000001B8, "RW");
         srio_reg_block_map.add_reg(Port_12_Error_and_Status_CSR, EXT1_BASE_ADDR+32'h000001D8, "RW");
         srio_reg_block_map.add_reg(Port_13_Error_and_Status_CSR, EXT1_BASE_ADDR+32'h000001F8, "RW");
         srio_reg_block_map.add_reg(Port_14_Error_and_Status_CSR, EXT1_BASE_ADDR+32'h00000218, "RW");
         srio_reg_block_map.add_reg(Port_15_Error_and_Status_CSR, EXT1_BASE_ADDR+32'h00000238, "RW");
         srio_reg_block_map.add_reg(Port_0_Control_CSR, EXT1_BASE_ADDR+32'h0000005C, "RW");
         srio_reg_block_map.add_reg(Port_1_Control_CSR, EXT1_BASE_ADDR+32'h0000007C, "RW");
         srio_reg_block_map.add_reg(Port_2_Control_CSR, EXT1_BASE_ADDR+32'h0000009C, "RW");
         srio_reg_block_map.add_reg(Port_3_Control_CSR, EXT1_BASE_ADDR+32'h000000BC, "RW");
         srio_reg_block_map.add_reg(Port_4_Control_CSR, EXT1_BASE_ADDR+32'h000000DC, "RW");
         srio_reg_block_map.add_reg(Port_5_Control_CSR, EXT1_BASE_ADDR+32'h000000FC, "RW");
         srio_reg_block_map.add_reg(Port_6_Control_CSR, EXT1_BASE_ADDR+32'h0000011C, "RW");
         srio_reg_block_map.add_reg(Port_7_Control_CSR, EXT1_BASE_ADDR+32'h0000013C, "RW");
         srio_reg_block_map.add_reg(Port_8_Control_CSR, EXT1_BASE_ADDR+32'h0000015C, "RW");
         srio_reg_block_map.add_reg(Port_9_Control_CSR, EXT1_BASE_ADDR+32'h0000017C, "RW");
         srio_reg_block_map.add_reg(Port_10_Control_CSR, EXT1_BASE_ADDR+32'h0000019C, "RW");
         srio_reg_block_map.add_reg(Port_11_Control_CSR, EXT1_BASE_ADDR+32'h000001BC, "RW");
         srio_reg_block_map.add_reg(Port_12_Control_CSR, EXT1_BASE_ADDR+32'h000001DC, "RW");
         srio_reg_block_map.add_reg(Port_13_Control_CSR, EXT1_BASE_ADDR+32'h000001FC, "RW");
         srio_reg_block_map.add_reg(Port_14_Control_CSR, EXT1_BASE_ADDR+32'h0000021C, "RW");
         srio_reg_block_map.add_reg(Port_15_Control_CSR, EXT1_BASE_ADDR+32'h0000023C, "RW");
   end
         srio_reg_block_map.add_reg(LP_Serial_Lane_Register_Block_Header, EXT2_BASE_ADDR+32'h00000000, "RO");
         srio_reg_block_map.add_reg(Lane_0_Status_0_CSR, EXT2_BASE_ADDR+32'h00000010, "RO");
         srio_reg_block_map.add_reg(Lane_0_Status_1_CSR, EXT2_BASE_ADDR+32'h00000014, "RW");
         srio_reg_block_map.add_reg(Lane_0_Status_2_CSR, EXT2_BASE_ADDR+32'h00000018, "RO");
         srio_reg_block_map.add_reg(Lane_0_Status_3_CSR, EXT2_BASE_ADDR+32'h0000001C, "RO");
         srio_reg_block_map.add_reg(Lane_1_Status_0_CSR, EXT2_BASE_ADDR+32'h00000030, "RO");
         srio_reg_block_map.add_reg(Lane_1_Status_1_CSR, EXT2_BASE_ADDR+32'h00000034, "RW");
         srio_reg_block_map.add_reg(Lane_1_Status_2_CSR, EXT2_BASE_ADDR+32'h00000038, "RO");
         srio_reg_block_map.add_reg(Lane_1_Status_3_CSR, EXT2_BASE_ADDR+32'h0000003C, "RO");
         srio_reg_block_map.add_reg(Lane_2_Status_0_CSR, EXT2_BASE_ADDR+32'h00000050, "RO");
         srio_reg_block_map.add_reg(Lane_2_Status_1_CSR, EXT2_BASE_ADDR+32'h00000054, "RW");
         srio_reg_block_map.add_reg(Lane_2_Status_2_CSR, EXT2_BASE_ADDR+32'h00000058, "RO");
         srio_reg_block_map.add_reg(Lane_2_Status_3_CSR, EXT2_BASE_ADDR+32'h0000005C, "RO");
         srio_reg_block_map.add_reg(Lane_3_Status_0_CSR, EXT2_BASE_ADDR+32'h00000070, "RO");
         srio_reg_block_map.add_reg(Lane_3_Status_1_CSR, EXT2_BASE_ADDR+32'h00000074, "RW");
         srio_reg_block_map.add_reg(Lane_3_Status_2_CSR, EXT2_BASE_ADDR+32'h00000078, "RO");
         srio_reg_block_map.add_reg(Lane_3_Status_3_CSR, EXT2_BASE_ADDR+32'h0000007C, "RO");
         srio_reg_block_map.add_reg(Lane_4_Status_0_CSR, EXT2_BASE_ADDR+32'h00000090, "RO");
         srio_reg_block_map.add_reg(Lane_4_Status_1_CSR, EXT2_BASE_ADDR+32'h00000094, "RW");
         srio_reg_block_map.add_reg(Lane_4_Status_2_CSR, EXT2_BASE_ADDR+32'h00000098, "RO");
         srio_reg_block_map.add_reg(Lane_4_Status_3_CSR, EXT2_BASE_ADDR+32'h0000009C, "RO");
         srio_reg_block_map.add_reg(Lane_5_Status_0_CSR, EXT2_BASE_ADDR+32'h000000B0, "RO");
         srio_reg_block_map.add_reg(Lane_5_Status_1_CSR, EXT2_BASE_ADDR+32'h000000B4, "RW");
         srio_reg_block_map.add_reg(Lane_5_Status_2_CSR, EXT2_BASE_ADDR+32'h000000B8, "RO");
         srio_reg_block_map.add_reg(Lane_5_Status_3_CSR, EXT2_BASE_ADDR+32'h000000BC, "RO");
         srio_reg_block_map.add_reg(Lane_6_Status_0_CSR, EXT2_BASE_ADDR+32'h000000D0, "RO");
         srio_reg_block_map.add_reg(Lane_6_Status_1_CSR, EXT2_BASE_ADDR+32'h000000D4, "RW");
         srio_reg_block_map.add_reg(Lane_6_Status_2_CSR, EXT2_BASE_ADDR+32'h000000D8, "RO");
         srio_reg_block_map.add_reg(Lane_6_Status_3_CSR, EXT2_BASE_ADDR+32'h000000DC, "RO");
         srio_reg_block_map.add_reg(Lane_7_Status_0_CSR, EXT2_BASE_ADDR+32'h000000F0, "RO");
         srio_reg_block_map.add_reg(Lane_7_Status_1_CSR, EXT2_BASE_ADDR+32'h000000F4, "RW");
         srio_reg_block_map.add_reg(Lane_7_Status_2_CSR, EXT2_BASE_ADDR+32'h000000F8, "RO");
         srio_reg_block_map.add_reg(Lane_7_Status_3_CSR, EXT2_BASE_ADDR+32'h000000FC, "RO");
         srio_reg_block_map.add_reg(Lane_8_Status_0_CSR, EXT2_BASE_ADDR+32'h00000110, "RO");
         srio_reg_block_map.add_reg(Lane_8_Status_1_CSR, EXT2_BASE_ADDR+32'h00000114, "RW");
         srio_reg_block_map.add_reg(Lane_8_Status_2_CSR, EXT2_BASE_ADDR+32'h00000118, "RO");
         srio_reg_block_map.add_reg(Lane_8_Status_3_CSR, EXT2_BASE_ADDR+32'h0000011C, "RO");
         srio_reg_block_map.add_reg(Lane_9_Status_0_CSR, EXT2_BASE_ADDR+32'h00000130, "RO");
         srio_reg_block_map.add_reg(Lane_9_Status_1_CSR, EXT2_BASE_ADDR+32'h00000134, "RW");
         srio_reg_block_map.add_reg(Lane_9_Status_2_CSR, EXT2_BASE_ADDR+32'h00000138, "RO");
         srio_reg_block_map.add_reg(Lane_9_Status_3_CSR, EXT2_BASE_ADDR+32'h0000013C, "RO");
         srio_reg_block_map.add_reg(Lane_10_Status_0_CSR, EXT2_BASE_ADDR+32'h00000150, "RO");
         srio_reg_block_map.add_reg(Lane_10_Status_1_CSR, EXT2_BASE_ADDR+32'h00000154, "RW");
         srio_reg_block_map.add_reg(Lane_10_Status_2_CSR, EXT2_BASE_ADDR+32'h00000158, "RO");
         srio_reg_block_map.add_reg(Lane_10_Status_3_CSR, EXT2_BASE_ADDR+32'h0000015C, "RO");
         srio_reg_block_map.add_reg(Lane_11_Status_0_CSR, EXT2_BASE_ADDR+32'h00000170, "RO");
         srio_reg_block_map.add_reg(Lane_11_Status_1_CSR, EXT2_BASE_ADDR+32'h00000174, "RW");
         srio_reg_block_map.add_reg(Lane_11_Status_2_CSR, EXT2_BASE_ADDR+32'h00000178, "RO");
         srio_reg_block_map.add_reg(Lane_11_Status_3_CSR, EXT2_BASE_ADDR+32'h0000017C, "RO");
         srio_reg_block_map.add_reg(Lane_12_Status_0_CSR, EXT2_BASE_ADDR+32'h00000190, "RO");
         srio_reg_block_map.add_reg(Lane_12_Status_1_CSR, EXT2_BASE_ADDR+32'h00000194, "RW");
         srio_reg_block_map.add_reg(Lane_12_Status_2_CSR, EXT2_BASE_ADDR+32'h00000198, "RO");
         srio_reg_block_map.add_reg(Lane_12_Status_3_CSR, EXT2_BASE_ADDR+32'h0000019C, "RO");
         srio_reg_block_map.add_reg(Lane_13_Status_0_CSR, EXT2_BASE_ADDR+32'h000001B0, "RO");
         srio_reg_block_map.add_reg(Lane_13_Status_1_CSR, EXT2_BASE_ADDR+32'h000001B4, "RW");
         srio_reg_block_map.add_reg(Lane_13_Status_2_CSR, EXT2_BASE_ADDR+32'h000001B8, "RO");
         srio_reg_block_map.add_reg(Lane_13_Status_3_CSR, EXT2_BASE_ADDR+32'h000001BC, "RO");
         srio_reg_block_map.add_reg(Lane_14_Status_0_CSR, EXT2_BASE_ADDR+32'h000001D0, "RO");
         srio_reg_block_map.add_reg(Lane_14_Status_1_CSR, EXT2_BASE_ADDR+32'h000001D4, "RW");
         srio_reg_block_map.add_reg(Lane_14_Status_2_CSR, EXT2_BASE_ADDR+32'h000001D8, "RO");
         srio_reg_block_map.add_reg(Lane_14_Status_3_CSR, EXT2_BASE_ADDR+32'h000001DC, "RO");
         srio_reg_block_map.add_reg(Lane_15_Status_0_CSR, EXT2_BASE_ADDR+32'h000001F0, "RO");
         srio_reg_block_map.add_reg(Lane_15_Status_1_CSR, EXT2_BASE_ADDR+32'h000001F4, "RW");
         srio_reg_block_map.add_reg(Lane_15_Status_2_CSR, EXT2_BASE_ADDR+32'h000001F8, "RO");
         srio_reg_block_map.add_reg(Lane_15_Status_3_CSR, EXT2_BASE_ADDR+32'h000001FC, "RO");
         srio_reg_block_map.add_reg(VC_Register_Block_Header, EXT4_BASE_ADDR+32'h00000000, "RO");
         srio_reg_block_map.add_reg(Port_0_VC_Control_and_Status_Register, EXT4_BASE_ADDR+32'h00000020, "RW");
         srio_reg_block_map.add_reg(Port_1_VC_Control_and_Status_Register, EXT4_BASE_ADDR+32'h00000040, "RW");
         srio_reg_block_map.add_reg(Port_2_VC_Control_and_Status_Register, EXT4_BASE_ADDR+32'h00000060, "RW");
         srio_reg_block_map.add_reg(Port_3_VC_Control_and_Status_Register, EXT4_BASE_ADDR+32'h00000080, "RW");
         srio_reg_block_map.add_reg(Port_4_VC_Control_and_Status_Register, EXT4_BASE_ADDR+32'h000000A0, "RW");
         srio_reg_block_map.add_reg(Port_5_VC_Control_and_Status_Register, EXT4_BASE_ADDR+32'h000000C0, "RW");
         srio_reg_block_map.add_reg(Port_6_VC_Control_and_Status_Register, EXT4_BASE_ADDR+32'h000000E0, "RW");
         srio_reg_block_map.add_reg(Port_7_VC_Control_and_Status_Register, EXT4_BASE_ADDR+32'h00000100, "RW");
         srio_reg_block_map.add_reg(Port_8_VC_Control_and_Status_Register, EXT4_BASE_ADDR+32'h00000120, "RW");
         srio_reg_block_map.add_reg(Port_9_VC_Control_and_Status_Register, EXT4_BASE_ADDR+32'h00000140, "RW");
         srio_reg_block_map.add_reg(Port_10_VC_Control_and_Status_Register, EXT4_BASE_ADDR+32'h00000160, "RW");
         srio_reg_block_map.add_reg(Port_11_VC_Control_and_Status_Register, EXT4_BASE_ADDR+32'h00000180, "RW");
         srio_reg_block_map.add_reg(Port_12_VC_Control_and_Status_Register, EXT4_BASE_ADDR+32'h000001A0, "RW");
         srio_reg_block_map.add_reg(Port_13_VC_Control_and_Status_Register, EXT4_BASE_ADDR+32'h000001C0, "RW");
         srio_reg_block_map.add_reg(Port_14_VC_Control_and_Status_Register, EXT4_BASE_ADDR+32'h000001E0, "RW");
         srio_reg_block_map.add_reg(Port_15_VC_Control_and_Status_Register, EXT4_BASE_ADDR+32'h00000200, "RW");
         srio_reg_block_map.add_reg(Port_0_VC0_BW_Allocation_Register, EXT4_BASE_ADDR+32'h00000024, "RW");
         srio_reg_block_map.add_reg(Port_1_VC0_BW_Allocation_Register, EXT4_BASE_ADDR+32'h00000044, "RW");
         srio_reg_block_map.add_reg(Port_2_VC0_BW_Allocation_Register, EXT4_BASE_ADDR+32'h00000064, "RW");
         srio_reg_block_map.add_reg(Port_3_VC0_BW_Allocation_Register, EXT4_BASE_ADDR+32'h00000084, "RW");
         srio_reg_block_map.add_reg(Port_4_VC0_BW_Allocation_Register, EXT4_BASE_ADDR+32'h000000A4, "RW");
         srio_reg_block_map.add_reg(Port_5_VC0_BW_Allocation_Register, EXT4_BASE_ADDR+32'h000000C4, "RW");
         srio_reg_block_map.add_reg(Port_6_VC0_BW_Allocation_Register, EXT4_BASE_ADDR+32'h000000E4, "RW");
         srio_reg_block_map.add_reg(Port_7_VC0_BW_Allocation_Register, EXT4_BASE_ADDR+32'h00000104, "RW");
         srio_reg_block_map.add_reg(Port_8_VC0_BW_Allocation_Register, EXT4_BASE_ADDR+32'h00000124, "RW");
         srio_reg_block_map.add_reg(Port_9_VC0_BW_Allocation_Register, EXT4_BASE_ADDR+32'h00000144, "RW");
         srio_reg_block_map.add_reg(Port_10_VC0_BW_Allocation_Register, EXT4_BASE_ADDR+32'h00000164, "RW");
         srio_reg_block_map.add_reg(Port_11_VC0_BW_Allocation_Register, EXT4_BASE_ADDR+32'h00000184, "RW");
         srio_reg_block_map.add_reg(Port_12_VC0_BW_Allocation_Register, EXT4_BASE_ADDR+32'h000001A4, "RW");
         srio_reg_block_map.add_reg(Port_13_VC0_BW_Allocation_Register, EXT4_BASE_ADDR+32'h000001C4, "RW");
         srio_reg_block_map.add_reg(Port_14_VC0_BW_Allocation_Register, EXT4_BASE_ADDR+32'h000001E4, "RW");
         srio_reg_block_map.add_reg(Port_15_VC0_BW_Allocation_Register, EXT4_BASE_ADDR+32'h00000204, "RW");
         srio_reg_block_map.add_reg(Port_0_VC5_VC1_BW_Allocation_Register, EXT4_BASE_ADDR+32'h00000028, "RW");
         srio_reg_block_map.add_reg(Port_1_VC5_VC1_BW_Allocation_Register, EXT4_BASE_ADDR+32'h00000048, "RW");
         srio_reg_block_map.add_reg(Port_2_VC5_VC1_BW_Allocation_Register, EXT4_BASE_ADDR+32'h00000068, "RW");
         srio_reg_block_map.add_reg(Port_3_VC5_VC1_BW_Allocation_Register, EXT4_BASE_ADDR+32'h00000088, "RW");
         srio_reg_block_map.add_reg(Port_4_VC5_VC1_BW_Allocation_Register, EXT4_BASE_ADDR+32'h000000A8, "RW");
         srio_reg_block_map.add_reg(Port_5_VC5_VC1_BW_Allocation_Register, EXT4_BASE_ADDR+32'h000000C8, "RW");
         srio_reg_block_map.add_reg(Port_6_VC5_VC1_BW_Allocation_Register, EXT4_BASE_ADDR+32'h000000E8, "RW");
         srio_reg_block_map.add_reg(Port_7_VC5_VC1_BW_Allocation_Register, EXT4_BASE_ADDR+32'h00000108, "RW");
         srio_reg_block_map.add_reg(Port_8_VC5_VC1_BW_Allocation_Register, EXT4_BASE_ADDR+32'h00000128, "RW");
         srio_reg_block_map.add_reg(Port_9_VC5_VC1_BW_Allocation_Register, EXT4_BASE_ADDR+32'h00000148, "RW");
         srio_reg_block_map.add_reg(Port_10_VC5_VC1_BW_Allocation_Register, EXT4_BASE_ADDR+32'h00000168, "RW");
         srio_reg_block_map.add_reg(Port_11_VC5_VC1_BW_Allocation_Register, EXT4_BASE_ADDR+32'h00000188, "RW");
         srio_reg_block_map.add_reg(Port_12_VC5_VC1_BW_Allocation_Register, EXT4_BASE_ADDR+32'h000001A8, "RW");
         srio_reg_block_map.add_reg(Port_13_VC5_VC1_BW_Allocation_Register, EXT4_BASE_ADDR+32'h000001C8, "RW");
         srio_reg_block_map.add_reg(Port_14_VC5_VC1_BW_Allocation_Register, EXT4_BASE_ADDR+32'h000001E8, "RW");
         srio_reg_block_map.add_reg(Port_15_VC5_VC1_BW_Allocation_Register, EXT4_BASE_ADDR+32'h00000208, "RW");
         srio_reg_block_map.add_reg(Port_0_VC7_VC3_BW_Allocation_Register, EXT4_BASE_ADDR+32'h0000002C, "RW");
         srio_reg_block_map.add_reg(Port_1_VC7_VC3_BW_Allocation_Register, EXT4_BASE_ADDR+32'h0000004C, "RW");
         srio_reg_block_map.add_reg(Port_2_VC7_VC3_BW_Allocation_Register, EXT4_BASE_ADDR+32'h0000006C, "RW");
         srio_reg_block_map.add_reg(Port_3_VC7_VC3_BW_Allocation_Register, EXT4_BASE_ADDR+32'h0000008C, "RW");
         srio_reg_block_map.add_reg(Port_4_VC7_VC3_BW_Allocation_Register, EXT4_BASE_ADDR+32'h000000AC, "RW");
         srio_reg_block_map.add_reg(Port_5_VC7_VC3_BW_Allocation_Register, EXT4_BASE_ADDR+32'h000000CC, "RW");
         srio_reg_block_map.add_reg(Port_6_VC7_VC3_BW_Allocation_Register, EXT4_BASE_ADDR+32'h000000EC, "RW");
         srio_reg_block_map.add_reg(Port_7_VC7_VC3_BW_Allocation_Register, EXT4_BASE_ADDR+32'h0000010C, "RW");
         srio_reg_block_map.add_reg(Port_8_VC7_VC3_BW_Allocation_Register, EXT4_BASE_ADDR+32'h0000012C, "RW");
         srio_reg_block_map.add_reg(Port_9_VC7_VC3_BW_Allocation_Register, EXT4_BASE_ADDR+32'h0000014C, "RW");
         srio_reg_block_map.add_reg(Port_10_VC7_VC3_BW_Allocation_Register, EXT4_BASE_ADDR+32'h0000016C, "RW");
         srio_reg_block_map.add_reg(Port_11_VC7_VC3_BW_Allocation_Register, EXT4_BASE_ADDR+32'h0000018C, "RW");
         srio_reg_block_map.add_reg(Port_12_VC7_VC3_BW_Allocation_Register, EXT4_BASE_ADDR+32'h000001AC, "RW");
         srio_reg_block_map.add_reg(Port_13_VC7_VC3_BW_Allocation_Register, EXT4_BASE_ADDR+32'h000001CC, "RW");
         srio_reg_block_map.add_reg(Port_14_VC7_VC3_BW_Allocation_Register, EXT4_BASE_ADDR+32'h000001EC, "RW");
         srio_reg_block_map.add_reg(Port_15_VC7_VC3_BW_Allocation_Register, EXT4_BASE_ADDR+32'h0000020C, "RW");
         srio_reg_block_map.add_reg(Port_0_VC6_VC2_BW_Allocation_Register, EXT4_BASE_ADDR+32'h00000030, "RW");
         srio_reg_block_map.add_reg(Port_1_VC6_VC2_BW_Allocation_Register, EXT4_BASE_ADDR+32'h00000050, "RW");
         srio_reg_block_map.add_reg(Port_2_VC6_VC2_BW_Allocation_Register, EXT4_BASE_ADDR+32'h00000070, "RW");
         srio_reg_block_map.add_reg(Port_3_VC6_VC2_BW_Allocation_Register, EXT4_BASE_ADDR+32'h00000090, "RW");
         srio_reg_block_map.add_reg(Port_4_VC6_VC2_BW_Allocation_Register, EXT4_BASE_ADDR+32'h000000B0, "RW");
         srio_reg_block_map.add_reg(Port_5_VC6_VC2_BW_Allocation_Register, EXT4_BASE_ADDR+32'h000000D0, "RW");
         srio_reg_block_map.add_reg(Port_6_VC6_VC2_BW_Allocation_Register, EXT4_BASE_ADDR+32'h000000F0, "RW");
         srio_reg_block_map.add_reg(Port_7_VC6_VC2_BW_Allocation_Register, EXT4_BASE_ADDR+32'h00000110, "RW");
         srio_reg_block_map.add_reg(Port_8_VC6_VC2_BW_Allocation_Register, EXT4_BASE_ADDR+32'h00000130, "RW");
         srio_reg_block_map.add_reg(Port_9_VC6_VC2_BW_Allocation_Register, EXT4_BASE_ADDR+32'h00000150, "RW");
         srio_reg_block_map.add_reg(Port_10_VC6_VC2_BW_Allocation_Register, EXT4_BASE_ADDR+32'h00000170, "RW");
         srio_reg_block_map.add_reg(Port_11_VC6_VC2_BW_Allocation_Register, EXT4_BASE_ADDR+32'h00000190, "RW");
         srio_reg_block_map.add_reg(Port_12_VC6_VC2_BW_Allocation_Register, EXT4_BASE_ADDR+32'h000001B0, "RW");
         srio_reg_block_map.add_reg(Port_13_VC6_VC2_BW_Allocation_Register, EXT4_BASE_ADDR+32'h000001D0, "RW");
         srio_reg_block_map.add_reg(Port_14_VC6_VC2_BW_Allocation_Register, EXT4_BASE_ADDR+32'h000001F0, "RW");
         srio_reg_block_map.add_reg(Port_15_VC6_VC2_BW_Allocation_Register, EXT4_BASE_ADDR+32'h00000210, "RW");
         srio_reg_block_map.add_reg(Port_0_VC8_VC4_BW_Allocation_Register, EXT4_BASE_ADDR+32'h00000034, "RW");
         srio_reg_block_map.add_reg(Port_1_VC8_VC4_BW_Allocation_Register, EXT4_BASE_ADDR+32'h00000054, "RW");
         srio_reg_block_map.add_reg(Port_2_VC8_VC4_BW_Allocation_Register, EXT4_BASE_ADDR+32'h00000074, "RW");
         srio_reg_block_map.add_reg(Port_3_VC8_VC4_BW_Allocation_Register, EXT4_BASE_ADDR+32'h00000094, "RW");
         srio_reg_block_map.add_reg(Port_4_VC8_VC4_BW_Allocation_Register, EXT4_BASE_ADDR+32'h000000B4, "RW");
         srio_reg_block_map.add_reg(Port_5_VC8_VC4_BW_Allocation_Register, EXT4_BASE_ADDR+32'h000000D4, "RW");
         srio_reg_block_map.add_reg(Port_6_VC8_VC4_BW_Allocation_Register, EXT4_BASE_ADDR+32'h000000F4, "RW");
         srio_reg_block_map.add_reg(Port_7_VC8_VC4_BW_Allocation_Register, EXT4_BASE_ADDR+32'h00000114, "RW");
         srio_reg_block_map.add_reg(Port_8_VC8_VC4_BW_Allocation_Register, EXT4_BASE_ADDR+32'h00000134, "RW");
         srio_reg_block_map.add_reg(Port_9_VC8_VC4_BW_Allocation_Register, EXT4_BASE_ADDR+32'h00000154, "RW");
         srio_reg_block_map.add_reg(Port_10_VC8_VC4_BW_Allocation_Register, EXT4_BASE_ADDR+32'h00000174, "RW");
         srio_reg_block_map.add_reg(Port_11_VC8_VC4_BW_Allocation_Register, EXT4_BASE_ADDR+32'h00000194, "RW");
         srio_reg_block_map.add_reg(Port_12_VC8_VC4_BW_Allocation_Register, EXT4_BASE_ADDR+32'h000001B4, "RW");
         srio_reg_block_map.add_reg(Port_13_VC8_VC4_BW_Allocation_Register, EXT4_BASE_ADDR+32'h000001D4, "RW");
         srio_reg_block_map.add_reg(Port_14_VC8_VC4_BW_Allocation_Register, EXT4_BASE_ADDR+32'h000001F4, "RW");
         srio_reg_block_map.add_reg(Port_15_VC8_VC4_BW_Allocation_Register, EXT4_BASE_ADDR+32'h00000214, "RW");
         srio_reg_block_map.add_reg(Error_Management_Extensions_Block_Header, EXT3_BASE_ADDR+32'h00000000, "RO");
         srio_reg_block_map.add_reg(Error_Management_Hot_Swap_Extensions_Block_CAR, EXT3_BASE_ADDR+32'h00000004, "RO");
         srio_reg_block_map.add_reg(Logical_Transport_Layer_Error_Detect_CSR, EXT3_BASE_ADDR+32'h00000008, "RW");
         srio_reg_block_map.add_reg(Logical_Transport_Layer_Error_Enable_CSR, EXT3_BASE_ADDR+32'h0000000C, "RW");
         srio_reg_block_map.add_reg(Logical_Transport_Layer_High_Address_Capture_CSR, EXT3_BASE_ADDR+32'h00000010, "RW");
         srio_reg_block_map.add_reg(Logical_Transport_Layer_Address_Capture_CSR, EXT3_BASE_ADDR+32'h00000014, "RW");
         srio_reg_block_map.add_reg(Logical_Transport_Layer_Device_ID_Capture_CSR, EXT3_BASE_ADDR+32'h00000018, "RW");
         srio_reg_block_map.add_reg(Logical_Transport_Layer_Control_Capture_CSR, EXT3_BASE_ADDR+32'h0000001C, "RW");
         srio_reg_block_map.add_reg(Logical_Transport_Layer_Dev32_Destination_ID_Capture_CSR, EXT3_BASE_ADDR+32'h00000020, "RO");
         srio_reg_block_map.add_reg(Logical_Transport_Layer_Dev32_Source_ID_Capture_CSR, EXT3_BASE_ADDR+32'h00000024, "RO");
         srio_reg_block_map.add_reg(Port_write_Target_deviceID_CSR, EXT3_BASE_ADDR+32'h00000028, "RW");
         srio_reg_block_map.add_reg(Packet_Time_to_live_CSR, EXT3_BASE_ADDR+32'h0000002C, "RW");
         srio_reg_block_map.add_reg(Port_Write_Dev32_Target_DeviceID_CSR, EXT3_BASE_ADDR+32'h00000030, "RW");
         srio_reg_block_map.add_reg(Port_Write_Transmission_Control_CSR, EXT3_BASE_ADDR+32'h00000034, "RW");
         srio_reg_block_map.add_reg(Port_0_Error_Detect_CSR, EXT3_BASE_ADDR+32'h00000040, "RW");
         srio_reg_block_map.add_reg(Port_1_Error_Detect_CSR, EXT3_BASE_ADDR+32'h00000080, "RW");
         srio_reg_block_map.add_reg(Port_2_Error_Detect_CSR, EXT3_BASE_ADDR+32'h000000C0, "RW");
         srio_reg_block_map.add_reg(Port_3_Error_Detect_CSR, EXT3_BASE_ADDR+32'h00000100, "RW");
         srio_reg_block_map.add_reg(Port_4_Error_Detect_CSR, EXT3_BASE_ADDR+32'h00000140, "RW");
         srio_reg_block_map.add_reg(Port_5_Error_Detect_CSR, EXT3_BASE_ADDR+32'h00000180, "RW");
         srio_reg_block_map.add_reg(Port_6_Error_Detect_CSR, EXT3_BASE_ADDR+32'h000001C0, "RW");
         srio_reg_block_map.add_reg(Port_7_Error_Detect_CSR, EXT3_BASE_ADDR+32'h00000200, "RW");
         srio_reg_block_map.add_reg(Port_8_Error_Detect_CSR, EXT3_BASE_ADDR+32'h00000240, "RW");
         srio_reg_block_map.add_reg(Port_9_Error_Detect_CSR, EXT3_BASE_ADDR+32'h00000280, "RW");
         srio_reg_block_map.add_reg(Port_10_Error_Detect_CSR, EXT3_BASE_ADDR+32'h000002C0, "RW");
         srio_reg_block_map.add_reg(Port_11_Error_Detect_CSR, EXT3_BASE_ADDR+32'h00000300, "RW");
         srio_reg_block_map.add_reg(Port_12_Error_Detect_CSR, EXT3_BASE_ADDR+32'h00000340, "RW");
         srio_reg_block_map.add_reg(Port_13_Error_Detect_CSR, EXT3_BASE_ADDR+32'h00000380, "RW");
         srio_reg_block_map.add_reg(Port_14_Error_Detect_CSR, EXT3_BASE_ADDR+32'h000003C0, "RW");
         srio_reg_block_map.add_reg(Port_15_Error_Detect_CSR, EXT3_BASE_ADDR+32'h00000400, "RW");
         srio_reg_block_map.add_reg(Port_0_Error_Rate_Enable_CSR, EXT3_BASE_ADDR+32'h00000044, "RW");
         srio_reg_block_map.add_reg(Port_1_Error_Rate_Enable_CSR, EXT3_BASE_ADDR+32'h00000084, "RW");
         srio_reg_block_map.add_reg(Port_2_Error_Rate_Enable_CSR, EXT3_BASE_ADDR+32'h000000C4, "RW");
         srio_reg_block_map.add_reg(Port_3_Error_Rate_Enable_CSR, EXT3_BASE_ADDR+32'h00000104, "RW");
         srio_reg_block_map.add_reg(Port_4_Error_Rate_Enable_CSR, EXT3_BASE_ADDR+32'h00000144, "RW");
         srio_reg_block_map.add_reg(Port_5_Error_Rate_Enable_CSR, EXT3_BASE_ADDR+32'h00000184, "RW");
         srio_reg_block_map.add_reg(Port_6_Error_Rate_Enable_CSR, EXT3_BASE_ADDR+32'h000001C4, "RW");
         srio_reg_block_map.add_reg(Port_7_Error_Rate_Enable_CSR, EXT3_BASE_ADDR+32'h00000204, "RW");
         srio_reg_block_map.add_reg(Port_8_Error_Rate_Enable_CSR, EXT3_BASE_ADDR+32'h00000244, "RW");
         srio_reg_block_map.add_reg(Port_9_Error_Rate_Enable_CSR, EXT3_BASE_ADDR+32'h00000284, "RW");
         srio_reg_block_map.add_reg(Port_10_Error_Rate_Enable_CSR, EXT3_BASE_ADDR+32'h000002C4, "RW");
         srio_reg_block_map.add_reg(Port_11_Error_Rate_Enable_CSR, EXT3_BASE_ADDR+32'h00000304, "RW");
         srio_reg_block_map.add_reg(Port_12_Error_Rate_Enable_CSR, EXT3_BASE_ADDR+32'h00000344, "RW");
         srio_reg_block_map.add_reg(Port_13_Error_Rate_Enable_CSR, EXT3_BASE_ADDR+32'h00000384, "RW");
         srio_reg_block_map.add_reg(Port_14_Error_Rate_Enable_CSR, EXT3_BASE_ADDR+32'h000003C4, "RW");
         srio_reg_block_map.add_reg(Port_15_Error_Rate_Enable_CSR, EXT3_BASE_ADDR+32'h00000404, "RW");
         srio_reg_block_map.add_reg(Port_0_Attributes_Capture_CSR, EXT3_BASE_ADDR+32'h00000048, "RW");
         srio_reg_block_map.add_reg(Port_1_Attributes_Capture_CSR, EXT3_BASE_ADDR+32'h00000088, "RW");
         srio_reg_block_map.add_reg(Port_2_Attributes_Capture_CSR, EXT3_BASE_ADDR+32'h000000C8, "RW");
         srio_reg_block_map.add_reg(Port_3_Attributes_Capture_CSR, EXT3_BASE_ADDR+32'h00000108, "RW");
         srio_reg_block_map.add_reg(Port_4_Attributes_Capture_CSR, EXT3_BASE_ADDR+32'h00000148, "RW");
         srio_reg_block_map.add_reg(Port_5_Attributes_Capture_CSR, EXT3_BASE_ADDR+32'h00000188, "RW");
         srio_reg_block_map.add_reg(Port_6_Attributes_Capture_CSR, EXT3_BASE_ADDR+32'h000001C8, "RW");
         srio_reg_block_map.add_reg(Port_7_Attributes_Capture_CSR, EXT3_BASE_ADDR+32'h00000208, "RW");
         srio_reg_block_map.add_reg(Port_8_Attributes_Capture_CSR, EXT3_BASE_ADDR+32'h00000248, "RW");
         srio_reg_block_map.add_reg(Port_9_Attributes_Capture_CSR, EXT3_BASE_ADDR+32'h00000288, "RW");
         srio_reg_block_map.add_reg(Port_10_Attributes_Capture_CSR, EXT3_BASE_ADDR+32'h000002C8, "RW");
         srio_reg_block_map.add_reg(Port_11_Attributes_Capture_CSR, EXT3_BASE_ADDR+32'h00000308, "RW");
         srio_reg_block_map.add_reg(Port_12_Attributes_Capture_CSR, EXT3_BASE_ADDR+32'h00000348, "RW");
         srio_reg_block_map.add_reg(Port_13_Attributes_Capture_CSR, EXT3_BASE_ADDR+32'h00000388, "RW");
         srio_reg_block_map.add_reg(Port_14_Attributes_Capture_CSR, EXT3_BASE_ADDR+32'h000003C8, "RW");
         srio_reg_block_map.add_reg(Port_15_Attributes_Capture_CSR, EXT3_BASE_ADDR+32'h00000408, "RW");
         srio_reg_block_map.add_reg(Port_0_Packet_Control_Symbol_Capture_0_CSR, EXT3_BASE_ADDR+32'h0000004C, "RW");
         srio_reg_block_map.add_reg(Port_1_Packet_Control_Symbol_Capture_0_CSR, EXT3_BASE_ADDR+32'h0000008C, "RW");
         srio_reg_block_map.add_reg(Port_2_Packet_Control_Symbol_Capture_0_CSR, EXT3_BASE_ADDR+32'h000000CC, "RW");
         srio_reg_block_map.add_reg(Port_3_Packet_Control_Symbol_Capture_0_CSR, EXT3_BASE_ADDR+32'h0000010C, "RW");
         srio_reg_block_map.add_reg(Port_4_Packet_Control_Symbol_Capture_0_CSR, EXT3_BASE_ADDR+32'h0000014C, "RW");
         srio_reg_block_map.add_reg(Port_5_Packet_Control_Symbol_Capture_0_CSR, EXT3_BASE_ADDR+32'h0000018C, "RW");
         srio_reg_block_map.add_reg(Port_6_Packet_Control_Symbol_Capture_0_CSR, EXT3_BASE_ADDR+32'h000001CC, "RW");
         srio_reg_block_map.add_reg(Port_7_Packet_Control_Symbol_Capture_0_CSR, EXT3_BASE_ADDR+32'h0000020C, "RW");
         srio_reg_block_map.add_reg(Port_8_Packet_Control_Symbol_Capture_0_CSR, EXT3_BASE_ADDR+32'h0000024C, "RW");
         srio_reg_block_map.add_reg(Port_9_Packet_Control_Symbol_Capture_0_CSR, EXT3_BASE_ADDR+32'h0000028C, "RW");
         srio_reg_block_map.add_reg(Port_10_Packet_Control_Symbol_Capture_0_CSR, EXT3_BASE_ADDR+32'h000002CC, "RW");
         srio_reg_block_map.add_reg(Port_11_Packet_Control_Symbol_Capture_0_CSR, EXT3_BASE_ADDR+32'h0000030C, "RW");
         srio_reg_block_map.add_reg(Port_12_Packet_Control_Symbol_Capture_0_CSR, EXT3_BASE_ADDR+32'h0000034C, "RW");
         srio_reg_block_map.add_reg(Port_13_Packet_Control_Symbol_Capture_0_CSR, EXT3_BASE_ADDR+32'h0000038C, "RW");
         srio_reg_block_map.add_reg(Port_14_Packet_Control_Symbol_Capture_0_CSR, EXT3_BASE_ADDR+32'h000003CC, "RW");
         srio_reg_block_map.add_reg(Port_15_Packet_Control_Symbol_Capture_0_CSR, EXT3_BASE_ADDR+32'h0000040C, "RW");
         srio_reg_block_map.add_reg(Port_0_Packet_Capture_1_CSR, EXT3_BASE_ADDR+32'h00000050, "RW");
         srio_reg_block_map.add_reg(Port_1_Packet_Capture_1_CSR, EXT3_BASE_ADDR+32'h00000090, "RW");
         srio_reg_block_map.add_reg(Port_2_Packet_Capture_1_CSR, EXT3_BASE_ADDR+32'h000000D0, "RW");
         srio_reg_block_map.add_reg(Port_3_Packet_Capture_1_CSR, EXT3_BASE_ADDR+32'h00000110, "RW");
         srio_reg_block_map.add_reg(Port_4_Packet_Capture_1_CSR, EXT3_BASE_ADDR+32'h00000150, "RW");
         srio_reg_block_map.add_reg(Port_5_Packet_Capture_1_CSR, EXT3_BASE_ADDR+32'h00000190, "RW");
         srio_reg_block_map.add_reg(Port_6_Packet_Capture_1_CSR, EXT3_BASE_ADDR+32'h000001D0, "RW");
         srio_reg_block_map.add_reg(Port_7_Packet_Capture_1_CSR, EXT3_BASE_ADDR+32'h00000210, "RW");
         srio_reg_block_map.add_reg(Port_8_Packet_Capture_1_CSR, EXT3_BASE_ADDR+32'h00000250, "RW");
         srio_reg_block_map.add_reg(Port_9_Packet_Capture_1_CSR, EXT3_BASE_ADDR+32'h00000290, "RW");
         srio_reg_block_map.add_reg(Port_10_Packet_Capture_1_CSR, EXT3_BASE_ADDR+32'h000002D0, "RW");
         srio_reg_block_map.add_reg(Port_11_Packet_Capture_1_CSR, EXT3_BASE_ADDR+32'h00000310, "RW");
         srio_reg_block_map.add_reg(Port_12_Packet_Capture_1_CSR, EXT3_BASE_ADDR+32'h00000350, "RW");
         srio_reg_block_map.add_reg(Port_13_Packet_Capture_1_CSR, EXT3_BASE_ADDR+32'h00000390, "RW");
         srio_reg_block_map.add_reg(Port_14_Packet_Capture_1_CSR, EXT3_BASE_ADDR+32'h000003D0, "RW");
         srio_reg_block_map.add_reg(Port_15_Packet_Capture_1_CSR, EXT3_BASE_ADDR+32'h00000410, "RW");
         srio_reg_block_map.add_reg(Port_0_Packet_Capture_2_CSR, EXT3_BASE_ADDR+32'h00000054, "RW");
         srio_reg_block_map.add_reg(Port_1_Packet_Capture_2_CSR, EXT3_BASE_ADDR+32'h00000094, "RW");
         srio_reg_block_map.add_reg(Port_2_Packet_Capture_2_CSR, EXT3_BASE_ADDR+32'h000000D4, "RW");
         srio_reg_block_map.add_reg(Port_3_Packet_Capture_2_CSR, EXT3_BASE_ADDR+32'h00000114, "RW");
         srio_reg_block_map.add_reg(Port_4_Packet_Capture_2_CSR, EXT3_BASE_ADDR+32'h00000154, "RW");
         srio_reg_block_map.add_reg(Port_5_Packet_Capture_2_CSR, EXT3_BASE_ADDR+32'h00000194, "RW");
         srio_reg_block_map.add_reg(Port_6_Packet_Capture_2_CSR, EXT3_BASE_ADDR+32'h000001D4, "RW");
         srio_reg_block_map.add_reg(Port_7_Packet_Capture_2_CSR, EXT3_BASE_ADDR+32'h00000214, "RW");
         srio_reg_block_map.add_reg(Port_8_Packet_Capture_2_CSR, EXT3_BASE_ADDR+32'h00000254, "RW");
         srio_reg_block_map.add_reg(Port_9_Packet_Capture_2_CSR, EXT3_BASE_ADDR+32'h00000294, "RW");
         srio_reg_block_map.add_reg(Port_10_Packet_Capture_2_CSR, EXT3_BASE_ADDR+32'h000002D4, "RW");
         srio_reg_block_map.add_reg(Port_11_Packet_Capture_2_CSR, EXT3_BASE_ADDR+32'h00000314, "RW");
         srio_reg_block_map.add_reg(Port_12_Packet_Capture_2_CSR, EXT3_BASE_ADDR+32'h00000354, "RW");
         srio_reg_block_map.add_reg(Port_13_Packet_Capture_2_CSR, EXT3_BASE_ADDR+32'h00000394, "RW");
         srio_reg_block_map.add_reg(Port_14_Packet_Capture_2_CSR, EXT3_BASE_ADDR+32'h000003D4, "RW");
         srio_reg_block_map.add_reg(Port_15_Packet_Capture_2_CSR, EXT3_BASE_ADDR+32'h00000414, "RW");
         srio_reg_block_map.add_reg(Port_0_Packet_Capture_3_CSR, EXT3_BASE_ADDR+32'h00000058, "RW");
         srio_reg_block_map.add_reg(Port_1_Packet_Capture_3_CSR, EXT3_BASE_ADDR+32'h00000098, "RW");
         srio_reg_block_map.add_reg(Port_2_Packet_Capture_3_CSR, EXT3_BASE_ADDR+32'h000000D8, "RW");
         srio_reg_block_map.add_reg(Port_3_Packet_Capture_3_CSR, EXT3_BASE_ADDR+32'h00000118, "RW");
         srio_reg_block_map.add_reg(Port_4_Packet_Capture_3_CSR, EXT3_BASE_ADDR+32'h00000158, "RW");
         srio_reg_block_map.add_reg(Port_5_Packet_Capture_3_CSR, EXT3_BASE_ADDR+32'h00000198, "RW");
         srio_reg_block_map.add_reg(Port_6_Packet_Capture_3_CSR, EXT3_BASE_ADDR+32'h000001D8, "RW");
         srio_reg_block_map.add_reg(Port_7_Packet_Capture_3_CSR, EXT3_BASE_ADDR+32'h00000218, "RW");
         srio_reg_block_map.add_reg(Port_8_Packet_Capture_3_CSR, EXT3_BASE_ADDR+32'h00000258, "RW");
         srio_reg_block_map.add_reg(Port_9_Packet_Capture_3_CSR, EXT3_BASE_ADDR+32'h00000298, "RW");
         srio_reg_block_map.add_reg(Port_10_Packet_Capture_3_CSR, EXT3_BASE_ADDR+32'h000002D8, "RW");
         srio_reg_block_map.add_reg(Port_11_Packet_Capture_3_CSR, EXT3_BASE_ADDR+32'h00000318, "RW");
         srio_reg_block_map.add_reg(Port_12_Packet_Capture_3_CSR, EXT3_BASE_ADDR+32'h00000358, "RW");
         srio_reg_block_map.add_reg(Port_13_Packet_Capture_3_CSR, EXT3_BASE_ADDR+32'h00000398, "RW");
         srio_reg_block_map.add_reg(Port_14_Packet_Capture_3_CSR, EXT3_BASE_ADDR+32'h000003D8, "RW");
         srio_reg_block_map.add_reg(Port_15_Packet_Capture_3_CSR, EXT3_BASE_ADDR+32'h00000418, "RW");
         srio_reg_block_map.add_reg(Port_0_Packet_Capture_4_CSR, EXT3_BASE_ADDR+32'h0000005C, "RW");
         srio_reg_block_map.add_reg(Port_1_Packet_Capture_4_CSR, EXT3_BASE_ADDR+32'h0000009C, "RW");
         srio_reg_block_map.add_reg(Port_2_Packet_Capture_4_CSR, EXT3_BASE_ADDR+32'h000000DC, "RW");
         srio_reg_block_map.add_reg(Port_3_Packet_Capture_4_CSR, EXT3_BASE_ADDR+32'h0000011C, "RW");
         srio_reg_block_map.add_reg(Port_4_Packet_Capture_4_CSR, EXT3_BASE_ADDR+32'h0000015C, "RW");
         srio_reg_block_map.add_reg(Port_5_Packet_Capture_4_CSR, EXT3_BASE_ADDR+32'h0000019C, "RW");
         srio_reg_block_map.add_reg(Port_6_Packet_Capture_4_CSR, EXT3_BASE_ADDR+32'h000001DC, "RW");
         srio_reg_block_map.add_reg(Port_7_Packet_Capture_4_CSR, EXT3_BASE_ADDR+32'h0000021C, "RW");
         srio_reg_block_map.add_reg(Port_8_Packet_Capture_4_CSR, EXT3_BASE_ADDR+32'h0000025C, "RW");
         srio_reg_block_map.add_reg(Port_9_Packet_Capture_4_CSR, EXT3_BASE_ADDR+32'h0000029C, "RW");
         srio_reg_block_map.add_reg(Port_10_Packet_Capture_4_CSR, EXT3_BASE_ADDR+32'h000002DC, "RW");
         srio_reg_block_map.add_reg(Port_11_Packet_Capture_4_CSR, EXT3_BASE_ADDR+32'h0000031C, "RW");
         srio_reg_block_map.add_reg(Port_12_Packet_Capture_4_CSR, EXT3_BASE_ADDR+32'h0000035C, "RW");
         srio_reg_block_map.add_reg(Port_13_Packet_Capture_4_CSR, EXT3_BASE_ADDR+32'h0000039C, "RW");
         srio_reg_block_map.add_reg(Port_14_Packet_Capture_4_CSR, EXT3_BASE_ADDR+32'h000003DC, "RW");
         srio_reg_block_map.add_reg(Port_15_Packet_Capture_4_CSR, EXT3_BASE_ADDR+32'h0000041C, "RW");
         srio_reg_block_map.add_reg(Port_0_Error_Rate_CSR, EXT3_BASE_ADDR+32'h00000068, "RW");
         srio_reg_block_map.add_reg(Port_1_Error_Rate_CSR, EXT3_BASE_ADDR+32'h000000A8, "RW");
         srio_reg_block_map.add_reg(Port_2_Error_Rate_CSR, EXT3_BASE_ADDR+32'h000000E8, "RW");
         srio_reg_block_map.add_reg(Port_3_Error_Rate_CSR, EXT3_BASE_ADDR+32'h00000128, "RW");
         srio_reg_block_map.add_reg(Port_4_Error_Rate_CSR, EXT3_BASE_ADDR+32'h00000168, "RW");
         srio_reg_block_map.add_reg(Port_5_Error_Rate_CSR, EXT3_BASE_ADDR+32'h000001A8, "RW");
         srio_reg_block_map.add_reg(Port_6_Error_Rate_CSR, EXT3_BASE_ADDR+32'h000001E8, "RW");
         srio_reg_block_map.add_reg(Port_7_Error_Rate_CSR, EXT3_BASE_ADDR+32'h00000228, "RW");
         srio_reg_block_map.add_reg(Port_8_Error_Rate_CSR, EXT3_BASE_ADDR+32'h00000268, "RW");
         srio_reg_block_map.add_reg(Port_9_Error_Rate_CSR, EXT3_BASE_ADDR+32'h000002A8, "RW");
         srio_reg_block_map.add_reg(Port_10_Error_Rate_CSR, EXT3_BASE_ADDR+32'h000002E8, "RW");
         srio_reg_block_map.add_reg(Port_11_Error_Rate_CSR, EXT3_BASE_ADDR+32'h00000328, "RW");
         srio_reg_block_map.add_reg(Port_12_Error_Rate_CSR, EXT3_BASE_ADDR+32'h00000368, "RW");
         srio_reg_block_map.add_reg(Port_13_Error_Rate_CSR, EXT3_BASE_ADDR+32'h000003A8, "RW");
         srio_reg_block_map.add_reg(Port_14_Error_Rate_CSR, EXT3_BASE_ADDR+32'h000003E8, "RW");
         srio_reg_block_map.add_reg(Port_15_Error_Rate_CSR, EXT3_BASE_ADDR+32'h00000428, "RW");
         srio_reg_block_map.add_reg(Port_0_Error_Rate_Threshold_CSR, EXT3_BASE_ADDR+32'h0000006C, "RW");
         srio_reg_block_map.add_reg(Port_1_Error_Rate_Threshold_CSR, EXT3_BASE_ADDR+32'h000000AC, "RW");
         srio_reg_block_map.add_reg(Port_2_Error_Rate_Threshold_CSR, EXT3_BASE_ADDR+32'h000000EC, "RW");
         srio_reg_block_map.add_reg(Port_3_Error_Rate_Threshold_CSR, EXT3_BASE_ADDR+32'h0000012C, "RW");
         srio_reg_block_map.add_reg(Port_4_Error_Rate_Threshold_CSR, EXT3_BASE_ADDR+32'h0000016C, "RW");
         srio_reg_block_map.add_reg(Port_5_Error_Rate_Threshold_CSR, EXT3_BASE_ADDR+32'h000001AC, "RW");
         srio_reg_block_map.add_reg(Port_6_Error_Rate_Threshold_CSR, EXT3_BASE_ADDR+32'h000001EC, "RW");
         srio_reg_block_map.add_reg(Port_7_Error_Rate_Threshold_CSR, EXT3_BASE_ADDR+32'h0000022C, "RW");
         srio_reg_block_map.add_reg(Port_8_Error_Rate_Threshold_CSR, EXT3_BASE_ADDR+32'h0000026C, "RW");
         srio_reg_block_map.add_reg(Port_9_Error_Rate_Threshold_CSR, EXT3_BASE_ADDR+32'h000002AC, "RW");
         srio_reg_block_map.add_reg(Port_10_Error_Rate_Threshold_CSR, EXT3_BASE_ADDR+32'h000002EC, "RW");
         srio_reg_block_map.add_reg(Port_11_Error_Rate_Threshold_CSR, EXT3_BASE_ADDR+32'h0000032C, "RW");
         srio_reg_block_map.add_reg(Port_12_Error_Rate_Threshold_CSR, EXT3_BASE_ADDR+32'h0000036C, "RW");
         srio_reg_block_map.add_reg(Port_13_Error_Rate_Threshold_CSR, EXT3_BASE_ADDR+32'h000003AC, "RW");
         srio_reg_block_map.add_reg(Port_14_Error_Rate_Threshold_CSR, EXT3_BASE_ADDR+32'h000003EC, "RW");
         srio_reg_block_map.add_reg(Port_15_Error_Rate_Threshold_CSR, EXT3_BASE_ADDR+32'h0000042C, "RW");
         srio_reg_block_map.add_reg(Port_0_Link_Uninit_Discard_Timer_CSR, EXT3_BASE_ADDR+32'h00000070, "RW");
         srio_reg_block_map.add_reg(Port_1_Link_Uninit_Discard_Timer_CSR, EXT3_BASE_ADDR+32'h000000B0, "RW");
         srio_reg_block_map.add_reg(Port_2_Link_Uninit_Discard_Timer_CSR, EXT3_BASE_ADDR+32'h000000F0, "RW");
         srio_reg_block_map.add_reg(Port_3_Link_Uninit_Discard_Timer_CSR, EXT3_BASE_ADDR+32'h00000130, "RW");
         srio_reg_block_map.add_reg(Port_4_Link_Uninit_Discard_Timer_CSR, EXT3_BASE_ADDR+32'h00000170, "RW");
         srio_reg_block_map.add_reg(Port_5_Link_Uninit_Discard_Timer_CSR, EXT3_BASE_ADDR+32'h000001B0, "RW");
         srio_reg_block_map.add_reg(Port_6_Link_Uninit_Discard_Timer_CSR, EXT3_BASE_ADDR+32'h000001F0, "RW");
         srio_reg_block_map.add_reg(Port_7_Link_Uninit_Discard_Timer_CSR, EXT3_BASE_ADDR+32'h00000230, "RW");
         srio_reg_block_map.add_reg(Port_8_Link_Uninit_Discard_Timer_CSR, EXT3_BASE_ADDR+32'h00000270, "RW");
         srio_reg_block_map.add_reg(Port_9_Link_Uninit_Discard_Timer_CSR, EXT3_BASE_ADDR+32'h000002B0, "RW");
         srio_reg_block_map.add_reg(Port_10_Link_Uninit_Discard_Timer_CSR, EXT3_BASE_ADDR+32'h000002F0, "RW");
         srio_reg_block_map.add_reg(Port_11_Link_Uninit_Discard_Timer_CSR, EXT3_BASE_ADDR+32'h00000330, "RW");
         srio_reg_block_map.add_reg(Port_12_Link_Uninit_Discard_Timer_CSR, EXT3_BASE_ADDR+32'h00000370, "RW");
         srio_reg_block_map.add_reg(Port_13_Link_Uninit_Discard_Timer_CSR, EXT3_BASE_ADDR+32'h000003B0, "RW");
         srio_reg_block_map.add_reg(Port_14_Link_Uninit_Discard_Timer_CSR, EXT3_BASE_ADDR+32'h000003F0, "RW");
         srio_reg_block_map.add_reg(Port_15_Link_Uninit_Discard_Timer_CSR, EXT3_BASE_ADDR+32'h00000430, "RW");
         srio_reg_block_map.add_reg(Timestamp_Generation_Extension_Block_Header, EXT5_BASE_ADDR+32'h00000000, "RO");
         srio_reg_block_map.add_reg(Timestamp_CAR, EXT5_BASE_ADDR+32'h00000004, "RO");
         srio_reg_block_map.add_reg(Timestamp_Generator_Status_CSR, EXT5_BASE_ADDR+32'h00000008, "RO");
         srio_reg_block_map.add_reg(Timestamp_Generator_MSW_CSR, EXT5_BASE_ADDR+32'h00000034, "RW");
         srio_reg_block_map.add_reg(Timestamp_Generator_LSW_CSR, EXT5_BASE_ADDR+32'h00000038, "RW");
         srio_reg_block_map.add_reg(Port_0_Timestamp_0_MSW_CSR, EXT5_BASE_ADDR+32'h00000044, "RO");
         srio_reg_block_map.add_reg(Port_1_Timestamp_0_MSW_CSR, EXT5_BASE_ADDR+32'h00000084, "RO");
         srio_reg_block_map.add_reg(Port_2_Timestamp_0_MSW_CSR, EXT5_BASE_ADDR+32'h000000C4, "RO");
         srio_reg_block_map.add_reg(Port_3_Timestamp_0_MSW_CSR, EXT5_BASE_ADDR+32'h00000104, "RO");
         srio_reg_block_map.add_reg(Port_4_Timestamp_0_MSW_CSR, EXT5_BASE_ADDR+32'h00000144, "RO");
         srio_reg_block_map.add_reg(Port_5_Timestamp_0_MSW_CSR, EXT5_BASE_ADDR+32'h00000184, "RO");
         srio_reg_block_map.add_reg(Port_6_Timestamp_0_MSW_CSR, EXT5_BASE_ADDR+32'h000001C4, "RO");
         srio_reg_block_map.add_reg(Port_7_Timestamp_0_MSW_CSR, EXT5_BASE_ADDR+32'h00000204, "RO");
         srio_reg_block_map.add_reg(Port_8_Timestamp_0_MSW_CSR, EXT5_BASE_ADDR+32'h00000244, "RO");
         srio_reg_block_map.add_reg(Port_9_Timestamp_0_MSW_CSR, EXT5_BASE_ADDR+32'h00000284, "RO");
         srio_reg_block_map.add_reg(Port_10_Timestamp_0_MSW_CSR, EXT5_BASE_ADDR+32'h000002C4, "RO");
         srio_reg_block_map.add_reg(Port_11_Timestamp_0_MSW_CSR, EXT5_BASE_ADDR+32'h00000304, "RO");
         srio_reg_block_map.add_reg(Port_12_Timestamp_0_MSW_CSR, EXT5_BASE_ADDR+32'h00000344, "RO");
         srio_reg_block_map.add_reg(Port_13_Timestamp_0_MSW_CSR, EXT5_BASE_ADDR+32'h00000384, "RO");
         srio_reg_block_map.add_reg(Port_14_Timestamp_0_MSW_CSR, EXT5_BASE_ADDR+32'h000003C4, "RO");
         srio_reg_block_map.add_reg(Port_15_Timestamp_0_MSW_CSR, EXT5_BASE_ADDR+32'h00000404, "RO");
         srio_reg_block_map.add_reg(Port_0_Timestamp_0_LSW_CSR, EXT5_BASE_ADDR+32'h00000048, "RO");
         srio_reg_block_map.add_reg(Port_1_Timestamp_0_LSW_CSR, EXT5_BASE_ADDR+32'h00000088, "RO");
         srio_reg_block_map.add_reg(Port_2_Timestamp_0_LSW_CSR, EXT5_BASE_ADDR+32'h000000C8, "RO");
         srio_reg_block_map.add_reg(Port_3_Timestamp_0_LSW_CSR, EXT5_BASE_ADDR+32'h00000108, "RO");
         srio_reg_block_map.add_reg(Port_4_Timestamp_0_LSW_CSR, EXT5_BASE_ADDR+32'h00000148, "RO");
         srio_reg_block_map.add_reg(Port_5_Timestamp_0_LSW_CSR, EXT5_BASE_ADDR+32'h00000188, "RO");
         srio_reg_block_map.add_reg(Port_6_Timestamp_0_LSW_CSR, EXT5_BASE_ADDR+32'h000001C8, "RO");
         srio_reg_block_map.add_reg(Port_7_Timestamp_0_LSW_CSR, EXT5_BASE_ADDR+32'h00000208, "RO");
         srio_reg_block_map.add_reg(Port_8_Timestamp_0_LSW_CSR, EXT5_BASE_ADDR+32'h00000248, "RO");
         srio_reg_block_map.add_reg(Port_9_Timestamp_0_LSW_CSR, EXT5_BASE_ADDR+32'h00000288, "RO");
         srio_reg_block_map.add_reg(Port_10_Timestamp_0_LSW_CSR, EXT5_BASE_ADDR+32'h000002C8, "RO");
         srio_reg_block_map.add_reg(Port_11_Timestamp_0_LSW_CSR, EXT5_BASE_ADDR+32'h00000308, "RO");
         srio_reg_block_map.add_reg(Port_12_Timestamp_0_LSW_CSR, EXT5_BASE_ADDR+32'h00000348, "RO");
         srio_reg_block_map.add_reg(Port_13_Timestamp_0_LSW_CSR, EXT5_BASE_ADDR+32'h00000388, "RO");
         srio_reg_block_map.add_reg(Port_14_Timestamp_0_LSW_CSR, EXT5_BASE_ADDR+32'h000003C8, "RO");
         srio_reg_block_map.add_reg(Port_15_Timestamp_0_LSW_CSR, EXT5_BASE_ADDR+32'h00000408, "RO");
         srio_reg_block_map.add_reg(Port_0_Timestamp_1_MSW_CSR, EXT5_BASE_ADDR+32'h00000054, "RO");
         srio_reg_block_map.add_reg(Port_1_Timestamp_1_MSW_CSR, EXT5_BASE_ADDR+32'h00000094, "RO");
         srio_reg_block_map.add_reg(Port_2_Timestamp_1_MSW_CSR, EXT5_BASE_ADDR+32'h000000D4, "RO");
         srio_reg_block_map.add_reg(Port_3_Timestamp_1_MSW_CSR, EXT5_BASE_ADDR+32'h00000114, "RO");
         srio_reg_block_map.add_reg(Port_4_Timestamp_1_MSW_CSR, EXT5_BASE_ADDR+32'h00000154, "RO");
         srio_reg_block_map.add_reg(Port_5_Timestamp_1_MSW_CSR, EXT5_BASE_ADDR+32'h00000194, "RO");
         srio_reg_block_map.add_reg(Port_6_Timestamp_1_MSW_CSR, EXT5_BASE_ADDR+32'h000001D4, "RO");
         srio_reg_block_map.add_reg(Port_7_Timestamp_1_MSW_CSR, EXT5_BASE_ADDR+32'h00000214, "RO");
         srio_reg_block_map.add_reg(Port_8_Timestamp_1_MSW_CSR, EXT5_BASE_ADDR+32'h00000254, "RO");
         srio_reg_block_map.add_reg(Port_9_Timestamp_1_MSW_CSR, EXT5_BASE_ADDR+32'h00000294, "RO");
         srio_reg_block_map.add_reg(Port_10_Timestamp_1_MSW_CSR, EXT5_BASE_ADDR+32'h000002D4, "RO");
         srio_reg_block_map.add_reg(Port_11_Timestamp_1_MSW_CSR, EXT5_BASE_ADDR+32'h00000314, "RO");
         srio_reg_block_map.add_reg(Port_12_Timestamp_1_MSW_CSR, EXT5_BASE_ADDR+32'h00000354, "RO");
         srio_reg_block_map.add_reg(Port_13_Timestamp_1_MSW_CSR, EXT5_BASE_ADDR+32'h00000394, "RO");
         srio_reg_block_map.add_reg(Port_14_Timestamp_1_MSW_CSR, EXT5_BASE_ADDR+32'h000003D4, "RO");
         srio_reg_block_map.add_reg(Port_15_Timestamp_1_MSW_CSR, EXT5_BASE_ADDR+32'h00000414, "RO");
         srio_reg_block_map.add_reg(Port_0_Timestamp_1_LSW_CSR, EXT5_BASE_ADDR+32'h00000058, "RO");
         srio_reg_block_map.add_reg(Port_1_Timestamp_1_LSW_CSR, EXT5_BASE_ADDR+32'h00000098, "RO");
         srio_reg_block_map.add_reg(Port_2_Timestamp_1_LSW_CSR, EXT5_BASE_ADDR+32'h000000D8, "RO");
         srio_reg_block_map.add_reg(Port_3_Timestamp_1_LSW_CSR, EXT5_BASE_ADDR+32'h00000118, "RO");
         srio_reg_block_map.add_reg(Port_4_Timestamp_1_LSW_CSR, EXT5_BASE_ADDR+32'h00000158, "RO");
         srio_reg_block_map.add_reg(Port_5_Timestamp_1_LSW_CSR, EXT5_BASE_ADDR+32'h00000198, "RO");
         srio_reg_block_map.add_reg(Port_6_Timestamp_1_LSW_CSR, EXT5_BASE_ADDR+32'h000001D8, "RO");
         srio_reg_block_map.add_reg(Port_7_Timestamp_1_LSW_CSR, EXT5_BASE_ADDR+32'h00000218, "RO");
         srio_reg_block_map.add_reg(Port_8_Timestamp_1_LSW_CSR, EXT5_BASE_ADDR+32'h00000258, "RO");
         srio_reg_block_map.add_reg(Port_9_Timestamp_1_LSW_CSR, EXT5_BASE_ADDR+32'h00000298, "RO");
         srio_reg_block_map.add_reg(Port_10_Timestamp_1_LSW_CSR, EXT5_BASE_ADDR+32'h000002D8, "RO");
         srio_reg_block_map.add_reg(Port_11_Timestamp_1_LSW_CSR, EXT5_BASE_ADDR+32'h00000318, "RO");
         srio_reg_block_map.add_reg(Port_12_Timestamp_1_LSW_CSR, EXT5_BASE_ADDR+32'h00000358, "RO");
         srio_reg_block_map.add_reg(Port_13_Timestamp_1_LSW_CSR, EXT5_BASE_ADDR+32'h00000398, "RO");
         srio_reg_block_map.add_reg(Port_14_Timestamp_1_LSW_CSR, EXT5_BASE_ADDR+32'h000003D8, "RO");
         srio_reg_block_map.add_reg(Port_15_Timestamp_1_LSW_CSR, EXT5_BASE_ADDR+32'h00000418, "RO");
         srio_reg_block_map.add_reg(Port_0_Timestamp_Generator_Synchronization_CSR, EXT5_BASE_ADDR+32'h00000060, "RW");
         srio_reg_block_map.add_reg(Port_1_Timestamp_Generator_Synchronization_CSR, EXT5_BASE_ADDR+32'h000000A0, "RW");
         srio_reg_block_map.add_reg(Port_2_Timestamp_Generator_Synchronization_CSR, EXT5_BASE_ADDR+32'h000000E0, "RW");
         srio_reg_block_map.add_reg(Port_3_Timestamp_Generator_Synchronization_CSR, EXT5_BASE_ADDR+32'h00000120, "RW");
         srio_reg_block_map.add_reg(Port_4_Timestamp_Generator_Synchronization_CSR, EXT5_BASE_ADDR+32'h00000160, "RW");
         srio_reg_block_map.add_reg(Port_5_Timestamp_Generator_Synchronization_CSR, EXT5_BASE_ADDR+32'h000001A0, "RW");
         srio_reg_block_map.add_reg(Port_6_Timestamp_Generator_Synchronization_CSR, EXT5_BASE_ADDR+32'h000001E0, "RW");
         srio_reg_block_map.add_reg(Port_7_Timestamp_Generator_Synchronization_CSR, EXT5_BASE_ADDR+32'h00000220, "RW");
         srio_reg_block_map.add_reg(Port_8_Timestamp_Generator_Synchronization_CSR, EXT5_BASE_ADDR+32'h00000260, "RW");
         srio_reg_block_map.add_reg(Port_9_Timestamp_Generator_Synchronization_CSR, EXT5_BASE_ADDR+32'h000002A0, "RW");
         srio_reg_block_map.add_reg(Port_10_Timestamp_Generator_Synchronization_CSR, EXT5_BASE_ADDR+32'h000002E0, "RW");
         srio_reg_block_map.add_reg(Port_11_Timestamp_Generator_Synchronization_CSR, EXT5_BASE_ADDR+32'h00000320, "RW");
         srio_reg_block_map.add_reg(Port_12_Timestamp_Generator_Synchronization_CSR, EXT5_BASE_ADDR+32'h00000360, "RW");
         srio_reg_block_map.add_reg(Port_13_Timestamp_Generator_Synchronization_CSR, EXT5_BASE_ADDR+32'h000003A0, "RW");
         srio_reg_block_map.add_reg(Port_14_Timestamp_Generator_Synchronization_CSR, EXT5_BASE_ADDR+32'h000003E0, "RW");
         srio_reg_block_map.add_reg(Port_15_Timestamp_Generator_Synchronization_CSR, EXT5_BASE_ADDR+32'h00000420, "RW");
         srio_reg_block_map.add_reg(Port_0_Auto_Update_Counter_CSR, EXT5_BASE_ADDR+32'h00000064, "RW");
         srio_reg_block_map.add_reg(Port_1_Auto_Update_Counter_CSR, EXT5_BASE_ADDR+32'h000000A4, "RW");
         srio_reg_block_map.add_reg(Port_2_Auto_Update_Counter_CSR, EXT5_BASE_ADDR+32'h000000E4, "RW");
         srio_reg_block_map.add_reg(Port_3_Auto_Update_Counter_CSR, EXT5_BASE_ADDR+32'h00000124, "RW");
         srio_reg_block_map.add_reg(Port_4_Auto_Update_Counter_CSR, EXT5_BASE_ADDR+32'h00000164, "RW");
         srio_reg_block_map.add_reg(Port_5_Auto_Update_Counter_CSR, EXT5_BASE_ADDR+32'h000001A4, "RW");
         srio_reg_block_map.add_reg(Port_6_Auto_Update_Counter_CSR, EXT5_BASE_ADDR+32'h000001E4, "RW");
         srio_reg_block_map.add_reg(Port_7_Auto_Update_Counter_CSR, EXT5_BASE_ADDR+32'h00000224, "RW");
         srio_reg_block_map.add_reg(Port_8_Auto_Update_Counter_CSR, EXT5_BASE_ADDR+32'h00000264, "RW");
         srio_reg_block_map.add_reg(Port_9_Auto_Update_Counter_CSR, EXT5_BASE_ADDR+32'h000002A4, "RW");
         srio_reg_block_map.add_reg(Port_10_Auto_Update_Counter_CSR, EXT5_BASE_ADDR+32'h000002E4, "RW");
         srio_reg_block_map.add_reg(Port_11_Auto_Update_Counter_CSR, EXT5_BASE_ADDR+32'h00000324, "RW");
         srio_reg_block_map.add_reg(Port_12_Auto_Update_Counter_CSR, EXT5_BASE_ADDR+32'h00000364, "RW");
         srio_reg_block_map.add_reg(Port_13_Auto_Update_Counter_CSR, EXT5_BASE_ADDR+32'h000003A4, "RW");
         srio_reg_block_map.add_reg(Port_14_Auto_Update_Counter_CSR, EXT5_BASE_ADDR+32'h000003E4, "RW");
         srio_reg_block_map.add_reg(Port_15_Auto_Update_Counter_CSR, EXT5_BASE_ADDR+32'h00000424, "RW");
         srio_reg_block_map.add_reg(Port_0_Timestamp_Synchronization_Command_CSR, EXT5_BASE_ADDR+32'h00000068, "RW");
         srio_reg_block_map.add_reg(Port_1_Timestamp_Synchronization_Command_CSR, EXT5_BASE_ADDR+32'h000000A8, "RW");
         srio_reg_block_map.add_reg(Port_2_Timestamp_Synchronization_Command_CSR, EXT5_BASE_ADDR+32'h000000E8, "RW");
         srio_reg_block_map.add_reg(Port_3_Timestamp_Synchronization_Command_CSR, EXT5_BASE_ADDR+32'h00000128, "RW");
         srio_reg_block_map.add_reg(Port_4_Timestamp_Synchronization_Command_CSR, EXT5_BASE_ADDR+32'h00000168, "RW");
         srio_reg_block_map.add_reg(Port_5_Timestamp_Synchronization_Command_CSR, EXT5_BASE_ADDR+32'h000001A8, "RW");
         srio_reg_block_map.add_reg(Port_6_Timestamp_Synchronization_Command_CSR, EXT5_BASE_ADDR+32'h000001E8, "RW");
         srio_reg_block_map.add_reg(Port_7_Timestamp_Synchronization_Command_CSR, EXT5_BASE_ADDR+32'h00000228, "RW");
         srio_reg_block_map.add_reg(Port_8_Timestamp_Synchronization_Command_CSR, EXT5_BASE_ADDR+32'h00000268, "RW");
         srio_reg_block_map.add_reg(Port_9_Timestamp_Synchronization_Command_CSR, EXT5_BASE_ADDR+32'h000002A8, "RW");
         srio_reg_block_map.add_reg(Port_10_Timestamp_Synchronization_Command_CSR, EXT5_BASE_ADDR+32'h000002E8, "RW");
         srio_reg_block_map.add_reg(Port_11_Timestamp_Synchronization_Command_CSR, EXT5_BASE_ADDR+32'h00000328, "RW");
         srio_reg_block_map.add_reg(Port_12_Timestamp_Synchronization_Command_CSR, EXT5_BASE_ADDR+32'h00000368, "RW");
         srio_reg_block_map.add_reg(Port_13_Timestamp_Synchronization_Command_CSR, EXT5_BASE_ADDR+32'h000003A8, "RW");
         srio_reg_block_map.add_reg(Port_14_Timestamp_Synchronization_Command_CSR, EXT5_BASE_ADDR+32'h000003E8, "RW");
         srio_reg_block_map.add_reg(Port_15_Timestamp_Synchronization_Command_CSR, EXT5_BASE_ADDR+32'h00000428, "RW");
         srio_reg_block_map.add_reg(Port_0_Timestamp_Synchronization_Status_CSR, EXT5_BASE_ADDR+32'h0000006C, "RO");
         srio_reg_block_map.add_reg(Port_1_Timestamp_Synchronization_Status_CSR, EXT5_BASE_ADDR+32'h000000AC, "RO");
         srio_reg_block_map.add_reg(Port_2_Timestamp_Synchronization_Status_CSR, EXT5_BASE_ADDR+32'h000000EC, "RO");
         srio_reg_block_map.add_reg(Port_3_Timestamp_Synchronization_Status_CSR, EXT5_BASE_ADDR+32'h0000012C, "RO");
         srio_reg_block_map.add_reg(Port_4_Timestamp_Synchronization_Status_CSR, EXT5_BASE_ADDR+32'h0000016C, "RO");
         srio_reg_block_map.add_reg(Port_5_Timestamp_Synchronization_Status_CSR, EXT5_BASE_ADDR+32'h000001AC, "RO");
         srio_reg_block_map.add_reg(Port_6_Timestamp_Synchronization_Status_CSR, EXT5_BASE_ADDR+32'h000001EC, "RO");
         srio_reg_block_map.add_reg(Port_7_Timestamp_Synchronization_Status_CSR, EXT5_BASE_ADDR+32'h0000022C, "RO");
         srio_reg_block_map.add_reg(Port_8_Timestamp_Synchronization_Status_CSR, EXT5_BASE_ADDR+32'h0000026C, "RO");
         srio_reg_block_map.add_reg(Port_9_Timestamp_Synchronization_Status_CSR, EXT5_BASE_ADDR+32'h000002AC, "RO");
         srio_reg_block_map.add_reg(Port_10_Timestamp_Synchronization_Status_CSR, EXT5_BASE_ADDR+32'h000002EC, "RO");
         srio_reg_block_map.add_reg(Port_11_Timestamp_Synchronization_Status_CSR, EXT5_BASE_ADDR+32'h0000032C, "RO");
         srio_reg_block_map.add_reg(Port_12_Timestamp_Synchronization_Status_CSR, EXT5_BASE_ADDR+32'h0000036C, "RO");
         srio_reg_block_map.add_reg(Port_13_Timestamp_Synchronization_Status_CSR, EXT5_BASE_ADDR+32'h000003AC, "RO");
         srio_reg_block_map.add_reg(Port_14_Timestamp_Synchronization_Status_CSR, EXT5_BASE_ADDR+32'h000003EC, "RO");
         srio_reg_block_map.add_reg(Port_15_Timestamp_Synchronization_Status_CSR, EXT5_BASE_ADDR+32'h0000042C, "RO");
         srio_reg_block_map.add_reg(Port_0_Timestamp_Offset_CSR, EXT5_BASE_ADDR+32'h00000070, "RW");
         srio_reg_block_map.add_reg(Port_1_Timestamp_Offset_CSR, EXT5_BASE_ADDR+32'h000000B0, "RW");
         srio_reg_block_map.add_reg(Port_2_Timestamp_Offset_CSR, EXT5_BASE_ADDR+32'h000000F0, "RW");
         srio_reg_block_map.add_reg(Port_3_Timestamp_Offset_CSR, EXT5_BASE_ADDR+32'h00000130, "RW");
         srio_reg_block_map.add_reg(Port_4_Timestamp_Offset_CSR, EXT5_BASE_ADDR+32'h00000170, "RW");
         srio_reg_block_map.add_reg(Port_5_Timestamp_Offset_CSR, EXT5_BASE_ADDR+32'h000001B0, "RW");
         srio_reg_block_map.add_reg(Port_6_Timestamp_Offset_CSR, EXT5_BASE_ADDR+32'h000001F0, "RW");
         srio_reg_block_map.add_reg(Port_7_Timestamp_Offset_CSR, EXT5_BASE_ADDR+32'h00000230, "RW");
         srio_reg_block_map.add_reg(Port_8_Timestamp_Offset_CSR, EXT5_BASE_ADDR+32'h00000270, "RW");
         srio_reg_block_map.add_reg(Port_9_Timestamp_Offset_CSR, EXT5_BASE_ADDR+32'h000002B0, "RW");
         srio_reg_block_map.add_reg(Port_10_Timestamp_Offset_CSR, EXT5_BASE_ADDR+32'h000002F0, "RW");
         srio_reg_block_map.add_reg(Port_11_Timestamp_Offset_CSR, EXT5_BASE_ADDR+32'h00000330, "RW");
         srio_reg_block_map.add_reg(Port_12_Timestamp_Offset_CSR, EXT5_BASE_ADDR+32'h00000370, "RW");
         srio_reg_block_map.add_reg(Port_13_Timestamp_Offset_CSR, EXT5_BASE_ADDR+32'h000003B0, "RW");
         srio_reg_block_map.add_reg(Port_14_Timestamp_Offset_CSR, EXT5_BASE_ADDR+32'h000003F0, "RW");
         srio_reg_block_map.add_reg(Port_15_Timestamp_Offset_CSR, EXT5_BASE_ADDR+32'h00000430, "RW");
         srio_reg_block_map.add_reg(LP_Serial_VC_Register_Block_Header, EXT6_BASE_ADDR+32'h00000000, "RO");
         srio_reg_block_map.add_reg(Port_0_VoQ_Control_Status_Register, EXT6_BASE_ADDR+32'h00000020, "RW");
         srio_reg_block_map.add_reg(Port_1_VoQ_Control_Status_Register, EXT6_BASE_ADDR+32'h00000024, "RW");
         srio_reg_block_map.add_reg(Port_2_VoQ_Control_Status_Register, EXT6_BASE_ADDR+32'h00000028, "RW");
         srio_reg_block_map.add_reg(Port_3_VoQ_Control_Status_Register, EXT6_BASE_ADDR+32'h0000002C, "RW");
         srio_reg_block_map.add_reg(Port_4_VoQ_Control_Status_Register, EXT6_BASE_ADDR+32'h00000030, "RW");
         srio_reg_block_map.add_reg(Port_5_VoQ_Control_Status_Register, EXT6_BASE_ADDR+32'h00000034, "RW");
         srio_reg_block_map.add_reg(Port_6_VoQ_Control_Status_Register, EXT6_BASE_ADDR+32'h00000038, "RW");
         srio_reg_block_map.add_reg(Port_7_VoQ_Control_Status_Register, EXT6_BASE_ADDR+32'h0000003C, "RW");
         srio_reg_block_map.add_reg(Port_8_VoQ_Control_Status_Register, EXT6_BASE_ADDR+32'h00000040, "RW");
         srio_reg_block_map.add_reg(Port_9_VoQ_Control_Status_Register, EXT6_BASE_ADDR+32'h00000044, "RW");
         srio_reg_block_map.add_reg(Port_10_VoQ_Control_Status_Register, EXT6_BASE_ADDR+32'h00000048, "RW");
         srio_reg_block_map.add_reg(Port_11_VoQ_Control_Status_Register, EXT6_BASE_ADDR+32'h0000004C, "RW");
         srio_reg_block_map.add_reg(Port_12_VoQ_Control_Status_Register, EXT6_BASE_ADDR+32'h00000050, "RW");
         srio_reg_block_map.add_reg(Port_13_VoQ_Control_Status_Register, EXT6_BASE_ADDR+32'h00000054, "RW");
         srio_reg_block_map.add_reg(Port_14_VoQ_Control_Status_Register, EXT6_BASE_ADDR+32'h00000058, "RW");
         srio_reg_block_map.add_reg(Port_15_VoQ_Control_Status_Register, EXT6_BASE_ADDR+32'h0000005C, "RW");

         void'(LP_Serial_Register_Block_Header.EF_PTR.set(EXT1_BASE_ADDR));
         void'(LP_Serial_Register_Block_Header.EF_PTR.predict(EXT1_BASE_ADDR));
         void'(LP_Serial_Lane_Register_Block_Header.EF_PTR.set(EXT2_BASE_ADDR));
         void'(LP_Serial_Lane_Register_Block_Header.EF_PTR.predict(EXT2_BASE_ADDR));
         void'(Error_Management_Extensions_Block_Header.EF_PTR.set(EXT3_BASE_ADDR));
         void'(Error_Management_Extensions_Block_Header.EF_PTR.predict(EXT3_BASE_ADDR));
         void'(VC_Register_Block_Header.EF_PTR.set(EXT4_BASE_ADDR));
         void'(VC_Register_Block_Header.EF_PTR.predict(EXT4_BASE_ADDR));
         void'(Timestamp_Generation_Extension_Block_Header.EF_PTR.set(EXT5_BASE_ADDR));
         void'(Timestamp_Generation_Extension_Block_Header.EF_PTR.predict(EXT5_BASE_ADDR));
         void'(Timestamp_Generation_Extension_Block_Header.EF_PTR.set(EXT6_BASE_ADDR));
         void'(Timestamp_Generation_Extension_Block_Header.EF_PTR.predict(EXT6_BASE_ADDR));
 
         uvm_reg::include_coverage("*", UVM_CVR_ADDR_MAP);

         srio_reg_block_map.reset("HARD");
         lock_model();

         lock_model();
      endfunction
   endclass


//endpackage
